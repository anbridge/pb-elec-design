
ble_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b008  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b74  0800b148  0800b148  0000c148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ecbc  0800ecbc  0000fcbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ecc4  0800ecc4  0000fcc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ecc8  0800ecc8  0000fcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000008  0800eccc  00010008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000a0  0800ed64  000100a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000d8  0800ed99  000100d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  200000ec  0800edaa  000100ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  0800edaa  000107a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00011000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00011000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800edaa  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002a644  00000000  00000000  00010a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e1c  00000000  00000000  0003b0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002420  00000000  00000000  00040ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001b85  00000000  00000000  00043318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026571  00000000  00000000  00044e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00027ff1  00000000  00000000  0006b40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d1141  00000000  00000000  000933ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00164540  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000099c0  00000000  00000000  00164584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000083  00000000  00000000  0016df44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000ec 	.word	0x200000ec
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b130 	.word	0x0800b130

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f0 	.word	0x200000f0
 800017c:	0800b130 	.word	0x0800b130

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_uldivmod>:
 8000a68:	b953      	cbnz	r3, 8000a80 <__aeabi_uldivmod+0x18>
 8000a6a:	b94a      	cbnz	r2, 8000a80 <__aeabi_uldivmod+0x18>
 8000a6c:	2900      	cmp	r1, #0
 8000a6e:	bf08      	it	eq
 8000a70:	2800      	cmpeq	r0, #0
 8000a72:	bf1c      	itt	ne
 8000a74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a7c:	f000 b96a 	b.w	8000d54 <__aeabi_idiv0>
 8000a80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a88:	f000 f806 	bl	8000a98 <__udivmoddi4>
 8000a8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a94:	b004      	add	sp, #16
 8000a96:	4770      	bx	lr

08000a98 <__udivmoddi4>:
 8000a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a9c:	9d08      	ldr	r5, [sp, #32]
 8000a9e:	460c      	mov	r4, r1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d14e      	bne.n	8000b42 <__udivmoddi4+0xaa>
 8000aa4:	4694      	mov	ip, r2
 8000aa6:	458c      	cmp	ip, r1
 8000aa8:	4686      	mov	lr, r0
 8000aaa:	fab2 f282 	clz	r2, r2
 8000aae:	d962      	bls.n	8000b76 <__udivmoddi4+0xde>
 8000ab0:	b14a      	cbz	r2, 8000ac6 <__udivmoddi4+0x2e>
 8000ab2:	f1c2 0320 	rsb	r3, r2, #32
 8000ab6:	4091      	lsls	r1, r2
 8000ab8:	fa20 f303 	lsr.w	r3, r0, r3
 8000abc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac0:	4319      	orrs	r1, r3
 8000ac2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ac6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aca:	fa1f f68c 	uxth.w	r6, ip
 8000ace:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ad6:	fb07 1114 	mls	r1, r7, r4, r1
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb04 f106 	mul.w	r1, r4, r6
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d90a      	bls.n	8000afc <__udivmoddi4+0x64>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000aee:	f080 8112 	bcs.w	8000d16 <__udivmoddi4+0x27e>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 810f 	bls.w	8000d16 <__udivmoddi4+0x27e>
 8000af8:	3c02      	subs	r4, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	1a59      	subs	r1, r3, r1
 8000afe:	fa1f f38e 	uxth.w	r3, lr
 8000b02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b06:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb00 f606 	mul.w	r6, r0, r6
 8000b12:	429e      	cmp	r6, r3
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x94>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b1e:	f080 80fc 	bcs.w	8000d1a <__udivmoddi4+0x282>
 8000b22:	429e      	cmp	r6, r3
 8000b24:	f240 80f9 	bls.w	8000d1a <__udivmoddi4+0x282>
 8000b28:	4463      	add	r3, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa6>
 8000b36:	40d3      	lsrs	r3, r2
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xba>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb4>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa6>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x150>
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xcc>
 8000b5e:	4290      	cmp	r0, r2
 8000b60:	f0c0 80f0 	bcc.w	8000d44 <__udivmoddi4+0x2ac>
 8000b64:	1a86      	subs	r6, r0, r2
 8000b66:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	2d00      	cmp	r5, #0
 8000b6e:	d0e6      	beq.n	8000b3e <__udivmoddi4+0xa6>
 8000b70:	e9c5 6300 	strd	r6, r3, [r5]
 8000b74:	e7e3      	b.n	8000b3e <__udivmoddi4+0xa6>
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x204>
 8000b7c:	eba1 040c 	sub.w	r4, r1, ip
 8000b80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b84:	fa1f f78c 	uxth.w	r7, ip
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b92:	fb08 4416 	mls	r4, r8, r6, r4
 8000b96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9a:	fb07 f006 	mul.w	r0, r7, r6
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d908      	bls.n	8000bb4 <__udivmoddi4+0x11c>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000baa:	d202      	bcs.n	8000bb2 <__udivmoddi4+0x11a>
 8000bac:	4298      	cmp	r0, r3
 8000bae:	f200 80cd 	bhi.w	8000d4c <__udivmoddi4+0x2b4>
 8000bb2:	4626      	mov	r6, r4
 8000bb4:	1a1c      	subs	r4, r3, r0
 8000bb6:	fa1f f38e 	uxth.w	r3, lr
 8000bba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb00 f707 	mul.w	r7, r0, r7
 8000bca:	429f      	cmp	r7, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x148>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x146>
 8000bd8:	429f      	cmp	r7, r3
 8000bda:	f200 80b0 	bhi.w	8000d3e <__udivmoddi4+0x2a6>
 8000bde:	4620      	mov	r0, r4
 8000be0:	1bdb      	subs	r3, r3, r7
 8000be2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x9c>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bf8:	fa04 f301 	lsl.w	r3, r4, r1
 8000bfc:	ea43 030c 	orr.w	r3, r3, ip
 8000c00:	40f4      	lsrs	r4, r6
 8000c02:	fa00 f801 	lsl.w	r8, r0, r1
 8000c06:	0c38      	lsrs	r0, r7, #16
 8000c08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000c10:	fa1f fc87 	uxth.w	ip, r7
 8000c14:	fb00 441e 	mls	r4, r0, lr, r4
 8000c18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000c20:	45a1      	cmp	r9, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x1a6>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c2e:	f080 8084 	bcs.w	8000d3a <__udivmoddi4+0x2a2>
 8000c32:	45a1      	cmp	r9, r4
 8000c34:	f240 8081 	bls.w	8000d3a <__udivmoddi4+0x2a2>
 8000c38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3c:	443c      	add	r4, r7
 8000c3e:	eba4 0409 	sub.w	r4, r4, r9
 8000c42:	fa1f f983 	uxth.w	r9, r3
 8000c46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d907      	bls.n	8000c6a <__udivmoddi4+0x1d2>
 8000c5a:	193c      	adds	r4, r7, r4
 8000c5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c60:	d267      	bcs.n	8000d32 <__udivmoddi4+0x29a>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d965      	bls.n	8000d32 <__udivmoddi4+0x29a>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000c72:	eba4 040c 	sub.w	r4, r4, ip
 8000c76:	429c      	cmp	r4, r3
 8000c78:	46ce      	mov	lr, r9
 8000c7a:	469c      	mov	ip, r3
 8000c7c:	d351      	bcc.n	8000d22 <__udivmoddi4+0x28a>
 8000c7e:	d04e      	beq.n	8000d1e <__udivmoddi4+0x286>
 8000c80:	b155      	cbz	r5, 8000c98 <__udivmoddi4+0x200>
 8000c82:	ebb8 030e 	subs.w	r3, r8, lr
 8000c86:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	40cb      	lsrs	r3, r1
 8000c90:	431e      	orrs	r6, r3
 8000c92:	40cc      	lsrs	r4, r1
 8000c94:	e9c5 6400 	strd	r6, r4, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e750      	b.n	8000b3e <__udivmoddi4+0xa6>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa24 f303 	lsr.w	r3, r4, r3
 8000cac:	4094      	lsls	r4, r2
 8000cae:	430c      	orrs	r4, r1
 8000cb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb8:	fa1f f78c 	uxth.w	r7, ip
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb00 f107 	mul.w	r1, r0, r7
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x24c>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cda:	d22c      	bcs.n	8000d36 <__udivmoddi4+0x29e>
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	d92a      	bls.n	8000d36 <__udivmoddi4+0x29e>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1a5b      	subs	r3, r3, r1
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cec:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf4:	fb01 f307 	mul.w	r3, r1, r7
 8000cf8:	42a3      	cmp	r3, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x276>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d04:	d213      	bcs.n	8000d2e <__udivmoddi4+0x296>
 8000d06:	42a3      	cmp	r3, r4
 8000d08:	d911      	bls.n	8000d2e <__udivmoddi4+0x296>
 8000d0a:	3902      	subs	r1, #2
 8000d0c:	4464      	add	r4, ip
 8000d0e:	1ae4      	subs	r4, r4, r3
 8000d10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d14:	e739      	b.n	8000b8a <__udivmoddi4+0xf2>
 8000d16:	4604      	mov	r4, r0
 8000d18:	e6f0      	b.n	8000afc <__udivmoddi4+0x64>
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e706      	b.n	8000b2c <__udivmoddi4+0x94>
 8000d1e:	45c8      	cmp	r8, r9
 8000d20:	d2ae      	bcs.n	8000c80 <__udivmoddi4+0x1e8>
 8000d22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2a:	3801      	subs	r0, #1
 8000d2c:	e7a8      	b.n	8000c80 <__udivmoddi4+0x1e8>
 8000d2e:	4631      	mov	r1, r6
 8000d30:	e7ed      	b.n	8000d0e <__udivmoddi4+0x276>
 8000d32:	4603      	mov	r3, r0
 8000d34:	e799      	b.n	8000c6a <__udivmoddi4+0x1d2>
 8000d36:	4630      	mov	r0, r6
 8000d38:	e7d4      	b.n	8000ce4 <__udivmoddi4+0x24c>
 8000d3a:	46d6      	mov	lr, sl
 8000d3c:	e77f      	b.n	8000c3e <__udivmoddi4+0x1a6>
 8000d3e:	4463      	add	r3, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e74d      	b.n	8000be0 <__udivmoddi4+0x148>
 8000d44:	4606      	mov	r6, r0
 8000d46:	4623      	mov	r3, r4
 8000d48:	4608      	mov	r0, r1
 8000d4a:	e70f      	b.n	8000b6c <__udivmoddi4+0xd4>
 8000d4c:	3e02      	subs	r6, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	e730      	b.n	8000bb4 <__udivmoddi4+0x11c>
 8000d52:	bf00      	nop

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <icm20948_set_user_bank>:

I2C_HandleTypeDef i2c_bus;

// select user bank 
void icm20948_set_user_bank(uint8_t bank)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af04      	add	r7, sp, #16
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
    bank = (bank << 4) & 0x30; // bits 1:0 of bank -> 5:4 of icm bank select register
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, REG_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &bank, 1, 1000);
 8000d70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	2301      	movs	r3, #1
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	227f      	movs	r2, #127	@ 0x7f
 8000d82:	21d0      	movs	r1, #208	@ 0xd0
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <icm20948_set_user_bank+0x3c>)
 8000d86:	f004 fba9 	bl	80054dc <HAL_I2C_Mem_Write>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000108 	.word	0x20000108

08000d98 <sensor_type_2_android_sensor>:
    {
        1, 0};


int8_t sensor_type_2_android_sensor(enum inv_icm20948_sensor sensor)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  switch (sensor)
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b13      	cmp	r3, #19
 8000da6:	d853      	bhi.n	8000e50 <sensor_type_2_android_sensor+0xb8>
 8000da8:	a201      	add	r2, pc, #4	@ (adr r2, 8000db0 <sensor_type_2_android_sensor+0x18>)
 8000daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dae:	bf00      	nop
 8000db0:	08000e01 	.word	0x08000e01
 8000db4:	08000e05 	.word	0x08000e05
 8000db8:	08000e09 	.word	0x08000e09
 8000dbc:	08000e0d 	.word	0x08000e0d
 8000dc0:	08000e11 	.word	0x08000e11
 8000dc4:	08000e15 	.word	0x08000e15
 8000dc8:	08000e19 	.word	0x08000e19
 8000dcc:	08000e1d 	.word	0x08000e1d
 8000dd0:	08000e21 	.word	0x08000e21
 8000dd4:	08000e25 	.word	0x08000e25
 8000dd8:	08000e29 	.word	0x08000e29
 8000ddc:	08000e2d 	.word	0x08000e2d
 8000de0:	08000e31 	.word	0x08000e31
 8000de4:	08000e35 	.word	0x08000e35
 8000de8:	08000e39 	.word	0x08000e39
 8000dec:	08000e3d 	.word	0x08000e3d
 8000df0:	08000e41 	.word	0x08000e41
 8000df4:	08000e45 	.word	0x08000e45
 8000df8:	08000e49 	.word	0x08000e49
 8000dfc:	08000e4d 	.word	0x08000e4d
  {
  case INV_ICM20948_SENSOR_ACCELEROMETER:
    return ANDROID_SENSOR_ACCELEROMETER; // 1
 8000e00:	2301      	movs	r3, #1
 8000e02:	e026      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GYROSCOPE:
    return ANDROID_SENSOR_GYROSCOPE; // 4
 8000e04:	2304      	movs	r3, #4
 8000e06:	e024      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_RAW_ACCELEROMETER:
    return ANDROID_SENSOR_RAW_ACCELEROMETER; // 42
 8000e08:	232a      	movs	r3, #42	@ 0x2a
 8000e0a:	e022      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_RAW_GYROSCOPE:
    return ANDROID_SENSOR_RAW_GYROSCOPE; // 43
 8000e0c:	232b      	movs	r3, #43	@ 0x2b
 8000e0e:	e020      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED:
    return ANDROID_SENSOR_MAGNETIC_FIELD_UNCALIBRATED; // 14
 8000e10:	230e      	movs	r3, #14
 8000e12:	e01e      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED:
    return ANDROID_SENSOR_GYROSCOPE_UNCALIBRATED; // 16
 8000e14:	2310      	movs	r3, #16
 8000e16:	e01c      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_ACTIVITY_CLASSIFICATON:
    return ANDROID_SENSOR_ACTIVITY_CLASSIFICATON; // 47
 8000e18:	232f      	movs	r3, #47	@ 0x2f
 8000e1a:	e01a      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_STEP_DETECTOR:
    return ANDROID_SENSOR_STEP_DETECTOR; // 18
 8000e1c:	2312      	movs	r3, #18
 8000e1e:	e018      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_STEP_COUNTER:
    return ANDROID_SENSOR_STEP_COUNTER; // 19
 8000e20:	2313      	movs	r3, #19
 8000e22:	e016      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GAME_ROTATION_VECTOR:
    return ANDROID_SENSOR_GAME_ROTATION_VECTOR; // 15
 8000e24:	230f      	movs	r3, #15
 8000e26:	e014      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_ROTATION_VECTOR:
    return ANDROID_SENSOR_ROTATION_VECTOR; // 11
 8000e28:	230b      	movs	r3, #11
 8000e2a:	e012      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GEOMAGNETIC_ROTATION_VECTOR:
    return ANDROID_SENSOR_GEOMAGNETIC_ROTATION_VECTOR; // 20
 8000e2c:	2314      	movs	r3, #20
 8000e2e:	e010      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD:
    return ANDROID_SENSOR_GEOMAGNETIC_FIELD; // 2
 8000e30:	2302      	movs	r3, #2
 8000e32:	e00e      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_WAKEUP_SIGNIFICANT_MOTION:
    return ANDROID_SENSOR_WAKEUP_SIGNIFICANT_MOTION; // 17
 8000e34:	2311      	movs	r3, #17
 8000e36:	e00c      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_FLIP_PICKUP:
    return ANDROID_SENSOR_FLIP_PICKUP; // 46
 8000e38:	232e      	movs	r3, #46	@ 0x2e
 8000e3a:	e00a      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_WAKEUP_TILT_DETECTOR:
    return ANDROID_SENSOR_WAKEUP_TILT_DETECTOR; // 41
 8000e3c:	2329      	movs	r3, #41	@ 0x29
 8000e3e:	e008      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GRAVITY:
    return ANDROID_SENSOR_GRAVITY; // 9
 8000e40:	2309      	movs	r3, #9
 8000e42:	e006      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_LINEAR_ACCELERATION:
    return ANDROID_SENSOR_LINEAR_ACCELERATION; // 10
 8000e44:	230a      	movs	r3, #10
 8000e46:	e004      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_ORIENTATION:
    return ANDROID_SENSOR_ORIENTATION; // 3
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e002      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_B2S:
    return ANDROID_SENSOR_B2S; // 45
 8000e4c:	232d      	movs	r3, #45	@ 0x2d
 8000e4e:	e000      	b.n	8000e52 <sensor_type_2_android_sensor+0xba>
  default:
    return ANDROID_SENSOR_NUM_MAX;
 8000e50:	232c      	movs	r3, #44	@ 0x2c
  }
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <icm20948_i2c_controller_configure_peripheral>:
        0x4048, // 43 Raw Gyr
};


int8_t icm20948_i2c_controller_configure_peripheral(uint8_t peripheral, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap, uint8_t dataOut)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b08d      	sub	sp, #52	@ 0x34
 8000e64:	af04      	add	r7, sp, #16
 8000e66:	4604      	mov	r4, r0
 8000e68:	4608      	mov	r0, r1
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4623      	mov	r3, r4
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	4603      	mov	r3, r0
 8000e74:	71bb      	strb	r3, [r7, #6]
 8000e76:	460b      	mov	r3, r1
 8000e78:	717b      	strb	r3, [r7, #5]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	713b      	strb	r3, [r7, #4]
  uint8_t periph_addr_reg;
  uint8_t periph_reg_reg;
  uint8_t periph_ctrl_reg;
  uint8_t periph_do_reg;

  switch (peripheral)
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d82f      	bhi.n	8000ee4 <icm20948_i2c_controller_configure_peripheral+0x84>
 8000e84:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <icm20948_i2c_controller_configure_peripheral+0x2c>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000e9d 	.word	0x08000e9d
 8000e90:	08000eaf 	.word	0x08000eaf
 8000e94:	08000ec1 	.word	0x08000ec1
 8000e98:	08000ed3 	.word	0x08000ed3
  {
  case 0:
    periph_addr_reg = AGB3_REG_I2C_PERIPH0_ADDR;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH0_REG;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH0_CTRL;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH0_DO;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	773b      	strb	r3, [r7, #28]
    break;
 8000eac:	e01d      	b.n	8000eea <icm20948_i2c_controller_configure_peripheral+0x8a>
  case 1:
    periph_addr_reg = AGB3_REG_I2C_PERIPH1_ADDR;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH1_REG;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH1_CTRL;
 8000eb6:	2309      	movs	r3, #9
 8000eb8:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH1_DO;
 8000eba:	230a      	movs	r3, #10
 8000ebc:	773b      	strb	r3, [r7, #28]
    break;
 8000ebe:	e014      	b.n	8000eea <icm20948_i2c_controller_configure_peripheral+0x8a>
  case 2:
    periph_addr_reg = AGB3_REG_I2C_PERIPH2_ADDR;
 8000ec0:	230b      	movs	r3, #11
 8000ec2:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH2_REG;
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH2_CTRL;
 8000ec8:	230d      	movs	r3, #13
 8000eca:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH2_DO;
 8000ecc:	230e      	movs	r3, #14
 8000ece:	773b      	strb	r3, [r7, #28]
    break;
 8000ed0:	e00b      	b.n	8000eea <icm20948_i2c_controller_configure_peripheral+0x8a>
  case 3:
    periph_addr_reg = AGB3_REG_I2C_PERIPH3_ADDR;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH3_REG;
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH3_CTRL;
 8000eda:	2311      	movs	r3, #17
 8000edc:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH3_DO;
 8000ede:	2312      	movs	r3, #18
 8000ee0:	773b      	strb	r3, [r7, #28]
    break;
 8000ee2:	e002      	b.n	8000eea <icm20948_i2c_controller_configure_peripheral+0x8a>
  default:
    return -1;
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee8:	e080      	b.n	8000fec <icm20948_i2c_controller_configure_peripheral+0x18c>
  }

  icm20948_set_user_bank(3);
 8000eea:	2003      	movs	r0, #3
 8000eec:	f7ff ff34 	bl	8000d58 <icm20948_set_user_bank>


  // Set the peripheral address and the Rw flag
  ICM_20948_I2C_PERIPHX_ADDR_t address;
  address.ID = addr;
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	7e3b      	ldrb	r3, [r7, #24]
 8000efa:	f362 0306 	bfi	r3, r2, #0, #7
 8000efe:	763b      	strb	r3, [r7, #24]
  if (Rw)
 8000f00:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <icm20948_i2c_controller_configure_peripheral+0xb2>
  {
    address.RNW = 1;
 8000f08:	7e3b      	ldrb	r3, [r7, #24]
 8000f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f0e:	763b      	strb	r3, [r7, #24]
 8000f10:	e003      	b.n	8000f1a <icm20948_i2c_controller_configure_peripheral+0xba>
  }
  else
  {
    address.RNW = 0; // Make sure bit is clear (just in case there is any garbage in that RAM location)
 8000f12:	7e3b      	ldrb	r3, [r7, #24]
 8000f14:	f36f 13c7 	bfc	r3, #7, #1
 8000f18:	763b      	strb	r3, [r7, #24]
  }
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_addr_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&address, sizeof(ICM_20948_I2C_PERIPHX_ADDR_t), 1000);
 8000f1a:	7ffb      	ldrb	r3, [r7, #31]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	2301      	movs	r3, #1
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	21d0      	movs	r1, #208	@ 0xd0
 8000f32:	4830      	ldr	r0, [pc, #192]	@ (8000ff4 <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000f34:	f004 fad2 	bl	80054dc <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, periph_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_PERIPHX_ADDR_t));


  // If we are setting up a write, configure the Data Out register too
  if (!Rw)
 8000f38:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f3c:	f083 0301 	eor.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d011      	beq.n	8000f6a <icm20948_i2c_controller_configure_peripheral+0x10a>
  {
    ICM_20948_I2C_PERIPHX_DO_t dataOutByte;
    dataOutByte.DO = dataOut;
 8000f46:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000f4a:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_do_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dataOutByte, sizeof(ICM_20948_I2C_PERIPHX_DO_t), 1000);
 8000f4c:	7f3b      	ldrb	r3, [r7, #28]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	21d0      	movs	r1, #208	@ 0xd0
 8000f64:	4823      	ldr	r0, [pc, #140]	@ (8000ff4 <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000f66:	f004 fab9 	bl	80054dc <HAL_I2C_Mem_Write>

  }

  // Set the peripheral sub-address (register address)
  ICM_20948_I2C_PERIPHX_REG_t subaddress;
  subaddress.REG = reg;
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_reg_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_PERIPHX_REG_t), 1000);
 8000f6e:	7fbb      	ldrb	r3, [r7, #30]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	21d0      	movs	r1, #208	@ 0xd0
 8000f86:	481b      	ldr	r0, [pc, #108]	@ (8000ff4 <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000f88:	f004 faa8 	bl	80054dc <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, periph_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_PERIPHX_REG_t));


  // Set up the control info
  ICM_20948_I2C_PERIPHX_CTRL_t ctrl;
  ctrl.LENG = len;
 8000f8c:	793b      	ldrb	r3, [r7, #4]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	7c3b      	ldrb	r3, [r7, #16]
 8000f96:	f362 0303 	bfi	r3, r2, #0, #4
 8000f9a:	743b      	strb	r3, [r7, #16]
  ctrl.EN = enable;
 8000f9c:	7c3b      	ldrb	r3, [r7, #16]
 8000f9e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8000fa2:	f362 13c7 	bfi	r3, r2, #7, #1
 8000fa6:	743b      	strb	r3, [r7, #16]
  ctrl.REG_DIS = data_only;
 8000fa8:	7c3b      	ldrb	r3, [r7, #16]
 8000faa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000fae:	f362 1345 	bfi	r3, r2, #5, #1
 8000fb2:	743b      	strb	r3, [r7, #16]
  ctrl.GRP = grp;
 8000fb4:	7c3b      	ldrb	r3, [r7, #16]
 8000fb6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8000fba:	f362 1304 	bfi	r3, r2, #4, #1
 8000fbe:	743b      	strb	r3, [r7, #16]
  ctrl.BYTE_SW = swap;
 8000fc0:	7c3b      	ldrb	r3, [r7, #16]
 8000fc2:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8000fc6:	f362 1386 	bfi	r3, r2, #6, #1
 8000fca:	743b      	strb	r3, [r7, #16]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_ctrl_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_PERIPHX_CTRL_t), 1000);
 8000fcc:	7f7b      	ldrb	r3, [r7, #29]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	21d0      	movs	r1, #208	@ 0xd0
 8000fe4:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000fe6:	f004 fa79 	bl	80054dc <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, periph_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_PERIPHX_CTRL_t));

  return 0;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3724      	adds	r7, #36	@ 0x24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	20000108 	.word	0x20000108

08000ff8 <icm20948_set_clock_source>:


int8_t icm20948_set_clock_source(ICM_20948_PWR_MGMT_1_CLKSEL_e source)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  ICM_20948_PWR_MGMT_1_t reg;
  icm20948_set_user_bank(0); // Must be in the right bank
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fea8 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 8001008:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	2206      	movs	r2, #6
 800101c:	21d0      	movs	r1, #208	@ 0xd0
 800101e:	480f      	ldr	r0, [pc, #60]	@ (800105c <icm20948_set_clock_source+0x64>)
 8001020:	f004 fb70 	bl	8005704 <HAL_I2C_Mem_Read>

  reg.CLKSEL = source;
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	b2da      	uxtb	r2, r3
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	f362 0302 	bfi	r3, r2, #0, #3
 8001032:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 8001034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2301      	movs	r3, #1
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	2206      	movs	r2, #6
 8001048:	21d0      	movs	r1, #208	@ 0xd0
 800104a:	4804      	ldr	r0, [pc, #16]	@ (800105c <icm20948_set_clock_source+0x64>)
 800104c:	f004 fa46 	bl	80054dc <HAL_I2C_Mem_Write>

  return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000108 	.word	0x20000108

08001060 <icm20948_set_sample_mode>:


int8_t icm20948_set_sample_mode(ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	4613      	mov	r3, r2
 800106e:	71bb      	strb	r3, [r7, #6]
  /*if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
  {
    return -1;
  }*/

  icm20948_set_user_bank(0); // Must be in the right bank
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fe71 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_LP_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t), 1000);
 8001076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	2205      	movs	r2, #5
 800108a:	21d0      	movs	r1, #208	@ 0xd0
 800108c:	481e      	ldr	r0, [pc, #120]	@ (8001108 <icm20948_set_sample_mode+0xa8>)
 800108e:	f004 fb39 	bl	8005704 <HAL_I2C_Mem_Read>


  if (sensors & ICM_20948_Internal_Acc)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d007      	beq.n	80010ac <icm20948_set_sample_mode+0x4c>
  {
    reg.ACCEL_CYCLE = mode;
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	7b3b      	ldrb	r3, [r7, #12]
 80010a6:	f362 1345 	bfi	r3, r2, #5, #1
 80010aa:	733b      	strb	r3, [r7, #12]
  } // Set all desired sensors to this setting
  if (sensors & ICM_20948_Internal_Gyr)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <icm20948_set_sample_mode+0x66>
  {
    reg.GYRO_CYCLE = mode;
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	f362 1304 	bfi	r3, r2, #4, #1
 80010c4:	733b      	strb	r3, [r7, #12]
  }
  if (sensors & ICM_20948_Internal_Mst)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <icm20948_set_sample_mode+0x80>
  {
    reg.I2C_MST_CYCLE = mode;
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	f362 1386 	bfi	r3, r2, #6, #1
 80010de:	733b      	strb	r3, [r7, #12]
  }

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_LP_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t), 1000);
 80010e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	2301      	movs	r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2205      	movs	r2, #5
 80010f4:	21d0      	movs	r1, #208	@ 0xd0
 80010f6:	4804      	ldr	r0, [pc, #16]	@ (8001108 <icm20948_set_sample_mode+0xa8>)
 80010f8:	f004 f9f0 	bl	80054dc <HAL_I2C_Mem_Write>

  // Check the data was written correctly
  //HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_LP_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t), 1000);
  return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000108 	.word	0x20000108

0800110c <icm20948_enable_FIFO>:


int8_t icm20948_enable_FIFO(bool enable)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  ICM_20948_USER_CTRL_t ctrl;
  icm20948_set_user_bank(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fe1e 	bl	8000d58 <icm20948_set_user_bank>


  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_USER_CTRL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 800111c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2301      	movs	r3, #1
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	21d0      	movs	r1, #208	@ 0xd0
 8001132:	4811      	ldr	r0, [pc, #68]	@ (8001178 <icm20948_enable_FIFO+0x6c>)
 8001134:	f004 fae6 	bl	8005704 <HAL_I2C_Mem_Read>

  if (enable)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d004      	beq.n	8001148 <icm20948_enable_FIFO+0x3c>
    ctrl.FIFO_EN = 1;
 800113e:	7b3b      	ldrb	r3, [r7, #12]
 8001140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001144:	733b      	strb	r3, [r7, #12]
 8001146:	e003      	b.n	8001150 <icm20948_enable_FIFO+0x44>
  else
    ctrl.FIFO_EN = 0;
 8001148:	7b3b      	ldrb	r3, [r7, #12]
 800114a:	f36f 1386 	bfc	r3, #6, #1
 800114e:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_USER_CTRL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 8001150:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2301      	movs	r3, #1
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	21d0      	movs	r1, #208	@ 0xd0
 8001166:	4804      	ldr	r0, [pc, #16]	@ (8001178 <icm20948_enable_FIFO+0x6c>)
 8001168:	f004 f9b8 	bl	80054dc <HAL_I2C_Mem_Write>

  return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000108 	.word	0x20000108

0800117c <icm20948_reset_FIFO>:


int8_t icm20948_reset_FIFO()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af04      	add	r7, sp, #16
  ICM_20948_FIFO_RST_t ctrl;
  icm20948_set_user_bank(0);
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fde8 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_RST, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_FIFO_RST_t), 1000);
 8001188:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	2268      	movs	r2, #104	@ 0x68
 800119a:	21d0      	movs	r1, #208	@ 0xd0
 800119c:	4815      	ldr	r0, [pc, #84]	@ (80011f4 <icm20948_reset_FIFO+0x78>)
 800119e:	f004 fab1 	bl	8005704 <HAL_I2C_Mem_Read>

  ctrl.FIFO_RESET = 0x1F; // Datasheet says "FIFO_RESET[4:0]"
 80011a2:	793b      	ldrb	r3, [r7, #4]
 80011a4:	f043 031f 	orr.w	r3, r3, #31
 80011a8:	713b      	strb	r3, [r7, #4]

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_RST, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_FIFO_RST_t), 1000);
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	2268      	movs	r2, #104	@ 0x68
 80011bc:	21d0      	movs	r1, #208	@ 0xd0
 80011be:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <icm20948_reset_FIFO+0x78>)
 80011c0:	f004 f98c 	bl	80054dc <HAL_I2C_Mem_Write>

  //delay ???

  ctrl.FIFO_RESET = 0x1E; // The InvenSense Nucleo examples write 0x1F followed by 0x1E
 80011c4:	793b      	ldrb	r3, [r7, #4]
 80011c6:	221e      	movs	r2, #30
 80011c8:	f362 0304 	bfi	r3, r2, #0, #5
 80011cc:	713b      	strb	r3, [r7, #4]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_RST, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_FIFO_RST_t), 1000);
 80011ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	2268      	movs	r2, #104	@ 0x68
 80011e0:	21d0      	movs	r1, #208	@ 0xd0
 80011e2:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <icm20948_reset_FIFO+0x78>)
 80011e4:	f004 f97a 	bl	80054dc <HAL_I2C_Mem_Write>

  return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000108 	.word	0x20000108

080011f8 <icm20948_enable_DMP>:


int8_t icm20948_enable_DMP(bool enable)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af04      	add	r7, sp, #16
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  ICM_20948_USER_CTRL_t ctrl;
  
  icm20948_set_user_bank(0);
 8001202:	2000      	movs	r0, #0
 8001204:	f7ff fda8 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_USER_CTRL,  I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 8001208:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	2301      	movs	r3, #1
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	21d0      	movs	r1, #208	@ 0xd0
 800121e:	4811      	ldr	r0, [pc, #68]	@ (8001264 <icm20948_enable_DMP+0x6c>)
 8001220:	f004 fa70 	bl	8005704 <HAL_I2C_Mem_Read>


  if (enable)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <icm20948_enable_DMP+0x3c>
    ctrl.DMP_EN = 1;
 800122a:	7b3b      	ldrb	r3, [r7, #12]
 800122c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001230:	733b      	strb	r3, [r7, #12]
 8001232:	e003      	b.n	800123c <icm20948_enable_DMP+0x44>
  else
    ctrl.DMP_EN = 0;
 8001234:	7b3b      	ldrb	r3, [r7, #12]
 8001236:	f36f 13c7 	bfc	r3, #7, #1
 800123a:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_USER_CTRL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 800123c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	21d0      	movs	r1, #208	@ 0xd0
 8001252:	4804      	ldr	r0, [pc, #16]	@ (8001264 <icm20948_enable_DMP+0x6c>)
 8001254:	f004 f942 	bl	80054dc <HAL_I2C_Mem_Write>
  
  return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000108 	.word	0x20000108

08001268 <icm20948_reset_DMP>:


int8_t icm20948_reset_DMP()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af04      	add	r7, sp, #16
  ICM_20948_USER_CTRL_t ctrl;
  icm20948_set_user_bank(0);
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fd72 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR,  AGB0_REG_USER_CTRL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 8001274:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2301      	movs	r3, #1
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	21d0      	movs	r1, #208	@ 0xd0
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <icm20948_reset_DMP+0x54>)
 800128a:	f004 fa3b 	bl	8005704 <HAL_I2C_Mem_Read>

  ctrl.DMP_RST = 1;
 800128e:	793b      	ldrb	r3, [r7, #4]
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	713b      	strb	r3, [r7, #4]

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_USER_CTRL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 8001296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2301      	movs	r3, #1
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2301      	movs	r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	21d0      	movs	r1, #208	@ 0xd0
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <icm20948_reset_DMP+0x54>)
 80012ac:	f004 f916 	bl	80054dc <HAL_I2C_Mem_Write>

  return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000108 	.word	0x20000108

080012c0 <icm20948_set_full_scale>:


int8_t icm20948_set_full_scale(ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	4603      	mov	r3, r0
 80012c8:	7139      	strb	r1, [r7, #4]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <icm20948_set_full_scale+0x1c>
  {
    return -1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012da:	e074      	b.n	80013c6 <icm20948_set_full_scale+0x106>
  }

  if (sensors & ICM_20948_Internal_Acc)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d034      	beq.n	8001350 <icm20948_set_full_scale+0x90>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 80012e6:	2002      	movs	r0, #2
 80012e8:	f7ff fd36 	bl	8000d58 <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 80012ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2301      	movs	r3, #1
 80012fe:	2214      	movs	r2, #20
 8001300:	21d0      	movs	r1, #208	@ 0xd0
 8001302:	4833      	ldr	r0, [pc, #204]	@ (80013d0 <icm20948_set_full_scale+0x110>)
 8001304:	f004 f9fe 	bl	8005704 <HAL_I2C_Mem_Read>
    reg.ACCEL_FS_SEL = fss.a;
 8001308:	793b      	ldrb	r3, [r7, #4]
 800130a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800130e:	b2da      	uxtb	r2, r3
 8001310:	7b3b      	ldrb	r3, [r7, #12]
 8001312:	f362 0342 	bfi	r3, r2, #1, #2
 8001316:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8001318:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	2214      	movs	r2, #20
 800132c:	21d0      	movs	r1, #208	@ 0xd0
 800132e:	4828      	ldr	r0, [pc, #160]	@ (80013d0 <icm20948_set_full_scale+0x110>)
 8001330:	f004 f8d4 	bl	80054dc <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8001334:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	2214      	movs	r2, #20
 8001348:	21d0      	movs	r1, #208	@ 0xd0
 800134a:	4821      	ldr	r0, [pc, #132]	@ (80013d0 <icm20948_set_full_scale+0x110>)
 800134c:	f004 f9da 	bl	8005704 <HAL_I2C_Mem_Read>
    
  }
  if (sensors & ICM_20948_Internal_Gyr)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d034      	beq.n	80013c4 <icm20948_set_full_scale+0x104>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 800135a:	2002      	movs	r0, #2
 800135c:	f7ff fcfc 	bl	8000d58 <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR,AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 8001360:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2301      	movs	r3, #1
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	2201      	movs	r2, #1
 8001374:	21d0      	movs	r1, #208	@ 0xd0
 8001376:	4816      	ldr	r0, [pc, #88]	@ (80013d0 <icm20948_set_full_scale+0x110>)
 8001378:	f004 f9c4 	bl	8005704 <HAL_I2C_Mem_Read>
    reg.GYRO_FS_SEL = fss.g;
 800137c:	793b      	ldrb	r3, [r7, #4]
 800137e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001382:	b2da      	uxtb	r2, r3
 8001384:	7a3b      	ldrb	r3, [r7, #8]
 8001386:	f362 0342 	bfi	r3, r2, #1, #2
 800138a:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 800138c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2301      	movs	r3, #1
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	2201      	movs	r2, #1
 80013a0:	21d0      	movs	r1, #208	@ 0xd0
 80013a2:	480b      	ldr	r0, [pc, #44]	@ (80013d0 <icm20948_set_full_scale+0x110>)
 80013a4:	f004 f89a 	bl	80054dc <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 80013a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2301      	movs	r3, #1
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	2201      	movs	r2, #1
 80013bc:	21d0      	movs	r1, #208	@ 0xd0
 80013be:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <icm20948_set_full_scale+0x110>)
 80013c0:	f004 f9a0 	bl	8005704 <HAL_I2C_Mem_Read>
  }
  return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000108 	.word	0x20000108

080013d4 <icm20948_enable_dlpf>:


int8_t icm20948_enable_dlpf(ICM_20948_InternalSensorID_bm sensors, bool enable)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af04      	add	r7, sp, #16
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]
  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d102      	bne.n	80013f4 <icm20948_enable_dlpf+0x20>
  {
    return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013f2:	e07c      	b.n	80014ee <icm20948_enable_dlpf+0x11a>
  }

  if (sensors & ICM_20948_Internal_Acc)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d038      	beq.n	8001470 <icm20948_enable_dlpf+0x9c>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 80013fe:	2002      	movs	r0, #2
 8001400:	f7ff fcaa 	bl	8000d58 <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8001404:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	2301      	movs	r3, #1
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	2214      	movs	r2, #20
 8001418:	21d0      	movs	r1, #208	@ 0xd0
 800141a:	4837      	ldr	r0, [pc, #220]	@ (80014f8 <icm20948_enable_dlpf+0x124>)
 800141c:	f004 f972 	bl	8005704 <HAL_I2C_Mem_Read>
    if (enable)
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <icm20948_enable_dlpf+0x5c>
    {
      reg.ACCEL_FCHOICE = 1;
 8001426:	7b3b      	ldrb	r3, [r7, #12]
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	733b      	strb	r3, [r7, #12]
 800142e:	e003      	b.n	8001438 <icm20948_enable_dlpf+0x64>
    }
    else
    {
      reg.ACCEL_FCHOICE = 0;
 8001430:	7b3b      	ldrb	r3, [r7, #12]
 8001432:	f36f 0300 	bfc	r3, #0, #1
 8001436:	733b      	strb	r3, [r7, #12]
    }
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8001438:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	2214      	movs	r2, #20
 800144c:	21d0      	movs	r1, #208	@ 0xd0
 800144e:	482a      	ldr	r0, [pc, #168]	@ (80014f8 <icm20948_enable_dlpf+0x124>)
 8001450:	f004 f844 	bl	80054dc <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8001454:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	2301      	movs	r3, #1
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2301      	movs	r3, #1
 8001466:	2214      	movs	r2, #20
 8001468:	21d0      	movs	r1, #208	@ 0xd0
 800146a:	4823      	ldr	r0, [pc, #140]	@ (80014f8 <icm20948_enable_dlpf+0x124>)
 800146c:	f004 f94a 	bl	8005704 <HAL_I2C_Mem_Read>

  }
  if (sensors & ICM_20948_Internal_Gyr)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d038      	beq.n	80014ec <icm20948_enable_dlpf+0x118>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 800147a:	2002      	movs	r0, #2
 800147c:	f7ff fc6c 	bl	8000d58 <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 8001480:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	2301      	movs	r3, #1
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	2201      	movs	r2, #1
 8001494:	21d0      	movs	r1, #208	@ 0xd0
 8001496:	4818      	ldr	r0, [pc, #96]	@ (80014f8 <icm20948_enable_dlpf+0x124>)
 8001498:	f004 f934 	bl	8005704 <HAL_I2C_Mem_Read>
    if (enable)
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d004      	beq.n	80014ac <icm20948_enable_dlpf+0xd8>
    {
      reg.GYRO_FCHOICE = 1;
 80014a2:	7a3b      	ldrb	r3, [r7, #8]
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	723b      	strb	r3, [r7, #8]
 80014aa:	e003      	b.n	80014b4 <icm20948_enable_dlpf+0xe0>
    }
    else
    {
      reg.GYRO_FCHOICE = 0;
 80014ac:	7a3b      	ldrb	r3, [r7, #8]
 80014ae:	f36f 0300 	bfc	r3, #0, #1
 80014b2:	723b      	strb	r3, [r7, #8]
    }
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 80014b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2301      	movs	r3, #1
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2301      	movs	r3, #1
 80014c6:	2201      	movs	r2, #1
 80014c8:	21d0      	movs	r1, #208	@ 0xd0
 80014ca:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <icm20948_enable_dlpf+0x124>)
 80014cc:	f004 f806 	bl	80054dc <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 80014d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	2301      	movs	r3, #1
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2301      	movs	r3, #1
 80014e2:	2201      	movs	r2, #1
 80014e4:	21d0      	movs	r1, #208	@ 0xd0
 80014e6:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <icm20948_enable_dlpf+0x124>)
 80014e8:	f004 f90c 	bl	8005704 <HAL_I2C_Mem_Read>
  }
  return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000108 	.word	0x20000108

080014fc <icm20948_set_sample_rate>:


int8_t icm20948_set_sample_rate(ICM_20948_InternalSensorID_bm sensors, ICM_20948_smplrt_t smplrt)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af04      	add	r7, sp, #16
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <icm20948_set_sample_rate+0x1c>
  {
    return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001516:	e044      	b.n	80015a2 <icm20948_set_sample_rate+0xa6>
  }

  if (sensors & ICM_20948_Internal_Acc)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d026      	beq.n	8001570 <icm20948_set_sample_rate+0x74>
  {
    icm20948_set_user_bank(2); // Must be in the right bank
 8001522:	2002      	movs	r0, #2
 8001524:	f7ff fc18 	bl	8000d58 <icm20948_set_user_bank>
    uint8_t div1 = (smplrt.a >> 8); // Thank you @yanivamichy #109
 8001528:	883b      	ldrh	r3, [r7, #0]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	73fb      	strb	r3, [r7, #15]
    uint8_t div2 = (smplrt.a & 0xFF);
 8001532:	883b      	ldrh	r3, [r7, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_ACCEL_SMPLRT_DIV_1, I2C_MEMADD_SIZE_8BIT, &div1, 1, 1000);
 8001538:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2301      	movs	r3, #1
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	f107 030f 	add.w	r3, r7, #15
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	2210      	movs	r2, #16
 800154c:	21d0      	movs	r1, #208	@ 0xd0
 800154e:	4817      	ldr	r0, [pc, #92]	@ (80015ac <icm20948_set_sample_rate+0xb0>)
 8001550:	f003 ffc4 	bl	80054dc <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_ACCEL_SMPLRT_DIV_2, I2C_MEMADD_SIZE_8BIT, &div2, 1, 1000);
 8001554:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2301      	movs	r3, #1
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	f107 030e 	add.w	r3, r7, #14
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	2211      	movs	r2, #17
 8001568:	21d0      	movs	r1, #208	@ 0xd0
 800156a:	4810      	ldr	r0, [pc, #64]	@ (80015ac <icm20948_set_sample_rate+0xb0>)
 800156c:	f003 ffb6 	bl	80054dc <HAL_I2C_Mem_Write>
  }
  if (sensors & ICM_20948_Internal_Gyr)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d012      	beq.n	80015a0 <icm20948_set_sample_rate+0xa4>
  {
    icm20948_set_user_bank(2); // Must be in the right bank
 800157a:	2002      	movs	r0, #2
 800157c:	f7ff fbec 	bl	8000d58 <icm20948_set_user_bank>
    uint8_t div = (smplrt.g);
 8001580:	78bb      	ldrb	r3, [r7, #2]
 8001582:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_GYRO_SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &div, 1, 1000);
 8001584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	2301      	movs	r3, #1
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	f107 030d 	add.w	r3, r7, #13
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2301      	movs	r3, #1
 8001596:	2200      	movs	r2, #0
 8001598:	21d0      	movs	r1, #208	@ 0xd0
 800159a:	4804      	ldr	r0, [pc, #16]	@ (80015ac <icm20948_set_sample_rate+0xb0>)
 800159c:	f003 ff9e 	bl	80054dc <HAL_I2C_Mem_Write>
  }
  return 0;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000108 	.word	0x20000108

080015b0 <icm20948_int_enable>:


int8_t icm20948_int_enable(ICM_20948_INT_enable_t *write, ICM_20948_INT_enable_t *read)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af04      	add	r7, sp, #16
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  ICM_20948_INT_ENABLE_t en_0;
  ICM_20948_INT_ENABLE_1_t en_1;
  ICM_20948_INT_ENABLE_2_t en_2;
  ICM_20948_INT_ENABLE_3_t en_3;

  icm20948_set_user_bank(0); // Must be in the right bank
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fbcc 	bl	8000d58 <icm20948_set_user_bank>

  if (write != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80d8 	beq.w	8001778 <icm20948_int_enable+0x1c8>
  { // If the write pointer is not NULL then write to the registers BEFORE reading
    en_0.I2C_MST_INT_EN = write->I2C_MST_INT_EN;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	7d3b      	ldrb	r3, [r7, #20]
 80015d4:	f362 0300 	bfi	r3, r2, #0, #1
 80015d8:	753b      	strb	r3, [r7, #20]
    en_0.DMP_INT1_EN = write->DMP_INT1_EN;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	7d3b      	ldrb	r3, [r7, #20]
 80015e6:	f362 0341 	bfi	r3, r2, #1, #1
 80015ea:	753b      	strb	r3, [r7, #20]
    en_0.PLL_READY_EN = write->PLL_RDY_EN;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	7d3b      	ldrb	r3, [r7, #20]
 80015f8:	f362 0382 	bfi	r3, r2, #2, #1
 80015fc:	753b      	strb	r3, [r7, #20]
    en_0.WOM_INT_EN = write->WOM_INT_EN;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	7d3b      	ldrb	r3, [r7, #20]
 800160a:	f362 03c3 	bfi	r3, r2, #3, #1
 800160e:	753b      	strb	r3, [r7, #20]
    en_0.reserved_0 = 0; // Clear RAM garbage
 8001610:	7d3b      	ldrb	r3, [r7, #20]
 8001612:	f36f 1306 	bfc	r3, #4, #3
 8001616:	753b      	strb	r3, [r7, #20]
    en_0.REG_WOF_EN = write->REG_WOF_EN;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001620:	b2da      	uxtb	r2, r3
 8001622:	7d3b      	ldrb	r3, [r7, #20]
 8001624:	f362 13c7 	bfi	r3, r2, #7, #1
 8001628:	753b      	strb	r3, [r7, #20]
    en_1.RAW_DATA_0_RDY_EN = write->RAW_DATA_0_RDY_EN;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001632:	b2da      	uxtb	r2, r3
 8001634:	7c3b      	ldrb	r3, [r7, #16]
 8001636:	f362 0300 	bfi	r3, r2, #0, #1
 800163a:	743b      	strb	r3, [r7, #16]
    en_1.reserved_0 = 0; // Clear RAM garbage
 800163c:	7c3b      	ldrb	r3, [r7, #16]
 800163e:	f36f 0347 	bfc	r3, #1, #7
 8001642:	743b      	strb	r3, [r7, #16]
    en_2.individual.FIFO_OVERFLOW_EN_4 = write->FIFO_OVERFLOW_EN_4;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800164c:	b2da      	uxtb	r2, r3
 800164e:	7b3b      	ldrb	r3, [r7, #12]
 8001650:	f362 1304 	bfi	r3, r2, #4, #1
 8001654:	733b      	strb	r3, [r7, #12]
    en_2.individual.FIFO_OVERFLOW_EN_3 = write->FIFO_OVERFLOW_EN_3;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	7b3b      	ldrb	r3, [r7, #12]
 8001662:	f362 03c3 	bfi	r3, r2, #3, #1
 8001666:	733b      	strb	r3, [r7, #12]
    en_2.individual.FIFO_OVERFLOW_EN_2 = write->FIFO_OVERFLOW_EN_2;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	7b3b      	ldrb	r3, [r7, #12]
 8001674:	f362 0382 	bfi	r3, r2, #2, #1
 8001678:	733b      	strb	r3, [r7, #12]
    en_2.individual.FIFO_OVERFLOW_EN_1 = write->FIFO_OVERFLOW_EN_1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	785b      	ldrb	r3, [r3, #1]
 800167e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	7b3b      	ldrb	r3, [r7, #12]
 8001686:	f362 0341 	bfi	r3, r2, #1, #1
 800168a:	733b      	strb	r3, [r7, #12]
    en_2.individual.FIFO_OVERFLOW_EN_0 = write->FIFO_OVERFLOW_EN_0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	785b      	ldrb	r3, [r3, #1]
 8001690:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	7b3b      	ldrb	r3, [r7, #12]
 8001698:	f362 0300 	bfi	r3, r2, #0, #1
 800169c:	733b      	strb	r3, [r7, #12]
    en_2.individual.reserved_0 = 0; // Clear RAM garbage
 800169e:	7b3b      	ldrb	r3, [r7, #12]
 80016a0:	f36f 1347 	bfc	r3, #5, #3
 80016a4:	733b      	strb	r3, [r7, #12]
    en_3.individual.FIFO_WM_EN_4 = write->FIFO_WM_EN_4;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	7a3b      	ldrb	r3, [r7, #8]
 80016b2:	f362 1304 	bfi	r3, r2, #4, #1
 80016b6:	723b      	strb	r3, [r7, #8]
    en_3.individual.FIFO_WM_EN_3 = write->FIFO_WM_EN_3;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	785b      	ldrb	r3, [r3, #1]
 80016bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	7a3b      	ldrb	r3, [r7, #8]
 80016c4:	f362 03c3 	bfi	r3, r2, #3, #1
 80016c8:	723b      	strb	r3, [r7, #8]
    en_3.individual.FIFO_WM_EN_2 = write->FIFO_WM_EN_2;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	7a3b      	ldrb	r3, [r7, #8]
 80016d6:	f362 0382 	bfi	r3, r2, #2, #1
 80016da:	723b      	strb	r3, [r7, #8]
    en_3.individual.FIFO_WM_EN_1 = write->FIFO_WM_EN_1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	7a3b      	ldrb	r3, [r7, #8]
 80016e8:	f362 0341 	bfi	r3, r2, #1, #1
 80016ec:	723b      	strb	r3, [r7, #8]
    en_3.individual.FIFO_WM_EN_0 = write->FIFO_WM_EN_0;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	785b      	ldrb	r3, [r3, #1]
 80016f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	7a3b      	ldrb	r3, [r7, #8]
 80016fa:	f362 0300 	bfi	r3, r2, #0, #1
 80016fe:	723b      	strb	r3, [r7, #8]
    en_3.individual.reserved_0 = 0; // Clear RAM garbage
 8001700:	7a3b      	ldrb	r3, [r7, #8]
 8001702:	f36f 1347 	bfc	r3, #5, #3
 8001706:	723b      	strb	r3, [r7, #8]

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_0, sizeof(ICM_20948_INT_ENABLE_t), 1000);
 8001708:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	2301      	movs	r3, #1
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	2210      	movs	r2, #16
 800171c:	21d0      	movs	r1, #208	@ 0xd0
 800171e:	487f      	ldr	r0, [pc, #508]	@ (800191c <icm20948_int_enable+0x36c>)
 8001720:	f003 fedc 	bl	80054dc <HAL_I2C_Mem_Write>

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_1, sizeof(ICM_20948_INT_ENABLE_1_t), 1000);
 8001724:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2301      	movs	r3, #1
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2301      	movs	r3, #1
 8001736:	2211      	movs	r2, #17
 8001738:	21d0      	movs	r1, #208	@ 0xd0
 800173a:	4878      	ldr	r0, [pc, #480]	@ (800191c <icm20948_int_enable+0x36c>)
 800173c:	f003 fece 	bl	80054dc <HAL_I2C_Mem_Write>

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_2, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_2, sizeof(ICM_20948_INT_ENABLE_2_t), 1000);
 8001740:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001744:	9302      	str	r3, [sp, #8]
 8001746:	2301      	movs	r3, #1
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	2212      	movs	r2, #18
 8001754:	21d0      	movs	r1, #208	@ 0xd0
 8001756:	4871      	ldr	r0, [pc, #452]	@ (800191c <icm20948_int_enable+0x36c>)
 8001758:	f003 fec0 	bl	80054dc <HAL_I2C_Mem_Write>

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_3, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_3, sizeof(ICM_20948_INT_ENABLE_3_t), 1000);
 800175c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	2213      	movs	r2, #19
 8001770:	21d0      	movs	r1, #208	@ 0xd0
 8001772:	486a      	ldr	r0, [pc, #424]	@ (800191c <icm20948_int_enable+0x36c>)
 8001774:	f003 feb2 	bl	80054dc <HAL_I2C_Mem_Write>

  }

  if (read != NULL)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80c8 	beq.w	8001910 <icm20948_int_enable+0x360>
  { // If read pointer is not NULL then read the registers (if write is not NULL then this should read back the results of write into read)
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_0, sizeof(ICM_20948_INT_ENABLE_t), 1000);
 8001780:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2301      	movs	r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2301      	movs	r3, #1
 8001792:	2210      	movs	r2, #16
 8001794:	21d0      	movs	r1, #208	@ 0xd0
 8001796:	4861      	ldr	r0, [pc, #388]	@ (800191c <icm20948_int_enable+0x36c>)
 8001798:	f003 ffb4 	bl	8005704 <HAL_I2C_Mem_Read>

    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_1, sizeof(ICM_20948_INT_ENABLE_1_t), 1000);
 800179c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2301      	movs	r3, #1
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2301      	movs	r3, #1
 80017ae:	2211      	movs	r2, #17
 80017b0:	21d0      	movs	r1, #208	@ 0xd0
 80017b2:	485a      	ldr	r0, [pc, #360]	@ (800191c <icm20948_int_enable+0x36c>)
 80017b4:	f003 ffa6 	bl	8005704 <HAL_I2C_Mem_Read>

    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_2, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_2, sizeof(ICM_20948_INT_ENABLE_2_t), 1000);
 80017b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2301      	movs	r3, #1
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	2212      	movs	r2, #18
 80017cc:	21d0      	movs	r1, #208	@ 0xd0
 80017ce:	4853      	ldr	r0, [pc, #332]	@ (800191c <icm20948_int_enable+0x36c>)
 80017d0:	f003 ff98 	bl	8005704 <HAL_I2C_Mem_Read>

    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_3, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_3, sizeof(ICM_20948_INT_ENABLE_3_t), 1000);
 80017d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	2301      	movs	r3, #1
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2301      	movs	r3, #1
 80017e6:	2213      	movs	r2, #19
 80017e8:	21d0      	movs	r1, #208	@ 0xd0
 80017ea:	484c      	ldr	r0, [pc, #304]	@ (800191c <icm20948_int_enable+0x36c>)
 80017ec:	f003 ff8a 	bl	8005704 <HAL_I2C_Mem_Read>


    read->I2C_MST_INT_EN = en_0.I2C_MST_INT_EN;
 80017f0:	7d3b      	ldrb	r3, [r7, #20]
 80017f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017f6:	b2d9      	uxtb	r1, r3
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	7813      	ldrb	r3, [r2, #0]
 80017fc:	f361 0300 	bfi	r3, r1, #0, #1
 8001800:	7013      	strb	r3, [r2, #0]
    read->DMP_INT1_EN = en_0.DMP_INT1_EN;
 8001802:	7d3b      	ldrb	r3, [r7, #20]
 8001804:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001808:	b2d9      	uxtb	r1, r3
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	7813      	ldrb	r3, [r2, #0]
 800180e:	f361 0341 	bfi	r3, r1, #1, #1
 8001812:	7013      	strb	r3, [r2, #0]
    read->PLL_RDY_EN = en_0.PLL_READY_EN;
 8001814:	7d3b      	ldrb	r3, [r7, #20]
 8001816:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800181a:	b2d9      	uxtb	r1, r3
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	7813      	ldrb	r3, [r2, #0]
 8001820:	f361 0382 	bfi	r3, r1, #2, #1
 8001824:	7013      	strb	r3, [r2, #0]
    read->WOM_INT_EN = en_0.WOM_INT_EN;
 8001826:	7d3b      	ldrb	r3, [r7, #20]
 8001828:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800182c:	b2d9      	uxtb	r1, r3
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	7813      	ldrb	r3, [r2, #0]
 8001832:	f361 03c3 	bfi	r3, r1, #3, #1
 8001836:	7013      	strb	r3, [r2, #0]
    read->REG_WOF_EN = en_0.REG_WOF_EN;
 8001838:	7d3b      	ldrb	r3, [r7, #20]
 800183a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800183e:	b2d9      	uxtb	r1, r3
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	7813      	ldrb	r3, [r2, #0]
 8001844:	f361 1304 	bfi	r3, r1, #4, #1
 8001848:	7013      	strb	r3, [r2, #0]
    read->RAW_DATA_0_RDY_EN = en_1.RAW_DATA_0_RDY_EN;
 800184a:	7c3b      	ldrb	r3, [r7, #16]
 800184c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001850:	b2d9      	uxtb	r1, r3
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	7813      	ldrb	r3, [r2, #0]
 8001856:	f361 1345 	bfi	r3, r1, #5, #1
 800185a:	7013      	strb	r3, [r2, #0]
    read->FIFO_OVERFLOW_EN_4 = en_2.individual.FIFO_OVERFLOW_EN_4;
 800185c:	7b3b      	ldrb	r3, [r7, #12]
 800185e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001862:	b2d9      	uxtb	r1, r3
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	7813      	ldrb	r3, [r2, #0]
 8001868:	f361 1386 	bfi	r3, r1, #6, #1
 800186c:	7013      	strb	r3, [r2, #0]
    read->FIFO_OVERFLOW_EN_3 = en_2.individual.FIFO_OVERFLOW_EN_3;
 800186e:	7b3b      	ldrb	r3, [r7, #12]
 8001870:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001874:	b2d9      	uxtb	r1, r3
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	7813      	ldrb	r3, [r2, #0]
 800187a:	f361 13c7 	bfi	r3, r1, #7, #1
 800187e:	7013      	strb	r3, [r2, #0]
    read->FIFO_OVERFLOW_EN_2 = en_2.individual.FIFO_OVERFLOW_EN_2;
 8001880:	7b3b      	ldrb	r3, [r7, #12]
 8001882:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001886:	b2d9      	uxtb	r1, r3
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	7853      	ldrb	r3, [r2, #1]
 800188c:	f361 0300 	bfi	r3, r1, #0, #1
 8001890:	7053      	strb	r3, [r2, #1]
    read->FIFO_OVERFLOW_EN_1 = en_2.individual.FIFO_OVERFLOW_EN_1;
 8001892:	7b3b      	ldrb	r3, [r7, #12]
 8001894:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001898:	b2d9      	uxtb	r1, r3
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	7853      	ldrb	r3, [r2, #1]
 800189e:	f361 0341 	bfi	r3, r1, #1, #1
 80018a2:	7053      	strb	r3, [r2, #1]
    read->FIFO_OVERFLOW_EN_0 = en_2.individual.FIFO_OVERFLOW_EN_0;
 80018a4:	7b3b      	ldrb	r3, [r7, #12]
 80018a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018aa:	b2d9      	uxtb	r1, r3
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	7853      	ldrb	r3, [r2, #1]
 80018b0:	f361 0382 	bfi	r3, r1, #2, #1
 80018b4:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_4 = en_3.individual.FIFO_WM_EN_4;
 80018b6:	7a3b      	ldrb	r3, [r7, #8]
 80018b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80018bc:	b2d9      	uxtb	r1, r3
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	7853      	ldrb	r3, [r2, #1]
 80018c2:	f361 03c3 	bfi	r3, r1, #3, #1
 80018c6:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_3 = en_3.individual.FIFO_WM_EN_3;
 80018c8:	7a3b      	ldrb	r3, [r7, #8]
 80018ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80018ce:	b2d9      	uxtb	r1, r3
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	7853      	ldrb	r3, [r2, #1]
 80018d4:	f361 1304 	bfi	r3, r1, #4, #1
 80018d8:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_2 = en_3.individual.FIFO_WM_EN_2;
 80018da:	7a3b      	ldrb	r3, [r7, #8]
 80018dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80018e0:	b2d9      	uxtb	r1, r3
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	7853      	ldrb	r3, [r2, #1]
 80018e6:	f361 1345 	bfi	r3, r1, #5, #1
 80018ea:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_1 = en_3.individual.FIFO_WM_EN_1;
 80018ec:	7a3b      	ldrb	r3, [r7, #8]
 80018ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80018f2:	b2d9      	uxtb	r1, r3
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	7853      	ldrb	r3, [r2, #1]
 80018f8:	f361 1386 	bfi	r3, r1, #6, #1
 80018fc:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_0 = en_3.individual.FIFO_WM_EN_0;
 80018fe:	7a3b      	ldrb	r3, [r7, #8]
 8001900:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001904:	b2d9      	uxtb	r1, r3
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	7853      	ldrb	r3, [r2, #1]
 800190a:	f361 13c7 	bfi	r3, r1, #7, #1
 800190e:	7053      	strb	r3, [r2, #1]
  }

  return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000108 	.word	0x20000108

08001920 <icm20948_int_enable_raw_data_ready>:


int8_t icm20948_int_enable_raw_data_ready(bool enable)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  ICM_20948_INT_enable_t en;                          // storage
  icm20948_int_enable(NULL, &en); // read phase
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	4619      	mov	r1, r3
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff fe3d 	bl	80015b0 <icm20948_int_enable>
  en.RAW_DATA_0_RDY_EN = enable;                     // change the setting
 8001936:	7b3b      	ldrb	r3, [r7, #12]
 8001938:	79fa      	ldrb	r2, [r7, #7]
 800193a:	f362 1345 	bfi	r3, r2, #5, #1
 800193e:	733b      	strb	r3, [r7, #12]
  icm20948_int_enable(&en, &en); // write phase w/ readback
 8001940:	f107 020c 	add.w	r2, r7, #12
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fe30 	bl	80015b0 <icm20948_int_enable>

  return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <icm20948_set_DMP_start_address>:


int8_t icm20948_set_DMP_start_address(unsigned short address)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af04      	add	r7, sp, #16
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
  unsigned char start_address[2];

  start_address[0] = (unsigned char)(address >> 8);
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	b29b      	uxth	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	733b      	strb	r3, [r7, #12]
  start_address[1] = (unsigned char)(address & 0xff);
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	737b      	strb	r3, [r7, #13]

  icm20948_set_user_bank(2); // Set bank 2
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff f9ee 	bl	8000d58 <icm20948_set_user_bank>

  // Write the sensor control bits into memory address AGB2_REG_PRGM_START_ADDRH
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_PRGM_START_ADDRH, I2C_MEMADD_SIZE_8BIT, (uint8_t *)start_address, 2, 1000);
 800197c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	2302      	movs	r3, #2
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2301      	movs	r3, #1
 800198e:	2250      	movs	r2, #80	@ 0x50
 8001990:	21d0      	movs	r1, #208	@ 0xd0
 8001992:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <icm20948_set_DMP_start_address+0x48>)
 8001994:	f003 fda2 	bl	80054dc <HAL_I2C_Mem_Write>

  return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000108 	.word	0x20000108

080019a8 <icm20948_write_mem>:


int8_t icm20948_write_mem(unsigned short reg, unsigned int length, const unsigned char *data)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	@ 0x30
 80019ac:	af04      	add	r7, sp, #16
 80019ae:	4603      	mov	r3, r0
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	81fb      	strh	r3, [r7, #14]
  unsigned int bytesWritten = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  unsigned int thisLen;
  unsigned char lBankSelected;
  unsigned char lStartAddrSelected;

  if (!data)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <icm20948_write_mem+0x1c>
  {
    return 1; // nodata
 80019c0:	2301      	movs	r3, #1
 80019c2:	e051      	b.n	8001a68 <icm20948_write_mem+0xc0>
  }

  icm20948_set_user_bank(0); // set user bank (0 through 3) to 0
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff f9c7 	bl	8000d58 <icm20948_set_user_bank>

    //set mem bank
  lBankSelected = (reg >> 8);
 80019ca:	89fb      	ldrh	r3, [r7, #14]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	75fb      	strb	r3, [r7, #23]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &lBankSelected, 1, 1000);
 80019d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d8:	9302      	str	r3, [sp, #8]
 80019da:	2301      	movs	r3, #1
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	f107 0317 	add.w	r3, r7, #23
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2301      	movs	r3, #1
 80019e6:	227e      	movs	r2, #126	@ 0x7e
 80019e8:	21d0      	movs	r1, #208	@ 0xd0
 80019ea:	4821      	ldr	r0, [pc, #132]	@ (8001a70 <icm20948_write_mem+0xc8>)
 80019ec:	f003 fd76 	bl	80054dc <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, AGB0_REG_MEM_BANK_SEL, &lBankSelected, 1);

  while (bytesWritten < length)
 80019f0:	e035      	b.n	8001a5e <icm20948_write_mem+0xb6>
  {
    lStartAddrSelected = (reg & 0xff);
 80019f2:	89fb      	ldrh	r3, [r7, #14]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	75bb      	strb	r3, [r7, #22]
    /* Sets the starting read or write address for the selected memory, inside of the selected page (see MEM_SEL Register).
           Contents are changed after read or write of the selected memory.
           This register must be written prior to each access to initialize the register to the proper starting address.
           The address will auto increment during burst transactions.  Two consecutive bursts without re-initializing the start address would skip one address. */

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_START_ADDR, I2C_MEMADD_SIZE_8BIT, &lStartAddrSelected, 1, 1000);
 80019f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fc:	9302      	str	r3, [sp, #8]
 80019fe:	2301      	movs	r3, #1
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	f107 0316 	add.w	r3, r7, #22
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	227c      	movs	r2, #124	@ 0x7c
 8001a0c:	21d0      	movs	r1, #208	@ 0xd0
 8001a0e:	4818      	ldr	r0, [pc, #96]	@ (8001a70 <icm20948_write_mem+0xc8>)
 8001a10:	f003 fd64 	bl	80054dc <HAL_I2C_Mem_Write>
    //ICM_20948_execute_w(pdev, AGB0_REG_MEM_START_ADDR, &lStartAddrSelected, 1);


    if (length - bytesWritten <= MAX_SERIAL_R_W)
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d804      	bhi.n	8001a28 <icm20948_write_mem+0x80>
      thisLen = length - bytesWritten;
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	e001      	b.n	8001a2c <icm20948_write_mem+0x84>
    else
      thisLen = MAX_SERIAL_R_W;
 8001a28:	2310      	movs	r3, #16
 8001a2a:	61bb      	str	r3, [r7, #24]

    /* Write data */

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_R_W, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&data[bytesWritten], thisLen, 1000);
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	b292      	uxth	r2, r2
 8001a36:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a3a:	9102      	str	r1, [sp, #8]
 8001a3c:	9201      	str	r2, [sp, #4]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	227d      	movs	r2, #125	@ 0x7d
 8001a44:	21d0      	movs	r1, #208	@ 0xd0
 8001a46:	480a      	ldr	r0, [pc, #40]	@ (8001a70 <icm20948_write_mem+0xc8>)
 8001a48:	f003 fd48 	bl	80054dc <HAL_I2C_Mem_Write>
    //ICM_20948_execute_w(pdev, AGB0_REG_MEM_R_W, (uint8_t *)&data[bytesWritten], thisLen);

    bytesWritten += thisLen;
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4413      	add	r3, r2
 8001a52:	61fb      	str	r3, [r7, #28]
    reg += thisLen;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	89fb      	ldrh	r3, [r7, #14]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	81fb      	strh	r3, [r7, #14]
  while (bytesWritten < length)
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3c5      	bcc.n	80019f2 <icm20948_write_mem+0x4a>
  }

  return 0;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000108 	.word	0x20000108

08001a74 <icm20948_read_mem>:


int8_t icm20948_read_mem(unsigned short reg, unsigned int length, unsigned char *data)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	@ 0x30
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	81fb      	strh	r3, [r7, #14]
  unsigned int bytesRead = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  unsigned int thisLen;
  unsigned char lBankSelected;
  unsigned char lStartAddrSelected;

  icm20948_set_user_bank(0); // set user bank (0 through 3) to 0
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff f966 	bl	8000d58 <icm20948_set_user_bank>

    //set mem bank
  lBankSelected = (reg >> 8);
 8001a8c:	89fb      	ldrh	r3, [r7, #14]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	75fb      	strb	r3, [r7, #23]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &lBankSelected, 1, 1000);
 8001a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9a:	9302      	str	r3, [sp, #8]
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	f107 0317 	add.w	r3, r7, #23
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	227e      	movs	r2, #126	@ 0x7e
 8001aaa:	21d0      	movs	r1, #208	@ 0xd0
 8001aac:	4821      	ldr	r0, [pc, #132]	@ (8001b34 <icm20948_read_mem+0xc0>)
 8001aae:	f003 fd15 	bl	80054dc <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, AGB0_REG_MEM_BANK_SEL, &lBankSelected, 1);


  while (bytesRead < length)
 8001ab2:	e035      	b.n	8001b20 <icm20948_read_mem+0xac>
  {
    lStartAddrSelected = (reg & 0xff);
 8001ab4:	89fb      	ldrh	r3, [r7, #14]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	75bb      	strb	r3, [r7, #22]
    /* Sets the starting read or write address for the selected memory, inside of the selected page (see MEM_SEL Register).
           Contents are changed after read or write of the selected memory.
           This register must be written prior to each access to initialize the register to the proper starting address.
           The address will auto increment during burst transactions.  Two consecutive bursts without re-initializing the start address would skip one address. */

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_START_ADDR, I2C_MEMADD_SIZE_8BIT, &lStartAddrSelected, 1, 1000);
 8001aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	f107 0316 	add.w	r3, r7, #22
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	227c      	movs	r2, #124	@ 0x7c
 8001ace:	21d0      	movs	r1, #208	@ 0xd0
 8001ad0:	4818      	ldr	r0, [pc, #96]	@ (8001b34 <icm20948_read_mem+0xc0>)
 8001ad2:	f003 fd03 	bl	80054dc <HAL_I2C_Mem_Write>
    //ICM_20948_execute_w(pdev, AGB0_REG_MEM_START_ADDR, &lStartAddrSelected, 1);

    if (length - bytesRead <= MAX_SERIAL_R_W)
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d804      	bhi.n	8001aea <icm20948_read_mem+0x76>
      thisLen = length - bytesRead;
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	61bb      	str	r3, [r7, #24]
 8001ae8:	e001      	b.n	8001aee <icm20948_read_mem+0x7a>
    else
      thisLen = MAX_SERIAL_R_W;
 8001aea:	2310      	movs	r3, #16
 8001aec:	61bb      	str	r3, [r7, #24]

    /* Read data */
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_R_W, I2C_MEMADD_SIZE_8BIT, &data[bytesRead], thisLen, 1000);
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	4413      	add	r3, r2
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	b292      	uxth	r2, r2
 8001af8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001afc:	9102      	str	r1, [sp, #8]
 8001afe:	9201      	str	r2, [sp, #4]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	227d      	movs	r2, #125	@ 0x7d
 8001b06:	21d0      	movs	r1, #208	@ 0xd0
 8001b08:	480a      	ldr	r0, [pc, #40]	@ (8001b34 <icm20948_read_mem+0xc0>)
 8001b0a:	f003 fdfb 	bl	8005704 <HAL_I2C_Mem_Read>
    
    bytesRead += thisLen;
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	4413      	add	r3, r2
 8001b14:	61fb      	str	r3, [r7, #28]
    reg += thisLen;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	81fb      	strh	r3, [r7, #14]
  while (bytesRead < length)
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d3c5      	bcc.n	8001ab4 <icm20948_read_mem+0x40>
  }

  return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000108 	.word	0x20000108

08001b38 <icm20948_set_gyro_sf>:


int8_t icm20948_set_gyro_sf(unsigned char div, int gyro_level)
{
 8001b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b3c:	b09b      	sub	sp, #108	@ 0x6c
 8001b3e:	af04      	add	r7, sp, #16
 8001b40:	4603      	mov	r3, r0
 8001b42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001b44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  // gyro_level should be set to 4 regardless of fullscale, due to the addition of API dmp_icm20648_set_gyro_fsr()
  gyro_level = 4;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  // First read the TIMEBASE_CORRECTION_PLL register from Bank 1
  int8_t pll; // Signed. Typical value is 0x18
  icm20948_set_user_bank(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff f903 	bl	8000d58 <icm20948_set_user_bank>
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB1_REG_TIMEBASE_CORRECTION_PLL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&pll, 1, 1000);
 8001b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b56:	9302      	str	r3, [sp, #8]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2301      	movs	r3, #1
 8001b64:	2228      	movs	r2, #40	@ 0x28
 8001b66:	21d0      	movs	r1, #208	@ 0xd0
 8001b68:	4865      	ldr	r0, [pc, #404]	@ (8001d00 <icm20948_set_gyro_sf+0x1c8>)
 8001b6a:	f003 fcb7 	bl	80054dc <HAL_I2C_Mem_Write>


  // Now calculate the Gyro SF using code taken from the InvenSense example (inv_icm20948_set_gyro_sf)
  long gyro_sf;

  unsigned long long const MagicConstant = 264446880937391LL;
 8001b6e:	a362      	add	r3, pc, #392	@ (adr r3, 8001cf8 <icm20948_set_gyro_sf+0x1c0>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  unsigned long long const MagicConstantScale = 100000LL;
 8001b78:	4a62      	ldr	r2, [pc, #392]	@ (8001d04 <icm20948_set_gyro_sf+0x1cc>)
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long long ResultLL;

  if (pll & 0x80)
 8001b82:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da48      	bge.n	8001c1c <icm20948_set_gyro_sf+0xe4>
  {
    ResultLL = (MagicConstant * (long long)(1ULL << gyro_level) * (1 + div) / (1270 - (pll & 0x7F)) / MagicConstantScale);
 8001b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b90:	f1a1 0420 	sub.w	r4, r1, #32
 8001b94:	f1c1 0020 	rsb	r0, r1, #32
 8001b98:	fa03 fb01 	lsl.w	fp, r3, r1
 8001b9c:	fa02 f404 	lsl.w	r4, r2, r4
 8001ba0:	ea4b 0b04 	orr.w	fp, fp, r4
 8001ba4:	fa22 f000 	lsr.w	r0, r2, r0
 8001ba8:	ea4b 0b00 	orr.w	fp, fp, r0
 8001bac:	fa02 fa01 	lsl.w	sl, r2, r1
 8001bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	17da      	asrs	r2, r3, #31
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	61fa      	str	r2, [r7, #28]
 8001bbc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	fb03 f20b 	mul.w	r2, r3, fp
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	fb0a f303 	mul.w	r3, sl, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	4602      	mov	r2, r0
 8001bd0:	fbaa 1202 	umull	r1, r2, sl, r2
 8001bd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bd6:	460a      	mov	r2, r1
 8001bd8:	623a      	str	r2, [r7, #32]
 8001bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bdc:	4413      	add	r3, r2
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bea:	f5c3 639e 	rsb	r3, r3, #1264	@ 0x4f0
 8001bee:	3306      	adds	r3, #6
 8001bf0:	17da      	asrs	r2, r3, #31
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	617a      	str	r2, [r7, #20]
 8001bf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bfa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bfe:	f7fe ff33 	bl	8000a68 <__aeabi_uldivmod>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c0e:	f7fe ff2b 	bl	8000a68 <__aeabi_uldivmod>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001c1a:	e03f      	b.n	8001c9c <icm20948_set_gyro_sf+0x164>
  }
  else
  {
    ResultLL = (MagicConstant * (long long)(1ULL << gyro_level) * (1 + div) / (1270 + pll) / MagicConstantScale);
 8001c1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c22:	f1a1 0420 	sub.w	r4, r1, #32
 8001c26:	f1c1 0020 	rsb	r0, r1, #32
 8001c2a:	fa03 f901 	lsl.w	r9, r3, r1
 8001c2e:	fa02 f404 	lsl.w	r4, r2, r4
 8001c32:	ea49 0904 	orr.w	r9, r9, r4
 8001c36:	fa22 f000 	lsr.w	r0, r2, r0
 8001c3a:	ea49 0900 	orr.w	r9, r9, r0
 8001c3e:	fa02 f801 	lsl.w	r8, r2, r1
 8001c42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c46:	3301      	adds	r3, #1
 8001c48:	17da      	asrs	r2, r3, #31
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	60fa      	str	r2, [r7, #12]
 8001c4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c52:	4603      	mov	r3, r0
 8001c54:	fb03 f209 	mul.w	r2, r3, r9
 8001c58:	460b      	mov	r3, r1
 8001c5a:	fb08 f303 	mul.w	r3, r8, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	4602      	mov	r2, r0
 8001c62:	fba8 5602 	umull	r5, r6, r8, r2
 8001c66:	4433      	add	r3, r6
 8001c68:	461e      	mov	r6, r3
 8001c6a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001c6e:	f203 43f6 	addw	r3, r3, #1270	@ 0x4f6
 8001c72:	17da      	asrs	r2, r3, #31
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	4631      	mov	r1, r6
 8001c80:	f7fe fef2 	bl	8000a68 <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c90:	f7fe feea 	bl	8000a68 <__aeabi_uldivmod>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  /*
	    In above deprecated FP version, worst case arguments can produce a result that overflows a signed long.
	    Here, for such cases, we emulate the FP behavior of setting the result to the maximum positive value, as
	    the compiler's conversion of a u64 to an s32 is simple truncation of the u64's high half, sadly....
	*/
  if (ResultLL > 0x7FFFFFFF)
 8001c9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ca0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001ca4:	f173 0300 	sbcs.w	r3, r3, #0
 8001ca8:	d303      	bcc.n	8001cb2 <icm20948_set_gyro_sf+0x17a>
    gyro_sf = 0x7FFFFFFF;
 8001caa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001cae:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cb0:	e001      	b.n	8001cb6 <icm20948_set_gyro_sf+0x17e>
  else
    gyro_sf = (long)ResultLL;
 8001cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb4:	657b      	str	r3, [r7, #84]	@ 0x54

  // Finally, write the value to the DMP GYRO_SF register
  unsigned char gyro_sf_reg[4];
  gyro_sf_reg[0] = (unsigned char)(gyro_sf >> 24);
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb8:	161b      	asrs	r3, r3, #24
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  gyro_sf_reg[1] = (unsigned char)(gyro_sf >> 16);
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc2:	141b      	asrs	r3, r3, #16
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  gyro_sf_reg[2] = (unsigned char)(gyro_sf >> 8);
 8001cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ccc:	121b      	asrs	r3, r3, #8
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  gyro_sf_reg[3] = (unsigned char)(gyro_sf & 0xff);
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  icm20948_write_mem(GYRO_SF, 4, (const unsigned char*)&gyro_sf_reg);
 8001cdc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	f44f 7098 	mov.w	r0, #304	@ 0x130
 8001ce8:	f7ff fe5e 	bl	80019a8 <icm20948_write_mem>

  return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	375c      	adds	r7, #92	@ 0x5c
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cf8:	566675af 	.word	0x566675af
 8001cfc:	0000f083 	.word	0x0000f083
 8001d00:	20000108 	.word	0x20000108
 8001d04:	000186a0 	.word	0x000186a0

08001d08 <icm20948_enable_DMP_sensor>:


int8_t icm20948_enable_DMP_sensor(enum inv_icm20948_sensor sensor, int state)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  uint32_t _enabled_Android_0 = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t _enabled_Android_1 = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  uint16_t inv_event_control = 0; // Use this to store the value for MOTION_EVENT_CTL
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	83fb      	strh	r3, [r7, #30]
  uint16_t data_rdy_status = 0;   // Use this to store the value for DATA_RDY_STATUS
 8001d20:	2300      	movs	r3, #0
 8001d22:	83bb      	strh	r3, [r7, #28]

  uint8_t androidSensor = sensor_type_2_android_sensor(sensor); // Convert sensor from enum inv_icm20948_sensor to Android numbering
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f836 	bl	8000d98 <sensor_type_2_android_sensor>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	747b      	strb	r3, [r7, #17]

  if (androidSensor >= ANDROID_SENSOR_NUM_MAX)
 8001d30:	7c7b      	ldrb	r3, [r7, #17]
 8001d32:	2b2b      	cmp	r3, #43	@ 0x2b
 8001d34:	d902      	bls.n	8001d3c <icm20948_enable_DMP_sensor+0x34>
    return -1; // Bail if the sensor is not supported (TO DO: Support B2S etc)
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d3a:	e12d      	b.n	8001f98 <icm20948_enable_DMP_sensor+0x290>

  // Convert the Android sensor into a bit mask for DATA_OUT_CTL1
  uint16_t delta = inv_androidSensor_to_control_bits[androidSensor];
 8001d3c:	7c7b      	ldrb	r3, [r7, #17]
 8001d3e:	4a98      	ldr	r2, [pc, #608]	@ (8001fa0 <icm20948_enable_DMP_sensor+0x298>)
 8001d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d44:	837b      	strh	r3, [r7, #26]
  if (delta == 0xFFFF)
 8001d46:	8b7b      	ldrh	r3, [r7, #26]
 8001d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d102      	bne.n	8001d56 <icm20948_enable_DMP_sensor+0x4e>
    return -1; // Bail if the sensor is not supported
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d54:	e120      	b.n	8001f98 <icm20948_enable_DMP_sensor+0x290>

  // Convert the Android sensor number into a bitmask and set or clear that bit in _enabled_Android_0 / _enabled_Android_1
  unsigned long androidSensorAsBitMask;
  if (androidSensor < 32) // Sensors 0-31
 8001d56:	7c7b      	ldrb	r3, [r7, #17]
 8001d58:	2b1f      	cmp	r3, #31
 8001d5a:	d812      	bhi.n	8001d82 <icm20948_enable_DMP_sensor+0x7a>
  {
    androidSensorAsBitMask = 1L << androidSensor;
 8001d5c:	7c7b      	ldrb	r3, [r7, #17]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	60fb      	str	r3, [r7, #12]
    if (state == 0) // Should we disable the sensor?
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <icm20948_enable_DMP_sensor+0x70>
    {
      _enabled_Android_0 &= ~androidSensorAsBitMask; // Clear the bit to disable the sensor
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d72:	4013      	ands	r3, r2
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d76:	e017      	b.n	8001da8 <icm20948_enable_DMP_sensor+0xa0>
    }
    else
    {
      _enabled_Android_0 |= androidSensorAsBitMask; // Set the bit to enable the sensor
 8001d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d80:	e012      	b.n	8001da8 <icm20948_enable_DMP_sensor+0xa0>
    }
  }
  else // Sensors 32-
  {
    androidSensorAsBitMask = 1L << (androidSensor - 32);
 8001d82:	7c7b      	ldrb	r3, [r7, #17]
 8001d84:	3b20      	subs	r3, #32
 8001d86:	2201      	movs	r2, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	60fb      	str	r3, [r7, #12]
    if (state == 0) // Should we disable the sensor?
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <icm20948_enable_DMP_sensor+0x98>
    {
      _enabled_Android_1 &= ~androidSensorAsBitMask; // Clear the bit to disable the sensor
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	623b      	str	r3, [r7, #32]
 8001d9e:	e003      	b.n	8001da8 <icm20948_enable_DMP_sensor+0xa0>
    }
    else
    {
      _enabled_Android_1 |= androidSensorAsBitMask; // Set the bit to enable the sensor
 8001da0:	6a3a      	ldr	r2, [r7, #32]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	623b      	str	r3, [r7, #32]
    }
  }

  // Now we know androidSensor is valid, reconstruct the value for DATA_OUT_CTL1 from _enabled_Android_0 and _enabled_Android_0
  delta = 0; // Clear delta
 8001da8:	2300      	movs	r3, #0
 8001daa:	837b      	strh	r3, [r7, #26]
  for (int i = 0; i < 32; i++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e057      	b.n	8001e62 <icm20948_enable_DMP_sensor+0x15a>
  {
    androidSensorAsBitMask = 1L << i;
 8001db2:	2201      	movs	r2, #1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	60fb      	str	r3, [r7, #12]
    if ((_enabled_Android_0 & androidSensorAsBitMask) > 0) // Check if the Android sensor (0-31) is enabled
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <icm20948_enable_DMP_sensor+0xcc>
    {
      delta |= inv_androidSensor_to_control_bits[i]; // If it is, or the required bits into delta
 8001dc6:	4a76      	ldr	r2, [pc, #472]	@ (8001fa0 <icm20948_enable_DMP_sensor+0x298>)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001dce:	8b7b      	ldrh	r3, [r7, #26]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	837b      	strh	r3, [r7, #26]
    }
    if ((_enabled_Android_1 & androidSensorAsBitMask) > 0) // Check if the Android sensor (32-) is enabled
 8001dd4:	6a3a      	ldr	r2, [r7, #32]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <icm20948_enable_DMP_sensor+0xe6>
    {
      delta |= inv_androidSensor_to_control_bits[i + 32]; // If it is, or the required bits into delta
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3320      	adds	r3, #32
 8001de2:	4a6f      	ldr	r2, [pc, #444]	@ (8001fa0 <icm20948_enable_DMP_sensor+0x298>)
 8001de4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001de8:	8b7b      	ldrh	r3, [r7, #26]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	837b      	strh	r3, [r7, #26]
    }
    // Also check which bits need to be set in the Data Ready Status and Motion Event Control registers
    // Compare to INV_NEEDS_ACCEL_MASK, INV_NEEDS_GYRO_MASK and INV_NEEDS_COMPASS_MASK
    if (((androidSensorAsBitMask & INV_NEEDS_ACCEL_MASK) > 0) || ((androidSensorAsBitMask & INV_NEEDS_ACCEL_MASK1) > 0))
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa4 <icm20948_enable_DMP_sensor+0x29c>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d104      	bne.n	8001e02 <icm20948_enable_DMP_sensor+0xfa>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f403 63dd 	and.w	r3, r3, #1768	@ 0x6e8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <icm20948_enable_DMP_sensor+0x10a>
    {
      data_rdy_status |= DMP_Data_ready_Accel;
 8001e02:	8bbb      	ldrh	r3, [r7, #28]
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	83bb      	strh	r3, [r7, #28]
      inv_event_control |= DMP_Motion_Event_Control_Accel_Calibr;
 8001e0a:	8bfb      	ldrh	r3, [r7, #30]
 8001e0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e10:	83fb      	strh	r3, [r7, #30]
    }
    if (((androidSensorAsBitMask & INV_NEEDS_GYRO_MASK) > 0) || ((androidSensorAsBitMask & INV_NEEDS_GYRO_MASK1) > 0))
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4b64      	ldr	r3, [pc, #400]	@ (8001fa8 <icm20948_enable_DMP_sensor+0x2a0>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <icm20948_enable_DMP_sensor+0x120>
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	f640 0318 	movw	r3, #2072	@ 0x818
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <icm20948_enable_DMP_sensor+0x130>
    {
      data_rdy_status |= DMP_Data_ready_Gyro;
 8001e28:	8bbb      	ldrh	r3, [r7, #28]
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	83bb      	strh	r3, [r7, #28]
      inv_event_control |= DMP_Motion_Event_Control_Gyro_Calibr;
 8001e30:	8bfb      	ldrh	r3, [r7, #30]
 8001e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e36:	83fb      	strh	r3, [r7, #30]
    }
    if (((androidSensorAsBitMask & INV_NEEDS_COMPASS_MASK) > 0) || ((androidSensorAsBitMask & INV_NEEDS_COMPASS_MASK1) > 0))
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fac <icm20948_enable_DMP_sensor+0x2a4>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d104      	bne.n	8001e4c <icm20948_enable_DMP_sensor+0x144>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0384 	and.w	r3, r3, #132	@ 0x84
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d007      	beq.n	8001e5c <icm20948_enable_DMP_sensor+0x154>
    {
      data_rdy_status |= DMP_Data_ready_Secondary_Compass;
 8001e4c:	8bbb      	ldrh	r3, [r7, #28]
 8001e4e:	f043 0308 	orr.w	r3, r3, #8
 8001e52:	83bb      	strh	r3, [r7, #28]
      inv_event_control |= DMP_Motion_Event_Control_Compass_Calibr;
 8001e54:	8bfb      	ldrh	r3, [r7, #30]
 8001e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e5a:	83fb      	strh	r3, [r7, #30]
  for (int i = 0; i < 32; i++)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b1f      	cmp	r3, #31
 8001e66:	dda4      	ble.n	8001db2 <icm20948_enable_DMP_sensor+0xaa>
  {
    return result;
  }*/

  // Check if Accel, Gyro/Gyro_Calibr or Compass_Calibr/Quat9/GeoMag/Compass are to be enabled. If they are then we need to request the accuracy data via header2.
  uint16_t delta2 = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	827b      	strh	r3, [r7, #18]
  if ((delta & DMP_Data_Output_Control_1_Accel) > 0)
 8001e6c:	8b7b      	ldrh	r3, [r7, #26]
 8001e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	dd03      	ble.n	8001e7e <icm20948_enable_DMP_sensor+0x176>
  {
    delta2 |= DMP_Data_Output_Control_2_Accel_Accuracy;
 8001e76:	8a7b      	ldrh	r3, [r7, #18]
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e7c:	827b      	strh	r3, [r7, #18]
  }
  if (((delta & DMP_Data_Output_Control_1_Gyro_Calibr) > 0) || ((delta & DMP_Data_Output_Control_1_Gyro) > 0))
 8001e7e:	8b7b      	ldrh	r3, [r7, #26]
 8001e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	dc04      	bgt.n	8001e92 <icm20948_enable_DMP_sensor+0x18a>
 8001e88:	8b7b      	ldrh	r3, [r7, #26]
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	dd03      	ble.n	8001e9a <icm20948_enable_DMP_sensor+0x192>
  {
    delta2 |= DMP_Data_Output_Control_2_Gyro_Accuracy;
 8001e92:	8a7b      	ldrh	r3, [r7, #18]
 8001e94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e98:	827b      	strh	r3, [r7, #18]
  }
  if (((delta & DMP_Data_Output_Control_1_Compass_Calibr) > 0) || ((delta & DMP_Data_Output_Control_1_Compass) > 0) || ((delta & DMP_Data_Output_Control_1_Quat9) > 0) || ((delta & DMP_Data_Output_Control_1_Geomag) > 0))
 8001e9a:	8b7b      	ldrh	r3, [r7, #26]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	dc0e      	bgt.n	8001ec2 <icm20948_enable_DMP_sensor+0x1ba>
 8001ea4:	8b7b      	ldrh	r3, [r7, #26]
 8001ea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	dc09      	bgt.n	8001ec2 <icm20948_enable_DMP_sensor+0x1ba>
 8001eae:	8b7b      	ldrh	r3, [r7, #26]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	dc04      	bgt.n	8001ec2 <icm20948_enable_DMP_sensor+0x1ba>
 8001eb8:	8b7b      	ldrh	r3, [r7, #26]
 8001eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	dd03      	ble.n	8001eca <icm20948_enable_DMP_sensor+0x1c2>
  {
    delta2 |= DMP_Data_Output_Control_2_Compass_Accuracy;
 8001ec2:	8a7b      	ldrh	r3, [r7, #18]
 8001ec4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ec8:	827b      	strh	r3, [r7, #18]
  }
  // TO DO: Add DMP_Data_Output_Control_2_Pickup etc. if required

  // Write the sensor control bits into memory address DATA_OUT_CTL1
  unsigned char data_output_control_reg[2];
  data_output_control_reg[0] = (unsigned char)(delta >> 8);
 8001eca:	8b7b      	ldrh	r3, [r7, #26]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	723b      	strb	r3, [r7, #8]
  data_output_control_reg[1] = (unsigned char)(delta & 0xff);
 8001ed4:	8b7b      	ldrh	r3, [r7, #26]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	727b      	strb	r3, [r7, #9]
  
  icm20948_write_mem(DATA_OUT_CTL1, 2, (const unsigned char *)&data_output_control_reg);
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	2040      	movs	r0, #64	@ 0x40
 8001ee4:	f7ff fd60 	bl	80019a8 <icm20948_write_mem>


  // Write the 'header2' sensor control bits into memory address DATA_OUT_CTL2
  data_output_control_reg[0] = (unsigned char)(delta2 >> 8);
 8001ee8:	8a7b      	ldrh	r3, [r7, #18]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	723b      	strb	r3, [r7, #8]
  data_output_control_reg[1] = (unsigned char)(delta2 & 0xff);
 8001ef2:	8a7b      	ldrh	r3, [r7, #18]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	727b      	strb	r3, [r7, #9]
  
  icm20948_write_mem(DATA_OUT_CTL2, 2, (const unsigned char *)&data_output_control_reg);
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	461a      	mov	r2, r3
 8001efe:	2102      	movs	r1, #2
 8001f00:	2042      	movs	r0, #66	@ 0x42
 8001f02:	f7ff fd51 	bl	80019a8 <icm20948_write_mem>


  // Set the DATA_RDY_STATUS register
  data_output_control_reg[0] = (unsigned char)(data_rdy_status >> 8);
 8001f06:	8bbb      	ldrh	r3, [r7, #28]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	723b      	strb	r3, [r7, #8]
  data_output_control_reg[1] = (unsigned char)(data_rdy_status & 0xff);
 8001f10:	8bbb      	ldrh	r3, [r7, #28]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	727b      	strb	r3, [r7, #9]
  
  icm20948_write_mem(DATA_RDY_STATUS, 2, (const unsigned char *)&data_output_control_reg);
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	208a      	movs	r0, #138	@ 0x8a
 8001f20:	f7ff fd42 	bl	80019a8 <icm20948_write_mem>


  // Check which extra bits need to be set in the Motion Event Control register
  if ((delta & DMP_Data_Output_Control_1_Quat9) > 0)
 8001f24:	8b7b      	ldrh	r3, [r7, #26]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	dd03      	ble.n	8001f36 <icm20948_enable_DMP_sensor+0x22e>
  {
    inv_event_control |= DMP_Motion_Event_Control_9axis;
 8001f2e:	8bfb      	ldrh	r3, [r7, #30]
 8001f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f34:	83fb      	strh	r3, [r7, #30]
  }
  if (((delta & DMP_Data_Output_Control_1_Step_Detector) > 0) || ((delta & DMP_Data_Output_Control_1_Step_Ind_0) > 0) || ((delta & DMP_Data_Output_Control_1_Step_Ind_1) > 0) || ((delta & DMP_Data_Output_Control_1_Step_Ind_2) > 0))
 8001f36:	8b7b      	ldrh	r3, [r7, #26]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	dc0e      	bgt.n	8001f5e <icm20948_enable_DMP_sensor+0x256>
 8001f40:	8b7b      	ldrh	r3, [r7, #26]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	dc09      	bgt.n	8001f5e <icm20948_enable_DMP_sensor+0x256>
 8001f4a:	8b7b      	ldrh	r3, [r7, #26]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dc04      	bgt.n	8001f5e <icm20948_enable_DMP_sensor+0x256>
 8001f54:	8b7b      	ldrh	r3, [r7, #26]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	dd03      	ble.n	8001f66 <icm20948_enable_DMP_sensor+0x25e>
  {
    inv_event_control |= DMP_Motion_Event_Control_Pedometer_Interrupt;
 8001f5e:	8bfb      	ldrh	r3, [r7, #30]
 8001f60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f64:	83fb      	strh	r3, [r7, #30]
  }
  if ((delta & DMP_Data_Output_Control_1_Geomag) > 0)
 8001f66:	8b7b      	ldrh	r3, [r7, #26]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	dd03      	ble.n	8001f78 <icm20948_enable_DMP_sensor+0x270>
  {
    inv_event_control |= DMP_Motion_Event_Control_Geomag;
 8001f70:	8bfb      	ldrh	r3, [r7, #30]
 8001f72:	f043 0308 	orr.w	r3, r3, #8
 8001f76:	83fb      	strh	r3, [r7, #30]
  }

  // Set the MOTION_EVENT_CTL register
  data_output_control_reg[0] = (unsigned char)(inv_event_control >> 8);
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	723b      	strb	r3, [r7, #8]
  data_output_control_reg[1] = (unsigned char)(inv_event_control & 0xff);
 8001f82:	8bfb      	ldrh	r3, [r7, #30]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	727b      	strb	r3, [r7, #9]
  
  icm20948_write_mem(MOTION_EVENT_CTL, 2, (const unsigned char *)&data_output_control_reg);
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2102      	movs	r1, #2
 8001f90:	204e      	movs	r0, #78	@ 0x4e
 8001f92:	f7ff fd09 	bl	80019a8 <icm20948_write_mem>

  ICM_20948_low_power(pdev, true); // Put chip into low power state

  */

  return 0;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3728      	adds	r7, #40	@ 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	0800ea7c 	.word	0x0800ea7c
 8001fa4:	e29e8e0a 	.word	0xe29e8e0a
 8001fa8:	e6018e18 	.word	0xe6018e18
 8001fac:	8310480c 	.word	0x8310480c

08001fb0 <icm20948_set_DMP_sensor_period>:


int8_t icm20948_set_DMP_sensor_period(enum DMP_ODR_Registers odr_reg, uint16_t interval)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460a      	mov	r2, r1
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	80bb      	strh	r3, [r7, #4]

  // During run-time, if an ODR is changed, the corresponding rate counter must be reset.
  // To reset, write 2-byte {0,0} to DMP using keys below for a particular sensor:

  unsigned char odr_reg_val[2];
  odr_reg_val[0] = (unsigned char)(interval >> 8);
 8001fc0:	88bb      	ldrh	r3, [r7, #4]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	733b      	strb	r3, [r7, #12]
  odr_reg_val[1] = (unsigned char)(interval & 0xff);
 8001fca:	88bb      	ldrh	r3, [r7, #4]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	737b      	strb	r3, [r7, #13]

  unsigned char odr_count_zero[2] = {0x00, 0x00};
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	813b      	strh	r3, [r7, #8]
  //ICM_20948_sleep(false); // Make sure chip is awake

  //ICM_20948_low_power(false); // Make sure chip is not in low power state


  switch (odr_reg)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	3ba0      	subs	r3, #160	@ 0xa0
 8001fd8:	2b1e      	cmp	r3, #30
 8001fda:	f200 80e6 	bhi.w	80021aa <icm20948_set_DMP_sensor_period+0x1fa>
 8001fde:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe4 <icm20948_set_DMP_sensor_period+0x34>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	080020bb 	.word	0x080020bb
 8001fe8:	080021ab 	.word	0x080021ab
 8001fec:	080021ab 	.word	0x080021ab
 8001ff0:	080021ab 	.word	0x080021ab
 8001ff4:	080020d9 	.word	0x080020d9
 8001ff8:	080021ab 	.word	0x080021ab
 8001ffc:	080021ab 	.word	0x080021ab
 8002000:	080021ab 	.word	0x080021ab
 8002004:	080020f7 	.word	0x080020f7
 8002008:	080021ab 	.word	0x080021ab
 800200c:	080021ab 	.word	0x080021ab
 8002010:	080021ab 	.word	0x080021ab
 8002014:	08002115 	.word	0x08002115
 8002018:	080021ab 	.word	0x080021ab
 800201c:	080021ab 	.word	0x080021ab
 8002020:	080021ab 	.word	0x080021ab
 8002024:	080021ab 	.word	0x080021ab
 8002028:	080021ab 	.word	0x080021ab
 800202c:	08002133 	.word	0x08002133
 8002030:	080021ab 	.word	0x080021ab
 8002034:	08002061 	.word	0x08002061
 8002038:	080021ab 	.word	0x080021ab
 800203c:	08002151 	.word	0x08002151
 8002040:	080021ab 	.word	0x080021ab
 8002044:	0800207f 	.word	0x0800207f
 8002048:	080021ab 	.word	0x080021ab
 800204c:	0800216f 	.word	0x0800216f
 8002050:	080021ab 	.word	0x080021ab
 8002054:	0800209d 	.word	0x0800209d
 8002058:	080021ab 	.word	0x080021ab
 800205c:	0800218d 	.word	0x0800218d
  {
  case DMP_ODR_Reg_Cpass_Calibr:
  {
    icm20948_write_mem(ODR_CPASS_CALIBR, 2, (const unsigned char *)&odr_reg_val);
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	461a      	mov	r2, r3
 8002066:	2102      	movs	r1, #2
 8002068:	20b4      	movs	r0, #180	@ 0xb4
 800206a:	f7ff fc9d 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_CPASS_CALIBR, 2, (const unsigned char *)&odr_count_zero);
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	461a      	mov	r2, r3
 8002074:	2102      	movs	r1, #2
 8002076:	2094      	movs	r0, #148	@ 0x94
 8002078:	f7ff fc96 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 800207c:	e096      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  case DMP_ODR_Reg_Gyro_Calibr:
  {
    icm20948_write_mem(ODR_GYRO_CALIBR, 2, (const unsigned char *)&odr_reg_val);
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	461a      	mov	r2, r3
 8002084:	2102      	movs	r1, #2
 8002086:	20b8      	movs	r0, #184	@ 0xb8
 8002088:	f7ff fc8e 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_GYRO_CALIBR, 2, (const unsigned char *)&odr_count_zero);
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	461a      	mov	r2, r3
 8002092:	2102      	movs	r1, #2
 8002094:	2098      	movs	r0, #152	@ 0x98
 8002096:	f7ff fc87 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 800209a:	e087      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  case DMP_ODR_Reg_Pressure:
  {
    icm20948_write_mem(ODR_PRESSURE, 2, (const unsigned char *)&odr_reg_val);
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	461a      	mov	r2, r3
 80020a2:	2102      	movs	r1, #2
 80020a4:	20bc      	movs	r0, #188	@ 0xbc
 80020a6:	f7ff fc7f 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_PRESSURE, 2, (const unsigned char *)&odr_count_zero);
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	461a      	mov	r2, r3
 80020b0:	2102      	movs	r1, #2
 80020b2:	209c      	movs	r0, #156	@ 0x9c
 80020b4:	f7ff fc78 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 80020b8:	e078      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  case DMP_ODR_Reg_Geomag:
  {
    icm20948_write_mem(ODR_GEOMAG, 2, (const unsigned char *)&odr_reg_val);
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	461a      	mov	r2, r3
 80020c0:	2102      	movs	r1, #2
 80020c2:	20a0      	movs	r0, #160	@ 0xa0
 80020c4:	f7ff fc70 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_GEOMAG, 2, (const unsigned char *)&odr_count_zero);
 80020c8:	f107 0308 	add.w	r3, r7, #8
 80020cc:	461a      	mov	r2, r3
 80020ce:	2102      	movs	r1, #2
 80020d0:	2080      	movs	r0, #128	@ 0x80
 80020d2:	f7ff fc69 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 80020d6:	e069      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  case DMP_ODR_Reg_PQuat6:
  {
    icm20948_write_mem(ODR_PQUAT6, 2, (const unsigned char *)&odr_reg_val);
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	461a      	mov	r2, r3
 80020de:	2102      	movs	r1, #2
 80020e0:	20a4      	movs	r0, #164	@ 0xa4
 80020e2:	f7ff fc61 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_PQUAT6, 2, (const unsigned char *)&odr_count_zero);
 80020e6:	f107 0308 	add.w	r3, r7, #8
 80020ea:	461a      	mov	r2, r3
 80020ec:	2102      	movs	r1, #2
 80020ee:	2084      	movs	r0, #132	@ 0x84
 80020f0:	f7ff fc5a 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 80020f4:	e05a      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  case DMP_ODR_Reg_Quat9:
  {
    icm20948_write_mem(ODR_QUAT9, 2, (const unsigned char *)&odr_reg_val);
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	461a      	mov	r2, r3
 80020fc:	2102      	movs	r1, #2
 80020fe:	20a8      	movs	r0, #168	@ 0xa8
 8002100:	f7ff fc52 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_QUAT9, 2, (const unsigned char *)&odr_count_zero);
 8002104:	f107 0308 	add.w	r3, r7, #8
 8002108:	461a      	mov	r2, r3
 800210a:	2102      	movs	r1, #2
 800210c:	2088      	movs	r0, #136	@ 0x88
 800210e:	f7ff fc4b 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 8002112:	e04b      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  case DMP_ODR_Reg_Quat6:
  {
    icm20948_write_mem(ODR_QUAT6, 2, (const unsigned char *)&odr_reg_val);
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	461a      	mov	r2, r3
 800211a:	2102      	movs	r1, #2
 800211c:	20ac      	movs	r0, #172	@ 0xac
 800211e:	f7ff fc43 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_QUAT6, 2, (const unsigned char *)&odr_count_zero);
 8002122:	f107 0308 	add.w	r3, r7, #8
 8002126:	461a      	mov	r2, r3
 8002128:	2102      	movs	r1, #2
 800212a:	208c      	movs	r0, #140	@ 0x8c
 800212c:	f7ff fc3c 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 8002130:	e03c      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  case DMP_ODR_Reg_ALS:
  {
    icm20948_write_mem(ODR_ALS, 2, (const unsigned char *)&odr_reg_val);
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	461a      	mov	r2, r3
 8002138:	2102      	movs	r1, #2
 800213a:	20b2      	movs	r0, #178	@ 0xb2
 800213c:	f7ff fc34 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_ALS, 2, (const unsigned char *)&odr_count_zero);
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	461a      	mov	r2, r3
 8002146:	2102      	movs	r1, #2
 8002148:	2092      	movs	r0, #146	@ 0x92
 800214a:	f7ff fc2d 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 800214e:	e02d      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  case DMP_ODR_Reg_Cpass:
  {
    icm20948_write_mem(ODR_CPASS, 2, (const unsigned char *)&odr_reg_val);
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	461a      	mov	r2, r3
 8002156:	2102      	movs	r1, #2
 8002158:	20b6      	movs	r0, #182	@ 0xb6
 800215a:	f7ff fc25 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_CPASS, 2, (const unsigned char *)&odr_count_zero);
 800215e:	f107 0308 	add.w	r3, r7, #8
 8002162:	461a      	mov	r2, r3
 8002164:	2102      	movs	r1, #2
 8002166:	2096      	movs	r0, #150	@ 0x96
 8002168:	f7ff fc1e 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 800216c:	e01e      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  case DMP_ODR_Reg_Gyro:
  {
    icm20948_write_mem(ODR_GYRO, 2, (const unsigned char *)&odr_reg_val);
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	461a      	mov	r2, r3
 8002174:	2102      	movs	r1, #2
 8002176:	20ba      	movs	r0, #186	@ 0xba
 8002178:	f7ff fc16 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_GYRO, 2, (const unsigned char *)&odr_count_zero);
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	461a      	mov	r2, r3
 8002182:	2102      	movs	r1, #2
 8002184:	209a      	movs	r0, #154	@ 0x9a
 8002186:	f7ff fc0f 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 800218a:	e00f      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  case DMP_ODR_Reg_Accel:
  {
    icm20948_write_mem(ODR_ACCEL, 2, (const unsigned char *)&odr_reg_val);
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	461a      	mov	r2, r3
 8002192:	2102      	movs	r1, #2
 8002194:	20be      	movs	r0, #190	@ 0xbe
 8002196:	f7ff fc07 	bl	80019a8 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_ACCEL, 2, (const unsigned char *)&odr_count_zero);
 800219a:	f107 0308 	add.w	r3, r7, #8
 800219e:	461a      	mov	r2, r3
 80021a0:	2102      	movs	r1, #2
 80021a2:	209e      	movs	r0, #158	@ 0x9e
 80021a4:	f7ff fc00 	bl	80019a8 <icm20948_write_mem>
  }
  break;
 80021a8:	e000      	b.n	80021ac <icm20948_set_DMP_sensor_period+0x1fc>
  default:
    ICM_20948_Stat_InvalDMPRegister;
    break;
 80021aa:	bf00      	nop
  }

  //ICM_20948_low_power(true); // Put chip into low power state

  return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop

080021b8 <icm20948_get_FIFO_count>:


int8_t icm20948_get_FIFO_count(uint16_t *count)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af04      	add	r7, sp, #16
 80021be:	6078      	str	r0, [r7, #4]
  ICM_20948_FIFO_COUNTH_t ctrlh;
  ICM_20948_FIFO_COUNTL_t ctrll;
  
  icm20948_set_user_bank(0);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7fe fdc9 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_COUNT_H, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrlh, sizeof(ICM_20948_FIFO_COUNTH_t), 1000);
 80021c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	2301      	movs	r3, #1
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	2270      	movs	r2, #112	@ 0x70
 80021da:	21d0      	movs	r1, #208	@ 0xd0
 80021dc:	4812      	ldr	r0, [pc, #72]	@ (8002228 <icm20948_get_FIFO_count+0x70>)
 80021de:	f003 fa91 	bl	8005704 <HAL_I2C_Mem_Read>
  ctrlh.FIFO_COUNTH &= 0x1F; // Datasheet says "FIFO_CNT[12:8]"
 80021e2:	7b3b      	ldrb	r3, [r7, #12]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_COUNT_L, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrll, sizeof(ICM_20948_FIFO_COUNTL_t), 1000);
 80021ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f0:	9302      	str	r3, [sp, #8]
 80021f2:	2301      	movs	r3, #1
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2301      	movs	r3, #1
 80021fe:	2271      	movs	r2, #113	@ 0x71
 8002200:	21d0      	movs	r1, #208	@ 0xd0
 8002202:	4809      	ldr	r0, [pc, #36]	@ (8002228 <icm20948_get_FIFO_count+0x70>)
 8002204:	f003 fa7e 	bl	8005704 <HAL_I2C_Mem_Read>


  *count = (((uint16_t)ctrlh.FIFO_COUNTH) << 8) | (uint16_t)ctrll.FIFO_COUNTL;
 8002208:	7b3b      	ldrb	r3, [r7, #12]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	b21a      	sxth	r2, r3
 800220e:	7a3b      	ldrb	r3, [r7, #8]
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21b      	sxth	r3, r3
 8002216:	b29a      	uxth	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	801a      	strh	r2, [r3, #0]

  return 0;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000108 	.word	0x20000108

0800222c <icm20948_read_FIFO>:


int8_t icm20948_read_FIFO(uint8_t *data, uint8_t len)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af04      	add	r7, sp, #16
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
  icm20948_set_user_bank(0);
 8002238:	2000      	movs	r0, #0
 800223a:	f7fe fd8d 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_R_W, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	b29b      	uxth	r3, r3
 8002242:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002246:	9202      	str	r2, [sp, #8]
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2301      	movs	r3, #1
 8002250:	2272      	movs	r2, #114	@ 0x72
 8002252:	21d0      	movs	r1, #208	@ 0xd0
 8002254:	4803      	ldr	r0, [pc, #12]	@ (8002264 <icm20948_read_FIFO+0x38>)
 8002256:	f003 fa55 	bl	8005704 <HAL_I2C_Mem_Read>

  return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000108 	.word	0x20000108

08002268 <icm20948_read_DMP_data>:


int8_t icm20948_read_DMP_data(icm_20948_DMP_data_t *data)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b09e      	sub	sp, #120	@ 0x78
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint8_t fifoBytes[icm_20948_DMP_Maximum_Bytes]; // Interim storage for the FIFO data

  // Check how much data is in the FIFO
  uint16_t fifo_count;
  icm20948_get_FIFO_count(&fifo_count);
 8002270:	f107 030e 	add.w	r3, r7, #14
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff9f 	bl	80021b8 <icm20948_get_FIFO_count>


  if (fifo_count < icm_20948_DMP_Header_Bytes) // Has a 2-byte header arrived?
 800227a:	89fb      	ldrh	r3, [r7, #14]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d803      	bhi.n	8002288 <icm20948_read_DMP_data+0x20>
    return -1;     // Bail if no header is available
 8002280:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002284:	f000 bc6b 	b.w	8002b5e <icm20948_read_DMP_data+0x8f6>

  // Read the header (2 bytes)
  data->header = 0; // Clear the existing header
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	801a      	strh	r2, [r3, #0]
  uint16_t aShort = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Header_Bytes);
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	2102      	movs	r1, #2
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ffc6 	bl	800222c <icm20948_read_FIFO>

  for (int i = 0; i < icm_20948_DMP_Header_Bytes; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80022a4:	e015      	b.n	80022d2 <icm20948_read_DMP_data+0x6a>
  {
    aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8)); // MSB first
 80022a6:	f107 0210 	add.w	r2, r7, #16
 80022aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022ac:	4413      	add	r3, r2
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022b4:	f1c3 0301 	rsb	r3, r3, #1
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	b21a      	sxth	r2, r3
 80022c0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  for (int i = 0; i < icm_20948_DMP_Header_Bytes; i++)
 80022cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022ce:	3301      	adds	r3, #1
 80022d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80022d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	dde6      	ble.n	80022a6 <icm20948_read_DMP_data+0x3e>
  }
  data->header = aShort;                    // Store the header in data->header
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80022de:	801a      	strh	r2, [r3, #0]
  fifo_count -= icm_20948_DMP_Header_Bytes; // Decrement the count
 80022e0:	89fb      	ldrh	r3, [r7, #14]
 80022e2:	3b02      	subs	r3, #2
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	81fb      	strh	r3, [r7, #14]

  // If the header indicates a header2 is present then read that now
  data->header2 = 0;                                  // Clear the existing header2
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	805a      	strh	r2, [r3, #2]
  if ((data->header & DMP_header_bitmap_Header2) > 0) // If the header2 bit is set
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	dd3b      	ble.n	8002372 <icm20948_read_DMP_data+0x10a>
  {
    if (fifo_count < icm_20948_DMP_Header2_Bytes) // Check if we need to read the FIFO count again
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d804      	bhi.n	800230a <icm20948_read_DMP_data+0xa2>
      icm20948_get_FIFO_count(&fifo_count);
 8002300:	f107 030e 	add.w	r3, r7, #14
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff57 	bl	80021b8 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Header2_Bytes)
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d803      	bhi.n	8002318 <icm20948_read_DMP_data+0xb0>
      return -1; // Bail if no header2 is available
 8002310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002314:	f000 bc23 	b.w	8002b5e <icm20948_read_DMP_data+0x8f6>
    // Read the header (2 bytes)
    aShort = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Header2_Bytes);
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	2102      	movs	r1, #2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff81 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Header2_Bytes; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800232e:	e015      	b.n	800235c <icm20948_read_DMP_data+0xf4>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 8002330:	f107 0210 	add.w	r2, r7, #16
 8002334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002336:	4413      	add	r3, r2
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800233e:	f1c3 0301 	rsb	r3, r3, #1
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	b21a      	sxth	r2, r3
 800234a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800234e:	4313      	orrs	r3, r2
 8002350:	b21b      	sxth	r3, r3
 8002352:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    for (int i = 0; i < icm_20948_DMP_Header2_Bytes; i++)
 8002356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002358:	3301      	adds	r3, #1
 800235a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800235c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800235e:	2b01      	cmp	r3, #1
 8002360:	dde6      	ble.n	8002330 <icm20948_read_DMP_data+0xc8>
    }
    data->header2 = aShort;                    // Store the header2 in data->header2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8002368:	805a      	strh	r2, [r3, #2]
    fifo_count -= icm_20948_DMP_Header2_Bytes; // Decrement the count
 800236a:	89fb      	ldrh	r3, [r7, #14]
 800236c:	3b02      	subs	r3, #2
 800236e:	b29b      	uxth	r3, r3
 8002370:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Accel) > 0) // case DMP_header_bitmap_Accel:
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800237a:	2b00      	cmp	r3, #0
 800237c:	dd2c      	ble.n	80023d8 <icm20948_read_DMP_data+0x170>
  {
    if (fifo_count < icm_20948_DMP_Raw_Accel_Bytes) // Check if we need to read the FIFO count again
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	2b05      	cmp	r3, #5
 8002382:	d804      	bhi.n	800238e <icm20948_read_DMP_data+0x126>
      icm20948_get_FIFO_count(&fifo_count);
 8002384:	f107 030e 	add.w	r3, r7, #14
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff15 	bl	80021b8 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Raw_Accel_Bytes)
 800238e:	89fb      	ldrh	r3, [r7, #14]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d801      	bhi.n	8002398 <icm20948_read_DMP_data+0x130>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002394:	230b      	movs	r3, #11
 8002396:	e3e2      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Raw_Accel_Bytes);
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	2106      	movs	r1, #6
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff44 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Raw_Accel_Bytes; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023a8:	e00f      	b.n	80023ca <icm20948_read_DMP_data+0x162>
    {
      data->Raw_Accel.Bytes[DMP_PQuat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 80023aa:	4a99      	ldr	r2, [pc, #612]	@ (8002610 <icm20948_read_DMP_data+0x3a8>)
 80023ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	f107 0110 	add.w	r1, r7, #16
 80023b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80023b8:	440a      	add	r2, r1
 80023ba:	7811      	ldrb	r1, [r2, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	460a      	mov	r2, r1
 80023c2:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < icm_20948_DMP_Raw_Accel_Bytes; i++)
 80023c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023c6:	3301      	adds	r3, #1
 80023c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	ddec      	ble.n	80023aa <icm20948_read_DMP_data+0x142>
    }
    fifo_count -= icm_20948_DMP_Raw_Accel_Bytes; // Decrement the count
 80023d0:	89fb      	ldrh	r3, [r7, #14]
 80023d2:	3b06      	subs	r3, #6
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Gyro) > 0) // case DMP_header_bitmap_Gyro:
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	dd2c      	ble.n	800243e <icm20948_read_DMP_data+0x1d6>
  {
    if (fifo_count < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes)) // Check if we need to read the FIFO count again
 80023e4:	89fb      	ldrh	r3, [r7, #14]
 80023e6:	2b0b      	cmp	r3, #11
 80023e8:	d804      	bhi.n	80023f4 <icm20948_read_DMP_data+0x18c>
      icm20948_get_FIFO_count(&fifo_count);
 80023ea:	f107 030e 	add.w	r3, r7, #14
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fee2 	bl	80021b8 <icm20948_get_FIFO_count>

    if (fifo_count < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes))
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	2b0b      	cmp	r3, #11
 80023f8:	d801      	bhi.n	80023fe <icm20948_read_DMP_data+0x196>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80023fa:	230b      	movs	r3, #11
 80023fc:	e3af      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes));
 80023fe:	f107 0310 	add.w	r3, r7, #16
 8002402:	210c      	movs	r1, #12
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff11 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes); i++)
 800240a:	2300      	movs	r3, #0
 800240c:	667b      	str	r3, [r7, #100]	@ 0x64
 800240e:	e00f      	b.n	8002430 <icm20948_read_DMP_data+0x1c8>
    {
      data->Raw_Gyro.Bytes[DMP_Raw_Gyro_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8002410:	4a80      	ldr	r2, [pc, #512]	@ (8002614 <icm20948_read_DMP_data+0x3ac>)
 8002412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002418:	f107 0110 	add.w	r1, r7, #16
 800241c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800241e:	440a      	add	r2, r1
 8002420:	7811      	ldrb	r1, [r2, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	460a      	mov	r2, r1
 8002428:	729a      	strb	r2, [r3, #10]
    for (int i = 0; i < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes); i++)
 800242a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800242c:	3301      	adds	r3, #1
 800242e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002432:	2b0b      	cmp	r3, #11
 8002434:	ddec      	ble.n	8002410 <icm20948_read_DMP_data+0x1a8>
    }
    fifo_count -= (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes); // Decrement the count
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	3b0c      	subs	r3, #12
 800243a:	b29b      	uxth	r3, r3
 800243c:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Compass) > 0) // case DMP_header_bitmap_Compass:
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002446:	2b00      	cmp	r3, #0
 8002448:	dd2c      	ble.n	80024a4 <icm20948_read_DMP_data+0x23c>
  {
    if (fifo_count < icm_20948_DMP_Compass_Bytes) // Check if we need to read the FIFO count again
 800244a:	89fb      	ldrh	r3, [r7, #14]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d804      	bhi.n	800245a <icm20948_read_DMP_data+0x1f2>
      icm20948_get_FIFO_count(&fifo_count);
 8002450:	f107 030e 	add.w	r3, r7, #14
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff feaf 	bl	80021b8 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Compass_Bytes)
 800245a:	89fb      	ldrh	r3, [r7, #14]
 800245c:	2b05      	cmp	r3, #5
 800245e:	d801      	bhi.n	8002464 <icm20948_read_DMP_data+0x1fc>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002460:	230b      	movs	r3, #11
 8002462:	e37c      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Compass_Bytes);
 8002464:	f107 0310 	add.w	r3, r7, #16
 8002468:	2106      	movs	r1, #6
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fede 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Compass_Bytes; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	663b      	str	r3, [r7, #96]	@ 0x60
 8002474:	e00f      	b.n	8002496 <icm20948_read_DMP_data+0x22e>
    {
      data->Compass.Bytes[DMP_PQuat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8002476:	4a66      	ldr	r2, [pc, #408]	@ (8002610 <icm20948_read_DMP_data+0x3a8>)
 8002478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	f107 0110 	add.w	r1, r7, #16
 8002482:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002484:	440a      	add	r2, r1
 8002486:	7811      	ldrb	r1, [r2, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	460a      	mov	r2, r1
 800248e:	759a      	strb	r2, [r3, #22]
    for (int i = 0; i < icm_20948_DMP_Compass_Bytes; i++)
 8002490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002492:	3301      	adds	r3, #1
 8002494:	663b      	str	r3, [r7, #96]	@ 0x60
 8002496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002498:	2b05      	cmp	r3, #5
 800249a:	ddec      	ble.n	8002476 <icm20948_read_DMP_data+0x20e>
    }
    fifo_count -= icm_20948_DMP_Compass_Bytes; // Decrement the count
 800249c:	89fb      	ldrh	r3, [r7, #14]
 800249e:	3b06      	subs	r3, #6
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_ALS) > 0) // case DMP_header_bitmap_ALS:
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	dd2a      	ble.n	8002506 <icm20948_read_DMP_data+0x29e>
  {
    if (fifo_count < icm_20948_DMP_ALS_Bytes) // Check if we need to read the FIFO count again
 80024b0:	89fb      	ldrh	r3, [r7, #14]
 80024b2:	2b07      	cmp	r3, #7
 80024b4:	d804      	bhi.n	80024c0 <icm20948_read_DMP_data+0x258>
      icm20948_get_FIFO_count(&fifo_count);
 80024b6:	f107 030e 	add.w	r3, r7, #14
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fe7c 	bl	80021b8 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_ALS_Bytes)
 80024c0:	89fb      	ldrh	r3, [r7, #14]
 80024c2:	2b07      	cmp	r3, #7
 80024c4:	d801      	bhi.n	80024ca <icm20948_read_DMP_data+0x262>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80024c6:	230b      	movs	r3, #11
 80024c8:	e349      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_ALS_Bytes);
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	2108      	movs	r1, #8
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff feab 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_ALS_Bytes; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024da:	e00d      	b.n	80024f8 <icm20948_read_DMP_data+0x290>
    {
      data->ALS[i] = fifoBytes[i];
 80024dc:	f107 0210 	add.w	r2, r7, #16
 80024e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e2:	4413      	add	r3, r2
 80024e4:	7819      	ldrb	r1, [r3, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024ea:	4413      	add	r3, r2
 80024ec:	331c      	adds	r3, #28
 80024ee:	460a      	mov	r2, r1
 80024f0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < icm_20948_DMP_ALS_Bytes; i++)
 80024f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024f4:	3301      	adds	r3, #1
 80024f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024fa:	2b07      	cmp	r3, #7
 80024fc:	ddee      	ble.n	80024dc <icm20948_read_DMP_data+0x274>
    }
    fifo_count -= icm_20948_DMP_ALS_Bytes; // Decrement the count
 80024fe:	89fb      	ldrh	r3, [r7, #14]
 8002500:	3b08      	subs	r3, #8
 8002502:	b29b      	uxth	r3, r3
 8002504:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Quat6) > 0) // case DMP_header_bitmap_Quat6:
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800250e:	2b00      	cmp	r3, #0
 8002510:	dd2d      	ble.n	800256e <icm20948_read_DMP_data+0x306>
  {
    if (fifo_count < icm_20948_DMP_Quat6_Bytes) // Check if we need to read the FIFO count again
 8002512:	89fb      	ldrh	r3, [r7, #14]
 8002514:	2b0b      	cmp	r3, #11
 8002516:	d804      	bhi.n	8002522 <icm20948_read_DMP_data+0x2ba>
      icm20948_get_FIFO_count(&fifo_count);
 8002518:	f107 030e 	add.w	r3, r7, #14
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fe4b 	bl	80021b8 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Quat6_Bytes)
 8002522:	89fb      	ldrh	r3, [r7, #14]
 8002524:	2b0b      	cmp	r3, #11
 8002526:	d801      	bhi.n	800252c <icm20948_read_DMP_data+0x2c4>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002528:	230b      	movs	r3, #11
 800252a:	e318      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Quat6_Bytes);
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	210c      	movs	r1, #12
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fe7a 	bl	800222c <icm20948_read_FIFO>
    for (int i = 0; i < icm_20948_DMP_Quat6_Bytes; i++)
 8002538:	2300      	movs	r3, #0
 800253a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800253c:	e010      	b.n	8002560 <icm20948_read_DMP_data+0x2f8>
    {
      data->Quat6.Bytes[DMP_Quat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 800253e:	4a36      	ldr	r2, [pc, #216]	@ (8002618 <icm20948_read_DMP_data+0x3b0>)
 8002540:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002546:	f107 0110 	add.w	r1, r7, #16
 800254a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800254c:	440a      	add	r2, r1
 800254e:	7811      	ldrb	r1, [r2, #0]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	460a      	mov	r2, r1
 8002556:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    for (int i = 0; i < icm_20948_DMP_Quat6_Bytes; i++)
 800255a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800255c:	3301      	adds	r3, #1
 800255e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002562:	2b0b      	cmp	r3, #11
 8002564:	ddeb      	ble.n	800253e <icm20948_read_DMP_data+0x2d6>
    }
    fifo_count -= icm_20948_DMP_Quat6_Bytes; // Decrement the count
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	3b0c      	subs	r3, #12
 800256a:	b29b      	uxth	r3, r3
 800256c:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Quat9) > 0) // case DMP_header_bitmap_Quat9:
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	dd2d      	ble.n	80025d6 <icm20948_read_DMP_data+0x36e>
  {
    if (fifo_count < icm_20948_DMP_Quat9_Bytes) // Check if we need to read the FIFO count again
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	2b0d      	cmp	r3, #13
 800257e:	d804      	bhi.n	800258a <icm20948_read_DMP_data+0x322>
      icm20948_get_FIFO_count(&fifo_count);
 8002580:	f107 030e 	add.w	r3, r7, #14
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fe17 	bl	80021b8 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Quat9_Bytes)
 800258a:	89fb      	ldrh	r3, [r7, #14]
 800258c:	2b0d      	cmp	r3, #13
 800258e:	d801      	bhi.n	8002594 <icm20948_read_DMP_data+0x32c>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002590:	230b      	movs	r3, #11
 8002592:	e2e4      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Quat9_Bytes);
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	210e      	movs	r1, #14
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fe46 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Quat9_Bytes; i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80025a4:	e010      	b.n	80025c8 <icm20948_read_DMP_data+0x360>
    {
      data->Quat9.Bytes[DMP_Quat9_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 80025a6:	4a1d      	ldr	r2, [pc, #116]	@ (800261c <icm20948_read_DMP_data+0x3b4>)
 80025a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	f107 0110 	add.w	r1, r7, #16
 80025b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025b4:	440a      	add	r2, r1
 80025b6:	7811      	ldrb	r1, [r2, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	460a      	mov	r2, r1
 80025be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    for (int i = 0; i < icm_20948_DMP_Quat9_Bytes; i++)
 80025c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c4:	3301      	adds	r3, #1
 80025c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80025c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ca:	2b0d      	cmp	r3, #13
 80025cc:	ddeb      	ble.n	80025a6 <icm20948_read_DMP_data+0x33e>
    }
    fifo_count -= icm_20948_DMP_Quat9_Bytes; // Decrement the count
 80025ce:	89fb      	ldrh	r3, [r7, #14]
 80025d0:	3b0e      	subs	r3, #14
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_PQuat6) > 0) // case DMP_header_bitmap_PQuat6:
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	dd36      	ble.n	8002650 <icm20948_read_DMP_data+0x3e8>
  {
    if (fifo_count < icm_20948_DMP_PQuat6_Bytes) // Check if we need to read the FIFO count again
 80025e2:	89fb      	ldrh	r3, [r7, #14]
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d804      	bhi.n	80025f2 <icm20948_read_DMP_data+0x38a>
      icm20948_get_FIFO_count(&fifo_count);
 80025e8:	f107 030e 	add.w	r3, r7, #14
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fde3 	bl	80021b8 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_PQuat6_Bytes)
 80025f2:	89fb      	ldrh	r3, [r7, #14]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d801      	bhi.n	80025fc <icm20948_read_DMP_data+0x394>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80025f8:	230b      	movs	r3, #11
 80025fa:	e2b0      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_PQuat6_Bytes);
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	2106      	movs	r1, #6
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fe12 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_PQuat6_Bytes; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	653b      	str	r3, [r7, #80]	@ 0x50
 800260c:	e019      	b.n	8002642 <icm20948_read_DMP_data+0x3da>
 800260e:	bf00      	nop
 8002610:	0800ea14 	.word	0x0800ea14
 8002614:	0800ea2c 	.word	0x0800ea2c
 8002618:	0800e9e4 	.word	0x0800e9e4
 800261c:	0800e9ac 	.word	0x0800e9ac
    {
      data->PQuat6.Bytes[DMP_PQuat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8002620:	4aa5      	ldr	r2, [pc, #660]	@ (80028b8 <icm20948_read_DMP_data+0x650>)
 8002622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002628:	f107 0110 	add.w	r1, r7, #16
 800262c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800262e:	440a      	add	r2, r1
 8002630:	7811      	ldrb	r1, [r2, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	460a      	mov	r2, r1
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    for (int i = 0; i < icm_20948_DMP_PQuat6_Bytes; i++)
 800263c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800263e:	3301      	adds	r3, #1
 8002640:	653b      	str	r3, [r7, #80]	@ 0x50
 8002642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002644:	2b05      	cmp	r3, #5
 8002646:	ddeb      	ble.n	8002620 <icm20948_read_DMP_data+0x3b8>
    }
    fifo_count -= icm_20948_DMP_PQuat6_Bytes; // Decrement the count
 8002648:	89fb      	ldrh	r3, [r7, #14]
 800264a:	3b06      	subs	r3, #6
 800264c:	b29b      	uxth	r3, r3
 800264e:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Geomag) > 0) // case DMP_header_bitmap_Geomag:
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	dd2d      	ble.n	80026b8 <icm20948_read_DMP_data+0x450>
  {
    if (fifo_count < icm_20948_DMP_Geomag_Bytes) // Check if we need to read the FIFO count again
 800265c:	89fb      	ldrh	r3, [r7, #14]
 800265e:	2b0d      	cmp	r3, #13
 8002660:	d804      	bhi.n	800266c <icm20948_read_DMP_data+0x404>
      icm20948_get_FIFO_count(&fifo_count);
 8002662:	f107 030e 	add.w	r3, r7, #14
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fda6 	bl	80021b8 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Geomag_Bytes)
 800266c:	89fb      	ldrh	r3, [r7, #14]
 800266e:	2b0d      	cmp	r3, #13
 8002670:	d801      	bhi.n	8002676 <icm20948_read_DMP_data+0x40e>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002672:	230b      	movs	r3, #11
 8002674:	e273      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Geomag_Bytes);
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	210e      	movs	r1, #14
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fdd5 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Geomag_Bytes; i++)
 8002682:	2300      	movs	r3, #0
 8002684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002686:	e010      	b.n	80026aa <icm20948_read_DMP_data+0x442>
    {
      data->Geomag.Bytes[DMP_Quat9_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8002688:	4a8c      	ldr	r2, [pc, #560]	@ (80028bc <icm20948_read_DMP_data+0x654>)
 800268a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002690:	f107 0110 	add.w	r1, r7, #16
 8002694:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002696:	440a      	add	r2, r1
 8002698:	7811      	ldrb	r1, [r2, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	460a      	mov	r2, r1
 80026a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    for (int i = 0; i < icm_20948_DMP_Geomag_Bytes; i++)
 80026a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026a6:	3301      	adds	r3, #1
 80026a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026ac:	2b0d      	cmp	r3, #13
 80026ae:	ddeb      	ble.n	8002688 <icm20948_read_DMP_data+0x420>
    }
    fifo_count -= icm_20948_DMP_Geomag_Bytes; // Decrement the count
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	3b0e      	subs	r3, #14
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Pressure) > 0) // case DMP_header_bitmap_Pressure:
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	dd2a      	ble.n	800271a <icm20948_read_DMP_data+0x4b2>
  {
    if (fifo_count < icm_20948_DMP_Pressure_Bytes) // Check if we need to read the FIFO count again
 80026c4:	89fb      	ldrh	r3, [r7, #14]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d804      	bhi.n	80026d4 <icm20948_read_DMP_data+0x46c>
      icm20948_get_FIFO_count(&fifo_count);
 80026ca:	f107 030e 	add.w	r3, r7, #14
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fd72 	bl	80021b8 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Pressure_Bytes)
 80026d4:	89fb      	ldrh	r3, [r7, #14]
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d801      	bhi.n	80026de <icm20948_read_DMP_data+0x476>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80026da:	230b      	movs	r3, #11
 80026dc:	e23f      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Pressure_Bytes);
 80026de:	f107 0310 	add.w	r3, r7, #16
 80026e2:	2106      	movs	r1, #6
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fda1 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Pressure_Bytes; i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026ee:	e00d      	b.n	800270c <icm20948_read_DMP_data+0x4a4>
    {
      data->Pressure[i] = fifoBytes[i];
 80026f0:	f107 0210 	add.w	r2, r7, #16
 80026f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f6:	4413      	add	r3, r2
 80026f8:	7819      	ldrb	r1, [r3, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026fe:	4413      	add	r3, r2
 8002700:	3358      	adds	r3, #88	@ 0x58
 8002702:	460a      	mov	r2, r1
 8002704:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < icm_20948_DMP_Pressure_Bytes; i++)
 8002706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002708:	3301      	adds	r3, #1
 800270a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800270c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800270e:	2b05      	cmp	r3, #5
 8002710:	ddee      	ble.n	80026f0 <icm20948_read_DMP_data+0x488>
    }
    fifo_count -= icm_20948_DMP_Pressure_Bytes; // Decrement the count
 8002712:	89fb      	ldrh	r3, [r7, #14]
 8002714:	3b06      	subs	r3, #6
 8002716:	b29b      	uxth	r3, r3
 8002718:	81fb      	strh	r3, [r7, #14]
			}
			fifo_count -= icm_20948_DMP_Gyro_Calibr_Bytes; // Decrement the count
			*/
  }

  if ((data->header & DMP_header_bitmap_Compass_Calibr) > 0) // case DMP_header_bitmap_Compass_Calibr:
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	dd2d      	ble.n	8002782 <icm20948_read_DMP_data+0x51a>
  {
    if (fifo_count < icm_20948_DMP_Compass_Calibr_Bytes) // Check if we need to read the FIFO count again
 8002726:	89fb      	ldrh	r3, [r7, #14]
 8002728:	2b0b      	cmp	r3, #11
 800272a:	d804      	bhi.n	8002736 <icm20948_read_DMP_data+0x4ce>
      icm20948_get_FIFO_count(&fifo_count);
 800272c:	f107 030e 	add.w	r3, r7, #14
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fd41 	bl	80021b8 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Compass_Calibr_Bytes)
 8002736:	89fb      	ldrh	r3, [r7, #14]
 8002738:	2b0b      	cmp	r3, #11
 800273a:	d801      	bhi.n	8002740 <icm20948_read_DMP_data+0x4d8>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 800273c:	230b      	movs	r3, #11
 800273e:	e20e      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Compass_Calibr_Bytes);
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	210c      	movs	r1, #12
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fd70 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Compass_Calibr_Bytes; i++)
 800274c:	2300      	movs	r3, #0
 800274e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002750:	e010      	b.n	8002774 <icm20948_read_DMP_data+0x50c>
    {
      data->Compass_Calibr.Bytes[DMP_Quat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8002752:	4a5b      	ldr	r2, [pc, #364]	@ (80028c0 <icm20948_read_DMP_data+0x658>)
 8002754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275a:	f107 0110 	add.w	r1, r7, #16
 800275e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002760:	440a      	add	r2, r1
 8002762:	7811      	ldrb	r1, [r2, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	460a      	mov	r2, r1
 800276a:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
    for (int i = 0; i < icm_20948_DMP_Compass_Calibr_Bytes; i++)
 800276e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002770:	3301      	adds	r3, #1
 8002772:	647b      	str	r3, [r7, #68]	@ 0x44
 8002774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002776:	2b0b      	cmp	r3, #11
 8002778:	ddeb      	ble.n	8002752 <icm20948_read_DMP_data+0x4ea>
    }
    fifo_count -= icm_20948_DMP_Compass_Calibr_Bytes; // Decrement the count
 800277a:	89fb      	ldrh	r3, [r7, #14]
 800277c:	3b0c      	subs	r3, #12
 800277e:	b29b      	uxth	r3, r3
 8002780:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Step_Detector) > 0) // case DMP_header_bitmap_Step_Detector:
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	dd33      	ble.n	80027f6 <icm20948_read_DMP_data+0x58e>
  {
    if (fifo_count < icm_20948_DMP_Step_Detector_Bytes) // Check if we need to read the FIFO count again
 800278e:	89fb      	ldrh	r3, [r7, #14]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d804      	bhi.n	800279e <icm20948_read_DMP_data+0x536>
      icm20948_get_FIFO_count(&fifo_count);
 8002794:	f107 030e 	add.w	r3, r7, #14
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fd0d 	bl	80021b8 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Step_Detector_Bytes)
 800279e:	89fb      	ldrh	r3, [r7, #14]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d801      	bhi.n	80027a8 <icm20948_read_DMP_data+0x540>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80027a4:	230b      	movs	r3, #11
 80027a6:	e1da      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Step_Detector_Bytes);
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	2104      	movs	r1, #4
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fd3c 	bl	800222c <icm20948_read_FIFO>

    uint32_t aWord = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < icm_20948_DMP_Step_Detector_Bytes; i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027bc:	e011      	b.n	80027e2 <icm20948_read_DMP_data+0x57a>
    {
      aWord |= ((uint32_t)fifoBytes[i]) << (24 - (i * 8)); // MSB first
 80027be:	f107 0210 	add.w	r2, r7, #16
 80027c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027c4:	4413      	add	r3, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027cc:	f1c3 0303 	rsb	r3, r3, #3
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027d8:	4313      	orrs	r3, r2
 80027da:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < icm_20948_DMP_Step_Detector_Bytes; i++)
 80027dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027de:	3301      	adds	r3, #1
 80027e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	ddea      	ble.n	80027be <icm20948_read_DMP_data+0x556>
    }
    data->Pedometer_Timestamp = aWord;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027ec:	679a      	str	r2, [r3, #120]	@ 0x78
    fifo_count -= icm_20948_DMP_Step_Detector_Bytes; // Decrement the count
 80027ee:	89fb      	ldrh	r3, [r7, #14]
 80027f0:	3b04      	subs	r3, #4
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	81fb      	strh	r3, [r7, #14]
  }

  // Now check for header2 features

  if ((data->header2 & DMP_header2_bitmap_Accel_Accuracy) > 0) // case DMP_header2_bitmap_Accel_Accuracy:
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	885b      	ldrh	r3, [r3, #2]
 80027fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	dd3a      	ble.n	8002878 <icm20948_read_DMP_data+0x610>
  {
    if (fifo_count < icm_20948_DMP_Accel_Accuracy_Bytes) // Check if we need to read the FIFO count again
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d804      	bhi.n	8002812 <icm20948_read_DMP_data+0x5aa>
      icm20948_get_FIFO_count(&fifo_count);
 8002808:	f107 030e 	add.w	r3, r7, #14
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fcd3 	bl	80021b8 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Accel_Accuracy_Bytes)
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d801      	bhi.n	800281c <icm20948_read_DMP_data+0x5b4>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002818:	230b      	movs	r3, #11
 800281a:	e1a0      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    aShort = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Accel_Accuracy_Bytes);
 8002822:	f107 0310 	add.w	r3, r7, #16
 8002826:	2102      	movs	r1, #2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fcff 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Accel_Accuracy_Bytes; i++)
 800282e:	2300      	movs	r3, #0
 8002830:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002832:	e015      	b.n	8002860 <icm20948_read_DMP_data+0x5f8>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 8002834:	f107 0210 	add.w	r2, r7, #16
 8002838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002842:	f1c3 0301 	rsb	r3, r3, #1
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	b21a      	sxth	r2, r3
 800284e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8002852:	4313      	orrs	r3, r2
 8002854:	b21b      	sxth	r3, r3
 8002856:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    for (int i = 0; i < icm_20948_DMP_Accel_Accuracy_Bytes; i++)
 800285a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285c:	3301      	adds	r3, #1
 800285e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002862:	2b01      	cmp	r3, #1
 8002864:	dde6      	ble.n	8002834 <icm20948_read_DMP_data+0x5cc>
    }
    data->Accel_Accuracy = aShort;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800286c:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    fifo_count -= icm_20948_DMP_Accel_Accuracy_Bytes; // Decrement the count
 8002870:	89fb      	ldrh	r3, [r7, #14]
 8002872:	3b02      	subs	r3, #2
 8002874:	b29b      	uxth	r3, r3
 8002876:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Gyro_Accuracy) > 0) // case DMP_header2_bitmap_Gyro_Accuracy:
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	885b      	ldrh	r3, [r3, #2]
 800287c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002880:	2b00      	cmp	r3, #0
 8002882:	dd41      	ble.n	8002908 <icm20948_read_DMP_data+0x6a0>
  {
    if (fifo_count < icm_20948_DMP_Gyro_Accuracy_Bytes) // Check if we need to read the FIFO count again
 8002884:	89fb      	ldrh	r3, [r7, #14]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d804      	bhi.n	8002894 <icm20948_read_DMP_data+0x62c>
      icm20948_get_FIFO_count(&fifo_count);
 800288a:	f107 030e 	add.w	r3, r7, #14
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fc92 	bl	80021b8 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Gyro_Accuracy_Bytes)
 8002894:	89fb      	ldrh	r3, [r7, #14]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d801      	bhi.n	800289e <icm20948_read_DMP_data+0x636>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 800289a:	230b      	movs	r3, #11
 800289c:	e15f      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    aShort = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Gyro_Accuracy_Bytes);
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	2102      	movs	r1, #2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fcbe 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Gyro_Accuracy_Bytes; i++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028b4:	e01c      	b.n	80028f0 <icm20948_read_DMP_data+0x688>
 80028b6:	bf00      	nop
 80028b8:	0800ea14 	.word	0x0800ea14
 80028bc:	0800e9ac 	.word	0x0800e9ac
 80028c0:	0800e9e4 	.word	0x0800e9e4
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 80028c4:	f107 0210 	add.w	r2, r7, #16
 80028c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ca:	4413      	add	r3, r2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d2:	f1c3 0301 	rsb	r3, r3, #1
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	b21a      	sxth	r2, r3
 80028de:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b21b      	sxth	r3, r3
 80028e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    for (int i = 0; i < icm_20948_DMP_Gyro_Accuracy_Bytes; i++)
 80028ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ec:	3301      	adds	r3, #1
 80028ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	dde6      	ble.n	80028c4 <icm20948_read_DMP_data+0x65c>
    }
    data->Gyro_Accuracy = aShort;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80028fc:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    fifo_count -= icm_20948_DMP_Gyro_Accuracy_Bytes; // Decrement the count
 8002900:	89fb      	ldrh	r3, [r7, #14]
 8002902:	3b02      	subs	r3, #2
 8002904:	b29b      	uxth	r3, r3
 8002906:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Compass_Accuracy) > 0) // case DMP_header2_bitmap_Compass_Accuracy:
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	885b      	ldrh	r3, [r3, #2]
 800290c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002910:	2b00      	cmp	r3, #0
 8002912:	dd3a      	ble.n	800298a <icm20948_read_DMP_data+0x722>
  {
    if (fifo_count < icm_20948_DMP_Compass_Accuracy_Bytes) // Check if we need to read the FIFO count again
 8002914:	89fb      	ldrh	r3, [r7, #14]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d804      	bhi.n	8002924 <icm20948_read_DMP_data+0x6bc>
      icm20948_get_FIFO_count(&fifo_count);
 800291a:	f107 030e 	add.w	r3, r7, #14
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fc4a 	bl	80021b8 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Compass_Accuracy_Bytes)
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d801      	bhi.n	800292e <icm20948_read_DMP_data+0x6c6>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 800292a:	230b      	movs	r3, #11
 800292c:	e117      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    aShort = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Compass_Accuracy_Bytes);
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	2102      	movs	r1, #2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fc76 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Compass_Accuracy_Bytes; i++)
 8002940:	2300      	movs	r3, #0
 8002942:	633b      	str	r3, [r7, #48]	@ 0x30
 8002944:	e015      	b.n	8002972 <icm20948_read_DMP_data+0x70a>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 8002946:	f107 0210 	add.w	r2, r7, #16
 800294a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002954:	f1c3 0301 	rsb	r3, r3, #1
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	b21a      	sxth	r2, r3
 8002960:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8002964:	4313      	orrs	r3, r2
 8002966:	b21b      	sxth	r3, r3
 8002968:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    for (int i = 0; i < icm_20948_DMP_Compass_Accuracy_Bytes; i++)
 800296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296e:	3301      	adds	r3, #1
 8002970:	633b      	str	r3, [r7, #48]	@ 0x30
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	2b01      	cmp	r3, #1
 8002976:	dde6      	ble.n	8002946 <icm20948_read_DMP_data+0x6de>
    }
    data->Compass_Accuracy = aShort;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800297e:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    fifo_count -= icm_20948_DMP_Compass_Accuracy_Bytes; // Decrement the count
 8002982:	89fb      	ldrh	r3, [r7, #14]
 8002984:	3b02      	subs	r3, #2
 8002986:	b29b      	uxth	r3, r3
 8002988:	81fb      	strh	r3, [r7, #14]
			data->Fsync_Delay_Time = aShort;
			fifo_count -= icm_20948_DMP_Fsync_Detection_Bytes; // Decrement the count
			*/
  }

  if ((data->header2 & DMP_header2_bitmap_Pickup) > 0) // case DMP_header2_bitmap_Pickup:
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	885b      	ldrh	r3, [r3, #2]
 800298e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	dd3a      	ble.n	8002a0c <icm20948_read_DMP_data+0x7a4>
  {
    if (fifo_count < icm_20948_DMP_Pickup_Bytes) // Check if we need to read the FIFO count again
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d804      	bhi.n	80029a6 <icm20948_read_DMP_data+0x73e>
      icm20948_get_FIFO_count(&fifo_count);
 800299c:	f107 030e 	add.w	r3, r7, #14
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fc09 	bl	80021b8 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Pickup_Bytes)
 80029a6:	89fb      	ldrh	r3, [r7, #14]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d801      	bhi.n	80029b0 <icm20948_read_DMP_data+0x748>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80029ac:	230b      	movs	r3, #11
 80029ae:	e0d6      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    aShort = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Pickup_Bytes);
 80029b6:	f107 0310 	add.w	r3, r7, #16
 80029ba:	2102      	movs	r1, #2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fc35 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Pickup_Bytes; i++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c6:	e015      	b.n	80029f4 <icm20948_read_DMP_data+0x78c>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 80029c8:	f107 0210 	add.w	r2, r7, #16
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d6:	f1c3 0301 	rsb	r3, r3, #1
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80029e6:	4313      	orrs	r3, r2
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    for (int i = 0; i < icm_20948_DMP_Pickup_Bytes; i++)
 80029ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f0:	3301      	adds	r3, #1
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	dde6      	ble.n	80029c8 <icm20948_read_DMP_data+0x760>
    }
    data->Pickup = aShort;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8002a00:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
    fifo_count -= icm_20948_DMP_Pickup_Bytes; // Decrement the count
 8002a04:	89fb      	ldrh	r3, [r7, #14]
 8002a06:	3b02      	subs	r3, #2
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Activity_Recog) > 0) // case DMP_header2_bitmap_Activity_Recog:
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	885b      	ldrh	r3, [r3, #2]
 8002a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dd2d      	ble.n	8002a74 <icm20948_read_DMP_data+0x80c>
  {
    if (fifo_count < icm_20948_DMP_Activity_Recognition_Bytes) // Check if we need to read the FIFO count again
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d804      	bhi.n	8002a28 <icm20948_read_DMP_data+0x7c0>
      icm20948_get_FIFO_count(&fifo_count);
 8002a1e:	f107 030e 	add.w	r3, r7, #14
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fbc8 	bl	80021b8 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Activity_Recognition_Bytes)
 8002a28:	89fb      	ldrh	r3, [r7, #14]
 8002a2a:	2b05      	cmp	r3, #5
 8002a2c:	d801      	bhi.n	8002a32 <icm20948_read_DMP_data+0x7ca>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002a2e:	230b      	movs	r3, #11
 8002a30:	e095      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Activity_Recognition_Bytes);
 8002a32:	f107 0310 	add.w	r3, r7, #16
 8002a36:	2106      	movs	r1, #6
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fbf7 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Activity_Recognition_Bytes; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a42:	e010      	b.n	8002a66 <icm20948_read_DMP_data+0x7fe>
    {
      data->Activity_Recognition.Bytes[DMP_Activity_Recognition_Byte_Ordering[i]] = fifoBytes[i];
 8002a44:	4a48      	ldr	r2, [pc, #288]	@ (8002b68 <icm20948_read_DMP_data+0x900>)
 8002a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	f107 0110 	add.w	r1, r7, #16
 8002a50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a52:	440a      	add	r2, r1
 8002a54:	7811      	ldrb	r1, [r2, #0]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	460a      	mov	r2, r1
 8002a5c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    for (int i = 0; i < icm_20948_DMP_Activity_Recognition_Bytes; i++)
 8002a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a62:	3301      	adds	r3, #1
 8002a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	ddeb      	ble.n	8002a44 <icm20948_read_DMP_data+0x7dc>
    }
    fifo_count -= icm_20948_DMP_Activity_Recognition_Bytes; // Decrement the count
 8002a6c:	89fb      	ldrh	r3, [r7, #14]
 8002a6e:	3b06      	subs	r3, #6
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Secondary_On_Off) > 0) // case DMP_header2_bitmap_Secondary_On_Off:
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	885b      	ldrh	r3, [r3, #2]
 8002a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	dd2d      	ble.n	8002adc <icm20948_read_DMP_data+0x874>
  {
    if (fifo_count < icm_20948_DMP_Secondary_On_Off_Bytes) // Check if we need to read the FIFO count again
 8002a80:	89fb      	ldrh	r3, [r7, #14]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d804      	bhi.n	8002a90 <icm20948_read_DMP_data+0x828>
      icm20948_get_FIFO_count(&fifo_count);
 8002a86:	f107 030e 	add.w	r3, r7, #14
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fb94 	bl	80021b8 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Secondary_On_Off_Bytes)
 8002a90:	89fb      	ldrh	r3, [r7, #14]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d801      	bhi.n	8002a9a <icm20948_read_DMP_data+0x832>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002a96:	230b      	movs	r3, #11
 8002a98:	e061      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Secondary_On_Off_Bytes);
 8002a9a:	f107 0310 	add.w	r3, r7, #16
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fbc3 	bl	800222c <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Secondary_On_Off_Bytes; i++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aaa:	e010      	b.n	8002ace <icm20948_read_DMP_data+0x866>
    {
      data->Secondary_On_Off.Bytes[DMP_Secondary_On_Off_Byte_Ordering[i]] = fifoBytes[i];
 8002aac:	4a2f      	ldr	r2, [pc, #188]	@ (8002b6c <icm20948_read_DMP_data+0x904>)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	f107 0110 	add.w	r1, r7, #16
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aba:	440a      	add	r2, r1
 8002abc:	7811      	ldrb	r1, [r2, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	460a      	mov	r2, r1
 8002ac4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    for (int i = 0; i < icm_20948_DMP_Secondary_On_Off_Bytes; i++)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	3301      	adds	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	ddeb      	ble.n	8002aac <icm20948_read_DMP_data+0x844>
    }
    fifo_count -= icm_20948_DMP_Secondary_On_Off_Bytes; // Decrement the count
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	3b02      	subs	r3, #2
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	81fb      	strh	r3, [r7, #14]
  }

  // Finally, extract the footer (gyro count)
  if (fifo_count < icm_20948_DMP_Footer_Bytes) // Check if we need to read the FIFO count again
 8002adc:	89fb      	ldrh	r3, [r7, #14]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d804      	bhi.n	8002aec <icm20948_read_DMP_data+0x884>
    icm20948_get_FIFO_count(&fifo_count);
 8002ae2:	f107 030e 	add.w	r3, r7, #14
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fb66 	bl	80021b8 <icm20948_get_FIFO_count>

  if (fifo_count < icm_20948_DMP_Footer_Bytes)
 8002aec:	89fb      	ldrh	r3, [r7, #14]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d801      	bhi.n	8002af6 <icm20948_read_DMP_data+0x88e>
    return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002af2:	230b      	movs	r3, #11
 8002af4:	e033      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>
  aShort = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Footer_Bytes);
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	2102      	movs	r1, #2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fb92 	bl	800222c <icm20948_read_FIFO>

  for (int i = 0; i < icm_20948_DMP_Footer_Bytes; i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	e015      	b.n	8002b3a <icm20948_read_DMP_data+0x8d2>
  {
    aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 8002b0e:	f107 0210 	add.w	r2, r7, #16
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	4413      	add	r3, r2
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f1c3 0301 	rsb	r3, r3, #1
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	b21a      	sxth	r2, r3
 8002b28:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  for (int i = 0; i < icm_20948_DMP_Footer_Bytes; i++)
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	3301      	adds	r3, #1
 8002b38:	623b      	str	r3, [r7, #32]
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	dde6      	ble.n	8002b0e <icm20948_read_DMP_data+0x8a6>
  }
  data->Footer = aShort;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8002b46:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  fifo_count -= icm_20948_DMP_Footer_Bytes; // Decrement the count
 8002b4a:	89fb      	ldrh	r3, [r7, #14]
 8002b4c:	3b02      	subs	r3, #2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	81fb      	strh	r3, [r7, #14]

  if (fifo_count > 0) // Check if there is still data waiting to be read
 8002b52:	89fb      	ldrh	r3, [r7, #14]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <icm20948_read_DMP_data+0x8f4>
    return ICM_20948_Stat_FIFOMoreDataAvail;
 8002b58:	230c      	movs	r3, #12
 8002b5a:	e000      	b.n	8002b5e <icm20948_read_DMP_data+0x8f6>

  return 0;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3778      	adds	r7, #120	@ 0x78
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	0800ea5c 	.word	0x0800ea5c
 8002b6c:	0800ea74 	.word	0x0800ea74

08002b70 <icm20948_load_firmware>:

int8_t icm20948_load_firmware(const unsigned char *data_start, unsigned short size_start, unsigned short load_addr)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	@ 0x30
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	803b      	strh	r3, [r7, #0]
  int write_size;
  unsigned short memaddr;
  const unsigned char *data;
  unsigned short size;
  unsigned char data_cmp[MAX_SERIAL_R_W];
  int flag = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
  }
*/

  // Write DMP memory

  data = data_start;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
  size = size_start;
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	847b      	strh	r3, [r7, #34]	@ 0x22
  memaddr = load_addr;
 8002b8c:	883b      	ldrh	r3, [r7, #0]
 8002b8e:	857b      	strh	r3, [r7, #42]	@ 0x2a

  while (size > 0)
 8002b90:	e029      	b.n	8002be6 <icm20948_load_firmware+0x76>
  {
    if (size <= MAX_SERIAL_R_W) // Break into maximally sized chunks
 8002b92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d802      	bhi.n	8002b9e <icm20948_load_firmware+0x2e>
      write_size = size;
 8002b98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b9c:	e001      	b.n	8002ba2 <icm20948_load_firmware+0x32>
    else
      write_size = MAX_SERIAL_R_W;
 8002b9e:	2310      	movs	r3, #16
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Chunk moves across a bank
    if ((memaddr & 0xff) + write_size > 0x100)
 8002ba2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba8:	4413      	add	r3, r2
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bae:	dd06      	ble.n	8002bbe <icm20948_load_firmware+0x4e>
    {
      // this sets the packet size to the remainder...
      write_size = (memaddr & 0xff) + write_size - 0x100;
 8002bb0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      //...should it be instead set to the rest of the chunk?
      //write_size = 0x100 - (memaddr & 0xff);
    }
    icm20948_write_mem(memaddr, write_size, (unsigned char *)data);
 8002bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe feef 	bl	80019a8 <icm20948_write_mem>

    data += write_size;
 8002bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bce:	4413      	add	r3, r2
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    size -= write_size;
 8002bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	847b      	strh	r3, [r7, #34]	@ 0x22
    memaddr += write_size;
 8002bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002be2:	4413      	add	r3, r2
 8002be4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  while (size > 0)
 8002be6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1d2      	bne.n	8002b92 <icm20948_load_firmware+0x22>
  }

  // Verify DMP memory

  data = data_start;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
  size = size_start;
 8002bf0:	887b      	ldrh	r3, [r7, #2]
 8002bf2:	847b      	strh	r3, [r7, #34]	@ 0x22
  memaddr = load_addr;
 8002bf4:	883b      	ldrh	r3, [r7, #0]
 8002bf6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  while (size > 0)
 8002bf8:	e037      	b.n	8002c6a <icm20948_load_firmware+0xfa>
  {
    if (size <= MAX_SERIAL_R_W) // Read in chunks of INV_MAX_SERIAL_READ
 8002bfa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d802      	bhi.n	8002c06 <icm20948_load_firmware+0x96>
      write_size = size;
 8002c00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c04:	e001      	b.n	8002c0a <icm20948_load_firmware+0x9a>
    else
      write_size = MAX_SERIAL_R_W;
 8002c06:	2310      	movs	r3, #16
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((memaddr & 0xff) + write_size > 0x100)
 8002c0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c10:	4413      	add	r3, r2
 8002c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c16:	dd06      	ble.n	8002c26 <icm20948_load_firmware+0xb6>
    {
      // this sets the packet size to the remainder...
      write_size = (memaddr & 0xff) + write_size - 0x100;
 8002c18:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1e:	4413      	add	r3, r2
 8002c20:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      //...should it be instead set to the rest of the chunk?
      //write_size = 0x100 - (memaddr & 0xff);
    }
    icm20948_read_mem(memaddr, write_size, data_cmp);
 8002c26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c28:	f107 020c 	add.w	r2, r7, #12
 8002c2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe ff20 	bl	8001a74 <icm20948_read_mem>
    //if (result != ICM_20948_Stat_Ok)
    //  flag++;                               // Error, DMP not written correctly

    if (memcmp(data_cmp, data, write_size)) // Compare the data
 8002c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f008 f921 	bl	800ae84 <memcmp>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <icm20948_load_firmware+0xde>
      return -1;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c4c:	e011      	b.n	8002c72 <icm20948_load_firmware+0x102>
    data += write_size;
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c52:	4413      	add	r3, r2
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
    size -= write_size;
 8002c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	847b      	strh	r3, [r7, #34]	@ 0x22
    memaddr += write_size;
 8002c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002c66:	4413      	add	r3, r2
 8002c68:	857b      	strh	r3, [r7, #42]	@ 0x2a
  while (size > 0)
 8002c6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1c4      	bne.n	8002bfa <icm20948_load_firmware+0x8a>
  //Enable LP_EN since we disabled it at begining of this function.
  ICM_20948_low_power(pdev, true); // Put chip into low power state
  if (result != ICM_20948_Stat_Ok)
    return result;
  */
  return 0;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3730      	adds	r7, #48	@ 0x30
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <icm20948_set_i2c_bus>:

void icm20948_set_i2c_bus(I2C_HandleTypeDef *bus)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	i2c_bus = *bus;
 8002c84:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <icm20948_set_i2c_bus+0x20>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	2354      	movs	r3, #84	@ 0x54
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f008 f93a 	bl	800af08 <memcpy>
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000108 	.word	0x20000108

08002ca0 <icm20948_initialize_DMP>:

int8_t icm20948_initialize_DMP(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b098      	sub	sp, #96	@ 0x60
 8002ca4:	af06      	add	r7, sp, #24
  // true: set the I2C_SLV0_RNW ReadNotWrite bit so we read the 10 bytes (not write them)
  // true: set the I2C_SLV0_CTRL I2C_SLV0_EN bit to enable reading from the peripheral at the sample rate
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_REG_DIS (we want to write the register value)
  // true: set the I2C_SLV0_CTRL I2C_SLV0_GRP bit to show the register pairing starts at byte 1+2 (copied from inv_icm20948_resume_akm)
  // true: set the I2C_SLV0_CTRL I2C_SLV0_BYTE_SW to byte-swap the data from the mag (copied from inv_icm20948_resume_akm)
  icm20948_i2c_controller_configure_peripheral(0, MAG_AK09916_I2C_ADDR, AK09916_REG_RSV2, 10, true, true, false, true, true, 0);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9305      	str	r3, [sp, #20]
 8002caa:	2301      	movs	r3, #1
 8002cac:	9304      	str	r3, [sp, #16]
 8002cae:	2301      	movs	r3, #1
 8002cb0:	9303      	str	r3, [sp, #12]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9302      	str	r3, [sp, #8]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	230a      	movs	r3, #10
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	210c      	movs	r1, #12
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7fe f8cb 	bl	8000e60 <icm20948_i2c_controller_configure_peripheral>
  // true: set the I2C_SLV0_CTRL I2C_SLV0_EN bit. Not sure why, but the write does not happen if this is clear
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_REG_DIS (we want to write the register value)
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_GRP bit
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_BYTE_SW bit
  // AK09916_mode_single: tell I2C_SLV1 to write the Single Measurement command each sample
  icm20948_i2c_controller_configure_peripheral(1, MAG_AK09916_I2C_ADDR, AK09916_REG_CNTL2, 1, false, true, false, false, false, AK09916_mode_single);
 8002cca:	2301      	movs	r3, #1
 8002ccc:	9305      	str	r3, [sp, #20]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9304      	str	r3, [sp, #16]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9303      	str	r3, [sp, #12]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9302      	str	r3, [sp, #8]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	2231      	movs	r2, #49	@ 0x31
 8002ce6:	210c      	movs	r1, #12
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f7fe f8b9 	bl	8000e60 <icm20948_i2c_controller_configure_peripheral>
  //  ODR is computed as follows: 1.1 kHz/(2^((odr_config[3:0])) )
  //  When gyroscope is enabled, all sensors (including I2C_MASTER) use the gyroscope ODR.
  //  If gyroscope is disabled, then all sensors (including I2C_MASTER) use the accelerometer ODR."
  // Since both gyro and accel are running, setting this register should have no effect. But it does. Maybe because the Gyro and Accel are placed in Low Power Mode (cycled)?
  // You can see by monitoring the Aux I2C pins that the next three lines reduce the bus traffic (magnetometer reads) from 1125Hz to the chosen rate: 68.75Hz in this case.
  icm20948_set_user_bank(3);
 8002cee:	2003      	movs	r0, #3
 8002cf0:	f7fe f832 	bl	8000d58 <icm20948_set_user_bank>
  uint8_t mstODRconfig = 0x04; // Set the ODR configuration to 1100/2^4 = 68.75Hz
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB3_REG_I2C_MST_ODR_CONFIG, I2C_MEMADD_SIZE_8BIT,  &mstODRconfig, 1, 1000);
 8002cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cfe:	9302      	str	r3, [sp, #8]
 8002d00:	2301      	movs	r3, #1
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	21d0      	movs	r1, #208	@ 0xd0
 8002d10:	48c9      	ldr	r0, [pc, #804]	@ (8003038 <icm20948_initialize_DMP+0x398>)
 8002d12:	f002 fbe3 	bl	80054dc <HAL_I2C_Mem_Write>

  // Configure clock source through PWR_MGMT_1
  // ICM_20948_Clock_Auto selects the best available clock source – PLL if ready, else use the Internal oscillator
  icm20948_set_clock_source(ICM_20948_Clock_Auto);
 8002d16:	2001      	movs	r0, #1
 8002d18:	f7fe f96e 	bl	8000ff8 <icm20948_set_clock_source>

  // Enable accel and gyro sensors through PWR_MGMT_2
  // Enable Accelerometer (all axes) and Gyroscope (all axes) by writing zero to PWR_MGMT_2
  icm20948_set_user_bank(0); // Select Bank 0
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fe f81b 	bl	8000d58 <icm20948_set_user_bank>
  uint8_t pwrMgmt2 = 0x40;                                                          // Set the reserved bit 6 (pressure sensor disable?)
 8002d22:	2340      	movs	r3, #64	@ 0x40
 8002d24:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_PWR_MGMT_2, I2C_MEMADD_SIZE_8BIT, &pwrMgmt2, 1, 1000);
 8002d28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d2c:	9302      	str	r3, [sp, #8]
 8002d2e:	2301      	movs	r3, #1
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	21d0      	movs	r1, #208	@ 0xd0
 8002d3e:	48be      	ldr	r0, [pc, #760]	@ (8003038 <icm20948_initialize_DMP+0x398>)
 8002d40:	f002 fbcc 	bl	80054dc <HAL_I2C_Mem_Write>

  // Place _only_ I2C_Master in Low Power Mode (cycled) via LP_CONFIG
  // The InvenSense Nucleo example initially puts the accel and gyro into low power mode too, but then later updates LP_CONFIG so only the I2C_Master is in Low Power Mode
  icm20948_set_sample_mode(ICM_20948_Internal_Mst, ICM_20948_Sample_Mode_Cycled);
 8002d44:	2101      	movs	r1, #1
 8002d46:	2010      	movs	r0, #16
 8002d48:	f7fe f98a 	bl	8001060 <icm20948_set_sample_mode>

  // Disable the FIFO
  icm20948_enable_FIFO(false);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fe f9dd 	bl	800110c <icm20948_enable_FIFO>

  // Disable the DMP
  icm20948_enable_DMP(false);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe fa50 	bl	80011f8 <icm20948_enable_DMP>

  // Set Gyro FSR (Full scale range) to 2000dps through GYRO_CONFIG_1
  // Set Accel FSR (Full scale range) to 4g through ACCEL_CONFIG
  ICM_20948_fss_t myFSS; // This uses a "Full Scale Settings" structure that can contain values for all configurable sensors
  myFSS.a = gpm4;        // (ICM_20948_ACCEL_CONFIG_FS_SEL_e)
 8002d58:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f362 0301 	bfi	r3, r2, #0, #2
 8002d62:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                         // gpm2
                         // gpm4
                         // gpm8
                         // gpm16
  myFSS.g = dps2000;     // (ICM_20948_GYRO_CONFIG_1_FS_SEL_e)
 8002d66:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002d6a:	f043 030c 	orr.w	r3, r3, #12
 8002d6e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                         // dps250
                         // dps500
                         // dps1000
                         // dps2000
  icm20948_set_full_scale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), myFSS);
 8002d72:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8002d76:	2003      	movs	r0, #3
 8002d78:	f7fe faa2 	bl	80012c0 <icm20948_set_full_scale>

  // The InvenSense Nucleo code also enables the gyro DLPF (but leaves GYRO_DLPFCFG set to zero = 196.6Hz (3dB))
  // We found this by going through the SPI data generated by ZaneL's Teensy-ICM-20948 library byte by byte...
  // The gyro DLPF is enabled by default (GYRO_CONFIG_1 = 0x01) so the following line should have no effect, but we'll include it anyway
  icm20948_enable_dlpf(ICM_20948_Internal_Gyr, true);
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	2002      	movs	r0, #2
 8002d80:	f7fe fb28 	bl	80013d4 <icm20948_enable_dlpf>
  // If we see this interrupt, we'll need to reset the FIFO
  //intEnableOverflowFIFO( 0x1F ); // Enable the interrupt on all FIFOs

  // Turn off what goes into the FIFO through FIFO_EN_1, FIFO_EN_2
  // Stop the peripheral data from being written to the FIFO by writing zero to FIFO_EN_1
  icm20948_set_user_bank(0); // Select Bank 0
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fd ffe7 	bl	8000d58 <icm20948_set_user_bank>
  uint8_t zero = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_EN_1, I2C_MEMADD_SIZE_8BIT, &zero, 1, 1000);
 8002d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d94:	9302      	str	r3, [sp, #8]
 8002d96:	2301      	movs	r3, #1
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2301      	movs	r3, #1
 8002da2:	2266      	movs	r2, #102	@ 0x66
 8002da4:	21d0      	movs	r1, #208	@ 0xd0
 8002da6:	48a4      	ldr	r0, [pc, #656]	@ (8003038 <icm20948_initialize_DMP+0x398>)
 8002da8:	f002 fb98 	bl	80054dc <HAL_I2C_Mem_Write>
  // Stop the accelerometer, gyro and temperature data from being written to the FIFO by writing zero to FIFO_EN_2
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_EN_2, I2C_MEMADD_SIZE_8BIT, &zero, 1, 1000);
 8002dac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	2301      	movs	r3, #1
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	2267      	movs	r2, #103	@ 0x67
 8002dc0:	21d0      	movs	r1, #208	@ 0xd0
 8002dc2:	489d      	ldr	r0, [pc, #628]	@ (8003038 <icm20948_initialize_DMP+0x398>)
 8002dc4:	f002 fb8a 	bl	80054dc <HAL_I2C_Mem_Write>

  // Turn off data ready interrupt through INT_ENABLE_1
  icm20948_int_enable_raw_data_ready(false);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fe fda9 	bl	8001920 <icm20948_int_enable_raw_data_ready>

  // Reset FIFO through FIFO_RST
  icm20948_reset_FIFO();
 8002dce:	f7fe f9d5 	bl	800117c <icm20948_reset_FIFO>

  // Set gyro sample rate divider with GYRO_SMPLRT_DIV
  // Set accel sample rate divider with ACCEL_SMPLRT_DIV_2
  ICM_20948_smplrt_t mySmplrt;
  mySmplrt.g = 19; // ODR is computed as follows: 1.1 kHz/(1+GYRO_SMPLRT_DIV[7:0]). 19 = 55Hz. InvenSense Nucleo example uses 19 (0x13).
 8002dd2:	2313      	movs	r3, #19
 8002dd4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  mySmplrt.a = 19; // ODR is computed as follows: 1.125 kHz/(1+ACCEL_SMPLRT_DIV[11:0]). 19 = 56.25Hz. InvenSense Nucleo example uses 19 (0x13).
 8002dd8:	2313      	movs	r3, #19
 8002dda:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  //mySmplrt.g = 4; // 225Hz
  //mySmplrt.a = 4; // 225Hz
  //mySmplrt.g = 8; // 112Hz
  //mySmplrt.a = 8; // 112Hz
  icm20948_set_sample_rate((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), mySmplrt);
 8002ddc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dde:	2003      	movs	r0, #3
 8002de0:	f7fe fb8c 	bl	80014fc <icm20948_set_sample_rate>

  // Setup DMP start address through PRGM_STRT_ADDRH/PRGM_STRT_ADDRL
  icm20948_set_DMP_start_address(DMP_START_ADDRESS);
 8002de4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002de8:	f7fe fdb8 	bl	800195c <icm20948_set_DMP_start_address>

  // Now load the DMP firmware
  icm20948_load_firmware(dmp3_image, sizeof(dmp3_image), DMP_LOAD_START);
 8002dec:	2290      	movs	r2, #144	@ 0x90
 8002dee:	f243 71dd 	movw	r1, #14301	@ 0x37dd
 8002df2:	4892      	ldr	r0, [pc, #584]	@ (800303c <icm20948_initialize_DMP+0x39c>)
 8002df4:	f7ff febc 	bl	8002b70 <icm20948_load_firmware>

  // Write the 2 byte Firmware Start Value to ICM PRGM_STRT_ADDRH/PRGM_STRT_ADDRL
  icm20948_set_DMP_start_address(DMP_START_ADDRESS);
 8002df8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002dfc:	f7fe fdae 	bl	800195c <icm20948_set_DMP_start_address>

  // Set the Hardware Fix Disable register to 0x48
  icm20948_set_user_bank(0);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fd ffa9 	bl	8000d58 <icm20948_set_user_bank>
  uint8_t fix = 0x48;
 8002e06:	2348      	movs	r3, #72	@ 0x48
 8002e08:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_HW_FIX_DISABLE, I2C_MEMADD_SIZE_8BIT, &fix, 1, 1000);
 8002e0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	2301      	movs	r3, #1
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	f107 033b 	add.w	r3, r7, #59	@ 0x3b
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	2275      	movs	r2, #117	@ 0x75
 8002e20:	21d0      	movs	r1, #208	@ 0xd0
 8002e22:	4885      	ldr	r0, [pc, #532]	@ (8003038 <icm20948_initialize_DMP+0x398>)
 8002e24:	f002 fb5a 	bl	80054dc <HAL_I2C_Mem_Write>

  // Set the Single FIFO Priority Select register to 0xE4
  icm20948_set_user_bank(0);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fd ff95 	bl	8000d58 <icm20948_set_user_bank>
  uint8_t fifoPrio = 0xE4;
 8002e2e:	23e4      	movs	r3, #228	@ 0xe4
 8002e30:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_SINGLE_FIFO_PRIORITY_SEL, I2C_MEMADD_SIZE_8BIT, &fifoPrio, 1, 1000);
 8002e34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e38:	9302      	str	r3, [sp, #8]
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2301      	movs	r3, #1
 8002e46:	2226      	movs	r2, #38	@ 0x26
 8002e48:	21d0      	movs	r1, #208	@ 0xd0
 8002e4a:	487b      	ldr	r0, [pc, #492]	@ (8003038 <icm20948_initialize_DMP+0x398>)
 8002e4c:	f002 fb46 	bl	80054dc <HAL_I2C_Mem_Write>

  // Configure Accel scaling to DMP
  // The DMP scales accel raw data internally to align 1g as 2^25
  // In order to align internal accel raw data 2^25 = 1g write 0x04000000 when FSR is 4g
  const unsigned char accScale[4] = {0x04, 0x00, 0x00, 0x00};
 8002e50:	2304      	movs	r3, #4
 8002e52:	637b      	str	r3, [r7, #52]	@ 0x34
  icm20948_write_mem(ACC_SCALE, 4, &accScale[0]);
 8002e54:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2104      	movs	r1, #4
 8002e5c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8002e60:	f7fe fda2 	bl	80019a8 <icm20948_write_mem>
  // In order to output hardware unit data as configured FSR write 0x00040000 when FSR is 4g
  const unsigned char accScale2[4] = {0x00, 0x04, 0x00, 0x00};
 8002e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e68:	633b      	str	r3, [r7, #48]	@ 0x30
  icm20948_write_mem(ACC_SCALE2, 4, &accScale2[0]);
 8002e6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2104      	movs	r1, #4
 8002e72:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 8002e76:	f7fe fd97 	bl	80019a8 <icm20948_write_mem>
  // X = raw_x * CPASS_MTX_00 + raw_y * CPASS_MTX_01 + raw_z * CPASS_MTX_02
  // Y = raw_x * CPASS_MTX_10 + raw_y * CPASS_MTX_11 + raw_z * CPASS_MTX_12
  // Z = raw_x * CPASS_MTX_20 + raw_y * CPASS_MTX_21 + raw_z * CPASS_MTX_22
  // The AK09916 produces a 16-bit signed output in the range +/-32752 corresponding to +/-4912uT. 1uT = 6.66 ADU.
  // 2^30 / 6.66666 = 161061273 = 0x9999999
  const unsigned char mountMultiplierZero[4] = {0x00, 0x00, 0x00, 0x00};
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const unsigned char mountMultiplierPlus[4] = {0x09, 0x99, 0x99, 0x99};  // Value taken from InvenSense Nucleo example
 8002e7e:	4b70      	ldr	r3, [pc, #448]	@ (8003040 <icm20948_initialize_DMP+0x3a0>)
 8002e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  const unsigned char mountMultiplierMinus[4] = {0xF6, 0x66, 0x66, 0x67}; // Value taken from InvenSense Nucleo example
 8002e82:	4b70      	ldr	r3, [pc, #448]	@ (8003044 <icm20948_initialize_DMP+0x3a4>)
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
  icm20948_write_mem(CPASS_MTX_00, 4, &mountMultiplierPlus[0]);
 8002e86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	f44f 70b8 	mov.w	r0, #368	@ 0x170
 8002e92:	f7fe fd89 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_01, 4, &mountMultiplierZero[0]);
 8002e96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	f44f 70ba 	mov.w	r0, #372	@ 0x174
 8002ea2:	f7fe fd81 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_02, 4, &mountMultiplierZero[0]);
 8002ea6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2104      	movs	r1, #4
 8002eae:	f44f 70bc 	mov.w	r0, #376	@ 0x178
 8002eb2:	f7fe fd79 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_10, 4, &mountMultiplierZero[0]);
 8002eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	f44f 70be 	mov.w	r0, #380	@ 0x17c
 8002ec2:	f7fe fd71 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_11, 4, &mountMultiplierMinus[0]);
 8002ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2104      	movs	r1, #4
 8002ece:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8002ed2:	f7fe fd69 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_12, 4, &mountMultiplierZero[0]);
 8002ed6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eda:	461a      	mov	r2, r3
 8002edc:	2104      	movs	r1, #4
 8002ede:	f44f 70c2 	mov.w	r0, #388	@ 0x184
 8002ee2:	f7fe fd61 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_20, 4, &mountMultiplierZero[0]);
 8002ee6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eea:	461a      	mov	r2, r3
 8002eec:	2104      	movs	r1, #4
 8002eee:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8002ef2:	f7fe fd59 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_21, 4, &mountMultiplierZero[0]);
 8002ef6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002efa:	461a      	mov	r2, r3
 8002efc:	2104      	movs	r1, #4
 8002efe:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 8002f02:	f7fe fd51 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_22, 4, &mountMultiplierMinus[0]);
 8002f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2104      	movs	r1, #4
 8002f0e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002f12:	f7fe fd49 	bl	80019a8 <icm20948_write_mem>

  // Configure the B2S Mounting Matrix
  const unsigned char b2sMountMultiplierZero[4] = {0x00, 0x00, 0x00, 0x00};
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  const unsigned char b2sMountMultiplierPlus[4] = {0x40, 0x00, 0x00, 0x00}; // Value taken from InvenSense Nucleo example
 8002f1a:	2340      	movs	r3, #64	@ 0x40
 8002f1c:	61fb      	str	r3, [r7, #28]
  icm20948_write_mem(B2S_MTX_00, 4, &b2sMountMultiplierPlus[0]);
 8002f1e:	f107 031c 	add.w	r3, r7, #28
 8002f22:	461a      	mov	r2, r3
 8002f24:	2104      	movs	r1, #4
 8002f26:	f44f 6050 	mov.w	r0, #3328	@ 0xd00
 8002f2a:	f7fe fd3d 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_01, 4, &b2sMountMultiplierZero[0]);
 8002f2e:	f107 0320 	add.w	r3, r7, #32
 8002f32:	461a      	mov	r2, r3
 8002f34:	2104      	movs	r1, #4
 8002f36:	f640 5004 	movw	r0, #3332	@ 0xd04
 8002f3a:	f7fe fd35 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_02, 4, &b2sMountMultiplierZero[0]);
 8002f3e:	f107 0320 	add.w	r3, r7, #32
 8002f42:	461a      	mov	r2, r3
 8002f44:	2104      	movs	r1, #4
 8002f46:	f640 5008 	movw	r0, #3336	@ 0xd08
 8002f4a:	f7fe fd2d 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_10, 4, &b2sMountMultiplierZero[0]);
 8002f4e:	f107 0320 	add.w	r3, r7, #32
 8002f52:	461a      	mov	r2, r3
 8002f54:	2104      	movs	r1, #4
 8002f56:	f640 500c 	movw	r0, #3340	@ 0xd0c
 8002f5a:	f7fe fd25 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_11, 4, &b2sMountMultiplierPlus[0]);
 8002f5e:	f107 031c 	add.w	r3, r7, #28
 8002f62:	461a      	mov	r2, r3
 8002f64:	2104      	movs	r1, #4
 8002f66:	f44f 6051 	mov.w	r0, #3344	@ 0xd10
 8002f6a:	f7fe fd1d 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_12, 4, &b2sMountMultiplierZero[0]);
 8002f6e:	f107 0320 	add.w	r3, r7, #32
 8002f72:	461a      	mov	r2, r3
 8002f74:	2104      	movs	r1, #4
 8002f76:	f640 5014 	movw	r0, #3348	@ 0xd14
 8002f7a:	f7fe fd15 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_20, 4, &b2sMountMultiplierZero[0]);
 8002f7e:	f107 0320 	add.w	r3, r7, #32
 8002f82:	461a      	mov	r2, r3
 8002f84:	2104      	movs	r1, #4
 8002f86:	f640 5018 	movw	r0, #3352	@ 0xd18
 8002f8a:	f7fe fd0d 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_21, 4, &b2sMountMultiplierZero[0]);
 8002f8e:	f107 0320 	add.w	r3, r7, #32
 8002f92:	461a      	mov	r2, r3
 8002f94:	2104      	movs	r1, #4
 8002f96:	f640 501c 	movw	r0, #3356	@ 0xd1c
 8002f9a:	f7fe fd05 	bl	80019a8 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_22, 4, &b2sMountMultiplierPlus[0]);
 8002f9e:	f107 031c 	add.w	r3, r7, #28
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	f44f 6052 	mov.w	r0, #3360	@ 0xd20
 8002faa:	f7fe fcfd 	bl	80019a8 <icm20948_write_mem>
  // Configure the DMP Gyro Scaling Factor
  // @param[in] gyro_div Value written to GYRO_SMPLRT_DIV register, where
  //            0=1125Hz sample rate, 1=562.5Hz sample rate, ... 4=225Hz sample rate, ...
  //            10=102.2727Hz sample rate, ... etc.
  // @param[in] gyro_level 0=250 dps, 1=500 dps, 2=1000 dps, 3=2000 dps
  icm20948_set_gyro_sf(19, 3); // 19 = 55Hz (see above), 3 = 2000dps (see above)
 8002fae:	2103      	movs	r1, #3
 8002fb0:	2013      	movs	r0, #19
 8002fb2:	f7fe fdc1 	bl	8001b38 <icm20948_set_gyro_sf>
  // Configure the Gyro full scale
  // 2000dps : 2^28
  // 1000dps : 2^27
  //  500dps : 2^26
  //  250dps : 2^25
  const unsigned char gyroFullScale[4] = {0x10, 0x00, 0x00, 0x00}; // 2000dps : 2^28
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	61bb      	str	r3, [r7, #24]
  icm20948_write_mem(GYRO_FULLSCALE, 4, &gyroFullScale[0]);
 8002fba:	f107 0318 	add.w	r3, r7, #24
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2104      	movs	r1, #4
 8002fc2:	f240 408c 	movw	r0, #1164	@ 0x48c
 8002fc6:	f7fe fcef 	bl	80019a8 <icm20948_write_mem>

  // Configure the Accel Only Gain: 15252014 (225Hz) 30504029 (112Hz) 61117001 (56Hz)
  const unsigned char accelOnlyGain[4] = {0x03, 0xA4, 0x92, 0x49}; // 56Hz
 8002fca:	4b1f      	ldr	r3, [pc, #124]	@ (8003048 <icm20948_initialize_DMP+0x3a8>)
 8002fcc:	617b      	str	r3, [r7, #20]
  //const unsigned char accelOnlyGain[4] = {0x00, 0xE8, 0xBA, 0x2E}; // 225Hz
  //const unsigned char accelOnlyGain[4] = {0x01, 0xD1, 0x74, 0x5D}; // 112Hz
  icm20948_write_mem(ACCEL_ONLY_GAIN, 4, &accelOnlyGain[0]);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	f44f 7086 	mov.w	r0, #268	@ 0x10c
 8002fda:	f7fe fce5 	bl	80019a8 <icm20948_write_mem>

  // Configure the Accel Alpha Var: 1026019965 (225Hz) 977872018 (112Hz) 882002213 (56Hz)
  const unsigned char accelAlphaVar[4] = {0x34, 0x92, 0x49, 0x25}; // 56Hz
 8002fde:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <icm20948_initialize_DMP+0x3ac>)
 8002fe0:	613b      	str	r3, [r7, #16]
  //const unsigned char accelAlphaVar[4] = {0x3D, 0x27, 0xD2, 0x7D}; // 225Hz
  //const unsigned char accelAlphaVar[4] = {0x3A, 0x49, 0x24, 0x92}; // 112Hz
  icm20948_write_mem(ACCEL_ALPHA_VAR, 4, &accelAlphaVar[0]);
 8002fe2:	f107 0310 	add.w	r3, r7, #16
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2104      	movs	r1, #4
 8002fea:	f44f 60b6 	mov.w	r0, #1456	@ 0x5b0
 8002fee:	f7fe fcdb 	bl	80019a8 <icm20948_write_mem>

  // Configure the Accel A Var: 47721859 (225Hz) 95869806 (112Hz) 191739611 (56Hz)
  const unsigned char accelAVar[4] = {0x0B, 0x6D, 0xB6, 0xDB}; // 56Hz
 8002ff2:	4b17      	ldr	r3, [pc, #92]	@ (8003050 <icm20948_initialize_DMP+0x3b0>)
 8002ff4:	60fb      	str	r3, [r7, #12]
  //const unsigned char accelAVar[4] = {0x02, 0xD8, 0x2D, 0x83}; // 225Hz
  //const unsigned char accelAVar[4] = {0x05, 0xB6, 0xDB, 0x6E}; // 112Hz
  icm20948_write_mem(ACCEL_A_VAR, 4, &accelAVar[0]);
 8002ff6:	f107 030c 	add.w	r3, r7, #12
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	f44f 60b8 	mov.w	r0, #1472	@ 0x5c0
 8003002:	f7fe fcd1 	bl	80019a8 <icm20948_write_mem>

  // Configure the Accel Cal Rate
  const unsigned char accelCalRate[4] = {0x00, 0x00}; // Value taken from InvenSense Nucleo example
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
  icm20948_write_mem(ACCEL_CAL_RATE, 2, &accelCalRate[0]);
 800300a:	f107 0308 	add.w	r3, r7, #8
 800300e:	461a      	mov	r2, r3
 8003010:	2102      	movs	r1, #2
 8003012:	f240 50e4 	movw	r0, #1508	@ 0x5e4
 8003016:	f7fe fcc7 	bl	80019a8 <icm20948_write_mem>

  // Configure the Compass Time Buffer. The I2C Master ODR Configuration (see above) sets the magnetometer read rate to 68.75Hz.
  // Let's set the Compass Time Buffer to 69 (Hz).
  const unsigned char compassRate[2] = {0x00, 0x45}; // 69Hz
 800301a:	f44f 438a 	mov.w	r3, #17664	@ 0x4500
 800301e:	80bb      	strh	r3, [r7, #4]
  icm20948_write_mem(CPASS_TIME_BUFFER, 2, &compassRate[0]);
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	461a      	mov	r2, r3
 8003024:	2102      	movs	r1, #2
 8003026:	f240 700e 	movw	r0, #1806	@ 0x70e
 800302a:	f7fe fcbd 	bl	80019a8 <icm20948_write_mem>

  // Enable DMP interrupt
  // This would be the most efficient way of getting the DMP data, instead of polling the FIFO
  //intEnableDMP(true);

  return 0;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3748      	adds	r7, #72	@ 0x48
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000108 	.word	0x20000108
 800303c:	0800b1cc 	.word	0x0800b1cc
 8003040:	99999909 	.word	0x99999909
 8003044:	676666f6 	.word	0x676666f6
 8003048:	4992a403 	.word	0x4992a403
 800304c:	25499234 	.word	0x25499234
 8003050:	dbb66d0b 	.word	0xdbb66d0b

08003054 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 800305a:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <APPD_EnableCPU2+0x5c>)
 800305c:	881a      	ldrh	r2, [r3, #0]
 800305e:	4b15      	ldr	r3, [pc, #84]	@ (80030b4 <APPD_EnableCPU2+0x60>)
 8003060:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <APPD_EnableCPU2+0x64>)
 8003064:	881a      	ldrh	r2, [r3, #0]
 8003066:	4b13      	ldr	r3, [pc, #76]	@ (80030b4 <APPD_EnableCPU2+0x60>)
 8003068:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 800306a:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <APPD_EnableCPU2+0x68>)
 800306c:	881a      	ldrh	r2, [r3, #0]
 800306e:	4b11      	ldr	r3, [pc, #68]	@ (80030b4 <APPD_EnableCPU2+0x60>)
 8003070:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 8003072:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <APPD_EnableCPU2+0x6c>)
 8003074:	881a      	ldrh	r2, [r3, #0]
 8003076:	4b0f      	ldr	r3, [pc, #60]	@ (80030b4 <APPD_EnableCPU2+0x60>)
 8003078:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 800307a:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <APPD_EnableCPU2+0x70>)
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <APPD_EnableCPU2+0x60>)
 8003080:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8003082:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <APPD_EnableCPU2+0x74>)
 8003084:	1d3c      	adds	r4, r7, #4
 8003086:	461d      	mov	r5, r3
 8003088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800308a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800308c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003090:	c403      	stmia	r4!, {r0, r1}
 8003092:	8022      	strh	r2, [r4, #0]
 8003094:	3402      	adds	r4, #2
 8003096:	0c13      	lsrs	r3, r2, #16
 8003098:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800309a:	f006 fc8b 	bl	80099b4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f005 ff1c 	bl	8008ede <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80030a6:	bf00      	nop
}
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bdb0      	pop	{r4, r5, r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000008 	.word	0x20000008
 80030b4:	200301e8 	.word	0x200301e8
 80030b8:	2000000a 	.word	0x2000000a
 80030bc:	2000000c 	.word	0x2000000c
 80030c0:	2000000e 	.word	0x2000000e
 80030c4:	20000010 	.word	0x20000010
 80030c8:	0800b148 	.word	0x0800b148

080030cc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80030d4:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <LL_C2_PWR_SetPowerMode+0x28>)
 80030d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030da:	f023 0207 	bic.w	r2, r3, #7
 80030de:	4905      	ldr	r1, [pc, #20]	@ (80030f4 <LL_C2_PWR_SetPowerMode+0x28>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	58000400 	.word	0x58000400

080030f8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <LL_EXTI_EnableIT_32_63+0x24>)
 8003102:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003106:	4905      	ldr	r1, [pc, #20]	@ (800311c <LL_EXTI_EnableIT_32_63+0x24>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	58000800 	.word	0x58000800

08003120 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312c:	4a0a      	ldr	r2, [pc, #40]	@ (8003158 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800312e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800313a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	cafecafe 	.word	0xcafecafe

0800315c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800316e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8003188:	4b04      	ldr	r3, [pc, #16]	@ (800319c <LL_DBGMCU_GetDeviceID+0x18>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e0042000 	.word	0xe0042000

080031a0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80031a4:	4b04      	ldr	r3, [pc, #16]	@ (80031b8 <LL_DBGMCU_GetRevisionID+0x18>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	b29b      	uxth	r3, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e0042000 	.word	0xe0042000

080031bc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80031c0:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <LL_LPM_EnableSleep+0x1c>)
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4a04      	ldr	r2, [pc, #16]	@ (80031d8 <LL_LPM_EnableSleep+0x1c>)
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	6113      	str	r3, [r2, #16]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	22ff      	movs	r2, #255	@ 0xff
 80031e8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	22ca      	movs	r2, #202	@ 0xca
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2253      	movs	r2, #83	@ 0x53
 8003208:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 0207 	bic.w	r2, r3, #7
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003240:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <MX_APPE_Config+0x18>)
 8003242:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003246:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8003248:	f000 f81d 	bl	8003286 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800324c:	f000 f822 	bl	8003294 <Config_HSE>

  return;
 8003250:	bf00      	nop
}
 8003252:	bd80      	pop	{r7, pc}
 8003254:	58004000 	.word	0x58004000

08003258 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800325c:	f000 f82e 	bl	80032bc <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8003260:	f000 f844 	bl	80032ec <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8003264:	4903      	ldr	r1, [pc, #12]	@ (8003274 <MX_APPE_Init+0x1c>)
 8003266:	2000      	movs	r0, #0
 8003268:	f000 fd92 	bl	8003d90 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800326c:	f000 f84e 	bl	800330c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8003270:	bf00      	nop
}
 8003272:	bd80      	pop	{r7, pc}
 8003274:	2000028c 	.word	0x2000028c

08003278 <Init_Exti>:

void Init_Exti(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800327c:	2050      	movs	r0, #80	@ 0x50
 800327e:	f7ff ff3b 	bl	80030f8 <LL_EXTI_EnableIT_32_63>

  return;
 8003282:	bf00      	nop
}
 8003284:	bd80      	pop	{r7, pc}

08003286 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800328a:	bf00      	nop
}
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800329a:	2000      	movs	r0, #0
 800329c:	f006 fc16 	bl	8009acc <OTP_Read>
 80032a0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	799b      	ldrb	r3, [r3, #6]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff37 	bl	8003120 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
}
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <System_Init>:

static void System_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  Init_Exti();
 80032c0:	f7ff ffda 	bl	8003278 <Init_Exti>

  Init_Rtc();
 80032c4:	f000 f802 	bl	80032cc <Init_Rtc>

  return;
 80032c8:	bf00      	nop
}
 80032ca:	bd80      	pop	{r7, pc}

080032cc <Init_Rtc>:

static void Init_Rtc(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80032d0:	4805      	ldr	r0, [pc, #20]	@ (80032e8 <Init_Rtc+0x1c>)
 80032d2:	f7ff ff90 	bl	80031f6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80032d6:	2100      	movs	r1, #0
 80032d8:	4803      	ldr	r0, [pc, #12]	@ (80032e8 <Init_Rtc+0x1c>)
 80032da:	f7ff ff9c 	bl	8003216 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80032de:	4802      	ldr	r0, [pc, #8]	@ (80032e8 <Init_Rtc+0x1c>)
 80032e0:	f7ff ff7c 	bl	80031dc <LL_RTC_EnableWriteProtection>

  return;
 80032e4:	bf00      	nop
}
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40002800 	.word	0x40002800

080032ec <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80032f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80032f4:	f7ff ff32 	bl	800315c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80032f8:	f007 fb48 	bl	800a98c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80032fc:	2004      	movs	r0, #4
 80032fe:	f7ff fee5 	bl	80030cc <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8003302:	f002 ff19 	bl	8006138 <HAL_PWREx_EnableSRAMRetention>

  return;
 8003306:	bf00      	nop
}
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8003312:	f006 f999 	bl	8009648 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8003316:	4a11      	ldr	r2, [pc, #68]	@ (800335c <appe_Tl_Init+0x50>)
 8003318:	2100      	movs	r1, #0
 800331a:	2004      	movs	r0, #4
 800331c:	f007 fc74 	bl	800ac08 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8003320:	4b0f      	ldr	r3, [pc, #60]	@ (8003360 <appe_Tl_Init+0x54>)
 8003322:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8003324:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <appe_Tl_Init+0x58>)
 8003326:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8003328:	463b      	mov	r3, r7
 800332a:	4619      	mov	r1, r3
 800332c:	480e      	ldr	r0, [pc, #56]	@ (8003368 <appe_Tl_Init+0x5c>)
 800332e:	f006 f84d 	bl	80093cc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8003332:	4b0e      	ldr	r3, [pc, #56]	@ (800336c <appe_Tl_Init+0x60>)
 8003334:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8003336:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <appe_Tl_Init+0x64>)
 8003338:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800333a:	4b0e      	ldr	r3, [pc, #56]	@ (8003374 <appe_Tl_Init+0x68>)
 800333c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800333e:	f240 533c 	movw	r3, #1340	@ 0x53c
 8003342:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	4618      	mov	r0, r3
 800334a:	f006 fabf 	bl	80098cc <TL_MM_Init>

  TL_Enable();
 800334e:	f006 f975 	bl	800963c <TL_Enable>

  return;
 8003352:	bf00      	nop
}
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	08009405 	.word	0x08009405
 8003360:	20030734 	.word	0x20030734
 8003364:	08003379 	.word	0x08003379
 8003368:	08003391 	.word	0x08003391
 800336c:	2003094c 	.word	0x2003094c
 8003370:	20030840 	.word	0x20030840
 8003374:	200301f8 	.word	0x200301f8

08003378 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8003382:	bf00      	nop
}
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	330b      	adds	r3, #11
 800339e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80033aa:	2b07      	cmp	r3, #7
 80033ac:	d81f      	bhi.n	80033ee <APPE_SysUserEvtRx+0x5e>
 80033ae:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <APPE_SysUserEvtRx+0x24>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033d5 	.word	0x080033d5
 80033b8:	080033e7 	.word	0x080033e7
 80033bc:	080033ef 	.word	0x080033ef
 80033c0:	080033ef 	.word	0x080033ef
 80033c4:	080033ef 	.word	0x080033ef
 80033c8:	080033ef 	.word	0x080033ef
 80033cc:	080033ef 	.word	0x080033ef
 80033d0:	080033ef 	.word	0x080033ef
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80033d4:	f107 030c 	add.w	r3, r7, #12
 80033d8:	4618      	mov	r0, r3
 80033da:	f005 fdad 	bl	8008f38 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f81b 	bl	800341a <APPE_SysEvtReadyProcessing>
    break;
 80033e4:	e004      	b.n	80033f0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f806 	bl	80033f8 <APPE_SysEvtError>
    break;
 80033ec:	e000      	b.n	80033f0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80033ee:	bf00      	nop
  }

  return;
 80033f0:	bf00      	nop
}
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	330b      	adds	r3, #11
 8003406:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3302      	adds	r3, #2
 800340c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800340e:	bf00      	nop
}
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b08a      	sub	sp, #40	@ 0x28
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8003422:	f107 0308 	add.w	r3, r7, #8
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8003430:	2300      	movs	r3, #0
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8003434:	2300      	movs	r3, #0
 8003436:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	330b      	adds	r3, #11
 800343e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	3302      	adds	r3, #2
 8003444:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11d      	bne.n	800348a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800344e:	f7ff fe01 	bl	8003054 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8003452:	230f      	movs	r3, #15
 8003454:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8003456:	237f      	movs	r3, #127	@ 0x7f
 8003458:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800345a:	f7ff fea1 	bl	80031a0 <LL_DBGMCU_GetRevisionID>
 800345e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	b29b      	uxth	r3, r3
 8003464:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8003466:	f7ff fe8d 	bl	8003184 <LL_DBGMCU_GetDeviceID>
 800346a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	b29b      	uxth	r3, r3
 8003470:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	4618      	mov	r0, r3
 8003478:	f005 fd48 	bl	8008f0c <SHCI_C2_Config>

    APP_BLE_Init();
 800347c:	f006 fc30 	bl	8009ce0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8003480:	2100      	movs	r1, #0
 8003482:	2001      	movs	r0, #1
 8003484:	f007 fa94 	bl	800a9b0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8003488:	e007      	b.n	800349a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d103      	bne.n	800349a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
  return;
 8003498:	bf00      	nop
 800349a:	bf00      	nop
}
 800349c:	3728      	adds	r7, #40	@ 0x28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034aa:	f001 fb19 	bl	8004ae0 <HAL_GetTick>
 80034ae:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034ba:	d00a      	beq.n	80034d2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80034bc:	f001 fb28 	bl	8004b10 <HAL_GetTickFreq>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ca:	e002      	b.n	80034d2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80034cc:	f7ff fe76 	bl	80031bc <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80034d0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80034d2:	f001 fb05 	bl	8004ae0 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d8f4      	bhi.n	80034cc <HAL_Delay+0x2a>
  }
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034f4:	f007 fa8c 	bl	800aa10 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}

080034fc <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8003500:	bf00      	nop
}
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003518:	f007 fa7a 	bl	800aa10 <UTIL_SEQ_Run>
  return;
 800351c:	bf00      	nop
}
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800352c:	2100      	movs	r1, #0
 800352e:	2004      	movs	r0, #4
 8003530:	f007 fb8c 	bl	800ac4c <UTIL_SEQ_SetTask>
  return;
 8003534:	bf00      	nop
}
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8003544:	2002      	movs	r0, #2
 8003546:	f007 fbed 	bl	800ad24 <UTIL_SEQ_SetEvt>
  return;
 800354a:	bf00      	nop
}
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800355a:	2002      	movs	r0, #2
 800355c:	f007 fc02 	bl	800ad64 <UTIL_SEQ_WaitEvt>
  return;
 8003560:	bf00      	nop
}
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <LL_EXTI_EnableIT_0_31>:
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <LL_EXTI_EnableIT_0_31+0x24>)
 8003572:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003576:	4905      	ldr	r1, [pc, #20]	@ (800358c <LL_EXTI_EnableIT_0_31+0x24>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	58000800 	.word	0x58000800

08003590 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4904      	ldr	r1, [pc, #16]	@ (80035b0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]

}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	58000800 	.word	0x58000800

080035b4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80035ba:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <ReadRtcSsrValue+0x3c>)
 80035bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035be:	b29b      	uxth	r3, r3
 80035c0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80035c2:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <ReadRtcSsrValue+0x3c>)
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80035ca:	e005      	b.n	80035d8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80035d0:	4b07      	ldr	r3, [pc, #28]	@ (80035f0 <ReadRtcSsrValue+0x3c>)
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1f5      	bne.n	80035cc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80035e0:	683b      	ldr	r3, [r7, #0]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40002800 	.word	0x40002800

080035f4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	460a      	mov	r2, r1
 80035fe:	71fb      	strb	r3, [r7, #7]
 8003600:	4613      	mov	r3, r2
 8003602:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8003604:	79ba      	ldrb	r2, [r7, #6]
 8003606:	491d      	ldr	r1, [pc, #116]	@ (800367c <LinkTimerAfter+0x88>)
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	3315      	adds	r3, #21
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b06      	cmp	r3, #6
 800361c:	d009      	beq.n	8003632 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	4916      	ldr	r1, [pc, #88]	@ (800367c <LinkTimerAfter+0x88>)
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	3314      	adds	r3, #20
 800362e:	79fa      	ldrb	r2, [r7, #7]
 8003630:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8003632:	79fa      	ldrb	r2, [r7, #7]
 8003634:	4911      	ldr	r1, [pc, #68]	@ (800367c <LinkTimerAfter+0x88>)
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	3315      	adds	r3, #21
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8003646:	79fa      	ldrb	r2, [r7, #7]
 8003648:	490c      	ldr	r1, [pc, #48]	@ (800367c <LinkTimerAfter+0x88>)
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	3314      	adds	r3, #20
 8003656:	79ba      	ldrb	r2, [r7, #6]
 8003658:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800365a:	79ba      	ldrb	r2, [r7, #6]
 800365c:	4907      	ldr	r1, [pc, #28]	@ (800367c <LinkTimerAfter+0x88>)
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	440b      	add	r3, r1
 8003668:	3315      	adds	r3, #21
 800366a:	79fa      	ldrb	r2, [r7, #7]
 800366c:	701a      	strb	r2, [r3, #0]

  return;
 800366e:	bf00      	nop
}
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	2000015c 	.word	0x2000015c

08003680 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	460a      	mov	r2, r1
 800368a:	71fb      	strb	r3, [r7, #7]
 800368c:	4613      	mov	r3, r2
 800368e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8003690:	4b29      	ldr	r3, [pc, #164]	@ (8003738 <LinkTimerBefore+0xb8>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	79ba      	ldrb	r2, [r7, #6]
 8003698:	429a      	cmp	r2, r3
 800369a:	d032      	beq.n	8003702 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800369c:	79ba      	ldrb	r2, [r7, #6]
 800369e:	4927      	ldr	r1, [pc, #156]	@ (800373c <LinkTimerBefore+0xbc>)
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	440b      	add	r3, r1
 80036aa:	3314      	adds	r3, #20
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	4922      	ldr	r1, [pc, #136]	@ (800373c <LinkTimerBefore+0xbc>)
 80036b4:	4613      	mov	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	3315      	adds	r3, #21
 80036c0:	79fa      	ldrb	r2, [r7, #7]
 80036c2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80036c4:	79fa      	ldrb	r2, [r7, #7]
 80036c6:	491d      	ldr	r1, [pc, #116]	@ (800373c <LinkTimerBefore+0xbc>)
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	440b      	add	r3, r1
 80036d2:	3315      	adds	r3, #21
 80036d4:	79ba      	ldrb	r2, [r7, #6]
 80036d6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80036d8:	79fa      	ldrb	r2, [r7, #7]
 80036da:	4918      	ldr	r1, [pc, #96]	@ (800373c <LinkTimerBefore+0xbc>)
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	3314      	adds	r3, #20
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80036ec:	79ba      	ldrb	r2, [r7, #6]
 80036ee:	4913      	ldr	r1, [pc, #76]	@ (800373c <LinkTimerBefore+0xbc>)
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	440b      	add	r3, r1
 80036fa:	3314      	adds	r3, #20
 80036fc:	79fa      	ldrb	r2, [r7, #7]
 80036fe:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8003700:	e014      	b.n	800372c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8003702:	79fa      	ldrb	r2, [r7, #7]
 8003704:	490d      	ldr	r1, [pc, #52]	@ (800373c <LinkTimerBefore+0xbc>)
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	3315      	adds	r3, #21
 8003712:	79ba      	ldrb	r2, [r7, #6]
 8003714:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8003716:	79ba      	ldrb	r2, [r7, #6]
 8003718:	4908      	ldr	r1, [pc, #32]	@ (800373c <LinkTimerBefore+0xbc>)
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	440b      	add	r3, r1
 8003724:	3314      	adds	r3, #20
 8003726:	79fa      	ldrb	r2, [r7, #7]
 8003728:	701a      	strb	r2, [r3, #0]
  return;
 800372a:	bf00      	nop
}
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	200001ec 	.word	0x200001ec
 800373c:	2000015c 	.word	0x2000015c

08003740 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800374a:	4b4e      	ldr	r3, [pc, #312]	@ (8003884 <linkTimer+0x144>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b06      	cmp	r3, #6
 8003752:	d118      	bne.n	8003786 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8003754:	4b4b      	ldr	r3, [pc, #300]	@ (8003884 <linkTimer+0x144>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b4b      	ldr	r3, [pc, #300]	@ (8003888 <linkTimer+0x148>)
 800375c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800375e:	4a49      	ldr	r2, [pc, #292]	@ (8003884 <linkTimer+0x144>)
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8003764:	79fa      	ldrb	r2, [r7, #7]
 8003766:	4949      	ldr	r1, [pc, #292]	@ (800388c <linkTimer+0x14c>)
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	440b      	add	r3, r1
 8003772:	3315      	adds	r3, #21
 8003774:	2206      	movs	r2, #6
 8003776:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003778:	4b45      	ldr	r3, [pc, #276]	@ (8003890 <linkTimer+0x150>)
 800377a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800377e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	81fb      	strh	r3, [r7, #14]
 8003784:	e078      	b.n	8003878 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8003786:	f000 f909 	bl	800399c <ReturnTimeElapsed>
 800378a:	4603      	mov	r3, r0
 800378c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800378e:	79fa      	ldrb	r2, [r7, #7]
 8003790:	493e      	ldr	r1, [pc, #248]	@ (800388c <linkTimer+0x14c>)
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	3308      	adds	r3, #8
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	89fb      	ldrh	r3, [r7, #14]
 80037a2:	79fa      	ldrb	r2, [r7, #7]
 80037a4:	4419      	add	r1, r3
 80037a6:	4839      	ldr	r0, [pc, #228]	@ (800388c <linkTimer+0x14c>)
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4403      	add	r3, r0
 80037b2:	3308      	adds	r3, #8
 80037b4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80037b6:	79fa      	ldrb	r2, [r7, #7]
 80037b8:	4934      	ldr	r1, [pc, #208]	@ (800388c <linkTimer+0x14c>)
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	440b      	add	r3, r1
 80037c4:	3308      	adds	r3, #8
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80037ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003884 <linkTimer+0x144>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	4619      	mov	r1, r3
 80037d2:	4a2e      	ldr	r2, [pc, #184]	@ (800388c <linkTimer+0x14c>)
 80037d4:	460b      	mov	r3, r1
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	440b      	add	r3, r1
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	3308      	adds	r3, #8
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d337      	bcc.n	8003858 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80037e8:	4b26      	ldr	r3, [pc, #152]	@ (8003884 <linkTimer+0x144>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80037ee:	7b7a      	ldrb	r2, [r7, #13]
 80037f0:	4926      	ldr	r1, [pc, #152]	@ (800388c <linkTimer+0x14c>)
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	440b      	add	r3, r1
 80037fc:	3315      	adds	r3, #21
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003802:	e013      	b.n	800382c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8003804:	7b7a      	ldrb	r2, [r7, #13]
 8003806:	4921      	ldr	r1, [pc, #132]	@ (800388c <linkTimer+0x14c>)
 8003808:	4613      	mov	r3, r2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	440b      	add	r3, r1
 8003812:	3315      	adds	r3, #21
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8003818:	7b7a      	ldrb	r2, [r7, #13]
 800381a:	491c      	ldr	r1, [pc, #112]	@ (800388c <linkTimer+0x14c>)
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	440b      	add	r3, r1
 8003826:	3315      	adds	r3, #21
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800382c:	7b3b      	ldrb	r3, [r7, #12]
 800382e:	2b06      	cmp	r3, #6
 8003830:	d00b      	beq.n	800384a <linkTimer+0x10a>
 8003832:	7b3a      	ldrb	r2, [r7, #12]
 8003834:	4915      	ldr	r1, [pc, #84]	@ (800388c <linkTimer+0x14c>)
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	440b      	add	r3, r1
 8003840:	3308      	adds	r3, #8
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	d2dc      	bcs.n	8003804 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800384a:	7b7a      	ldrb	r2, [r7, #13]
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fecf 	bl	80035f4 <LinkTimerAfter>
 8003856:	e00f      	b.n	8003878 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8003858:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <linkTimer+0x144>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff0c 	bl	8003680 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8003868:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <linkTimer+0x144>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <linkTimer+0x148>)
 8003870:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8003872:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <linkTimer+0x144>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8003878:	89fb      	ldrh	r3, [r7, #14]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200001ec 	.word	0x200001ec
 8003888:	200001ed 	.word	0x200001ed
 800388c:	2000015c 	.word	0x2000015c
 8003890:	200001f0 	.word	0x200001f0

08003894 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	460a      	mov	r2, r1
 800389e:	71fb      	strb	r3, [r7, #7]
 80038a0:	4613      	mov	r3, r2
 80038a2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80038a4:	4b39      	ldr	r3, [pc, #228]	@ (800398c <UnlinkTimer+0xf8>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	79fa      	ldrb	r2, [r7, #7]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d111      	bne.n	80038d4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80038b0:	4b36      	ldr	r3, [pc, #216]	@ (800398c <UnlinkTimer+0xf8>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <UnlinkTimer+0xfc>)
 80038b8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80038ba:	79fa      	ldrb	r2, [r7, #7]
 80038bc:	4935      	ldr	r1, [pc, #212]	@ (8003994 <UnlinkTimer+0x100>)
 80038be:	4613      	mov	r3, r2
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	440b      	add	r3, r1
 80038c8:	3315      	adds	r3, #21
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4b2f      	ldr	r3, [pc, #188]	@ (800398c <UnlinkTimer+0xf8>)
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	e03e      	b.n	8003952 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80038d4:	79fa      	ldrb	r2, [r7, #7]
 80038d6:	492f      	ldr	r1, [pc, #188]	@ (8003994 <UnlinkTimer+0x100>)
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	440b      	add	r3, r1
 80038e2:	3314      	adds	r3, #20
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80038e8:	79fa      	ldrb	r2, [r7, #7]
 80038ea:	492a      	ldr	r1, [pc, #168]	@ (8003994 <UnlinkTimer+0x100>)
 80038ec:	4613      	mov	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	440b      	add	r3, r1
 80038f6:	3315      	adds	r3, #21
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80038fc:	79f9      	ldrb	r1, [r7, #7]
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	4824      	ldr	r0, [pc, #144]	@ (8003994 <UnlinkTimer+0x100>)
 8003902:	460b      	mov	r3, r1
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	440b      	add	r3, r1
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4403      	add	r3, r0
 800390c:	3315      	adds	r3, #21
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	b2d8      	uxtb	r0, r3
 8003912:	4920      	ldr	r1, [pc, #128]	@ (8003994 <UnlinkTimer+0x100>)
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	3315      	adds	r3, #21
 8003920:	4602      	mov	r2, r0
 8003922:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003924:	7bbb      	ldrb	r3, [r7, #14]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d013      	beq.n	8003952 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800392a:	79f9      	ldrb	r1, [r7, #7]
 800392c:	7bba      	ldrb	r2, [r7, #14]
 800392e:	4819      	ldr	r0, [pc, #100]	@ (8003994 <UnlinkTimer+0x100>)
 8003930:	460b      	mov	r3, r1
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	440b      	add	r3, r1
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4403      	add	r3, r0
 800393a:	3314      	adds	r3, #20
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	b2d8      	uxtb	r0, r3
 8003940:	4914      	ldr	r1, [pc, #80]	@ (8003994 <UnlinkTimer+0x100>)
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	3314      	adds	r3, #20
 800394e:	4602      	mov	r2, r0
 8003950:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8003952:	79fa      	ldrb	r2, [r7, #7]
 8003954:	490f      	ldr	r1, [pc, #60]	@ (8003994 <UnlinkTimer+0x100>)
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	440b      	add	r3, r1
 8003960:	330c      	adds	r3, #12
 8003962:	2201      	movs	r2, #1
 8003964:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8003966:	4b09      	ldr	r3, [pc, #36]	@ (800398c <UnlinkTimer+0xf8>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b06      	cmp	r3, #6
 800396e:	d107      	bne.n	8003980 <UnlinkTimer+0xec>
 8003970:	79bb      	ldrb	r3, [r7, #6]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003976:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <UnlinkTimer+0x104>)
 8003978:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800397c:	601a      	str	r2, [r3, #0]
  }

  return;
 800397e:	bf00      	nop
 8003980:	bf00      	nop
}
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	200001ec 	.word	0x200001ec
 8003990:	200001ed 	.word	0x200001ed
 8003994:	2000015c 	.word	0x2000015c
 8003998:	200001f0 	.word	0x200001f0

0800399c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80039a2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a0c <ReturnTimeElapsed+0x70>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039aa:	d026      	beq.n	80039fa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80039ac:	f7ff fe02 	bl	80035b4 <ReadRtcSsrValue>
 80039b0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80039b2:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <ReturnTimeElapsed+0x70>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d805      	bhi.n	80039c8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80039bc:	4b13      	ldr	r3, [pc, #76]	@ (8003a0c <ReturnTimeElapsed+0x70>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	e00a      	b.n	80039de <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <ReturnTimeElapsed+0x74>)
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80039d4:	4b0d      	ldr	r3, [pc, #52]	@ (8003a0c <ReturnTimeElapsed+0x70>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80039de:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <ReturnTimeElapsed+0x78>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80039ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003a18 <ReturnTimeElapsed+0x7c>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	40d3      	lsrs	r3, r2
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	e001      	b.n	80039fe <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	b29b      	uxth	r3, r3
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200001f0 	.word	0x200001f0
 8003a10:	200001f8 	.word	0x200001f8
 8003a14:	200001f6 	.word	0x200001f6
 8003a18:	200001f5 	.word	0x200001f5

08003a1c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d108      	bne.n	8003a3e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003a2c:	f7ff fdc2 	bl	80035b4 <ReadRtcSsrValue>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4a21      	ldr	r2, [pc, #132]	@ (8003ab8 <RestartWakeupCounter+0x9c>)
 8003a34:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003a36:	2003      	movs	r0, #3
 8003a38:	f001 f9f3 	bl	8004e22 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003a3c:	e039      	b.n	8003ab2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d803      	bhi.n	8003a4c <RestartWakeupCounter+0x30>
 8003a44:	4b1d      	ldr	r3, [pc, #116]	@ (8003abc <RestartWakeupCounter+0xa0>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d002      	beq.n	8003a52 <RestartWakeupCounter+0x36>
      Value -= 1;
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003a52:	bf00      	nop
 8003a54:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <RestartWakeupCounter+0xa4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f8      	beq.n	8003a54 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003a62:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <RestartWakeupCounter+0xa4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <RestartWakeupCounter+0xa4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003a72:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003a74:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <RestartWakeupCounter+0xa8>)
 8003a76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003a7a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003a7c:	2003      	movs	r0, #3
 8003a7e:	f001 f9de 	bl	8004e3e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003a82:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <RestartWakeupCounter+0xac>)
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	0c1b      	lsrs	r3, r3, #16
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	490e      	ldr	r1, [pc, #56]	@ (8003ac8 <RestartWakeupCounter+0xac>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003a92:	f7ff fd8f 	bl	80035b4 <ReadRtcSsrValue>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4a07      	ldr	r2, [pc, #28]	@ (8003ab8 <RestartWakeupCounter+0x9c>)
 8003a9a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003a9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ac0 <RestartWakeupCounter+0xa4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	4b07      	ldr	r3, [pc, #28]	@ (8003ac0 <RestartWakeupCounter+0xa4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003aaa:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003aac:	f3af 8000 	nop.w
  return ;
 8003ab0:	bf00      	nop
}
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200001f0 	.word	0x200001f0
 8003abc:	200001f5 	.word	0x200001f5
 8003ac0:	2000028c 	.word	0x2000028c
 8003ac4:	58000800 	.word	0x58000800
 8003ac8:	40002800 	.word	0x40002800

08003acc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003ad2:	4b45      	ldr	r3, [pc, #276]	@ (8003be8 <RescheduleTimerList+0x11c>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ade:	d107      	bne.n	8003af0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003ae0:	bf00      	nop
 8003ae2:	4b42      	ldr	r3, [pc, #264]	@ (8003bec <RescheduleTimerList+0x120>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f8      	bne.n	8003ae2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003af0:	4b3e      	ldr	r3, [pc, #248]	@ (8003bec <RescheduleTimerList+0x120>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bec <RescheduleTimerList+0x120>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003afe:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003b00:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf0 <RescheduleTimerList+0x124>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	493a      	ldr	r1, [pc, #232]	@ (8003bf4 <RescheduleTimerList+0x128>)
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	3308      	adds	r3, #8
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003b1a:	f7ff ff3f 	bl	800399c <ReturnTimeElapsed>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d205      	bcs.n	8003b36 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003b2e:	4b32      	ldr	r3, [pc, #200]	@ (8003bf8 <RescheduleTimerList+0x12c>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e04d      	b.n	8003bd2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	4a30      	ldr	r2, [pc, #192]	@ (8003bfc <RescheduleTimerList+0x130>)
 8003b3a:	8812      	ldrh	r2, [r2, #0]
 8003b3c:	b292      	uxth	r2, r2
 8003b3e:	4413      	add	r3, r2
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d906      	bls.n	8003b56 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003b48:	4b2c      	ldr	r3, [pc, #176]	@ (8003bfc <RescheduleTimerList+0x130>)
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <RescheduleTimerList+0x12c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	e03d      	b.n	8003bd2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003b60:	4b25      	ldr	r3, [pc, #148]	@ (8003bf8 <RescheduleTimerList+0x12c>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003b66:	e034      	b.n	8003bd2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	4922      	ldr	r1, [pc, #136]	@ (8003bf4 <RescheduleTimerList+0x128>)
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	440b      	add	r3, r1
 8003b76:	3308      	adds	r3, #8
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d20a      	bcs.n	8003b96 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	491c      	ldr	r1, [pc, #112]	@ (8003bf4 <RescheduleTimerList+0x128>)
 8003b84:	4613      	mov	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	3308      	adds	r3, #8
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e013      	b.n	8003bbe <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	4916      	ldr	r1, [pc, #88]	@ (8003bf4 <RescheduleTimerList+0x128>)
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	6819      	ldr	r1, [r3, #0]
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	1ac9      	subs	r1, r1, r3
 8003bae:	4811      	ldr	r0, [pc, #68]	@ (8003bf4 <RescheduleTimerList+0x128>)
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4403      	add	r3, r0
 8003bba:	3308      	adds	r3, #8
 8003bbc:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	490c      	ldr	r1, [pc, #48]	@ (8003bf4 <RescheduleTimerList+0x128>)
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	440b      	add	r3, r1
 8003bcc:	3315      	adds	r3, #21
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b06      	cmp	r3, #6
 8003bd6:	d1c7      	bne.n	8003b68 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003bd8:	89bb      	ldrh	r3, [r7, #12]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ff1e 	bl	8003a1c <RestartWakeupCounter>

  return ;
 8003be0:	bf00      	nop
}
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40002800 	.word	0x40002800
 8003bec:	2000028c 	.word	0x2000028c
 8003bf0:	200001ec 	.word	0x200001ec
 8003bf4:	2000015c 	.word	0x2000015c
 8003bf8:	200001f4 	.word	0x200001f4
 8003bfc:	200001fa 	.word	0x200001fa

08003c00 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	@ 0x28
 8003c04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c06:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0a:	617b      	str	r3, [r7, #20]
  return(result);
 8003c0c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003c10:	b672      	cpsid	i
}
 8003c12:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003c14:	4b59      	ldr	r3, [pc, #356]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	22ca      	movs	r2, #202	@ 0xca
 8003c1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c1c:	4b57      	ldr	r3, [pc, #348]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2253      	movs	r2, #83	@ 0x53
 8003c22:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8003c24:	4b55      	ldr	r3, [pc, #340]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	4b54      	ldr	r3, [pc, #336]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c32:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8003c34:	4b52      	ldr	r3, [pc, #328]	@ (8003d80 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003c3c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003c40:	4950      	ldr	r1, [pc, #320]	@ (8003d84 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	440b      	add	r3, r1
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d16e      	bne.n	8003d34 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8003c56:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003c5a:	494a      	ldr	r1, [pc, #296]	@ (8003d84 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	440b      	add	r3, r1
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8003c6a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003c6e:	4945      	ldr	r1, [pc, #276]	@ (8003d84 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	440b      	add	r3, r1
 8003c7a:	3310      	adds	r3, #16
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003c80:	4b41      	ldr	r3, [pc, #260]	@ (8003d88 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04c      	beq.n	8003d24 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003c8a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003c8e:	493d      	ldr	r1, [pc, #244]	@ (8003d84 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003c90:	4613      	mov	r3, r2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	330d      	adds	r3, #13
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d124      	bne.n	8003cee <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fdf2 	bl	8003894 <UnlinkTimer>
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003cbc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003cc0:	4930      	ldr	r1, [pc, #192]	@ (8003d84 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	440b      	add	r3, r1
 8003ccc:	3304      	adds	r3, #4
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f9b8 	bl	800404c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	22ca      	movs	r2, #202	@ 0xca
 8003ce2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ce4:	4b25      	ldr	r3, [pc, #148]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2253      	movs	r2, #83	@ 0x53
 8003cea:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cec:	e012      	b.n	8003d14 <HW_TS_RTC_Wakeup_Handler+0x114>
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f383 8810 	msr	PRIMASK, r3
}
 8003cf8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8003cfa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f920 	bl	8003f44 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003d04:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	22ca      	movs	r2, #202	@ 0xca
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2253      	movs	r2, #83	@ 0x53
 8003d12:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8003d14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	69b8      	ldr	r0, [r7, #24]
 8003d1e:	f000 fa1b 	bl	8004158 <HW_TS_RTC_Int_AppNot>
 8003d22:	e022      	b.n	8003d6a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8003d24:	f7ff fed2 	bl	8003acc <RescheduleTimerList>
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	e01a      	b.n	8003d6a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003d34:	bf00      	nop
 8003d36:	4b11      	ldr	r3, [pc, #68]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f8      	beq.n	8003d36 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003d44:	4b0d      	ldr	r3, [pc, #52]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003d54:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003d56:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003d58:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f383 8810 	msr	PRIMASK, r3
}
 8003d68:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003d6a:	4b04      	ldr	r3, [pc, #16]	@ (8003d7c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	22ff      	movs	r2, #255	@ 0xff
 8003d70:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8003d72:	bf00      	nop
}
 8003d74:	3728      	adds	r7, #40	@ 0x28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000028c 	.word	0x2000028c
 8003d80:	200001ec 	.word	0x200001ec
 8003d84:	2000015c 	.word	0x2000015c
 8003d88:	200001f4 	.word	0x200001f4
 8003d8c:	58000800 	.word	0x58000800

08003d90 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	6039      	str	r1, [r7, #0]
 8003d9a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8003f18 <HW_TS_Init+0x188>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	22ca      	movs	r2, #202	@ 0xca
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003da4:	4b5c      	ldr	r3, [pc, #368]	@ (8003f18 <HW_TS_Init+0x188>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2253      	movs	r2, #83	@ 0x53
 8003daa:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003dac:	4b5b      	ldr	r3, [pc, #364]	@ (8003f1c <HW_TS_Init+0x18c>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a5a      	ldr	r2, [pc, #360]	@ (8003f1c <HW_TS_Init+0x18c>)
 8003db2:	f043 0320 	orr.w	r3, r3, #32
 8003db6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003db8:	4b58      	ldr	r3, [pc, #352]	@ (8003f1c <HW_TS_Init+0x18c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f1c3 0304 	rsb	r3, r3, #4
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	4b55      	ldr	r3, [pc, #340]	@ (8003f20 <HW_TS_Init+0x190>)
 8003dcc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003dce:	4b53      	ldr	r3, [pc, #332]	@ (8003f1c <HW_TS_Init+0x18c>)
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003dd6:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8003dda:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	fa92 f2a2 	rbit	r2, r2
 8003de2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	2a00      	cmp	r2, #0
 8003dec:	d101      	bne.n	8003df2 <HW_TS_Init+0x62>
  {
    return 32U;
 8003dee:	2220      	movs	r2, #32
 8003df0:	e003      	b.n	8003dfa <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	fab2 f282 	clz	r2, r2
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	40d3      	lsrs	r3, r2
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4b48      	ldr	r3, [pc, #288]	@ (8003f24 <HW_TS_Init+0x194>)
 8003e04:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003e06:	4b45      	ldr	r3, [pc, #276]	@ (8003f1c <HW_TS_Init+0x18c>)
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3301      	adds	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	4b44      	ldr	r3, [pc, #272]	@ (8003f28 <HW_TS_Init+0x198>)
 8003e18:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003e1a:	4b43      	ldr	r3, [pc, #268]	@ (8003f28 <HW_TS_Init+0x198>)
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	4a40      	ldr	r2, [pc, #256]	@ (8003f24 <HW_TS_Init+0x194>)
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	fb02 f303 	mul.w	r3, r2, r3
 8003e28:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f20 <HW_TS_Init+0x190>)
 8003e2e:	7812      	ldrb	r2, [r2, #0]
 8003e30:	40d3      	lsrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d904      	bls.n	8003e48 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f2c <HW_TS_Init+0x19c>)
 8003e40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e44:	801a      	strh	r2, [r3, #0]
 8003e46:	e003      	b.n	8003e50 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	4b37      	ldr	r3, [pc, #220]	@ (8003f2c <HW_TS_Init+0x19c>)
 8003e4e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003e50:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003e54:	f7ff fb9c 	bl	8003590 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003e58:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003e5c:	f7ff fb84 	bl	8003568 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d13d      	bne.n	8003ee2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003e66:	4b32      	ldr	r3, [pc, #200]	@ (8003f30 <HW_TS_Init+0x1a0>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003e6c:	4b31      	ldr	r3, [pc, #196]	@ (8003f34 <HW_TS_Init+0x1a4>)
 8003e6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e72:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e00c      	b.n	8003e94 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003e7a:	7ffa      	ldrb	r2, [r7, #31]
 8003e7c:	492e      	ldr	r1, [pc, #184]	@ (8003f38 <HW_TS_Init+0x1a8>)
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	440b      	add	r3, r1
 8003e88:	330c      	adds	r3, #12
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
 8003e90:	3301      	adds	r3, #1
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	7ffb      	ldrb	r3, [r7, #31]
 8003e96:	2b05      	cmp	r3, #5
 8003e98:	d9ef      	bls.n	8003e7a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003e9a:	4b28      	ldr	r3, [pc, #160]	@ (8003f3c <HW_TS_Init+0x1ac>)
 8003e9c:	2206      	movs	r2, #6
 8003e9e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <HW_TS_Init+0x188>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f18 <HW_TS_Init+0x188>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eae:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003eb0:	4b19      	ldr	r3, [pc, #100]	@ (8003f18 <HW_TS_Init+0x188>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4b17      	ldr	r3, [pc, #92]	@ (8003f18 <HW_TS_Init+0x188>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003ec0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f40 <HW_TS_Init+0x1b0>)
 8003ec4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003ec8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003eca:	2003      	movs	r0, #3
 8003ecc:	f000 ffb7 	bl	8004e3e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003ed0:	4b11      	ldr	r3, [pc, #68]	@ (8003f18 <HW_TS_Init+0x188>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	4b10      	ldr	r3, [pc, #64]	@ (8003f18 <HW_TS_Init+0x188>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	e009      	b.n	8003ef6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <HW_TS_Init+0x188>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003ef0:	2003      	movs	r0, #3
 8003ef2:	f000 ff96 	bl	8004e22 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003ef6:	4b08      	ldr	r3, [pc, #32]	@ (8003f18 <HW_TS_Init+0x188>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	22ff      	movs	r2, #255	@ 0xff
 8003efc:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003efe:	2200      	movs	r2, #0
 8003f00:	2103      	movs	r1, #3
 8003f02:	2003      	movs	r0, #3
 8003f04:	f000 ff4b 	bl	8004d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003f08:	2003      	movs	r0, #3
 8003f0a:	f000 ff62 	bl	8004dd2 <HAL_NVIC_EnableIRQ>

  return;
 8003f0e:	bf00      	nop
}
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	2000028c 	.word	0x2000028c
 8003f1c:	40002800 	.word	0x40002800
 8003f20:	200001f5 	.word	0x200001f5
 8003f24:	200001f6 	.word	0x200001f6
 8003f28:	200001f8 	.word	0x200001f8
 8003f2c:	200001fa 	.word	0x200001fa
 8003f30:	200001f4 	.word	0x200001f4
 8003f34:	200001f0 	.word	0x200001f0
 8003f38:	2000015c 	.word	0x2000015c
 8003f3c:	200001ec 	.word	0x200001ec
 8003f40:	58000800 	.word	0x58000800

08003f44 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f52:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f54:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003f56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f58:	b672      	cpsid	i
}
 8003f5a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003f5c:	2003      	movs	r0, #3
 8003f5e:	f000 ff46 	bl	8004dee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003f62:	4b34      	ldr	r3, [pc, #208]	@ (8004034 <HW_TS_Stop+0xf0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	22ca      	movs	r2, #202	@ 0xca
 8003f68:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f6a:	4b32      	ldr	r3, [pc, #200]	@ (8004034 <HW_TS_Stop+0xf0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2253      	movs	r2, #83	@ 0x53
 8003f70:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003f72:	79fa      	ldrb	r2, [r7, #7]
 8003f74:	4930      	ldr	r1, [pc, #192]	@ (8004038 <HW_TS_Stop+0xf4>)
 8003f76:	4613      	mov	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	440b      	add	r3, r1
 8003f80:	330c      	adds	r3, #12
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d142      	bne.n	8004010 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fc80 	bl	8003894 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003f94:	4b29      	ldr	r3, [pc, #164]	@ (800403c <HW_TS_Stop+0xf8>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
 8003f9c:	2b06      	cmp	r3, #6
 8003f9e:	d12f      	bne.n	8004000 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003fa0:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <HW_TS_Stop+0xfc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fac:	d107      	bne.n	8003fbe <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003fae:	bf00      	nop
 8003fb0:	4b20      	ldr	r3, [pc, #128]	@ (8004034 <HW_TS_Stop+0xf0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f8      	bne.n	8003fb0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8004034 <HW_TS_Stop+0xf0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004034 <HW_TS_Stop+0xf0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fcc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003fce:	bf00      	nop
 8003fd0:	4b18      	ldr	r3, [pc, #96]	@ (8004034 <HW_TS_Stop+0xf0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f8      	beq.n	8003fd0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <HW_TS_Stop+0xf0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <HW_TS_Stop+0xf0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003fee:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003ff0:	4b14      	ldr	r3, [pc, #80]	@ (8004044 <HW_TS_Stop+0x100>)
 8003ff2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003ff6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003ff8:	2003      	movs	r0, #3
 8003ffa:	f000 ff20 	bl	8004e3e <HAL_NVIC_ClearPendingIRQ>
 8003ffe:	e007      	b.n	8004010 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8004000:	4b11      	ldr	r3, [pc, #68]	@ (8004048 <HW_TS_Stop+0x104>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	7cfa      	ldrb	r2, [r7, #19]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800400c:	f7ff fd5e 	bl	8003acc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004010:	4b08      	ldr	r3, [pc, #32]	@ (8004034 <HW_TS_Stop+0xf0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	22ff      	movs	r2, #255	@ 0xff
 8004016:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8004018:	2003      	movs	r0, #3
 800401a:	f000 feda 	bl	8004dd2 <HAL_NVIC_EnableIRQ>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f383 8810 	msr	PRIMASK, r3
}
 8004028:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800402a:	bf00      	nop
}
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	2000028c 	.word	0x2000028c
 8004038:	2000015c 	.word	0x2000015c
 800403c:	200001ec 	.word	0x200001ec
 8004040:	40002800 	.word	0x40002800
 8004044:	58000800 	.word	0x58000800
 8004048:	200001ed 	.word	0x200001ed

0800404c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8004058:	79fa      	ldrb	r2, [r7, #7]
 800405a:	493b      	ldr	r1, [pc, #236]	@ (8004148 <HW_TS_Start+0xfc>)
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	330c      	adds	r3, #12
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d103      	bne.n	8004078 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ff66 	bl	8003f44 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004078:	f3ef 8310 	mrs	r3, PRIMASK
 800407c:	60fb      	str	r3, [r7, #12]
  return(result);
 800407e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004080:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004082:	b672      	cpsid	i
}
 8004084:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8004086:	2003      	movs	r0, #3
 8004088:	f000 feb1 	bl	8004dee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800408c:	4b2f      	ldr	r3, [pc, #188]	@ (800414c <HW_TS_Start+0x100>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	22ca      	movs	r2, #202	@ 0xca
 8004092:	625a      	str	r2, [r3, #36]	@ 0x24
 8004094:	4b2d      	ldr	r3, [pc, #180]	@ (800414c <HW_TS_Start+0x100>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2253      	movs	r2, #83	@ 0x53
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800409c:	79fa      	ldrb	r2, [r7, #7]
 800409e:	492a      	ldr	r1, [pc, #168]	@ (8004148 <HW_TS_Start+0xfc>)
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	440b      	add	r3, r1
 80040aa:	330c      	adds	r3, #12
 80040ac:	2202      	movs	r2, #2
 80040ae:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80040b0:	79fa      	ldrb	r2, [r7, #7]
 80040b2:	4925      	ldr	r1, [pc, #148]	@ (8004148 <HW_TS_Start+0xfc>)
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	440b      	add	r3, r1
 80040be:	3308      	adds	r3, #8
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80040c4:	79fa      	ldrb	r2, [r7, #7]
 80040c6:	4920      	ldr	r1, [pc, #128]	@ (8004148 <HW_TS_Start+0xfc>)
 80040c8:	4613      	mov	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	3304      	adds	r3, #4
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fb30 	bl	8003740 <linkTimer>
 80040e0:	4603      	mov	r3, r0
 80040e2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80040e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004150 <HW_TS_Start+0x104>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80040ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004154 <HW_TS_Start+0x108>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	7c7a      	ldrb	r2, [r7, #17]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d002      	beq.n	80040fc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80040f6:	f7ff fce9 	bl	8003acc <RescheduleTimerList>
 80040fa:	e013      	b.n	8004124 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80040fc:	79fa      	ldrb	r2, [r7, #7]
 80040fe:	4912      	ldr	r1, [pc, #72]	@ (8004148 <HW_TS_Start+0xfc>)
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	440b      	add	r3, r1
 800410a:	3308      	adds	r3, #8
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	8a7b      	ldrh	r3, [r7, #18]
 8004110:	79fa      	ldrb	r2, [r7, #7]
 8004112:	1ac9      	subs	r1, r1, r3
 8004114:	480c      	ldr	r0, [pc, #48]	@ (8004148 <HW_TS_Start+0xfc>)
 8004116:	4613      	mov	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4413      	add	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4403      	add	r3, r0
 8004120:	3308      	adds	r3, #8
 8004122:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004124:	4b09      	ldr	r3, [pc, #36]	@ (800414c <HW_TS_Start+0x100>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	22ff      	movs	r2, #255	@ 0xff
 800412a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800412c:	2003      	movs	r0, #3
 800412e:	f000 fe50 	bl	8004dd2 <HAL_NVIC_EnableIRQ>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800413e:	bf00      	nop
}
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	2000015c 	.word	0x2000015c
 800414c:	2000028c 	.word	0x2000028c
 8004150:	200001ec 	.word	0x200001ec
 8004154:	200001ed 	.word	0x200001ed

08004158 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	460b      	mov	r3, r1
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4798      	blx	r3

  return;
 800416a:	bf00      	nop
}
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004172:	b480      	push	{r7}
 8004174:	b085      	sub	sp, #20
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800417e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004180:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4313      	orrs	r3, r2
 8004188:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800418e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4013      	ands	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <main>:
  */
uint8_t chnl = 0x01;
uint8_t buf22[512];

int main(void)
{
 80041a4:	b5b0      	push	{r4, r5, r7, lr}
 80041a6:	b0b0      	sub	sp, #192	@ 0xc0
 80041a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041aa:	f000 fc2b 	bl	8004a04 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80041ae:	f7ff f845 	bl	800323c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041b2:	f000 f8e7 	bl	8004384 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80041b6:	f000 f92a 	bl	800440e <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80041ba:	f000 f985 	bl	80044c8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041be:	f000 f9cf 	bl	8004560 <MX_GPIO_Init>
  MX_I2C1_Init();
 80041c2:	f000 f941 	bl	8004448 <MX_I2C1_Init>
  MX_RTC_Init();
 80041c6:	f000 f99b 	bl	8004500 <MX_RTC_Init>
  MX_RF_Init();
 80041ca:	f000 f991 	bl	80044f0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80041ce:	f7ff f843 	bl	8003258 <MX_APPE_Init>

  set_i2c_mux_index(&hi2c1, 4);
 80041d2:	2104      	movs	r1, #4
 80041d4:	4867      	ldr	r0, [pc, #412]	@ (8004374 <main+0x1d0>)
 80041d6:	f000 f9e9 	bl	80045ac <set_i2c_mux_index>
  icm20948_set_i2c_bus(&hi2c1);
 80041da:	4866      	ldr	r0, [pc, #408]	@ (8004374 <main+0x1d0>)
 80041dc:	f7fe fd4e 	bl	8002c7c <icm20948_set_i2c_bus>
  if(icm20948_initialize_DMP())return;
 80041e0:	f7fe fd5e 	bl	8002ca0 <icm20948_initialize_DMP>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 80ba 	bne.w	8004360 <main+0x1bc>
  if(icm20948_enable_DMP_sensor(INV_ICM20948_SENSOR_ORIENTATION, 1))return;
 80041ec:	2101      	movs	r1, #1
 80041ee:	2012      	movs	r0, #18
 80041f0:	f7fd fd8a 	bl	8001d08 <icm20948_enable_DMP_sensor>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 80b4 	bne.w	8004364 <main+0x1c0>
  if(icm20948_set_DMP_sensor_period(DMP_ODR_Reg_Quat9, 0))return;
 80041fc:	2100      	movs	r1, #0
 80041fe:	20a8      	movs	r0, #168	@ 0xa8
 8004200:	f7fd fed6 	bl	8001fb0 <icm20948_set_DMP_sensor_period>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 80ae 	bne.w	8004368 <main+0x1c4>
  icm20948_enable_FIFO(true);
 800420c:	2001      	movs	r0, #1
 800420e:	f7fc ff7d 	bl	800110c <icm20948_enable_FIFO>
  icm20948_enable_DMP(true);
 8004212:	2001      	movs	r0, #1
 8004214:	f7fc fff0 	bl	80011f8 <icm20948_enable_DMP>
  icm20948_reset_FIFO();
 8004218:	f7fc ffb0 	bl	800117c <icm20948_reset_FIFO>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  icm_20948_DMP_data_t dmp_data;
  HAL_Delay(1000);
 800421c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004220:	f7ff f93f 	bl	80034a2 <HAL_Delay>
  icm20948_reset_DMP();
 8004224:	f7fd f820 	bl	8001268 <icm20948_reset_DMP>
  while (1)
   {
 	    /* USER CODE END WHILE */
 	    MX_APPE_Process();
 8004228:	f7ff f960 	bl	80034ec <MX_APPE_Process>

		int8_t result = icm20948_read_DMP_data(&dmp_data);
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe f81a 	bl	8002268 <icm20948_read_DMP_data>
 8004234:	4603      	mov	r3, r0
 8004236:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
		if ((dmp_data.header & DMP_header_bitmap_Quat9) > 0) // We have asked for orientation data so we should receive Quat9
 800423a:	88bb      	ldrh	r3, [r7, #4]
 800423c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	f340 8084 	ble.w	800434e <main+0x1aa>
		  // The quaternion data is scaled by 2^30.

		  //SERIAL_PORT.printf("Quat9 data is: Q1:%ld Q2:%ld Q3:%ld Accuracy:%d\r\n", data.Quat9.Data.Q1, data.Quat9.Data.Q2, data.Quat9.Data.Q3, data.Quat9.Data.Accuracy);

		  // Scale to +/- 1
		  double q1 = ((double)dmp_data.Quat9.Data.Q1) / 1073741824.0; // Convert to double. Divide by 2^30
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	4618      	mov	r0, r3
 800424a:	f7fc f8f3 	bl	8000434 <__aeabi_i2d>
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	4b49      	ldr	r3, [pc, #292]	@ (8004378 <main+0x1d4>)
 8004254:	f7fc fa82 	bl	800075c <__aeabi_ddiv>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		  double q2 = ((double)dmp_data.Quat9.Data.Q2) / 1073741824.0; // Convert to double. Divide by 2^30
 8004260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc f8e6 	bl	8000434 <__aeabi_i2d>
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	4b42      	ldr	r3, [pc, #264]	@ (8004378 <main+0x1d4>)
 800426e:	f7fc fa75 	bl	800075c <__aeabi_ddiv>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
		  double q3 = ((double)dmp_data.Quat9.Data.Q3) / 1073741824.0; // Convert to double. Divide by 2^30
 800427a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc f8d9 	bl	8000434 <__aeabi_i2d>
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	4b3c      	ldr	r3, [pc, #240]	@ (8004378 <main+0x1d4>)
 8004288:	f7fc fa68 	bl	800075c <__aeabi_ddiv>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		  double q0 = sqrt(1.0 - ((q1 * q1) + (q2 * q2) + (q3 * q3)));
 8004294:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8004298:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800429c:	f7fc f934 	bl	8000508 <__aeabi_dmul>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4614      	mov	r4, r2
 80042a6:	461d      	mov	r5, r3
 80042a8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80042ac:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80042b0:	f7fc f92a 	bl	8000508 <__aeabi_dmul>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4620      	mov	r0, r4
 80042ba:	4629      	mov	r1, r5
 80042bc:	f7fb ff6e 	bl	800019c <__adddf3>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4614      	mov	r4, r2
 80042c6:	461d      	mov	r5, r3
 80042c8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80042cc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80042d0:	f7fc f91a 	bl	8000508 <__aeabi_dmul>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4620      	mov	r0, r4
 80042da:	4629      	mov	r1, r5
 80042dc:	f7fb ff5e 	bl	800019c <__adddf3>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	f04f 0000 	mov.w	r0, #0
 80042e8:	4924      	ldr	r1, [pc, #144]	@ (800437c <main+0x1d8>)
 80042ea:	f7fb ff55 	bl	8000198 <__aeabi_dsub>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	ec43 2b17 	vmov	d7, r2, r3
 80042f6:	eeb0 0a47 	vmov.f32	s0, s14
 80042fa:	eef0 0a67 	vmov.f32	s1, s15
 80042fe:	f006 fe11 	bl	800af24 <sqrt>
 8004302:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
		  put_double_in_buffer(q0, buf22, sizeof(buf22), 0);
 8004306:	2200      	movs	r2, #0
 8004308:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800430c:	481c      	ldr	r0, [pc, #112]	@ (8004380 <main+0x1dc>)
 800430e:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 8004312:	f000 f96a 	bl	80045ea <put_double_in_buffer>
		  put_double_in_buffer(q1, buf22, sizeof(buf22), 8);
 8004316:	2208      	movs	r2, #8
 8004318:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800431c:	4818      	ldr	r0, [pc, #96]	@ (8004380 <main+0x1dc>)
 800431e:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8004322:	f000 f962 	bl	80045ea <put_double_in_buffer>
		  put_double_in_buffer(q2, buf22, sizeof(buf22), 16);
 8004326:	2210      	movs	r2, #16
 8004328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800432c:	4814      	ldr	r0, [pc, #80]	@ (8004380 <main+0x1dc>)
 800432e:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8004332:	f000 f95a 	bl	80045ea <put_double_in_buffer>
		  put_double_in_buffer(q3, buf22, sizeof(buf22), 24);
 8004336:	2218      	movs	r2, #24
 8004338:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800433c:	4810      	ldr	r0, [pc, #64]	@ (8004380 <main+0x1dc>)
 800433e:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 8004342:	f000 f952 	bl	80045ea <put_double_in_buffer>
		  Custom_STM_App_Update_Char(0, (uint8_t *)buf22);
 8004346:	490e      	ldr	r1, [pc, #56]	@ (8004380 <main+0x1dc>)
 8004348:	2000      	movs	r0, #0
 800434a:	f006 f8b1 	bl	800a4b0 <Custom_STM_App_Update_Char>
		}
		if(result != ICM_20948_Stat_FIFOMoreDataAvail)
 800434e:	f997 30bf 	ldrsb.w	r3, [r7, #191]	@ 0xbf
 8004352:	2b0c      	cmp	r3, #12
 8004354:	f43f af68 	beq.w	8004228 <main+0x84>
			HAL_Delay(10);
 8004358:	200a      	movs	r0, #10
 800435a:	f7ff f8a2 	bl	80034a2 <HAL_Delay>
   {
 800435e:	e763      	b.n	8004228 <main+0x84>
  if(icm20948_initialize_DMP())return;
 8004360:	bf00      	nop
 8004362:	e002      	b.n	800436a <main+0x1c6>
  if(icm20948_enable_DMP_sensor(INV_ICM20948_SENSOR_ORIENTATION, 1))return;
 8004364:	bf00      	nop
 8004366:	e000      	b.n	800436a <main+0x1c6>
  if(icm20948_set_DMP_sensor_period(DMP_ODR_Reg_Quat9, 0))return;
 8004368:	bf00      	nop


   }
   /* USER CODE END 3 */
 }
 800436a:	4618      	mov	r0, r3
 800436c:	37c0      	adds	r7, #192	@ 0xc0
 800436e:	46bd      	mov	sp, r7
 8004370:	bdb0      	pop	{r4, r5, r7, pc}
 8004372:	bf00      	nop
 8004374:	200001fc 	.word	0x200001fc
 8004378:	41d00000 	.word	0x41d00000
 800437c:	3ff00000 	.word	0x3ff00000
 8004380:	200002b0 	.word	0x200002b0

08004384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b098      	sub	sp, #96	@ 0x60
 8004388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800438a:	f107 031c 	add.w	r3, r7, #28
 800438e:	2244      	movs	r2, #68	@ 0x44
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f006 fd86 	bl	800aea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004398:	463b      	mov	r3, r7
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	60da      	str	r2, [r3, #12]
 80043a4:	611a      	str	r2, [r3, #16]
 80043a6:	615a      	str	r2, [r3, #20]
 80043a8:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80043aa:	2303      	movs	r3, #3
 80043ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043ba:	2340      	movs	r3, #64	@ 0x40
 80043bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80043be:	2300      	movs	r3, #0
 80043c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043c2:	f107 031c 	add.w	r3, r7, #28
 80043c6:	4618      	mov	r0, r3
 80043c8:	f002 f9e6 	bl	8006798 <HAL_RCC_OscConfig>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <SystemClock_Config+0x52>
  {
    Error_Handler();
 80043d2:	f000 f8e5 	bl	80045a0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80043d6:	236f      	movs	r3, #111	@ 0x6f
 80043d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80043da:	2302      	movs	r3, #2
 80043dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80043f2:	463b      	mov	r3, r7
 80043f4:	2101      	movs	r1, #1
 80043f6:	4618      	mov	r0, r3
 80043f8:	f002 fd04 	bl	8006e04 <HAL_RCC_ClockConfig>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004402:	f000 f8cd 	bl	80045a0 <Error_Handler>
  }
}
 8004406:	bf00      	nop
 8004408:	3760      	adds	r7, #96	@ 0x60
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b08a      	sub	sp, #40	@ 0x28
 8004412:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	2224      	movs	r2, #36	@ 0x24
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f006 fd42 	bl	800aea4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 8004420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004424:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8004426:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f003 f840 	bl	80074b4 <HAL_RCCEx_PeriphCLKConfig>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 800443a:	f000 f8b1 	bl	80045a0 <Error_Handler>
  }
}
 800443e:	bf00      	nop
 8004440:	3728      	adds	r7, #40	@ 0x28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <MX_I2C1_Init+0x74>)
 800444e:	4a1c      	ldr	r2, [pc, #112]	@ (80044c0 <MX_I2C1_Init+0x78>)
 8004450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8004452:	4b1a      	ldr	r3, [pc, #104]	@ (80044bc <MX_I2C1_Init+0x74>)
 8004454:	4a1b      	ldr	r2, [pc, #108]	@ (80044c4 <MX_I2C1_Init+0x7c>)
 8004456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004458:	4b18      	ldr	r3, [pc, #96]	@ (80044bc <MX_I2C1_Init+0x74>)
 800445a:	2200      	movs	r2, #0
 800445c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800445e:	4b17      	ldr	r3, [pc, #92]	@ (80044bc <MX_I2C1_Init+0x74>)
 8004460:	2201      	movs	r2, #1
 8004462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004464:	4b15      	ldr	r3, [pc, #84]	@ (80044bc <MX_I2C1_Init+0x74>)
 8004466:	2200      	movs	r2, #0
 8004468:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800446a:	4b14      	ldr	r3, [pc, #80]	@ (80044bc <MX_I2C1_Init+0x74>)
 800446c:	2200      	movs	r2, #0
 800446e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004470:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <MX_I2C1_Init+0x74>)
 8004472:	2200      	movs	r2, #0
 8004474:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004476:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <MX_I2C1_Init+0x74>)
 8004478:	2200      	movs	r2, #0
 800447a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800447c:	4b0f      	ldr	r3, [pc, #60]	@ (80044bc <MX_I2C1_Init+0x74>)
 800447e:	2200      	movs	r2, #0
 8004480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004482:	480e      	ldr	r0, [pc, #56]	@ (80044bc <MX_I2C1_Init+0x74>)
 8004484:	f000 fe76 	bl	8005174 <HAL_I2C_Init>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800448e:	f000 f887 	bl	80045a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004492:	2100      	movs	r1, #0
 8004494:	4809      	ldr	r0, [pc, #36]	@ (80044bc <MX_I2C1_Init+0x74>)
 8004496:	f001 fd11 	bl	8005ebc <HAL_I2CEx_ConfigAnalogFilter>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80044a0:	f000 f87e 	bl	80045a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80044a4:	2100      	movs	r1, #0
 80044a6:	4805      	ldr	r0, [pc, #20]	@ (80044bc <MX_I2C1_Init+0x74>)
 80044a8:	f001 fd53 	bl	8005f52 <HAL_I2CEx_ConfigDigitalFilter>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80044b2:	f000 f875 	bl	80045a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200001fc 	.word	0x200001fc
 80044c0:	40005400 	.word	0x40005400
 80044c4:	00b07cb4 	.word	0x00b07cb4

080044c8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80044cc:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <MX_IPCC_Init+0x20>)
 80044ce:	4a07      	ldr	r2, [pc, #28]	@ (80044ec <MX_IPCC_Init+0x24>)
 80044d0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80044d2:	4805      	ldr	r0, [pc, #20]	@ (80044e8 <MX_IPCC_Init+0x20>)
 80044d4:	f001 fd8a 	bl	8005fec <HAL_IPCC_Init>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80044de:	f000 f85f 	bl	80045a0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000250 	.word	0x20000250
 80044ec:	58000c00 	.word	0x58000c00

080044f0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004504:	4b14      	ldr	r3, [pc, #80]	@ (8004558 <MX_RTC_Init+0x58>)
 8004506:	4a15      	ldr	r2, [pc, #84]	@ (800455c <MX_RTC_Init+0x5c>)
 8004508:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800450a:	4b13      	ldr	r3, [pc, #76]	@ (8004558 <MX_RTC_Init+0x58>)
 800450c:	2200      	movs	r2, #0
 800450e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004510:	4b11      	ldr	r3, [pc, #68]	@ (8004558 <MX_RTC_Init+0x58>)
 8004512:	227f      	movs	r2, #127	@ 0x7f
 8004514:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004516:	4b10      	ldr	r3, [pc, #64]	@ (8004558 <MX_RTC_Init+0x58>)
 8004518:	f641 6284 	movw	r2, #7812	@ 0x1e84
 800451c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800451e:	4b0e      	ldr	r3, [pc, #56]	@ (8004558 <MX_RTC_Init+0x58>)
 8004520:	2200      	movs	r2, #0
 8004522:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004524:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <MX_RTC_Init+0x58>)
 8004526:	2200      	movs	r2, #0
 8004528:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800452a:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <MX_RTC_Init+0x58>)
 800452c:	2200      	movs	r2, #0
 800452e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004530:	4809      	ldr	r0, [pc, #36]	@ (8004558 <MX_RTC_Init+0x58>)
 8004532:	f003 f89b 	bl	800766c <HAL_RTC_Init>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 800453c:	f000 f830 	bl	80045a0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004540:	2200      	movs	r2, #0
 8004542:	2100      	movs	r1, #0
 8004544:	4804      	ldr	r0, [pc, #16]	@ (8004558 <MX_RTC_Init+0x58>)
 8004546:	f003 f991 	bl	800786c <HAL_RTCEx_SetWakeUpTimer_IT>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8004550:	f000 f826 	bl	80045a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004554:	bf00      	nop
 8004556:	bd80      	pop	{r7, pc}
 8004558:	2000028c 	.word	0x2000028c
 800455c:	40002800 	.word	0x40002800

08004560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004566:	1d3b      	adds	r3, r7, #4
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004574:	2002      	movs	r0, #2
 8004576:	f7ff fdfc 	bl	8004172 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800457a:	2001      	movs	r0, #1
 800457c:	f7ff fdf9 	bl	8004172 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : User_BTN_Pin */
  GPIO_InitStruct.Pin = User_BTN_Pin;
 8004580:	2340      	movs	r3, #64	@ 0x40
 8004582:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004584:	2300      	movs	r3, #0
 8004586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004588:	2301      	movs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_BTN_GPIO_Port, &GPIO_InitStruct);
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	4619      	mov	r1, r3
 8004590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004594:	f000 fc62 	bl	8004e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004598:	bf00      	nop
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045a4:	b672      	cpsid	i
}
 80045a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <Error_Handler+0x8>

080045ac <set_i2c_mux_index>:
#include "pb_helper.h"

int8_t set_i2c_mux_index(I2C_HandleTypeDef *i2c_bus, uint8_t index)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
	if (index > 7)return -1;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	2b07      	cmp	r3, #7
 80045bc:	d902      	bls.n	80045c4 <set_i2c_mux_index+0x18>
 80045be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045c2:	e00e      	b.n	80045e2 <set_i2c_mux_index+0x36>
	index = 0x1 << index;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	461a      	mov	r2, r3
 80045c8:	2301      	movs	r3, #1
 80045ca:	4093      	lsls	r3, r2
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(i2c_bus, I2C_MUX_ADDR << 1, &index, 1, 1000);
 80045d0:	1cfa      	adds	r2, r7, #3
 80045d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2301      	movs	r3, #1
 80045da:	21e0      	movs	r1, #224	@ 0xe0
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fe65 	bl	80052ac <HAL_I2C_Master_Transmit>
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <put_double_in_buffer>:

void put_double_in_buffer(double db, uint8_t *buffer, int buffer_length, int starting_index)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b08b      	sub	sp, #44	@ 0x2c
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	ed87 0b04 	vstr	d0, [r7, #16]
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
	if((starting_index + 4) > buffer_length)return;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3303      	adds	r3, #3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	dd19      	ble.n	8004638 <put_double_in_buffer+0x4e>
	  union {
	    double dbl;
	    unsigned char bytes[8];
	  } double_to_bytes;
	double_to_bytes.dbl = db;
 8004604:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004608:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for(int i = 0; i < 8; i++){
 800460c:	2300      	movs	r3, #0
 800460e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004610:	e00e      	b.n	8004630 <put_double_in_buffer+0x46>
		buffer[starting_index+i] = double_to_bytes.bytes[i];
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	4413      	add	r3, r2
 8004618:	461a      	mov	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	f107 0118 	add.w	r1, r7, #24
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	440a      	add	r2, r1
 8004626:	7812      	ldrb	r2, [r2, #0]
 8004628:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	3301      	adds	r3, #1
 800462e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	2b07      	cmp	r3, #7
 8004634:	dded      	ble.n	8004612 <put_double_in_buffer+0x28>
 8004636:	e000      	b.n	800463a <put_double_in_buffer+0x50>
	if((starting_index + 4) > buffer_length)return;
 8004638:	bf00      	nop
	}
}
 800463a:	372c      	adds	r7, #44	@ 0x2c
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004650:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <LL_AHB2_GRP1_EnableClock>:
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800466e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004674:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4313      	orrs	r3, r2
 800467c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004682:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4013      	ands	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800468a:	68fb      	ldr	r3, [r7, #12]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80046b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4013      	ands	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046bc:	68fb      	ldr	r3, [r7, #12]
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80046d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4313      	orrs	r3, r2
 80046e0:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4013      	ands	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046ee:	68fb      	ldr	r3, [r7, #12]
}
 80046f0:	bf00      	nop
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8004700:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004704:	f7ff ffc8 	bl	8004698 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8004708:	2200      	movs	r2, #0
 800470a:	2100      	movs	r1, #0
 800470c:	202e      	movs	r0, #46	@ 0x2e
 800470e:	f000 fb46 	bl	8004d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8004712:	202e      	movs	r0, #46	@ 0x2e
 8004714:	f000 fb5d 	bl	8004dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b090      	sub	sp, #64	@ 0x40
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004724:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004734:	f107 0308 	add.w	r3, r7, #8
 8004738:	2224      	movs	r2, #36	@ 0x24
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f006 fbb1 	bl	800aea4 <memset>
  if(hi2c->Instance==I2C1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a17      	ldr	r2, [pc, #92]	@ (80047a4 <HAL_I2C_MspInit+0x88>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d126      	bne.n	800479a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800474c:	2304      	movs	r3, #4
 800474e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004750:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004754:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004756:	f107 0308 	add.w	r3, r7, #8
 800475a:	4618      	mov	r0, r3
 800475c:	f002 feaa 	bl	80074b4 <HAL_RCCEx_PeriphCLKConfig>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004766:	f7ff ff1b 	bl	80045a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476a:	2002      	movs	r0, #2
 800476c:	f7ff ff7b 	bl	8004666 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004770:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004776:	2312      	movs	r3, #18
 8004778:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477a:	2300      	movs	r3, #0
 800477c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800477e:	2300      	movs	r3, #0
 8004780:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004782:	2304      	movs	r3, #4
 8004784:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004786:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800478a:	4619      	mov	r1, r3
 800478c:	4806      	ldr	r0, [pc, #24]	@ (80047a8 <HAL_I2C_MspInit+0x8c>)
 800478e:	f000 fb65 	bl	8004e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004792:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004796:	f7ff ff98 	bl	80046ca <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800479a:	bf00      	nop
 800479c:	3740      	adds	r7, #64	@ 0x40
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40005400 	.word	0x40005400
 80047a8:	48000400 	.word	0x48000400

080047ac <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a0d      	ldr	r2, [pc, #52]	@ (80047f0 <HAL_IPCC_MspInit+0x44>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d113      	bne.n	80047e6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80047be:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80047c2:	f7ff ff69 	bl	8004698 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80047c6:	2200      	movs	r2, #0
 80047c8:	2100      	movs	r1, #0
 80047ca:	202c      	movs	r0, #44	@ 0x2c
 80047cc:	f000 fae7 	bl	8004d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80047d0:	202c      	movs	r0, #44	@ 0x2c
 80047d2:	f000 fafe 	bl	8004dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80047d6:	2200      	movs	r2, #0
 80047d8:	2100      	movs	r1, #0
 80047da:	202d      	movs	r0, #45	@ 0x2d
 80047dc:	f000 fadf 	bl	8004d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80047e0:	202d      	movs	r0, #45	@ 0x2d
 80047e2:	f000 faf6 	bl	8004dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	58000c00 	.word	0x58000c00

080047f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08c      	sub	sp, #48	@ 0x30
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	2224      	movs	r2, #36	@ 0x24
 8004802:	2100      	movs	r1, #0
 8004804:	4618      	mov	r0, r3
 8004806:	f006 fb4d 	bl	800aea4 <memset>
  if(hrtc->Instance==RTC)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a14      	ldr	r2, [pc, #80]	@ (8004860 <HAL_RTC_MspInit+0x6c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d121      	bne.n	8004858 <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
	  HAL_PWR_EnableBkUpAccess();
 8004814:	f001 fc70 	bl	80060f8 <HAL_PWR_EnableBkUpAccess>
	  HAL_PWR_EnableBkUpAccess(); // written twice to flush apb-ahb bridge
 8004818:	f001 fc6e 	bl	80060f8 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800481c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004820:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8004822:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004826:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	4618      	mov	r0, r3
 800482e:	f002 fe41 	bl	80074b4 <HAL_RCCEx_PeriphCLKConfig>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8004838:	f7ff feb2 	bl	80045a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800483c:	f7ff ff02 	bl	8004644 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004840:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004844:	f7ff ff41 	bl	80046ca <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004848:	2200      	movs	r2, #0
 800484a:	2100      	movs	r1, #0
 800484c:	2003      	movs	r0, #3
 800484e:	f000 faa6 	bl	8004d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004852:	2003      	movs	r0, #3
 8004854:	f000 fabd 	bl	8004dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004858:	bf00      	nop
 800485a:	3730      	adds	r7, #48	@ 0x30
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40002800 	.word	0x40002800

08004864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004868:	bf00      	nop
 800486a:	e7fd      	b.n	8004868 <NMI_Handler+0x4>

0800486c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <HardFault_Handler+0x4>

08004874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004878:	bf00      	nop
 800487a:	e7fd      	b.n	8004878 <MemManage_Handler+0x4>

0800487c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004880:	bf00      	nop
 8004882:	e7fd      	b.n	8004880 <BusFault_Handler+0x4>

08004884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <UsageFault_Handler+0x4>

0800488c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800489a:	b480      	push	{r7}
 800489c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800489e:	bf00      	nop
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048ba:	f000 f8fd 	bl	8004ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80048c6:	f7ff f99b 	bl	8003c00 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}

080048ce <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80048d2:	f005 ff1d 	bl	800a710 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}

080048da <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80048de:	f005 ff4d 	bl	800a77c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80048ea:	f000 fc1f 	bl	800512c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80048f8:	4b22      	ldr	r3, [pc, #136]	@ (8004984 <SystemInit+0x90>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fe:	4a21      	ldr	r2, [pc, #132]	@ (8004984 <SystemInit+0x90>)
 8004900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800491c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8004920:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800492c:	4b16      	ldr	r3, [pc, #88]	@ (8004988 <SystemInit+0x94>)
 800492e:	4013      	ands	r3, r2
 8004930:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800493a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800493e:	f023 0305 	bic.w	r3, r3, #5
 8004942:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800494a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800494e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800495a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800495e:	4a0b      	ldr	r2, [pc, #44]	@ (800498c <SystemInit+0x98>)
 8004960:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800496c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004970:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004976:	2200      	movs	r2, #0
 8004978:	619a      	str	r2, [r3, #24]
}
 800497a:	bf00      	nop
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000ed00 	.word	0xe000ed00
 8004988:	faf6fefb 	.word	0xfaf6fefb
 800498c:	22041000 	.word	0x22041000

08004990 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004990:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004992:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004994:	3304      	adds	r3, #4

08004996 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004996:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004998:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800499a:	d3f9      	bcc.n	8004990 <CopyDataInit>
  bx lr
 800499c:	4770      	bx	lr

0800499e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800499e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80049a0:	3004      	adds	r0, #4

080049a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80049a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80049a4:	d3fb      	bcc.n	800499e <FillZerobss>
  bx lr
 80049a6:	4770      	bx	lr

080049a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80049a8:	480c      	ldr	r0, [pc, #48]	@ (80049dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80049aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80049ac:	f7ff ffa2 	bl	80048f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80049b0:	480b      	ldr	r0, [pc, #44]	@ (80049e0 <LoopForever+0x6>)
 80049b2:	490c      	ldr	r1, [pc, #48]	@ (80049e4 <LoopForever+0xa>)
 80049b4:	4a0c      	ldr	r2, [pc, #48]	@ (80049e8 <LoopForever+0xe>)
 80049b6:	2300      	movs	r3, #0
 80049b8:	f7ff ffed 	bl	8004996 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80049bc:	480b      	ldr	r0, [pc, #44]	@ (80049ec <LoopForever+0x12>)
 80049be:	490c      	ldr	r1, [pc, #48]	@ (80049f0 <LoopForever+0x16>)
 80049c0:	4a0c      	ldr	r2, [pc, #48]	@ (80049f4 <LoopForever+0x1a>)
 80049c2:	2300      	movs	r3, #0
 80049c4:	f7ff ffe7 	bl	8004996 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80049c8:	480b      	ldr	r0, [pc, #44]	@ (80049f8 <LoopForever+0x1e>)
 80049ca:	490c      	ldr	r1, [pc, #48]	@ (80049fc <LoopForever+0x22>)
 80049cc:	2300      	movs	r3, #0
 80049ce:	f7ff ffe8 	bl	80049a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80049d2:	f006 fa75 	bl	800aec0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80049d6:	f7ff fbe5 	bl	80041a4 <main>

080049da <LoopForever>:

LoopForever:
  b LoopForever
 80049da:	e7fe      	b.n	80049da <LoopForever>
  ldr   r0, =_estack
 80049dc:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80049e0:	20000008 	.word	0x20000008
 80049e4:	200000a0 	.word	0x200000a0
 80049e8:	0800eccc 	.word	0x0800eccc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80049ec:	200301e4 	.word	0x200301e4
 80049f0:	20030a67 	.word	0x20030a67
 80049f4:	0800edaa 	.word	0x0800edaa
  INIT_BSS _sbss, _ebss
 80049f8:	200000ec 	.word	0x200000ec
 80049fc:	200007a0 	.word	0x200007a0

08004a00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a00:	e7fe      	b.n	8004a00 <ADC1_IRQHandler>
	...

08004a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <HAL_Init+0x3c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a0b      	ldr	r2, [pc, #44]	@ (8004a40 <HAL_Init+0x3c>)
 8004a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a1a:	2003      	movs	r0, #3
 8004a1c:	f000 f9b4 	bl	8004d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a20:	200f      	movs	r0, #15
 8004a22:	f000 f80f 	bl	8004a44 <HAL_InitTick>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	71fb      	strb	r3, [r7, #7]
 8004a30:	e001      	b.n	8004a36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a32:	f7ff fe63 	bl	80046fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a36:	79fb      	ldrb	r3, [r7, #7]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	58004000 	.word	0x58004000

08004a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004a50:	4b17      	ldr	r3, [pc, #92]	@ (8004ab0 <HAL_InitTick+0x6c>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d024      	beq.n	8004aa2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004a58:	f002 fb80 	bl	800715c <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <HAL_InitTick+0x6c>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a68:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f9ca 	bl	8004e0a <HAL_SYSTICK_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10f      	bne.n	8004a9c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b0f      	cmp	r3, #15
 8004a80:	d809      	bhi.n	8004a96 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a82:	2200      	movs	r2, #0
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a8a:	f000 f988 	bl	8004d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a8e:	4a09      	ldr	r2, [pc, #36]	@ (8004ab4 <HAL_InitTick+0x70>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e007      	b.n	8004aa6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	e004      	b.n	8004aa6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
 8004aa0:	e001      	b.n	8004aa6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	2000001c 	.word	0x2000001c
 8004ab4:	20000018 	.word	0x20000018

08004ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004abc:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_IncTick+0x20>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_IncTick+0x24>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	4a04      	ldr	r2, [pc, #16]	@ (8004adc <HAL_IncTick+0x24>)
 8004aca:	6013      	str	r3, [r2, #0]
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	2000001c 	.word	0x2000001c
 8004adc:	200004b0 	.word	0x200004b0

08004ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	@ (8004af4 <HAL_GetTick+0x14>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	200004b0 	.word	0x200004b0

08004af8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004afc:	4b03      	ldr	r3, [pc, #12]	@ (8004b0c <HAL_GetTickPrio+0x14>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000018 	.word	0x20000018

08004b10 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004b14:	4b03      	ldr	r3, [pc, #12]	@ (8004b24 <HAL_GetTickFreq+0x14>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	2000001c 	.word	0x2000001c

08004b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b38:	4b0c      	ldr	r3, [pc, #48]	@ (8004b6c <__NVIC_SetPriorityGrouping+0x44>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b44:	4013      	ands	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b5a:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <__NVIC_SetPriorityGrouping+0x44>)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	60d3      	str	r3, [r2, #12]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000ed00 	.word	0xe000ed00

08004b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b74:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <__NVIC_GetPriorityGrouping+0x18>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	f003 0307 	and.w	r3, r3, #7
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	db0b      	blt.n	8004bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	f003 021f 	and.w	r2, r3, #31
 8004ba4:	4907      	ldr	r1, [pc, #28]	@ (8004bc4 <__NVIC_EnableIRQ+0x38>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2001      	movs	r0, #1
 8004bae:	fa00 f202 	lsl.w	r2, r0, r2
 8004bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	e000e100 	.word	0xe000e100

08004bc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	db12      	blt.n	8004c00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	f003 021f 	and.w	r2, r3, #31
 8004be0:	490a      	ldr	r1, [pc, #40]	@ (8004c0c <__NVIC_DisableIRQ+0x44>)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	2001      	movs	r0, #1
 8004bea:	fa00 f202 	lsl.w	r2, r0, r2
 8004bee:	3320      	adds	r3, #32
 8004bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bf4:	f3bf 8f4f 	dsb	sy
}
 8004bf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bfa:	f3bf 8f6f 	isb	sy
}
 8004bfe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	e000e100 	.word	0xe000e100

08004c10 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	db0c      	blt.n	8004c3c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	f003 021f 	and.w	r2, r3, #31
 8004c28:	4907      	ldr	r1, [pc, #28]	@ (8004c48 <__NVIC_SetPendingIRQ+0x38>)
 8004c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	2001      	movs	r0, #1
 8004c32:	fa00 f202 	lsl.w	r2, r0, r2
 8004c36:	3340      	adds	r3, #64	@ 0x40
 8004c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	e000e100 	.word	0xe000e100

08004c4c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	db0c      	blt.n	8004c78 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	f003 021f 	and.w	r2, r3, #31
 8004c64:	4907      	ldr	r1, [pc, #28]	@ (8004c84 <__NVIC_ClearPendingIRQ+0x38>)
 8004c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c72:	3360      	adds	r3, #96	@ 0x60
 8004c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	e000e100 	.word	0xe000e100

08004c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	6039      	str	r1, [r7, #0]
 8004c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	db0a      	blt.n	8004cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	490c      	ldr	r1, [pc, #48]	@ (8004cd4 <__NVIC_SetPriority+0x4c>)
 8004ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca6:	0112      	lsls	r2, r2, #4
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	440b      	add	r3, r1
 8004cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cb0:	e00a      	b.n	8004cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4908      	ldr	r1, [pc, #32]	@ (8004cd8 <__NVIC_SetPriority+0x50>)
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	3b04      	subs	r3, #4
 8004cc0:	0112      	lsls	r2, r2, #4
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	761a      	strb	r2, [r3, #24]
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	e000e100 	.word	0xe000e100
 8004cd8:	e000ed00 	.word	0xe000ed00

08004cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b089      	sub	sp, #36	@ 0x24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f1c3 0307 	rsb	r3, r3, #7
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	bf28      	it	cs
 8004cfa:	2304      	movcs	r3, #4
 8004cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3304      	adds	r3, #4
 8004d02:	2b06      	cmp	r3, #6
 8004d04:	d902      	bls.n	8004d0c <NVIC_EncodePriority+0x30>
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	3b03      	subs	r3, #3
 8004d0a:	e000      	b.n	8004d0e <NVIC_EncodePriority+0x32>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43da      	mvns	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	401a      	ands	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	43d9      	mvns	r1, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d34:	4313      	orrs	r3, r2
         );
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3724      	adds	r7, #36	@ 0x24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d54:	d301      	bcc.n	8004d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d56:	2301      	movs	r3, #1
 8004d58:	e00f      	b.n	8004d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d84 <SysTick_Config+0x40>)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d62:	210f      	movs	r1, #15
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d68:	f7ff ff8e 	bl	8004c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d6c:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <SysTick_Config+0x40>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d72:	4b04      	ldr	r3, [pc, #16]	@ (8004d84 <SysTick_Config+0x40>)
 8004d74:	2207      	movs	r2, #7
 8004d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	e000e010 	.word	0xe000e010

08004d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff fec9 	bl	8004b28 <__NVIC_SetPriorityGrouping>
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b086      	sub	sp, #24
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	4603      	mov	r3, r0
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dac:	f7ff fee0 	bl	8004b70 <__NVIC_GetPriorityGrouping>
 8004db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	6978      	ldr	r0, [r7, #20]
 8004db8:	f7ff ff90 	bl	8004cdc <NVIC_EncodePriority>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff ff5f 	bl	8004c88 <__NVIC_SetPriority>
}
 8004dca:	bf00      	nop
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	4603      	mov	r3, r0
 8004dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff fed3 	bl	8004b8c <__NVIC_EnableIRQ>
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	4603      	mov	r3, r0
 8004df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff fee3 	bl	8004bc8 <__NVIC_DisableIRQ>
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff96 	bl	8004d44 <SysTick_Config>
 8004e18:	4603      	mov	r3, r0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	4603      	mov	r3, r0
 8004e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff feed 	bl	8004c10 <__NVIC_SetPendingIRQ>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	4603      	mov	r3, r0
 8004e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fefd 	bl	8004c4c <__NVIC_ClearPendingIRQ>
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e6a:	e146      	b.n	80050fa <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	2101      	movs	r1, #1
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8138 	beq.w	80050f4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d005      	beq.n	8004e9c <HAL_GPIO_Init+0x40>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d130      	bne.n	8004efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 0201 	and.w	r2, r3, #1
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d017      	beq.n	8004f3a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	2203      	movs	r2, #3
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d123      	bne.n	8004f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	08da      	lsrs	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3208      	adds	r2, #8
 8004f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	220f      	movs	r2, #15
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4013      	ands	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	08da      	lsrs	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3208      	adds	r2, #8
 8004f88:	6939      	ldr	r1, [r7, #16]
 8004f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	2203      	movs	r2, #3
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f003 0203 	and.w	r2, r3, #3
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 8092 	beq.w	80050f4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004fd0:	4a51      	ldr	r2, [pc, #324]	@ (8005118 <HAL_GPIO_Init+0x2bc>)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	089b      	lsrs	r3, r3, #2
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	220f      	movs	r2, #15
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	43db      	mvns	r3, r3
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ffa:	d013      	beq.n	8005024 <HAL_GPIO_Init+0x1c8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a47      	ldr	r2, [pc, #284]	@ (800511c <HAL_GPIO_Init+0x2c0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00d      	beq.n	8005020 <HAL_GPIO_Init+0x1c4>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a46      	ldr	r2, [pc, #280]	@ (8005120 <HAL_GPIO_Init+0x2c4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d007      	beq.n	800501c <HAL_GPIO_Init+0x1c0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a45      	ldr	r2, [pc, #276]	@ (8005124 <HAL_GPIO_Init+0x2c8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d101      	bne.n	8005018 <HAL_GPIO_Init+0x1bc>
 8005014:	2304      	movs	r3, #4
 8005016:	e006      	b.n	8005026 <HAL_GPIO_Init+0x1ca>
 8005018:	2307      	movs	r3, #7
 800501a:	e004      	b.n	8005026 <HAL_GPIO_Init+0x1ca>
 800501c:	2302      	movs	r3, #2
 800501e:	e002      	b.n	8005026 <HAL_GPIO_Init+0x1ca>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_GPIO_Init+0x1ca>
 8005024:	2300      	movs	r3, #0
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	f002 0203 	and.w	r2, r2, #3
 800502c:	0092      	lsls	r2, r2, #2
 800502e:	4093      	lsls	r3, r2
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005036:	4938      	ldr	r1, [pc, #224]	@ (8005118 <HAL_GPIO_Init+0x2bc>)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	3302      	adds	r3, #2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005044:	4b38      	ldr	r3, [pc, #224]	@ (8005128 <HAL_GPIO_Init+0x2cc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	43db      	mvns	r3, r3
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4013      	ands	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005068:	4a2f      	ldr	r2, [pc, #188]	@ (8005128 <HAL_GPIO_Init+0x2cc>)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800506e:	4b2e      	ldr	r3, [pc, #184]	@ (8005128 <HAL_GPIO_Init+0x2cc>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	43db      	mvns	r3, r3
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4013      	ands	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005092:	4a25      	ldr	r2, [pc, #148]	@ (8005128 <HAL_GPIO_Init+0x2cc>)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005098:	4b23      	ldr	r3, [pc, #140]	@ (8005128 <HAL_GPIO_Init+0x2cc>)
 800509a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800509e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	43db      	mvns	r3, r3
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4013      	ands	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050be:	4a1a      	ldr	r2, [pc, #104]	@ (8005128 <HAL_GPIO_Init+0x2cc>)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80050c6:	4b18      	ldr	r3, [pc, #96]	@ (8005128 <HAL_GPIO_Init+0x2cc>)
 80050c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050ec:	4a0e      	ldr	r2, [pc, #56]	@ (8005128 <HAL_GPIO_Init+0x2cc>)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	3301      	adds	r3, #1
 80050f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	f47f aeb1 	bne.w	8004e6c <HAL_GPIO_Init+0x10>
  }
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	40010000 	.word	0x40010000
 800511c:	48000400 	.word	0x48000400
 8005120:	48000800 	.word	0x48000800
 8005124:	48001000 	.word	0x48001000
 8005128:	58000800 	.word	0x58000800

0800512c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005132:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <HAL_HSEM_IRQHandler+0x30>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005138:	4b08      	ldr	r3, [pc, #32]	@ (800515c <HAL_HSEM_IRQHandler+0x30>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	43db      	mvns	r3, r3
 8005140:	4906      	ldr	r1, [pc, #24]	@ (800515c <HAL_HSEM_IRQHandler+0x30>)
 8005142:	4013      	ands	r3, r2
 8005144:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005146:	4a05      	ldr	r2, [pc, #20]	@ (800515c <HAL_HSEM_IRQHandler+0x30>)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f807 	bl	8005160 <HAL_HSEM_FreeCallback>
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	58001500 	.word	0x58001500

08005160 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e08d      	b.n	80052a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fabe 	bl	800471c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	@ 0x24
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d107      	bne.n	80051ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	e006      	b.n	80051fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d108      	bne.n	8005216 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	e007      	b.n	8005226 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005224:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69d9      	ldr	r1, [r3, #28]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1a      	ldr	r2, [r3, #32]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	461a      	mov	r2, r3
 80052b8:	460b      	mov	r3, r1
 80052ba:	817b      	strh	r3, [r7, #10]
 80052bc:	4613      	mov	r3, r2
 80052be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	f040 80fd 	bne.w	80054c8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_I2C_Master_Transmit+0x30>
 80052d8:	2302      	movs	r3, #2
 80052da:	e0f6      	b.n	80054ca <HAL_I2C_Master_Transmit+0x21e>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052e4:	f7ff fbfc 	bl	8004ae0 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	2319      	movs	r3, #25
 80052f0:	2201      	movs	r2, #1
 80052f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 fbea 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0e1      	b.n	80054ca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2221      	movs	r2, #33	@ 0x21
 800530a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2210      	movs	r2, #16
 8005312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	893a      	ldrh	r2, [r7, #8]
 8005326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	2bff      	cmp	r3, #255	@ 0xff
 8005336:	d906      	bls.n	8005346 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	22ff      	movs	r2, #255	@ 0xff
 800533c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800533e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e007      	b.n	8005356 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005350:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005354:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	d024      	beq.n	80053a8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	781a      	ldrb	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005392:	b2db      	uxtb	r3, r3
 8005394:	3301      	adds	r3, #1
 8005396:	b2da      	uxtb	r2, r3
 8005398:	8979      	ldrh	r1, [r7, #10]
 800539a:	4b4e      	ldr	r3, [pc, #312]	@ (80054d4 <HAL_I2C_Master_Transmit+0x228>)
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 fd59 	bl	8005e58 <I2C_TransferConfig>
 80053a6:	e066      	b.n	8005476 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	8979      	ldrh	r1, [r7, #10]
 80053b0:	4b48      	ldr	r3, [pc, #288]	@ (80054d4 <HAL_I2C_Master_Transmit+0x228>)
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fd4e 	bl	8005e58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80053bc:	e05b      	b.n	8005476 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	6a39      	ldr	r1, [r7, #32]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fbdd 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e07b      	b.n	80054ca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	781a      	ldrb	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d034      	beq.n	8005476 <HAL_I2C_Master_Transmit+0x1ca>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005410:	2b00      	cmp	r3, #0
 8005412:	d130      	bne.n	8005476 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	2200      	movs	r2, #0
 800541c:	2180      	movs	r1, #128	@ 0x80
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 fb56 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e04d      	b.n	80054ca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	2bff      	cmp	r3, #255	@ 0xff
 8005436:	d90e      	bls.n	8005456 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	22ff      	movs	r2, #255	@ 0xff
 800543c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005442:	b2da      	uxtb	r2, r3
 8005444:	8979      	ldrh	r1, [r7, #10]
 8005446:	2300      	movs	r3, #0
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fd02 	bl	8005e58 <I2C_TransferConfig>
 8005454:	e00f      	b.n	8005476 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005464:	b2da      	uxtb	r2, r3
 8005466:	8979      	ldrh	r1, [r7, #10]
 8005468:	2300      	movs	r3, #0
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fcf1 	bl	8005e58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d19e      	bne.n	80053be <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	6a39      	ldr	r1, [r7, #32]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fbc3 	bl	8005c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e01a      	b.n	80054ca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2220      	movs	r2, #32
 800549a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b0c      	ldr	r3, [pc, #48]	@ (80054d8 <HAL_I2C_Master_Transmit+0x22c>)
 80054a8:	400b      	ands	r3, r1
 80054aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	80002000 	.word	0x80002000
 80054d8:	fe00e800 	.word	0xfe00e800

080054dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	4608      	mov	r0, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	461a      	mov	r2, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	817b      	strh	r3, [r7, #10]
 80054ee:	460b      	mov	r3, r1
 80054f0:	813b      	strh	r3, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b20      	cmp	r3, #32
 8005500:	f040 80f9 	bne.w	80056f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_I2C_Mem_Write+0x34>
 800550a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005516:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0ed      	b.n	80056f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_I2C_Mem_Write+0x4e>
 8005526:	2302      	movs	r3, #2
 8005528:	e0e6      	b.n	80056f8 <HAL_I2C_Mem_Write+0x21c>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005532:	f7ff fad5 	bl	8004ae0 <HAL_GetTick>
 8005536:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	2319      	movs	r3, #25
 800553e:	2201      	movs	r2, #1
 8005540:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 fac3 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0d1      	b.n	80056f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2221      	movs	r2, #33	@ 0x21
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2240      	movs	r2, #64	@ 0x40
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a3a      	ldr	r2, [r7, #32]
 800556e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005574:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800557c:	88f8      	ldrh	r0, [r7, #6]
 800557e:	893a      	ldrh	r2, [r7, #8]
 8005580:	8979      	ldrh	r1, [r7, #10]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	4603      	mov	r3, r0
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f9d3 	bl	8005938 <I2C_RequestMemoryWrite>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0a9      	b.n	80056f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2bff      	cmp	r3, #255	@ 0xff
 80055ac:	d90e      	bls.n	80055cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	22ff      	movs	r2, #255	@ 0xff
 80055b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	8979      	ldrh	r1, [r7, #10]
 80055bc:	2300      	movs	r3, #0
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fc47 	bl	8005e58 <I2C_TransferConfig>
 80055ca:	e00f      	b.n	80055ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	8979      	ldrh	r1, [r7, #10]
 80055de:	2300      	movs	r3, #0
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fc36 	bl	8005e58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 fac6 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e07b      	b.n	80056f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d034      	beq.n	80056a4 <HAL_I2C_Mem_Write+0x1c8>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563e:	2b00      	cmp	r3, #0
 8005640:	d130      	bne.n	80056a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005648:	2200      	movs	r2, #0
 800564a:	2180      	movs	r1, #128	@ 0x80
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fa3f 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e04d      	b.n	80056f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	2bff      	cmp	r3, #255	@ 0xff
 8005664:	d90e      	bls.n	8005684 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	22ff      	movs	r2, #255	@ 0xff
 800566a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005670:	b2da      	uxtb	r2, r3
 8005672:	8979      	ldrh	r1, [r7, #10]
 8005674:	2300      	movs	r3, #0
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fbeb 	bl	8005e58 <I2C_TransferConfig>
 8005682:	e00f      	b.n	80056a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005692:	b2da      	uxtb	r2, r3
 8005694:	8979      	ldrh	r1, [r7, #10]
 8005696:	2300      	movs	r3, #0
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fbda 	bl	8005e58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d19e      	bne.n	80055ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 faac 	bl	8005c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e01a      	b.n	80056f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2220      	movs	r2, #32
 80056c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005700 <HAL_I2C_Mem_Write+0x224>)
 80056d6:	400b      	ands	r3, r1
 80056d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	fe00e800 	.word	0xfe00e800

08005704 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	4608      	mov	r0, r1
 800570e:	4611      	mov	r1, r2
 8005710:	461a      	mov	r2, r3
 8005712:	4603      	mov	r3, r0
 8005714:	817b      	strh	r3, [r7, #10]
 8005716:	460b      	mov	r3, r1
 8005718:	813b      	strh	r3, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b20      	cmp	r3, #32
 8005728:	f040 80fd 	bne.w	8005926 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_I2C_Mem_Read+0x34>
 8005732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800573e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0f1      	b.n	8005928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_I2C_Mem_Read+0x4e>
 800574e:	2302      	movs	r3, #2
 8005750:	e0ea      	b.n	8005928 <HAL_I2C_Mem_Read+0x224>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800575a:	f7ff f9c1 	bl	8004ae0 <HAL_GetTick>
 800575e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2319      	movs	r3, #25
 8005766:	2201      	movs	r2, #1
 8005768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f9af 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0d5      	b.n	8005928 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2222      	movs	r2, #34	@ 0x22
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2240      	movs	r2, #64	@ 0x40
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a3a      	ldr	r2, [r7, #32]
 8005796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800579c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057a4:	88f8      	ldrh	r0, [r7, #6]
 80057a6:	893a      	ldrh	r2, [r7, #8]
 80057a8:	8979      	ldrh	r1, [r7, #10]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	9301      	str	r3, [sp, #4]
 80057ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	4603      	mov	r3, r0
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f913 	bl	80059e0 <I2C_RequestMemoryRead>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0ad      	b.n	8005928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2bff      	cmp	r3, #255	@ 0xff
 80057d4:	d90e      	bls.n	80057f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	22ff      	movs	r2, #255	@ 0xff
 80057da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	8979      	ldrh	r1, [r7, #10]
 80057e4:	4b52      	ldr	r3, [pc, #328]	@ (8005930 <HAL_I2C_Mem_Read+0x22c>)
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fb33 	bl	8005e58 <I2C_TransferConfig>
 80057f2:	e00f      	b.n	8005814 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005802:	b2da      	uxtb	r2, r3
 8005804:	8979      	ldrh	r1, [r7, #10]
 8005806:	4b4a      	ldr	r3, [pc, #296]	@ (8005930 <HAL_I2C_Mem_Read+0x22c>)
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fb22 	bl	8005e58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581a:	2200      	movs	r2, #0
 800581c:	2104      	movs	r1, #4
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f956 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e07c      	b.n	8005928 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d034      	beq.n	80058d4 <HAL_I2C_Mem_Read+0x1d0>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586e:	2b00      	cmp	r3, #0
 8005870:	d130      	bne.n	80058d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	2200      	movs	r2, #0
 800587a:	2180      	movs	r1, #128	@ 0x80
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f927 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e04d      	b.n	8005928 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2bff      	cmp	r3, #255	@ 0xff
 8005894:	d90e      	bls.n	80058b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	22ff      	movs	r2, #255	@ 0xff
 800589a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	8979      	ldrh	r1, [r7, #10]
 80058a4:	2300      	movs	r3, #0
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fad3 	bl	8005e58 <I2C_TransferConfig>
 80058b2:	e00f      	b.n	80058d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	8979      	ldrh	r1, [r7, #10]
 80058c6:	2300      	movs	r3, #0
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 fac2 	bl	8005e58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d19a      	bne.n	8005814 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f994 	bl	8005c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e01a      	b.n	8005928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2220      	movs	r2, #32
 80058f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6859      	ldr	r1, [r3, #4]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <HAL_I2C_Mem_Read+0x230>)
 8005906:	400b      	ands	r3, r1
 8005908:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e000      	b.n	8005928 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005926:	2302      	movs	r3, #2
  }
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	80002400 	.word	0x80002400
 8005934:	fe00e800 	.word	0xfe00e800

08005938 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	4608      	mov	r0, r1
 8005942:	4611      	mov	r1, r2
 8005944:	461a      	mov	r2, r3
 8005946:	4603      	mov	r3, r0
 8005948:	817b      	strh	r3, [r7, #10]
 800594a:	460b      	mov	r3, r1
 800594c:	813b      	strh	r3, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	b2da      	uxtb	r2, r3
 8005956:	8979      	ldrh	r1, [r7, #10]
 8005958:	4b20      	ldr	r3, [pc, #128]	@ (80059dc <I2C_RequestMemoryWrite+0xa4>)
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fa79 	bl	8005e58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	69b9      	ldr	r1, [r7, #24]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f909 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e02c      	b.n	80059d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d105      	bne.n	800598c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005980:	893b      	ldrh	r3, [r7, #8]
 8005982:	b2da      	uxtb	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	629a      	str	r2, [r3, #40]	@ 0x28
 800598a:	e015      	b.n	80059b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800598c:	893b      	ldrh	r3, [r7, #8]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	b29b      	uxth	r3, r3
 8005992:	b2da      	uxtb	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	69b9      	ldr	r1, [r7, #24]
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f8ef 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e012      	b.n	80059d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059ae:	893b      	ldrh	r3, [r7, #8]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2200      	movs	r2, #0
 80059c0:	2180      	movs	r1, #128	@ 0x80
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f884 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	80002000 	.word	0x80002000

080059e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	4608      	mov	r0, r1
 80059ea:	4611      	mov	r1, r2
 80059ec:	461a      	mov	r2, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	817b      	strh	r3, [r7, #10]
 80059f2:	460b      	mov	r3, r1
 80059f4:	813b      	strh	r3, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	8979      	ldrh	r1, [r7, #10]
 8005a00:	4b20      	ldr	r3, [pc, #128]	@ (8005a84 <I2C_RequestMemoryRead+0xa4>)
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fa26 	bl	8005e58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	69b9      	ldr	r1, [r7, #24]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f8b6 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e02c      	b.n	8005a7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d105      	bne.n	8005a32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a26:	893b      	ldrh	r3, [r7, #8]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a30:	e015      	b.n	8005a5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a32:	893b      	ldrh	r3, [r7, #8]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	69b9      	ldr	r1, [r7, #24]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 f89c 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e012      	b.n	8005a7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2200      	movs	r2, #0
 8005a66:	2140      	movs	r1, #64	@ 0x40
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f831 	bl	8005ad0 <I2C_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	80002000 	.word	0x80002000

08005a88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d103      	bne.n	8005aa6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d007      	beq.n	8005ac4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0201 	orr.w	r2, r2, #1
 8005ac2:	619a      	str	r2, [r3, #24]
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ae0:	e03b      	b.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f8d6 	bl	8005c98 <I2C_IsErrorOccurred>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e041      	b.n	8005b7a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005afc:	d02d      	beq.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afe:	f7fe ffef 	bl	8004ae0 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d302      	bcc.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d122      	bne.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	bf0c      	ite	eq
 8005b24:	2301      	moveq	r3, #1
 8005b26:	2300      	movne	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d113      	bne.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b36:	f043 0220 	orr.w	r2, r3, #32
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e00f      	b.n	8005b7a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	bf0c      	ite	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	2300      	movne	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d0b4      	beq.n	8005ae2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b8e:	e033      	b.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f87f 	bl	8005c98 <I2C_IsErrorOccurred>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e031      	b.n	8005c08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005baa:	d025      	beq.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bac:	f7fe ff98 	bl	8004ae0 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d302      	bcc.n	8005bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d11a      	bne.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d013      	beq.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd4:	f043 0220 	orr.w	r2, r3, #32
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e007      	b.n	8005c08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d1c4      	bne.n	8005b90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c1c:	e02f      	b.n	8005c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f838 	bl	8005c98 <I2C_IsErrorOccurred>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e02d      	b.n	8005c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c32:	f7fe ff55 	bl	8004ae0 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d302      	bcc.n	8005c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d11a      	bne.n	8005c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d013      	beq.n	8005c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e007      	b.n	8005c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d1c8      	bne.n	8005c1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	@ 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d068      	beq.n	8005d96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2210      	movs	r2, #16
 8005cca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ccc:	e049      	b.n	8005d62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cd4:	d045      	beq.n	8005d62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005cd6:	f7fe ff03 	bl	8004ae0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <I2C_IsErrorOccurred+0x54>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d13a      	bne.n	8005d62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cf6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d0e:	d121      	bne.n	8005d54 <I2C_IsErrorOccurred+0xbc>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d16:	d01d      	beq.n	8005d54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d01a      	beq.n	8005d54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005d2e:	f7fe fed7 	bl	8004ae0 <HAL_GetTick>
 8005d32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d34:	e00e      	b.n	8005d54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005d36:	f7fe fed3 	bl	8004ae0 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b19      	cmp	r3, #25
 8005d42:	d907      	bls.n	8005d54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	f043 0320 	orr.w	r3, r3, #32
 8005d4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005d52:	e006      	b.n	8005d62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d1e9      	bne.n	8005d36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d003      	beq.n	8005d78 <I2C_IsErrorOccurred+0xe0>
 8005d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0aa      	beq.n	8005cce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d103      	bne.n	8005d88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2220      	movs	r2, #32
 8005d86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	f043 0304 	orr.w	r3, r3, #4
 8005d8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005db8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	f043 0308 	orr.w	r3, r3, #8
 8005dd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	f043 0302 	orr.w	r3, r3, #2
 8005df2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01c      	beq.n	8005e46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fe3b 	bl	8005a88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6859      	ldr	r1, [r3, #4]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <I2C_IsErrorOccurred+0x1bc>)
 8005e1e:	400b      	ands	r3, r1
 8005e20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005e46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3728      	adds	r7, #40	@ 0x28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	fe00e800 	.word	0xfe00e800

08005e58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	817b      	strh	r3, [r7, #10]
 8005e66:	4613      	mov	r3, r2
 8005e68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e6a:	897b      	ldrh	r3, [r7, #10]
 8005e6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e70:	7a7b      	ldrb	r3, [r7, #9]
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	0d5b      	lsrs	r3, r3, #21
 8005e92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e96:	4b08      	ldr	r3, [pc, #32]	@ (8005eb8 <I2C_TransferConfig+0x60>)
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	ea02 0103 	and.w	r1, r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	03ff63ff 	.word	0x03ff63ff

08005ebc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d138      	bne.n	8005f44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e032      	b.n	8005f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2224      	movs	r2, #36	@ 0x24
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e000      	b.n	8005f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d139      	bne.n	8005fdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e033      	b.n	8005fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2224      	movs	r2, #36	@ 0x24
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0201 	bic.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005fa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01e      	beq.n	800603c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005ffe:	4b13      	ldr	r3, [pc, #76]	@ (800604c <HAL_IPCC_Init+0x60>)
 8006000:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fe fbcc 	bl	80047ac <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8006014:	68b8      	ldr	r0, [r7, #8]
 8006016:	f000 f85b 	bl	80060d0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f82c 	bl	8006084 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800603a:	e001      	b.n	8006040 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	58000c00 	.word	0x58000c00

08006050 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	4613      	mov	r3, r2
 8006076:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	e00f      	b.n	80060b2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	4a0b      	ldr	r2, [pc, #44]	@ (80060c8 <IPCC_SetDefaultCallbacks+0x44>)
 800609c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3306      	adds	r3, #6
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	4a08      	ldr	r2, [pc, #32]	@ (80060cc <IPCC_SetDefaultCallbacks+0x48>)
 80060aa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3301      	adds	r3, #1
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b05      	cmp	r3, #5
 80060b6:	d9ec      	bls.n	8006092 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	08006051 	.word	0x08006051
 80060cc:	0800606b 	.word	0x0800606b

080060d0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80060e4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	223f      	movs	r2, #63	@ 0x3f
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060fc:	4b05      	ldr	r3, [pc, #20]	@ (8006114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a04      	ldr	r2, [pc, #16]	@ (8006114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006106:	6013      	str	r3, [r2, #0]
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	58000400 	.word	0x58000400

08006118 <LL_PWR_EnableSRAM2Retention>:
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 800611c:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <LL_PWR_EnableSRAM2Retention+0x1c>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	4a04      	ldr	r2, [pc, #16]	@ (8006134 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8006122:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006126:	6093      	str	r3, [r2, #8]
}
 8006128:	bf00      	nop
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	58000400 	.word	0x58000400

08006138 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 800613c:	f7ff ffec 	bl	8006118 <LL_PWR_EnableSRAM2Retention>
}
 8006140:	bf00      	nop
 8006142:	bd80      	pop	{r7, pc}

08006144 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006156:	d101      	bne.n	800615c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <LL_RCC_HSE_Enable>:
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800616c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800617a:	6013      	str	r3, [r2, #0]
}
 800617c:	bf00      	nop
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <LL_RCC_HSE_Disable>:
{
 8006186:	b480      	push	{r7}
 8006188:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800618a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006198:	6013      	str	r3, [r2, #0]
}
 800619a:	bf00      	nop
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <LL_RCC_HSE_IsReady>:
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80061a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061b6:	d101      	bne.n	80061bc <LL_RCC_HSE_IsReady+0x18>
 80061b8:	2301      	movs	r3, #1
 80061ba:	e000      	b.n	80061be <LL_RCC_HSE_IsReady+0x1a>
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <LL_RCC_HSI_Enable>:
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80061cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061da:	6013      	str	r3, [r2, #0]
}
 80061dc:	bf00      	nop
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <LL_RCC_HSI_Disable>:
{
 80061e6:	b480      	push	{r7}
 80061e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80061ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061f8:	6013      	str	r3, [r2, #0]
}
 80061fa:	bf00      	nop
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <LL_RCC_HSI_IsReady>:
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006216:	d101      	bne.n	800621c <LL_RCC_HSI_IsReady+0x18>
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <LL_RCC_HSI_IsReady+0x1a>
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	061b      	lsls	r3, r3, #24
 800623e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006242:	4313      	orrs	r3, r2
 8006244:	604b      	str	r3, [r1, #4]
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <LL_RCC_LSE_Enable>:
{
 8006252:	b480      	push	{r7}
 8006254:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800626a:	bf00      	nop
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <LL_RCC_LSE_Disable>:
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006284:	f023 0301 	bic.w	r3, r3, #1
 8006288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800628c:	bf00      	nop
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <LL_RCC_LSE_EnableBypass>:
{
 8006296:	b480      	push	{r7}
 8006298:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800629a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062a6:	f043 0304 	orr.w	r3, r3, #4
 80062aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80062ae:	bf00      	nop
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <LL_RCC_LSE_DisableBypass>:
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80062bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062c8:	f023 0304 	bic.w	r3, r3, #4
 80062cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80062d0:	bf00      	nop
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <LL_RCC_LSE_IsReady>:
{
 80062da:	b480      	push	{r7}
 80062dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80062de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d101      	bne.n	80062f2 <LL_RCC_LSE_IsReady+0x18>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <LL_RCC_LSE_IsReady+0x1a>
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <LL_RCC_LSI1_Enable>:
{
 80062fe:	b480      	push	{r7}
 8006300:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800630a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <LL_RCC_LSI1_Disable>:
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800632c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006338:	bf00      	nop
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <LL_RCC_LSI1_IsReady>:
{
 8006342:	b480      	push	{r7}
 8006344:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800634a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d101      	bne.n	800635a <LL_RCC_LSI1_IsReady+0x18>
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <LL_RCC_LSI1_IsReady+0x1a>
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_RCC_LSI2_Enable>:
{
 8006366:	b480      	push	{r7}
 8006368:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800636e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006372:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006376:	f043 0304 	orr.w	r3, r3, #4
 800637a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800637e:	bf00      	nop
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <LL_RCC_LSI2_Disable>:
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800638c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006394:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006398:	f023 0304 	bic.w	r3, r3, #4
 800639c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <LL_RCC_LSI2_IsReady>:
{
 80063aa:	b480      	push	{r7}
 80063ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80063ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d101      	bne.n	80063c2 <LL_RCC_LSI2_IsReady+0x18>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <LL_RCC_LSI2_IsReady+0x1a>
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <LL_RCC_LSI2_SetTrimming>:
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80063d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063de:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <LL_RCC_MSI_Enable>:
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800640a:	f043 0301 	orr.w	r3, r3, #1
 800640e:	6013      	str	r3, [r2, #0]
}
 8006410:	bf00      	nop
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <LL_RCC_MSI_Disable>:
{
 800641a:	b480      	push	{r7}
 800641c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800641e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006428:	f023 0301 	bic.w	r3, r3, #1
 800642c:	6013      	str	r3, [r2, #0]
}
 800642e:	bf00      	nop
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_RCC_MSI_IsReady>:
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800643c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b02      	cmp	r3, #2
 8006448:	d101      	bne.n	800644e <LL_RCC_MSI_IsReady+0x16>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <LL_RCC_MSI_IsReady+0x18>
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <LL_RCC_MSI_SetRange>:
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800646c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <LL_RCC_MSI_GetRange>:
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006492:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2bb0      	cmp	r3, #176	@ 0xb0
 8006498:	d901      	bls.n	800649e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800649a:	23b0      	movs	r3, #176	@ 0xb0
 800649c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800649e:	687b      	ldr	r3, [r7, #4]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <LL_RCC_MSI_SetCalibTrimming>:
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	021b      	lsls	r3, r3, #8
 80064c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064c6:	4313      	orrs	r3, r2
 80064c8:	604b      	str	r3, [r1, #4]
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <LL_RCC_SetSysClkSource>:
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80064de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f023 0203 	bic.w	r2, r3, #3
 80064e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <LL_RCC_GetSysClkSource>:
{
 80064fe:	b480      	push	{r7}
 8006500:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 030c 	and.w	r3, r3, #12
}
 800650c:	4618      	mov	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <LL_RCC_SetAHBPrescaler>:
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800651e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006528:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4313      	orrs	r3, r2
 8006530:	608b      	str	r3, [r1, #8]
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <LL_C2_RCC_SetAHBPrescaler>:
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800654a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800654e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006552:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <LL_RCC_SetAHB4Prescaler>:
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006576:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800657a:	f023 020f 	bic.w	r2, r3, #15
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <LL_RCC_SetAPB1Prescaler>:
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80065a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	608b      	str	r3, [r1, #8]
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <LL_RCC_SetAPB2Prescaler>:
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80065c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80065d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4313      	orrs	r3, r2
 80065da:	608b      	str	r3, [r1, #8]
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <LL_RCC_GetAHBPrescaler>:
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80065ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <LL_RCC_GetAHB4Prescaler>:
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006608:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006612:	4618      	mov	r0, r3
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800662a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800662e:	6013      	str	r3, [r2, #0]
}
 8006630:	bf00      	nop
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800663a:	b480      	push	{r7}
 800663c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800663e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006648:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800664c:	6013      	str	r3, [r2, #0]
}
 800664e:	bf00      	nop
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800665c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800666a:	d101      	bne.n	8006670 <LL_RCC_PLL_IsReady+0x18>
 800666c:	2301      	movs	r3, #1
 800666e:	e000      	b.n	8006672 <LL_RCC_PLL_IsReady+0x1a>
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800668c:	4618      	mov	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006696:	b480      	push	{r7}
 8006698:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800669a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80066ae:	b480      	push	{r7}
 80066b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80066bc:	4618      	mov	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80066c6:	b480      	push	{r7}
 80066c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80066ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0303 	and.w	r3, r3, #3
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80066de:	b480      	push	{r7}
 80066e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80066e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066f0:	d101      	bne.n	80066f6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006702:	b480      	push	{r7}
 8006704:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800670a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800670e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006716:	d101      	bne.n	800671c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006718:	2301      	movs	r3, #1
 800671a:	e000      	b.n	800671e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800672c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006730:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800673c:	d101      	bne.n	8006742 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800674e:	b480      	push	{r7}
 8006750:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006760:	d101      	bne.n	8006766 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006772:	b480      	push	{r7}
 8006774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006780:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006784:	d101      	bne.n	800678a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006798:	b590      	push	{r4, r7, lr}
 800679a:	b08d      	sub	sp, #52	@ 0x34
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e324      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 808d 	beq.w	80068d2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067b8:	f7ff fea1 	bl	80064fe <LL_RCC_GetSysClkSource>
 80067bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067be:	f7ff ff82 	bl	80066c6 <LL_RCC_PLL_GetMainSource>
 80067c2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_RCC_OscConfig+0x3e>
 80067ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067cc:	2b0c      	cmp	r3, #12
 80067ce:	d147      	bne.n	8006860 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80067d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d144      	bne.n	8006860 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e308      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80067e6:	f7ff fe4c 	bl	8006482 <LL_RCC_MSI_GetRange>
 80067ea:	4603      	mov	r3, r0
 80067ec:	429c      	cmp	r4, r3
 80067ee:	d914      	bls.n	800681a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fcc5 	bl	8007184 <RCC_SetFlashLatencyFromMSIRange>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e2f7      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff fe26 	bl	800645a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fe4a 	bl	80064ac <LL_RCC_MSI_SetCalibTrimming>
 8006818:	e013      	b.n	8006842 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff fe1b 	bl	800645a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fe3f 	bl	80064ac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fca6 	bl	8007184 <RCC_SetFlashLatencyFromMSIRange>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e2d8      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006842:	f000 fc8b 	bl	800715c <HAL_RCC_GetHCLKFreq>
 8006846:	4603      	mov	r3, r0
 8006848:	4aa4      	ldr	r2, [pc, #656]	@ (8006adc <HAL_RCC_OscConfig+0x344>)
 800684a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800684c:	4ba4      	ldr	r3, [pc, #656]	@ (8006ae0 <HAL_RCC_OscConfig+0x348>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f8f7 	bl	8004a44 <HAL_InitTick>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d039      	beq.n	80068d0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e2c9      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01e      	beq.n	80068a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006868:	f7ff fdc8 	bl	80063fc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800686c:	f7fe f938 	bl	8004ae0 <HAL_GetTick>
 8006870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006874:	f7fe f934 	bl	8004ae0 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e2b6      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006886:	f7ff fdd7 	bl	8006438 <LL_RCC_MSI_IsReady>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0f1      	beq.n	8006874 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff fde0 	bl	800645a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff fe04 	bl	80064ac <LL_RCC_MSI_SetCalibTrimming>
 80068a4:	e015      	b.n	80068d2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80068a6:	f7ff fdb8 	bl	800641a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068aa:	f7fe f919 	bl	8004ae0 <HAL_GetTick>
 80068ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068b2:	f7fe f915 	bl	8004ae0 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e297      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80068c4:	f7ff fdb8 	bl	8006438 <LL_RCC_MSI_IsReady>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f1      	bne.n	80068b2 <HAL_RCC_OscConfig+0x11a>
 80068ce:	e000      	b.n	80068d2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80068d0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d047      	beq.n	800696e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068de:	f7ff fe0e 	bl	80064fe <LL_RCC_GetSysClkSource>
 80068e2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068e4:	f7ff feef 	bl	80066c6 <LL_RCC_PLL_GetMainSource>
 80068e8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_OscConfig+0x164>
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	2b0c      	cmp	r3, #12
 80068f4:	d108      	bne.n	8006908 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d105      	bne.n	8006908 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d134      	bne.n	800696e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e275      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006910:	d102      	bne.n	8006918 <HAL_RCC_OscConfig+0x180>
 8006912:	f7ff fc29 	bl	8006168 <LL_RCC_HSE_Enable>
 8006916:	e001      	b.n	800691c <HAL_RCC_OscConfig+0x184>
 8006918:	f7ff fc35 	bl	8006186 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d012      	beq.n	800694a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006924:	f7fe f8dc 	bl	8004ae0 <HAL_GetTick>
 8006928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800692c:	f7fe f8d8 	bl	8004ae0 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b64      	cmp	r3, #100	@ 0x64
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e25a      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800693e:	f7ff fc31 	bl	80061a4 <LL_RCC_HSE_IsReady>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0f1      	beq.n	800692c <HAL_RCC_OscConfig+0x194>
 8006948:	e011      	b.n	800696e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694a:	f7fe f8c9 	bl	8004ae0 <HAL_GetTick>
 800694e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006952:	f7fe f8c5 	bl	8004ae0 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b64      	cmp	r3, #100	@ 0x64
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e247      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006964:	f7ff fc1e 	bl	80061a4 <LL_RCC_HSE_IsReady>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1f1      	bne.n	8006952 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d04c      	beq.n	8006a14 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800697a:	f7ff fdc0 	bl	80064fe <LL_RCC_GetSysClkSource>
 800697e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006980:	f7ff fea1 	bl	80066c6 <LL_RCC_PLL_GetMainSource>
 8006984:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b04      	cmp	r3, #4
 800698a:	d005      	beq.n	8006998 <HAL_RCC_OscConfig+0x200>
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b0c      	cmp	r3, #12
 8006990:	d10e      	bne.n	80069b0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d10b      	bne.n	80069b0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e227      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff fc3d 	bl	8006228 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80069ae:	e031      	b.n	8006a14 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d019      	beq.n	80069ec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069b8:	f7ff fc06 	bl	80061c8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069bc:	f7fe f890 	bl	8004ae0 <HAL_GetTick>
 80069c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c4:	f7fe f88c 	bl	8004ae0 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e20e      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80069d6:	f7ff fc15 	bl	8006204 <LL_RCC_HSI_IsReady>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0f1      	beq.n	80069c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff fc1f 	bl	8006228 <LL_RCC_HSI_SetCalibTrimming>
 80069ea:	e013      	b.n	8006a14 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ec:	f7ff fbfb 	bl	80061e6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f0:	f7fe f876 	bl	8004ae0 <HAL_GetTick>
 80069f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f8:	f7fe f872 	bl	8004ae0 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e1f4      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006a0a:	f7ff fbfb 	bl	8006204 <LL_RCC_HSI_IsReady>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1f1      	bne.n	80069f8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80a3 	beq.w	8006b74 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d076      	beq.n	8006b24 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d046      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006a42:	f7ff fc7e 	bl	8006342 <LL_RCC_LSI1_IsReady>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d113      	bne.n	8006a74 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006a4c:	f7ff fc57 	bl	80062fe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a50:	f7fe f846 	bl	8004ae0 <HAL_GetTick>
 8006a54:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a58:	f7fe f842 	bl	8004ae0 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e1c4      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006a6a:	f7ff fc6a 	bl	8006342 <LL_RCC_LSI1_IsReady>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f1      	beq.n	8006a58 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006a74:	f7ff fc77 	bl	8006366 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fe f832 	bl	8004ae0 <HAL_GetTick>
 8006a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006a80:	f7fe f82e 	bl	8004ae0 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e1b0      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006a92:	f7ff fc8a 	bl	80063aa <LL_RCC_LSI2_IsReady>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f1      	beq.n	8006a80 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fc94 	bl	80063ce <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006aa6:	f7ff fc3b 	bl	8006320 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aaa:	f7fe f819 	bl	8004ae0 <HAL_GetTick>
 8006aae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006ab2:	f7fe f815 	bl	8004ae0 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e197      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006ac4:	f7ff fc3d 	bl	8006342 <LL_RCC_LSI1_IsReady>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f1      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x31a>
 8006ace:	e051      	b.n	8006b74 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006ad0:	f7ff fc15 	bl	80062fe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad4:	f7fe f804 	bl	8004ae0 <HAL_GetTick>
 8006ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006ada:	e00c      	b.n	8006af6 <HAL_RCC_OscConfig+0x35e>
 8006adc:	20000014 	.word	0x20000014
 8006ae0:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006ae4:	f7fd fffc 	bl	8004ae0 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e17e      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006af6:	f7ff fc24 	bl	8006342 <LL_RCC_LSI1_IsReady>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f1      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006b00:	f7ff fc42 	bl	8006388 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006b06:	f7fd ffeb 	bl	8004ae0 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e16d      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006b18:	f7ff fc47 	bl	80063aa <LL_RCC_LSI2_IsReady>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f1      	bne.n	8006b06 <HAL_RCC_OscConfig+0x36e>
 8006b22:	e027      	b.n	8006b74 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006b24:	f7ff fc30 	bl	8006388 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b28:	f7fd ffda 	bl	8004ae0 <HAL_GetTick>
 8006b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006b30:	f7fd ffd6 	bl	8004ae0 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e158      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006b42:	f7ff fc32 	bl	80063aa <LL_RCC_LSI2_IsReady>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f1      	bne.n	8006b30 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006b4c:	f7ff fbe8 	bl	8006320 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b50:	f7fd ffc6 	bl	8004ae0 <HAL_GetTick>
 8006b54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006b58:	f7fd ffc2 	bl	8004ae0 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e144      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006b6a:	f7ff fbea 	bl	8006342 <LL_RCC_LSI1_IsReady>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1f1      	bne.n	8006b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d05b      	beq.n	8006c38 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b80:	4b9e      	ldr	r3, [pc, #632]	@ (8006dfc <HAL_RCC_OscConfig+0x664>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d114      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006b8c:	f7ff fab4 	bl	80060f8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b90:	f7fd ffa6 	bl	8004ae0 <HAL_GetTick>
 8006b94:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b98:	f7fd ffa2 	bl	8004ae0 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e124      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006baa:	4b94      	ldr	r3, [pc, #592]	@ (8006dfc <HAL_RCC_OscConfig+0x664>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d102      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x42c>
 8006bbe:	f7ff fb48 	bl	8006252 <LL_RCC_LSE_Enable>
 8006bc2:	e00c      	b.n	8006bde <HAL_RCC_OscConfig+0x446>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b05      	cmp	r3, #5
 8006bca:	d104      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x43e>
 8006bcc:	f7ff fb63 	bl	8006296 <LL_RCC_LSE_EnableBypass>
 8006bd0:	f7ff fb3f 	bl	8006252 <LL_RCC_LSE_Enable>
 8006bd4:	e003      	b.n	8006bde <HAL_RCC_OscConfig+0x446>
 8006bd6:	f7ff fb4d 	bl	8006274 <LL_RCC_LSE_Disable>
 8006bda:	f7ff fb6d 	bl	80062b8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d014      	beq.n	8006c10 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be6:	f7fd ff7b 	bl	8004ae0 <HAL_GetTick>
 8006bea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006bec:	e00a      	b.n	8006c04 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bee:	f7fd ff77 	bl	8004ae0 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e0f7      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006c04:	f7ff fb69 	bl	80062da <LL_RCC_LSE_IsReady>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0ef      	beq.n	8006bee <HAL_RCC_OscConfig+0x456>
 8006c0e:	e013      	b.n	8006c38 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c10:	f7fd ff66 	bl	8004ae0 <HAL_GetTick>
 8006c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006c16:	e00a      	b.n	8006c2e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c18:	f7fd ff62 	bl	8004ae0 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e0e2      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006c2e:	f7ff fb54 	bl	80062da <LL_RCC_LSE_IsReady>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1ef      	bne.n	8006c18 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80d8 	beq.w	8006df2 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c42:	f7ff fc5c 	bl	80064fe <LL_RCC_GetSysClkSource>
 8006c46:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	f040 80a6 	bne.w	8006da6 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f003 0203 	and.w	r2, r3, #3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d123      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d11c      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	0a1b      	lsrs	r3, r3, #8
 8006c7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d114      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d10d      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d106      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d054      	beq.n	8006d5a <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b0c      	cmp	r3, #12
 8006cb4:	d04f      	beq.n	8006d56 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006cb6:	f7ff fcc0 	bl	800663a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cba:	f7fd ff11 	bl	8004ae0 <HAL_GetTick>
 8006cbe:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc2:	f7fd ff0d 	bl	8004ae0 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e08f      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1ef      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	4b45      	ldr	r3, [pc, #276]	@ (8006e00 <HAL_RCC_OscConfig+0x668>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006cf4:	4311      	orrs	r1, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cfa:	0212      	lsls	r2, r2, #8
 8006cfc:	4311      	orrs	r1, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d02:	4311      	orrs	r1, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d08:	4311      	orrs	r1, r2
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006d18:	f7ff fc80 	bl	800661c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d2c:	f7fd fed8 	bl	8004ae0 <HAL_GetTick>
 8006d30:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d34:	f7fd fed4 	bl	8004ae0 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e056      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0ef      	beq.n	8006d34 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d54:	e04d      	b.n	8006df2 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e04c      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d144      	bne.n	8006df2 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d68:	f7ff fc58 	bl	800661c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d7c:	f7fd feb0 	bl	8004ae0 <HAL_GetTick>
 8006d80:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d82:	e008      	b.n	8006d96 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d84:	f7fd feac 	bl	8004ae0 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e02e      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0ef      	beq.n	8006d84 <HAL_RCC_OscConfig+0x5ec>
 8006da4:	e025      	b.n	8006df2 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d020      	beq.n	8006dee <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dac:	f7ff fc45 	bl	800663a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db0:	f7fd fe96 	bl	8004ae0 <HAL_GetTick>
 8006db4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db8:	f7fd fe92 	bl	8004ae0 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e014      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1ef      	bne.n	8006db8 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8006dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006de6:	f023 0303 	bic.w	r3, r3, #3
 8006dea:	60d3      	str	r3, [r2, #12]
 8006dec:	e001      	b.n	8006df2 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e000      	b.n	8006df4 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3734      	adds	r7, #52	@ 0x34
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd90      	pop	{r4, r7, pc}
 8006dfc:	58000400 	.word	0x58000400
 8006e00:	11c1808c 	.word	0x11c1808c

08006e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e12d      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e18:	4b98      	ldr	r3, [pc, #608]	@ (800707c <HAL_RCC_ClockConfig+0x278>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d91b      	bls.n	8006e5e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e26:	4b95      	ldr	r3, [pc, #596]	@ (800707c <HAL_RCC_ClockConfig+0x278>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f023 0207 	bic.w	r2, r3, #7
 8006e2e:	4993      	ldr	r1, [pc, #588]	@ (800707c <HAL_RCC_ClockConfig+0x278>)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e36:	f7fd fe53 	bl	8004ae0 <HAL_GetTick>
 8006e3a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e3e:	f7fd fe4f 	bl	8004ae0 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e111      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e50:	4b8a      	ldr	r3, [pc, #552]	@ (800707c <HAL_RCC_ClockConfig+0x278>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d1ef      	bne.n	8006e3e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d016      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fb51 	bl	8006516 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e74:	f7fd fe34 	bl	8004ae0 <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e7c:	f7fd fe30 	bl	8004ae0 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e0f2      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006e8e:	f7ff fc26 	bl	80066de <LL_RCC_IsActiveFlag_HPRE>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f1      	beq.n	8006e7c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d016      	beq.n	8006ed2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fb48 	bl	800653e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006eae:	f7fd fe17 	bl	8004ae0 <HAL_GetTick>
 8006eb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006eb6:	f7fd fe13 	bl	8004ae0 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e0d5      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006ec8:	f7ff fc1b 	bl	8006702 <LL_RCC_IsActiveFlag_C2HPRE>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0f1      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d016      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff fb41 	bl	800656a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ee8:	f7fd fdfa 	bl	8004ae0 <HAL_GetTick>
 8006eec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ef0:	f7fd fdf6 	bl	8004ae0 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e0b8      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006f02:	f7ff fc11 	bl	8006728 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0f1      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d016      	beq.n	8006f46 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff fb3b 	bl	8006598 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f22:	f7fd fddd 	bl	8004ae0 <HAL_GetTick>
 8006f26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f2a:	f7fd fdd9 	bl	8004ae0 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e09b      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006f3c:	f7ff fc07 	bl	800674e <LL_RCC_IsActiveFlag_PPRE1>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0f1      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d017      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fb31 	bl	80065c0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f5e:	f7fd fdbf 	bl	8004ae0 <HAL_GetTick>
 8006f62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006f64:	e008      	b.n	8006f78 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f66:	f7fd fdbb 	bl	8004ae0 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e07d      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006f78:	f7ff fbfb 	bl	8006772 <LL_RCC_IsActiveFlag_PPRE2>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0f1      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d043      	beq.n	8007016 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d106      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006f96:	f7ff f905 	bl	80061a4 <LL_RCC_HSE_IsReady>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d11e      	bne.n	8006fde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e067      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d106      	bne.n	8006fba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006fac:	f7ff fb54 	bl	8006658 <LL_RCC_PLL_IsReady>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d113      	bne.n	8006fde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e05c      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006fc2:	f7ff fa39 	bl	8006438 <LL_RCC_MSI_IsReady>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d108      	bne.n	8006fde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e051      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006fd0:	f7ff f918 	bl	8006204 <LL_RCC_HSI_IsReady>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e04a      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff fa77 	bl	80064d6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe8:	f7fd fd7a 	bl	8004ae0 <HAL_GetTick>
 8006fec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fee:	e00a      	b.n	8007006 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff0:	f7fd fd76 	bl	8004ae0 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e036      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007006:	f7ff fa7a 	bl	80064fe <LL_RCC_GetSysClkSource>
 800700a:	4602      	mov	r2, r0
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	429a      	cmp	r2, r3
 8007014:	d1ec      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007016:	4b19      	ldr	r3, [pc, #100]	@ (800707c <HAL_RCC_ClockConfig+0x278>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d21b      	bcs.n	800705c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007024:	4b15      	ldr	r3, [pc, #84]	@ (800707c <HAL_RCC_ClockConfig+0x278>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f023 0207 	bic.w	r2, r3, #7
 800702c:	4913      	ldr	r1, [pc, #76]	@ (800707c <HAL_RCC_ClockConfig+0x278>)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	4313      	orrs	r3, r2
 8007032:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007034:	f7fd fd54 	bl	8004ae0 <HAL_GetTick>
 8007038:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800703a:	e008      	b.n	800704e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800703c:	f7fd fd50 	bl	8004ae0 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e012      	b.n	8007074 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800704e:	4b0b      	ldr	r3, [pc, #44]	@ (800707c <HAL_RCC_ClockConfig+0x278>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d1ef      	bne.n	800703c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800705c:	f000 f87e 	bl	800715c <HAL_RCC_GetHCLKFreq>
 8007060:	4603      	mov	r3, r0
 8007062:	4a07      	ldr	r2, [pc, #28]	@ (8007080 <HAL_RCC_ClockConfig+0x27c>)
 8007064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007066:	f7fd fd47 	bl	8004af8 <HAL_GetTickPrio>
 800706a:	4603      	mov	r3, r0
 800706c:	4618      	mov	r0, r3
 800706e:	f7fd fce9 	bl	8004a44 <HAL_InitTick>
 8007072:	4603      	mov	r3, r0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	58004000 	.word	0x58004000
 8007080:	20000014 	.word	0x20000014

08007084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007084:	b590      	push	{r4, r7, lr}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800708a:	f7ff fa38 	bl	80064fe <LL_RCC_GetSysClkSource>
 800708e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007096:	f7ff f9f4 	bl	8006482 <LL_RCC_MSI_GetRange>
 800709a:	4603      	mov	r3, r0
 800709c:	091b      	lsrs	r3, r3, #4
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	4a2b      	ldr	r2, [pc, #172]	@ (8007150 <HAL_RCC_GetSysClockFreq+0xcc>)
 80070a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	e04b      	b.n	8007144 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d102      	bne.n	80070b8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070b2:	4b28      	ldr	r3, [pc, #160]	@ (8007154 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e045      	b.n	8007144 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d10a      	bne.n	80070d4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80070be:	f7ff f841 	bl	8006144 <LL_RCC_HSE_IsEnabledDiv2>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d102      	bne.n	80070ce <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80070c8:	4b22      	ldr	r3, [pc, #136]	@ (8007154 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e03a      	b.n	8007144 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80070ce:	4b22      	ldr	r3, [pc, #136]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xd4>)
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	e037      	b.n	8007144 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80070d4:	f7ff faf7 	bl	80066c6 <LL_RCC_PLL_GetMainSource>
 80070d8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d003      	beq.n	80070e8 <HAL_RCC_GetSysClockFreq+0x64>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d003      	beq.n	80070ee <HAL_RCC_GetSysClockFreq+0x6a>
 80070e6:	e00d      	b.n	8007104 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80070e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007154 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070ea:	60bb      	str	r3, [r7, #8]
        break;
 80070ec:	e015      	b.n	800711a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80070ee:	f7ff f829 	bl	8006144 <LL_RCC_HSE_IsEnabledDiv2>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d102      	bne.n	80070fe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80070f8:	4b16      	ldr	r3, [pc, #88]	@ (8007154 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070fa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80070fc:	e00d      	b.n	800711a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80070fe:	4b16      	ldr	r3, [pc, #88]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007100:	60bb      	str	r3, [r7, #8]
        break;
 8007102:	e00a      	b.n	800711a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007104:	f7ff f9bd 	bl	8006482 <LL_RCC_MSI_GetRange>
 8007108:	4603      	mov	r3, r0
 800710a:	091b      	lsrs	r3, r3, #4
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	4a0f      	ldr	r2, [pc, #60]	@ (8007150 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007116:	60bb      	str	r3, [r7, #8]
        break;
 8007118:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800711a:	f7ff faaf 	bl	800667c <LL_RCC_PLL_GetN>
 800711e:	4602      	mov	r2, r0
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	fb03 f402 	mul.w	r4, r3, r2
 8007126:	f7ff fac2 	bl	80066ae <LL_RCC_PLL_GetDivider>
 800712a:	4603      	mov	r3, r0
 800712c:	091b      	lsrs	r3, r3, #4
 800712e:	3301      	adds	r3, #1
 8007130:	fbb4 f4f3 	udiv	r4, r4, r3
 8007134:	f7ff faaf 	bl	8006696 <LL_RCC_PLL_GetR>
 8007138:	4603      	mov	r3, r0
 800713a:	0f5b      	lsrs	r3, r3, #29
 800713c:	3301      	adds	r3, #1
 800713e:	fbb4 f3f3 	udiv	r3, r4, r3
 8007142:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007144:	68fb      	ldr	r3, [r7, #12]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	bd90      	pop	{r4, r7, pc}
 800714e:	bf00      	nop
 8007150:	0800ec44 	.word	0x0800ec44
 8007154:	00f42400 	.word	0x00f42400
 8007158:	01e84800 	.word	0x01e84800

0800715c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800715c:	b598      	push	{r3, r4, r7, lr}
 800715e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007160:	f7ff ff90 	bl	8007084 <HAL_RCC_GetSysClockFreq>
 8007164:	4604      	mov	r4, r0
 8007166:	f7ff fa3f 	bl	80065e8 <LL_RCC_GetAHBPrescaler>
 800716a:	4603      	mov	r3, r0
 800716c:	091b      	lsrs	r3, r3, #4
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	4a03      	ldr	r2, [pc, #12]	@ (8007180 <HAL_RCC_GetHCLKFreq+0x24>)
 8007174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007178:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800717c:	4618      	mov	r0, r3
 800717e:	bd98      	pop	{r3, r4, r7, pc}
 8007180:	0800ec04 	.word	0x0800ec04

08007184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2bb0      	cmp	r3, #176	@ 0xb0
 8007190:	d903      	bls.n	800719a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007192:	4b14      	ldr	r3, [pc, #80]	@ (80071e4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8007194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e007      	b.n	80071aa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	091b      	lsrs	r3, r3, #4
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	4a10      	ldr	r2, [pc, #64]	@ (80071e4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80071a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80071aa:	f7ff fa29 	bl	8006600 <LL_RCC_GetAHB4Prescaler>
 80071ae:	4603      	mov	r3, r0
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	4a0c      	ldr	r2, [pc, #48]	@ (80071e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80071b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4a09      	ldr	r2, [pc, #36]	@ (80071ec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	0c9b      	lsrs	r3, r3, #18
 80071ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f80c 	bl	80071f0 <RCC_SetFlashLatency>
 80071d8:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	0800ec44 	.word	0x0800ec44
 80071e8:	0800ec04 	.word	0x0800ec04
 80071ec:	431bde83 	.word	0x431bde83

080071f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b08f      	sub	sp, #60	@ 0x3c
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80071fa:	4b24      	ldr	r3, [pc, #144]	@ (800728c <RCC_SetFlashLatency+0x9c>)
 80071fc:	f107 041c 	add.w	r4, r7, #28
 8007200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007206:	4b22      	ldr	r3, [pc, #136]	@ (8007290 <RCC_SetFlashLatency+0xa0>)
 8007208:	f107 040c 	add.w	r4, r7, #12
 800720c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800720e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007212:	2300      	movs	r3, #0
 8007214:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007216:	2300      	movs	r3, #0
 8007218:	633b      	str	r3, [r7, #48]	@ 0x30
 800721a:	e013      	b.n	8007244 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	3338      	adds	r3, #56	@ 0x38
 8007222:	443b      	add	r3, r7
 8007224:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	429a      	cmp	r2, r3
 800722c:	d807      	bhi.n	800723e <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	3338      	adds	r3, #56	@ 0x38
 8007234:	443b      	add	r3, r7
 8007236:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800723a:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800723c:	e005      	b.n	800724a <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800723e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007240:	3301      	adds	r3, #1
 8007242:	633b      	str	r3, [r7, #48]	@ 0x30
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	2b03      	cmp	r3, #3
 8007248:	d9e8      	bls.n	800721c <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800724a:	4b12      	ldr	r3, [pc, #72]	@ (8007294 <RCC_SetFlashLatency+0xa4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f023 0207 	bic.w	r2, r3, #7
 8007252:	4910      	ldr	r1, [pc, #64]	@ (8007294 <RCC_SetFlashLatency+0xa4>)
 8007254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007256:	4313      	orrs	r3, r2
 8007258:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800725a:	f7fd fc41 	bl	8004ae0 <HAL_GetTick>
 800725e:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007260:	e008      	b.n	8007274 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007262:	f7fd fc3d 	bl	8004ae0 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e007      	b.n	8007284 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007274:	4b07      	ldr	r3, [pc, #28]	@ (8007294 <RCC_SetFlashLatency+0xa4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800727e:	429a      	cmp	r2, r3
 8007280:	d1ef      	bne.n	8007262 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	373c      	adds	r7, #60	@ 0x3c
 8007288:	46bd      	mov	sp, r7
 800728a:	bd90      	pop	{r4, r7, pc}
 800728c:	0800b164 	.word	0x0800b164
 8007290:	0800b174 	.word	0x0800b174
 8007294:	58004000 	.word	0x58004000

08007298 <LL_RCC_LSE_IsEnabled>:
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800729c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <LL_RCC_LSE_IsEnabled+0x18>
 80072ac:	2301      	movs	r3, #1
 80072ae:	e000      	b.n	80072b2 <LL_RCC_LSE_IsEnabled+0x1a>
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <LL_RCC_LSE_IsReady>:
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80072c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d101      	bne.n	80072d4 <LL_RCC_LSE_IsReady+0x18>
 80072d0:	2301      	movs	r3, #1
 80072d2:	e000      	b.n	80072d6 <LL_RCC_LSE_IsReady+0x1a>
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <LL_RCC_SetRFWKPClockSource>:
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80072e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80072f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <LL_RCC_SetUSARTClockSource>:
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731c:	f023 0203 	bic.w	r2, r3, #3
 8007320:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <LL_RCC_SetI2CClockSource>:
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007344:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	091b      	lsrs	r3, r3, #4
 800734c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007350:	43db      	mvns	r3, r3
 8007352:	401a      	ands	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800735c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <LL_RCC_SetLPTIMClockSource>:
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800737a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800737e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	0c1b      	lsrs	r3, r3, #16
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	43db      	mvns	r3, r3
 800738a:	401a      	ands	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	041b      	lsls	r3, r3, #16
 8007390:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007394:	4313      	orrs	r3, r2
 8007396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <LL_RCC_SetRNGClockSource>:
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80073ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80073ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <LL_RCC_SetCLK48ClockSource>:
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80073da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <LL_RCC_SetADCClockSource>:
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800740a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800740e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007412:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4313      	orrs	r3, r2
 800741a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <LL_RCC_SetRTCClockSource>:
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800743e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <LL_RCC_GetRTCClockSource>:
{
 8007456:	b480      	push	{r7}
 8007458:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800745a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007466:	4618      	mov	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <LL_RCC_ForceBackupDomainReset>:
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007488:	bf00      	nop
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007492:	b480      	push	{r7}
 8007494:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800749a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074aa:	bf00      	nop
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80074bc:	2300      	movs	r3, #0
 80074be:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80074c0:	2300      	movs	r3, #0
 80074c2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d046      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80074d0:	f7ff ffc1 	bl	8007456 <LL_RCC_GetRTCClockSource>
 80074d4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d03c      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80074e0:	f7fe fe0a 	bl	80060f8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d105      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff ff9b 	bl	800742a <LL_RCC_SetRTCClockSource>
 80074f4:	e02e      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80074f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074fe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007500:	f7ff ffb6 	bl	8007470 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007504:	f7ff ffc5 	bl	8007492 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007516:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007520:	f7ff feba 	bl	8007298 <LL_RCC_LSE_IsEnabled>
 8007524:	4603      	mov	r3, r0
 8007526:	2b01      	cmp	r3, #1
 8007528:	d114      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800752a:	f7fd fad9 	bl	8004ae0 <HAL_GetTick>
 800752e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007530:	e00b      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007532:	f7fd fad5 	bl	8004ae0 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007540:	4293      	cmp	r3, r2
 8007542:	d902      	bls.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	77fb      	strb	r3, [r7, #31]
              break;
 8007548:	e004      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800754a:	f7ff feb7 	bl	80072bc <LL_RCC_LSE_IsReady>
 800754e:	4603      	mov	r3, r0
 8007550:	2b01      	cmp	r3, #1
 8007552:	d1ee      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007554:	7ffb      	ldrb	r3, [r7, #31]
 8007556:	77bb      	strb	r3, [r7, #30]
 8007558:	e001      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755a:	7ffb      	ldrb	r3, [r7, #31]
 800755c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff fecc 	bl	800730c <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	d004      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff fef4 	bl	8007372 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0320 	and.w	r3, r3, #32
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fee9 	bl	8007372 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff fec1 	bl	8007338 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d02b      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ca:	d008      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075d4:	d003      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d105      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff fedf 	bl	80073a6 <LL_RCC_SetRNGClockSource>
 80075e8:	e00a      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	2000      	movs	r0, #0
 80075f6:	f7ff fed6 	bl	80073a6 <LL_RCC_SetRNGClockSource>
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7ff fee9 	bl	80073d2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007608:	d107      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800760a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007618:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007622:	2b00      	cmp	r3, #0
 8007624:	d011      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fee7 	bl	80073fe <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007638:	d107      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800763a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007648:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	4618      	mov	r0, r3
 800765c:	f7ff fe40 	bl	80072e0 <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007660:	7fbb      	ldrb	r3, [r7, #30]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3720      	adds	r7, #32
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e09f      	b.n	80077be <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fd f8ae 	bl	80047f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80076a0:	4b49      	ldr	r3, [pc, #292]	@ (80077c8 <HAL_RTC_Init+0x15c>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f003 0310 	and.w	r3, r3, #16
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d07e      	beq.n	80077aa <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	22ca      	movs	r2, #202	@ 0xca
 80076b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2253      	movs	r2, #83	@ 0x53
 80076ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f8ab 	bl	8007818 <RTC_EnterInitMode>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	22ff      	movs	r2, #255	@ 0xff
 80076ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2204      	movs	r2, #4
 80076d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]
 80076dc:	e067      	b.n	80077ae <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80076ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076f0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6899      	ldr	r1, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	431a      	orrs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	68d2      	ldr	r2, [r2, #12]
 8007718:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6919      	ldr	r1, [r3, #16]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	041a      	lsls	r2, r3, #16
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800773c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0202 	bic.w	r2, r2, #2
 800774c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	69da      	ldr	r2, [r3, #28]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d113      	bne.n	800779c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f829 	bl	80077cc <HAL_RTC_WaitForSynchro>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00d      	beq.n	800779c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	22ff      	movs	r2, #255	@ 0xff
 8007786:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2204      	movs	r2, #4
 800778c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e010      	b.n	80077be <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	22ff      	movs	r2, #255	@ 0xff
 80077a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
 80077a8:	e001      	b.n	80077ae <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d103      	bne.n	80077bc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40002800 	.word	0x40002800

080077cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80077e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80077e4:	f7fd f97c 	bl	8004ae0 <HAL_GetTick>
 80077e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077ea:	e009      	b.n	8007800 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077ec:	f7fd f978 	bl	8004ae0 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077fa:	d901      	bls.n	8007800 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e007      	b.n	8007810 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f003 0320 	and.w	r3, r3, #32
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0ee      	beq.n	80077ec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d119      	bne.n	8007862 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007836:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007838:	f7fd f952 	bl	8004ae0 <HAL_GetTick>
 800783c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800783e:	e009      	b.n	8007854 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007840:	f7fd f94e 	bl	8004ae0 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800784e:	d901      	bls.n	8007854 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e007      	b.n	8007864 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0ee      	beq.n	8007840 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007882:	2302      	movs	r3, #2
 8007884:	e0a8      	b.n	80079d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2202      	movs	r2, #2
 8007892:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	22ca      	movs	r2, #202	@ 0xca
 800789c:	625a      	str	r2, [r3, #36]	@ 0x24
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2253      	movs	r2, #83	@ 0x53
 80078a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d020      	beq.n	80078f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80078b4:	f7fd f914 	bl	8004ae0 <HAL_GetTick>
 80078b8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80078ba:	e015      	b.n	80078e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078bc:	f7fd f910 	bl	8004ae0 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078ca:	d90d      	bls.n	80078e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	22ff      	movs	r2, #255	@ 0xff
 80078d2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2203      	movs	r2, #3
 80078d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e077      	b.n	80079d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e2      	bne.n	80078bc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007904:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	b2da      	uxtb	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007916:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007918:	f7fd f8e2 	bl	8004ae0 <HAL_GetTick>
 800791c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800791e:	e015      	b.n	800794c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007920:	f7fd f8de 	bl	8004ae0 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800792e:	d90d      	bls.n	800794c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	22ff      	movs	r2, #255	@ 0xff
 8007936:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2203      	movs	r2, #3
 800793c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e045      	b.n	80079d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0e2      	beq.n	8007920 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0207 	bic.w	r2, r2, #7
 8007970:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6899      	ldr	r1, [r3, #8]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	430a      	orrs	r2, r1
 8007980:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007982:	4b17      	ldr	r3, [pc, #92]	@ (80079e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007988:	4a15      	ldr	r2, [pc, #84]	@ (80079e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800798a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800798e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007992:	4b13      	ldr	r3, [pc, #76]	@ (80079e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a12      	ldr	r2, [pc, #72]	@ (80079e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007998:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800799c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079ac:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80079bc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	22ff      	movs	r2, #255	@ 0xff
 80079c4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	58000800 	.word	0x58000800

080079e4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079ee:	f107 0308 	add.w	r3, r7, #8
 80079f2:	2218      	movs	r2, #24
 80079f4:	2100      	movs	r1, #0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 f92d 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 80079fc:	233f      	movs	r3, #63	@ 0x3f
 80079fe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007a00:	2381      	movs	r3, #129	@ 0x81
 8007a02:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007a04:	1dfb      	adds	r3, r7, #7
 8007a06:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 fba8 	bl	8009168 <hci_send_req>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	da01      	bge.n	8007a22 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007a1e:	23ff      	movs	r3, #255	@ 0xff
 8007a20:	e000      	b.n	8007a24 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007a22:	79fb      	ldrb	r3, [r7, #7]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8007a2c:	b5b0      	push	{r4, r5, r7, lr}
 8007a2e:	b0ce      	sub	sp, #312	@ 0x138
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4605      	mov	r5, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	4610      	mov	r0, r2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a3e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007a42:	462a      	mov	r2, r5
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a4a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007a4e:	4622      	mov	r2, r4
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a56:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a62:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007a66:	460a      	mov	r2, r1
 8007a68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007a6a:	f107 0310 	add.w	r3, r7, #16
 8007a6e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007a72:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8007a76:	3308      	adds	r3, #8
 8007a78:	f107 0210 	add.w	r2, r7, #16
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007a82:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007a86:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8007a8a:	4413      	add	r3, r2
 8007a8c:	3309      	adds	r3, #9
 8007a8e:	f107 0210 	add.w	r2, r7, #16
 8007a92:	4413      	add	r3, r2
 8007a94:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007a98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a9c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007aaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007aae:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007ab2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8007ab6:	7812      	ldrb	r2, [r2, #0]
 8007ab8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007aba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007abe:	3301      	adds	r3, #1
 8007ac0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007ac4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ac8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007acc:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8007ad0:	8812      	ldrh	r2, [r2, #0]
 8007ad2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ada:	3302      	adds	r3, #2
 8007adc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007ae0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ae4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007ae8:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8007aec:	8812      	ldrh	r2, [r2, #0]
 8007aee:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007af2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007af6:	3302      	adds	r3, #2
 8007af8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007afc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b00:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007b04:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007b08:	7812      	ldrb	r2, [r2, #0]
 8007b0a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007b0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b10:	3301      	adds	r3, #1
 8007b12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007b16:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b1a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8007b1e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007b20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b24:	3301      	adds	r3, #1
 8007b26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007b2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b2e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007b32:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007b34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b38:	3301      	adds	r3, #1
 8007b3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007b3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b42:	3308      	adds	r3, #8
 8007b44:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007b48:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 f872 	bl	8008c36 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007b52:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8007b56:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007b60:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b64:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007b68:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b6e:	3301      	adds	r3, #1
 8007b70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007b74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b78:	3301      	adds	r3, #1
 8007b7a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007b7e:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 f857 	bl	8008c36 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007b88:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8007b8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007b90:	4413      	add	r3, r2
 8007b92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8007b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b9a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8007b9e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8007baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007bae:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8007bb2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007bb8:	3302      	adds	r3, #2
 8007bba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007bbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007bc2:	2218      	movs	r2, #24
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f001 f845 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bcc:	233f      	movs	r3, #63	@ 0x3f
 8007bce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8007bd2:	2383      	movs	r3, #131	@ 0x83
 8007bd4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007bd8:	f107 0310 	add.w	r3, r7, #16
 8007bdc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007be0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007be4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007be8:	f107 030f 	add.w	r3, r7, #15
 8007bec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bf6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f001 fab3 	bl	8009168 <hci_send_req>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da01      	bge.n	8007c0c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007c08:	23ff      	movs	r3, #255	@ 0xff
 8007c0a:	e004      	b.n	8007c16 <aci_gap_set_discoverable+0x1ea>
  return status;
 8007c0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c10:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007c14:	781b      	ldrb	r3, [r3, #0]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bdb0      	pop	{r4, r5, r7, pc}

08007c20 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b0cc      	sub	sp, #304	@ 0x130
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4602      	mov	r2, r0
 8007c28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c2c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007c30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007c32:	f107 0310 	add.w	r3, r7, #16
 8007c36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007c3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c3e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8007c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007c54:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007c58:	7812      	ldrb	r2, [r2, #0]
 8007c5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c60:	3301      	adds	r3, #1
 8007c62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007c6a:	2218      	movs	r2, #24
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fff1 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c74:	233f      	movs	r3, #63	@ 0x3f
 8007c76:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8007c7a:	2385      	movs	r3, #133	@ 0x85
 8007c7c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007c80:	f107 0310 	add.w	r3, r7, #16
 8007c84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007c90:	f107 030f 	add.w	r3, r7, #15
 8007c94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f001 fa5f 	bl	8009168 <hci_send_req>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da01      	bge.n	8007cb4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007cb0:	23ff      	movs	r3, #255	@ 0xff
 8007cb2:	e004      	b.n	8007cbe <aci_gap_set_io_capability+0x9e>
  return status;
 8007cb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cb8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007cbc:	781b      	ldrb	r3, [r3, #0]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007cc8:	b5b0      	push	{r4, r5, r7, lr}
 8007cca:	b0cc      	sub	sp, #304	@ 0x130
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4605      	mov	r5, r0
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cda:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007cde:	462a      	mov	r2, r5
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ce6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007cea:	4622      	mov	r2, r4
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cf2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d02:	460a      	mov	r2, r1
 8007d04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007d06:	f107 0310 	add.w	r3, r7, #16
 8007d0a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007d0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d12:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d28:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007d2c:	7812      	ldrb	r2, [r2, #0]
 8007d2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d34:	3301      	adds	r3, #1
 8007d36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d3e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d42:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007d46:	7812      	ldrb	r2, [r2, #0]
 8007d48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d4e:	3301      	adds	r3, #1
 8007d50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8007d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d5c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007d60:	7812      	ldrb	r2, [r2, #0]
 8007d62:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d68:	3301      	adds	r3, #1
 8007d6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d72:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d76:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d82:	3301      	adds	r3, #1
 8007d84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d8c:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8007d90:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d96:	3301      	adds	r3, #1
 8007d98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007da0:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8007da4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007da6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007daa:	3301      	adds	r3, #1
 8007dac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007db4:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8007db8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007dba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007dc8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007dcc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007dd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007dde:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8007de2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007de8:	3301      	adds	r3, #1
 8007dea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007dee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007df2:	2218      	movs	r2, #24
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 ff2d 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007dfc:	233f      	movs	r3, #63	@ 0x3f
 8007dfe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8007e02:	2386      	movs	r3, #134	@ 0x86
 8007e04:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007e08:	f107 0310 	add.w	r3, r7, #16
 8007e0c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007e10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e14:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007e18:	f107 030f 	add.w	r3, r7, #15
 8007e1c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007e20:	2301      	movs	r3, #1
 8007e22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f001 f99b 	bl	8009168 <hci_send_req>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	da01      	bge.n	8007e3c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007e38:	23ff      	movs	r3, #255	@ 0xff
 8007e3a:	e004      	b.n	8007e46 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007e3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e40:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007e44:	781b      	ldrb	r3, [r3, #0]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bdb0      	pop	{r4, r5, r7, pc}

08007e50 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b0cc      	sub	sp, #304	@ 0x130
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4602      	mov	r2, r0
 8007e58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e5c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007e60:	6019      	str	r1, [r3, #0]
 8007e62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e66:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007e6a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007e6c:	f107 0310 	add.w	r3, r7, #16
 8007e70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007e74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e78:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007e8a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007e8e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007e92:	8812      	ldrh	r2, [r2, #0]
 8007e94:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8007ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ea4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007ea8:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8007eac:	6812      	ldr	r2, [r2, #0]
 8007eae:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ebc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007ec0:	2218      	movs	r2, #24
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fec6 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007eca:	233f      	movs	r3, #63	@ 0x3f
 8007ecc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8007ed0:	2388      	movs	r3, #136	@ 0x88
 8007ed2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007ed6:	f107 0310 	add.w	r3, r7, #16
 8007eda:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007ede:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ee2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007ee6:	f107 030f 	add.w	r3, r7, #15
 8007eea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ef4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 f934 	bl	8009168 <hci_send_req>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	da01      	bge.n	8007f0a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007f06:	23ff      	movs	r3, #255	@ 0xff
 8007f08:	e004      	b.n	8007f14 <aci_gap_pass_key_resp+0xc4>
  return status;
 8007f0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f0e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007f12:	781b      	ldrb	r3, [r3, #0]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007f1e:	b590      	push	{r4, r7, lr}
 8007f20:	b0cd      	sub	sp, #308	@ 0x134
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	4604      	mov	r4, r0
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007f2e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f38:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	701a      	strb	r2, [r3, #0]
 8007f40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f44:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007f48:	4602      	mov	r2, r0
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f50:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007f54:	460a      	mov	r2, r1
 8007f56:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007f58:	f107 0310 	add.w	r3, r7, #16
 8007f5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007f60:	f107 0308 	add.w	r3, r7, #8
 8007f64:	2207      	movs	r2, #7
 8007f66:	2100      	movs	r1, #0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fe74 	bl	8008c56 <Osal_MemSet>
  int index_input = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8007f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007f7c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007f80:	7812      	ldrb	r2, [r2, #0]
 8007f82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f88:	3301      	adds	r3, #1
 8007f8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f92:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007f96:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007f9a:	7812      	ldrb	r2, [r2, #0]
 8007f9c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007fac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007fb0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007fc6:	2218      	movs	r2, #24
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fe43 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fd0:	233f      	movs	r3, #63	@ 0x3f
 8007fd2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8007fd6:	238a      	movs	r3, #138	@ 0x8a
 8007fd8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007fdc:	f107 0310 	add.w	r3, r7, #16
 8007fe0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007fe8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007fec:	f107 0308 	add.w	r3, r7, #8
 8007ff0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8007ff4:	2307      	movs	r3, #7
 8007ff6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ffa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007ffe:	2100      	movs	r1, #0
 8008000:	4618      	mov	r0, r3
 8008002:	f001 f8b1 	bl	8009168 <hci_send_req>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	da01      	bge.n	8008010 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800800c:	23ff      	movs	r3, #255	@ 0xff
 800800e:	e02e      	b.n	800806e <aci_gap_init+0x150>
  if ( resp.Status )
 8008010:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008014:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <aci_gap_init+0x10c>
    return resp.Status;
 800801e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008022:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	e021      	b.n	800806e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800802a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800802e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008032:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008036:	b29a      	uxth	r2, r3
 8008038:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800803c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008044:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008048:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800804c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008050:	b29a      	uxth	r2, r3
 8008052:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008056:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008058:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800805c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008060:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008064:	b29a      	uxth	r2, r3
 8008066:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800806a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8008074:	46bd      	mov	sp, r7
 8008076:	bd90      	pop	{r4, r7, pc}

08008078 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b0cc      	sub	sp, #304	@ 0x130
 800807c:	af00      	add	r7, sp, #0
 800807e:	4602      	mov	r2, r0
 8008080:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008084:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008088:	6019      	str	r1, [r3, #0]
 800808a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800808e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008092:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008094:	f107 0310 	add.w	r3, r7, #16
 8008098:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800809c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80080a4:	2200      	movs	r2, #0
 80080a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80080ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80080b6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80080ba:	7812      	ldrb	r2, [r2, #0]
 80080bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80080be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080c2:	3301      	adds	r3, #1
 80080c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80080c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080cc:	1c58      	adds	r0, r3, #1
 80080ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080d2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80080d6:	781a      	ldrb	r2, [r3, #0]
 80080d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080dc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80080e0:	6819      	ldr	r1, [r3, #0]
 80080e2:	f000 fda8 	bl	8008c36 <Osal_MemCpy>
  index_input += AdvDataLen;
 80080e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080ea:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80080f4:	4413      	add	r3, r2
 80080f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80080fe:	2218      	movs	r2, #24
 8008100:	2100      	movs	r1, #0
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fda7 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008108:	233f      	movs	r3, #63	@ 0x3f
 800810a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800810e:	238e      	movs	r3, #142	@ 0x8e
 8008110:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008114:	f107 0310 	add.w	r3, r7, #16
 8008118:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800811c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008120:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008124:	f107 030f 	add.w	r3, r7, #15
 8008128:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800812c:	2301      	movs	r3, #1
 800812e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008132:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008136:	2100      	movs	r1, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f001 f815 	bl	8009168 <hci_send_req>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	da01      	bge.n	8008148 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008144:	23ff      	movs	r3, #255	@ 0xff
 8008146:	e004      	b.n	8008152 <aci_gap_update_adv_data+0xda>
  return status;
 8008148:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800814c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008150:	781b      	ldrb	r3, [r3, #0]
}
 8008152:	4618      	mov	r0, r3
 8008154:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008166:	f107 0308 	add.w	r3, r7, #8
 800816a:	2218      	movs	r2, #24
 800816c:	2100      	movs	r1, #0
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fd71 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008174:	233f      	movs	r3, #63	@ 0x3f
 8008176:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008178:	2392      	movs	r3, #146	@ 0x92
 800817a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800817c:	1dfb      	adds	r3, r7, #7
 800817e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008180:	2301      	movs	r3, #1
 8008182:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008184:	f107 0308 	add.w	r3, r7, #8
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f000 ffec 	bl	8009168 <hci_send_req>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	da01      	bge.n	800819a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008196:	23ff      	movs	r3, #255	@ 0xff
 8008198:	e000      	b.n	800819c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800819a:	79fb      	ldrb	r3, [r7, #7]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b0cc      	sub	sp, #304	@ 0x130
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4602      	mov	r2, r0
 80081ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80081b0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80081b4:	801a      	strh	r2, [r3, #0]
 80081b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80081ba:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80081be:	460a      	mov	r2, r1
 80081c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80081c2:	f107 0310 	add.w	r3, r7, #16
 80081c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80081ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80081ce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80081dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80081e4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80081e8:	8812      	ldrh	r2, [r2, #0]
 80081ea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80081ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081f0:	3302      	adds	r3, #2
 80081f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80081f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80081fe:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008202:	7812      	ldrb	r2, [r2, #0]
 8008204:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008206:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800820a:	3301      	adds	r3, #1
 800820c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008214:	2218      	movs	r2, #24
 8008216:	2100      	movs	r1, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fd1c 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 800821e:	233f      	movs	r3, #63	@ 0x3f
 8008220:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8008224:	23a5      	movs	r3, #165	@ 0xa5
 8008226:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800822a:	f107 0310 	add.w	r3, r7, #16
 800822e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008232:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008236:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800823a:	f107 030f 	add.w	r3, r7, #15
 800823e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008242:	2301      	movs	r3, #1
 8008244:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008248:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f000 ff8a 	bl	8009168 <hci_send_req>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	da01      	bge.n	800825e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800825a:	23ff      	movs	r3, #255	@ 0xff
 800825c:	e004      	b.n	8008268 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800825e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008262:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008266:	781b      	ldrb	r3, [r3, #0]
}
 8008268:	4618      	mov	r0, r3
 800826a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b088      	sub	sp, #32
 8008276:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800827c:	f107 0308 	add.w	r3, r7, #8
 8008280:	2218      	movs	r2, #24
 8008282:	2100      	movs	r1, #0
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fce6 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 800828a:	233f      	movs	r3, #63	@ 0x3f
 800828c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800828e:	f240 1301 	movw	r3, #257	@ 0x101
 8008292:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008294:	1dfb      	adds	r3, r7, #7
 8008296:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008298:	2301      	movs	r3, #1
 800829a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800829c:	f107 0308 	add.w	r3, r7, #8
 80082a0:	2100      	movs	r1, #0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 ff60 	bl	8009168 <hci_send_req>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	da01      	bge.n	80082b2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80082ae:	23ff      	movs	r3, #255	@ 0xff
 80082b0:	e000      	b.n	80082b4 <aci_gatt_init+0x42>
  return status;
 80082b2:	79fb      	ldrb	r3, [r7, #7]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3720      	adds	r7, #32
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b0cf      	sub	sp, #316	@ 0x13c
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4604      	mov	r4, r0
 80082c4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80082c8:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80082cc:	6001      	str	r1, [r0, #0]
 80082ce:	4610      	mov	r0, r2
 80082d0:	4619      	mov	r1, r3
 80082d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082d6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80082da:	4622      	mov	r2, r4
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082e2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80082e6:	4602      	mov	r2, r0
 80082e8:	701a      	strb	r2, [r3, #0]
 80082ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ee:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80082f2:	460a      	mov	r2, r1
 80082f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80082f6:	f107 0310 	add.w	r3, r7, #16
 80082fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80082fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008302:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d00a      	beq.n	8008322 <aci_gatt_add_service+0x66>
 800830c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008310:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d101      	bne.n	800831e <aci_gatt_add_service+0x62>
 800831a:	2311      	movs	r3, #17
 800831c:	e002      	b.n	8008324 <aci_gatt_add_service+0x68>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <aci_gatt_add_service+0x68>
 8008322:	2303      	movs	r3, #3
 8008324:	f107 0210 	add.w	r2, r7, #16
 8008328:	4413      	add	r3, r2
 800832a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800832e:	f107 030c 	add.w	r3, r7, #12
 8008332:	2203      	movs	r2, #3
 8008334:	2100      	movs	r1, #0
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fc8d 	bl	8008c56 <Osal_MemSet>
  int index_input = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008342:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008346:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800834a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800834e:	7812      	ldrb	r2, [r2, #0]
 8008350:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008352:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008356:	3301      	adds	r3, #1
 8008358:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800835c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008360:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d002      	beq.n	8008370 <aci_gatt_add_service+0xb4>
 800836a:	2b02      	cmp	r3, #2
 800836c:	d004      	beq.n	8008378 <aci_gatt_add_service+0xbc>
 800836e:	e007      	b.n	8008380 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008370:	2302      	movs	r3, #2
 8008372:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008376:	e005      	b.n	8008384 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008378:	2310      	movs	r3, #16
 800837a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800837e:	e001      	b.n	8008384 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008380:	2397      	movs	r3, #151	@ 0x97
 8008382:	e06c      	b.n	800845e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008384:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008388:	1c58      	adds	r0, r3, #1
 800838a:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800838e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008392:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008396:	6819      	ldr	r1, [r3, #0]
 8008398:	f000 fc4d 	bl	8008c36 <Osal_MemCpy>
    index_input += size;
 800839c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80083a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80083a4:	4413      	add	r3, r2
 80083a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80083aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80083ae:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80083b2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80083b6:	7812      	ldrb	r2, [r2, #0]
 80083b8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80083ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083be:	3301      	adds	r3, #1
 80083c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80083c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80083c8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80083cc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80083d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083d8:	3301      	adds	r3, #1
 80083da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80083e2:	2218      	movs	r2, #24
 80083e4:	2100      	movs	r1, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fc35 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 80083ec:	233f      	movs	r3, #63	@ 0x3f
 80083ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80083f2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80083f6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80083fa:	f107 0310 	add.w	r3, r7, #16
 80083fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008402:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008406:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800840a:	f107 030c 	add.w	r3, r7, #12
 800840e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8008412:	2303      	movs	r3, #3
 8008414:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008418:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800841c:	2100      	movs	r1, #0
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fea2 	bl	8009168 <hci_send_req>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	da01      	bge.n	800842e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800842a:	23ff      	movs	r3, #255	@ 0xff
 800842c:	e017      	b.n	800845e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800842e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008432:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800843c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008440:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	e00a      	b.n	800845e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008448:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800844c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008450:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008454:	b29a      	uxth	r2, r3
 8008456:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800845a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008464:	46bd      	mov	sp, r7
 8008466:	bd90      	pop	{r4, r7, pc}

08008468 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008468:	b590      	push	{r4, r7, lr}
 800846a:	b0d1      	sub	sp, #324	@ 0x144
 800846c:	af00      	add	r7, sp, #0
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8008476:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800847a:	600a      	str	r2, [r1, #0]
 800847c:	4619      	mov	r1, r3
 800847e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008482:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008486:	4622      	mov	r2, r4
 8008488:	801a      	strh	r2, [r3, #0]
 800848a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800848e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008492:	4602      	mov	r2, r0
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800849a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800849e:	460a      	mov	r2, r1
 80084a0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80084a2:	f107 0318 	add.w	r3, r7, #24
 80084a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80084aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084ae:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d00a      	beq.n	80084ce <aci_gatt_add_char+0x66>
 80084b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084bc:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d101      	bne.n	80084ca <aci_gatt_add_char+0x62>
 80084c6:	2313      	movs	r3, #19
 80084c8:	e002      	b.n	80084d0 <aci_gatt_add_char+0x68>
 80084ca:	2303      	movs	r3, #3
 80084cc:	e000      	b.n	80084d0 <aci_gatt_add_char+0x68>
 80084ce:	2305      	movs	r3, #5
 80084d0:	f107 0218 	add.w	r2, r7, #24
 80084d4:	4413      	add	r3, r2
 80084d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80084da:	f107 0314 	add.w	r3, r7, #20
 80084de:	2203      	movs	r2, #3
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fbb7 	bl	8008c56 <Osal_MemSet>
  int index_input = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80084ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80084f2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80084f6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80084fa:	8812      	ldrh	r2, [r2, #0]
 80084fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80084fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008502:	3302      	adds	r3, #2
 8008504:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008508:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800850c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008510:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008514:	7812      	ldrb	r2, [r2, #0]
 8008516:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008518:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800851c:	3301      	adds	r3, #1
 800851e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008522:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008526:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d002      	beq.n	8008536 <aci_gatt_add_char+0xce>
 8008530:	2b02      	cmp	r3, #2
 8008532:	d004      	beq.n	800853e <aci_gatt_add_char+0xd6>
 8008534:	e007      	b.n	8008546 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008536:	2302      	movs	r3, #2
 8008538:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800853c:	e005      	b.n	800854a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800853e:	2310      	movs	r3, #16
 8008540:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008544:	e001      	b.n	800854a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008546:	2397      	movs	r3, #151	@ 0x97
 8008548:	e091      	b.n	800866e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800854a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800854e:	1cd8      	adds	r0, r3, #3
 8008550:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8008554:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008558:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800855c:	6819      	ldr	r1, [r3, #0]
 800855e:	f000 fb6a 	bl	8008c36 <Osal_MemCpy>
    index_input += size;
 8008562:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8008566:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800856a:	4413      	add	r3, r2
 800856c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008570:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008574:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008578:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800857c:	8812      	ldrh	r2, [r2, #0]
 800857e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008580:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008584:	3302      	adds	r3, #2
 8008586:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800858a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800858e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008592:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008594:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008598:	3301      	adds	r3, #1
 800859a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800859e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085a2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80085a6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80085a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80085ac:	3301      	adds	r3, #1
 80085ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80085b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085b6:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80085ba:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80085bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80085c0:	3301      	adds	r3, #1
 80085c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80085c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085ca:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80085ce:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80085d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80085d4:	3301      	adds	r3, #1
 80085d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80085da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085de:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80085e2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80085e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80085e8:	3301      	adds	r3, #1
 80085ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80085f2:	2218      	movs	r2, #24
 80085f4:	2100      	movs	r1, #0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 fb2d 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085fc:	233f      	movs	r3, #63	@ 0x3f
 80085fe:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8008602:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008606:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800860a:	f107 0318 	add.w	r3, r7, #24
 800860e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8008612:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008616:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800861a:	f107 0314 	add.w	r3, r7, #20
 800861e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8008622:	2303      	movs	r3, #3
 8008624:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008628:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fd9a 	bl	8009168 <hci_send_req>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	da01      	bge.n	800863e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800863a:	23ff      	movs	r3, #255	@ 0xff
 800863c:	e017      	b.n	800866e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800863e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008642:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800864c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008650:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	e00a      	b.n	800866e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008658:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800865c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008660:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008664:	b29a      	uxth	r2, r3
 8008666:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800866a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8008674:	46bd      	mov	sp, r7
 8008676:	bd90      	pop	{r4, r7, pc}

08008678 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008678:	b5b0      	push	{r4, r5, r7, lr}
 800867a:	b0cc      	sub	sp, #304	@ 0x130
 800867c:	af00      	add	r7, sp, #0
 800867e:	4605      	mov	r5, r0
 8008680:	460c      	mov	r4, r1
 8008682:	4610      	mov	r0, r2
 8008684:	4619      	mov	r1, r3
 8008686:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800868a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800868e:	462a      	mov	r2, r5
 8008690:	801a      	strh	r2, [r3, #0]
 8008692:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008696:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800869a:	4622      	mov	r2, r4
 800869c:	801a      	strh	r2, [r3, #0]
 800869e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80086a2:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80086a6:	4602      	mov	r2, r0
 80086a8:	701a      	strb	r2, [r3, #0]
 80086aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80086ae:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80086b2:	460a      	mov	r2, r1
 80086b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80086b6:	f107 0310 	add.w	r3, r7, #16
 80086ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80086be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80086c2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80086d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80086d8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80086dc:	8812      	ldrh	r2, [r2, #0]
 80086de:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80086e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086e4:	3302      	adds	r3, #2
 80086e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80086ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80086f2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80086f6:	8812      	ldrh	r2, [r2, #0]
 80086f8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80086fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086fe:	3302      	adds	r3, #2
 8008700:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8008704:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008708:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800870c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8008710:	7812      	ldrb	r2, [r2, #0]
 8008712:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008714:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008718:	3301      	adds	r3, #1
 800871a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800871e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008722:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008726:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800872a:	7812      	ldrb	r2, [r2, #0]
 800872c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800872e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008732:	3301      	adds	r3, #1
 8008734:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008738:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800873c:	1d98      	adds	r0, r3, #6
 800873e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008742:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	461a      	mov	r2, r3
 800874a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800874e:	f000 fa72 	bl	8008c36 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008752:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008756:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008760:	4413      	add	r3, r2
 8008762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800876a:	2218      	movs	r2, #24
 800876c:	2100      	movs	r1, #0
 800876e:	4618      	mov	r0, r3
 8008770:	f000 fa71 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008774:	233f      	movs	r3, #63	@ 0x3f
 8008776:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800877a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800877e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008782:	f107 0310 	add.w	r3, r7, #16
 8008786:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800878a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800878e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008792:	f107 030f 	add.w	r3, r7, #15
 8008796:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800879a:	2301      	movs	r3, #1
 800879c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80087a4:	2100      	movs	r1, #0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fcde 	bl	8009168 <hci_send_req>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	da01      	bge.n	80087b6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80087b2:	23ff      	movs	r3, #255	@ 0xff
 80087b4:	e004      	b.n	80087c0 <aci_gatt_update_char_value+0x148>
  return status;
 80087b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80087be:	781b      	ldrb	r3, [r3, #0]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bdb0      	pop	{r4, r5, r7, pc}

080087ca <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b0cc      	sub	sp, #304	@ 0x130
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	4602      	mov	r2, r0
 80087d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087d6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80087da:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80087dc:	f107 0310 	add.w	r3, r7, #16
 80087e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80087e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80087f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80087fe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008802:	8812      	ldrh	r2, [r2, #0]
 8008804:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008806:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800880a:	3302      	adds	r3, #2
 800880c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008810:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008814:	2218      	movs	r2, #24
 8008816:	2100      	movs	r1, #0
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fa1c 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 800881e:	233f      	movs	r3, #63	@ 0x3f
 8008820:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8008824:	f240 1325 	movw	r3, #293	@ 0x125
 8008828:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800882c:	f107 0310 	add.w	r3, r7, #16
 8008830:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008834:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008838:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800883c:	f107 030f 	add.w	r3, r7, #15
 8008840:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008844:	2301      	movs	r3, #1
 8008846:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800884a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fc89 	bl	8009168 <hci_send_req>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	da01      	bge.n	8008860 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800885c:	23ff      	movs	r3, #255	@ 0xff
 800885e:	e004      	b.n	800886a <aci_gatt_confirm_indication+0xa0>
  return status;
 8008860:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008864:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008868:	781b      	ldrb	r3, [r3, #0]
}
 800886a:	4618      	mov	r0, r3
 800886c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b0cc      	sub	sp, #304	@ 0x130
 8008878:	af00      	add	r7, sp, #0
 800887a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800887e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008888:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800888c:	4602      	mov	r2, r0
 800888e:	701a      	strb	r2, [r3, #0]
 8008890:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008894:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008898:	460a      	mov	r2, r1
 800889a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800889c:	f107 0310 	add.w	r3, r7, #16
 80088a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80088a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088a8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80088b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088be:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80088c2:	7812      	ldrb	r2, [r2, #0]
 80088c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80088ca:	3301      	adds	r3, #1
 80088cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80088d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088d8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80088dc:	7812      	ldrb	r2, [r2, #0]
 80088de:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80088e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80088e4:	3301      	adds	r3, #1
 80088e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80088ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088ee:	1c98      	adds	r0, r3, #2
 80088f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088f4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80088f8:	781a      	ldrb	r2, [r3, #0]
 80088fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	f000 f997 	bl	8008c36 <Osal_MemCpy>
  index_input += Length;
 8008908:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800890c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008916:	4413      	add	r3, r2
 8008918:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800891c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008920:	2218      	movs	r2, #24
 8008922:	2100      	movs	r1, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f000 f996 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 800892a:	233f      	movs	r3, #63	@ 0x3f
 800892c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8008930:	230c      	movs	r3, #12
 8008932:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008936:	f107 0310 	add.w	r3, r7, #16
 800893a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800893e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008942:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008946:	f107 030f 	add.w	r3, r7, #15
 800894a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800894e:	2301      	movs	r3, #1
 8008950:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008958:	2100      	movs	r1, #0
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fc04 	bl	8009168 <hci_send_req>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	da01      	bge.n	800896a <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008966:	23ff      	movs	r3, #255	@ 0xff
 8008968:	e004      	b.n	8008974 <aci_hal_write_config_data+0x100>
  return status;
 800896a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800896e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008972:	781b      	ldrb	r3, [r3, #0]
}
 8008974:	4618      	mov	r0, r3
 8008976:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b0cc      	sub	sp, #304	@ 0x130
 8008982:	af00      	add	r7, sp, #0
 8008984:	4602      	mov	r2, r0
 8008986:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800898a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800898e:	701a      	strb	r2, [r3, #0]
 8008990:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008994:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008998:	460a      	mov	r2, r1
 800899a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800899c:	f107 0310 	add.w	r3, r7, #16
 80089a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80089a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80089a8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80089ac:	2200      	movs	r2, #0
 80089ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80089b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80089be:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80089c2:	7812      	ldrb	r2, [r2, #0]
 80089c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80089c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089ca:	3301      	adds	r3, #1
 80089cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80089d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80089d8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80089dc:	7812      	ldrb	r2, [r2, #0]
 80089de:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80089e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089e4:	3301      	adds	r3, #1
 80089e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089ee:	2218      	movs	r2, #24
 80089f0:	2100      	movs	r1, #0
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 f92f 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 80089f8:	233f      	movs	r3, #63	@ 0x3f
 80089fa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80089fe:	230f      	movs	r3, #15
 8008a00:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008a04:	f107 0310 	add.w	r3, r7, #16
 8008a08:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008a0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a10:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008a14:	f107 030f 	add.w	r3, r7, #15
 8008a18:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a26:	2100      	movs	r1, #0
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 fb9d 	bl	8009168 <hci_send_req>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	da01      	bge.n	8008a38 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008a34:	23ff      	movs	r3, #255	@ 0xff
 8008a36:	e004      	b.n	8008a42 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008a38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a3c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008a40:	781b      	ldrb	r3, [r3, #0]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b0cc      	sub	sp, #304	@ 0x130
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4602      	mov	r2, r0
 8008a54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a58:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008a5c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008a5e:	f107 0310 	add.w	r3, r7, #16
 8008a62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008a66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a6a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008a6e:	2200      	movs	r2, #0
 8008a70:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008a80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008a84:	8812      	ldrh	r2, [r2, #0]
 8008a86:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a8c:	3302      	adds	r3, #2
 8008a8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a96:	2218      	movs	r2, #24
 8008a98:	2100      	movs	r1, #0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f8db 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008aa0:	233f      	movs	r3, #63	@ 0x3f
 8008aa2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8008aa6:	2318      	movs	r3, #24
 8008aa8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008aac:	f107 0310 	add.w	r3, r7, #16
 8008ab0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ab8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008abc:	f107 030f 	add.w	r3, r7, #15
 8008ac0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008aca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ace:	2100      	movs	r1, #0
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fb49 	bl	8009168 <hci_send_req>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da01      	bge.n	8008ae0 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8008adc:	23ff      	movs	r3, #255	@ 0xff
 8008ade:	e004      	b.n	8008aea <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8008ae0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ae4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008ae8:	781b      	ldrb	r3, [r3, #0]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008afe:	f107 0308 	add.w	r3, r7, #8
 8008b02:	2218      	movs	r2, #24
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 f8a5 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x03;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008b10:	2303      	movs	r3, #3
 8008b12:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b14:	1dfb      	adds	r3, r7, #7
 8008b16:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b1c:	f107 0308 	add.w	r3, r7, #8
 8008b20:	2100      	movs	r1, #0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 fb20 	bl	8009168 <hci_send_req>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da01      	bge.n	8008b32 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008b2e:	23ff      	movs	r3, #255	@ 0xff
 8008b30:	e000      	b.n	8008b34 <hci_reset+0x40>
  return status;
 8008b32:	79fb      	ldrb	r3, [r7, #7]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3720      	adds	r7, #32
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008b3c:	b590      	push	{r4, r7, lr}
 8008b3e:	b0cd      	sub	sp, #308	@ 0x134
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b4c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008b50:	4622      	mov	r2, r4
 8008b52:	701a      	strb	r2, [r3, #0]
 8008b54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b58:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	701a      	strb	r2, [r3, #0]
 8008b60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b64:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008b68:	460a      	mov	r2, r1
 8008b6a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008b6c:	f107 0310 	add.w	r3, r7, #16
 8008b70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008b74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b78:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b8a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b8e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008b92:	7812      	ldrb	r2, [r2, #0]
 8008b94:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ba4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008ba8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008bac:	7812      	ldrb	r2, [r2, #0]
 8008bae:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008bbe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008bc2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008bc6:	7812      	ldrb	r2, [r2, #0]
 8008bc8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008bca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008bce:	3301      	adds	r3, #1
 8008bd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008bd8:	2218      	movs	r2, #24
 8008bda:	2100      	movs	r1, #0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 f83a 	bl	8008c56 <Osal_MemSet>
  rq.ogf = 0x08;
 8008be2:	2308      	movs	r3, #8
 8008be4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8008be8:	2331      	movs	r3, #49	@ 0x31
 8008bea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008bee:	f107 0310 	add.w	r3, r7, #16
 8008bf2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008bfa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008bfe:	f107 030f 	add.w	r3, r7, #15
 8008c02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008c06:	2301      	movs	r3, #1
 8008c08:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c10:	2100      	movs	r1, #0
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 faa8 	bl	8009168 <hci_send_req>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	da01      	bge.n	8008c22 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8008c1e:	23ff      	movs	r3, #255	@ 0xff
 8008c20:	e004      	b.n	8008c2c <hci_le_set_default_phy+0xf0>
  return status;
 8008c22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c26:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008c2a:	781b      	ldrb	r3, [r3, #0]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd90      	pop	{r4, r7, pc}

08008c36 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	68b9      	ldr	r1, [r7, #8]
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f002 f95e 	bl	800af08 <memcpy>
 8008c4c:	4603      	mov	r3, r0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	68b9      	ldr	r1, [r7, #8]
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f002 f91c 	bl	800aea4 <memset>
 8008c6c:	4603      	mov	r3, r0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008c76:	b480      	push	{r7}
 8008c78:	af00      	add	r7, sp, #0
  return;
 8008c7a:	bf00      	nop
}
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
  return;
 8008c88:	bf00      	nop
}
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8008c92:	b480      	push	{r7}
 8008c94:	af00      	add	r7, sp, #0
  return;
 8008c96:	bf00      	nop
}
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
  return;
 8008ca4:	bf00      	nop
}
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008cae:	b480      	push	{r7}
 8008cb0:	af00      	add	r7, sp, #0
  return;
 8008cb2:	bf00      	nop
}
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
  return;
 8008cc0:	bf00      	nop
}
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008cca:	b480      	push	{r7}
 8008ccc:	af00      	add	r7, sp, #0
  return;
 8008cce:	bf00      	nop
}
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
  return;
 8008cdc:	bf00      	nop
}
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	af00      	add	r7, sp, #0
  return;
 8008cea:	bf00      	nop
}
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
  return;
 8008cf8:	bf00      	nop
}
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8008d02:	b480      	push	{r7}
 8008d04:	af00      	add	r7, sp, #0
  return;
 8008d06:	bf00      	nop
}
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
  return;
 8008d14:	bf00      	nop
}
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008d1e:	b480      	push	{r7}
 8008d20:	af00      	add	r7, sp, #0
  return;
 8008d22:	bf00      	nop
}
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
  return;
 8008d30:	bf00      	nop
}
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	af00      	add	r7, sp, #0
  return;
 8008d3e:	bf00      	nop
}
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
  return;
 8008d4c:	bf00      	nop
}
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008d56:	b480      	push	{r7}
 8008d58:	af00      	add	r7, sp, #0
  return;
 8008d5a:	bf00      	nop
}
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008d68:	4b04      	ldr	r3, [pc, #16]	@ (8008d7c <SVCCTL_Init+0x18>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008d6e:	4b04      	ldr	r3, [pc, #16]	@ (8008d80 <SVCCTL_Init+0x1c>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008d74:	f000 f806 	bl	8008d84 <SVCCTL_SvcInit>

  return;
 8008d78:	bf00      	nop
}
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	200000a0 	.word	0x200000a0
 8008d80:	200000c0 	.word	0x200000c0

08008d84 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	af00      	add	r7, sp, #0
  BAS_Init();
 8008d88:	f7ff ff75 	bl	8008c76 <BAS_Init>

  BLS_Init();
 8008d8c:	f7ff ff7a 	bl	8008c84 <BLS_Init>

  CRS_STM_Init();
 8008d90:	f7ff ff7f 	bl	8008c92 <CRS_STM_Init>

  DIS_Init();
 8008d94:	f7ff ff84 	bl	8008ca0 <DIS_Init>

  EDS_STM_Init();
 8008d98:	f7ff ff89 	bl	8008cae <EDS_STM_Init>

  HIDS_Init();
 8008d9c:	f7ff ff8e 	bl	8008cbc <HIDS_Init>

  HRS_Init();
 8008da0:	f7ff ff93 	bl	8008cca <HRS_Init>

  HTS_Init();
 8008da4:	f7ff ff98 	bl	8008cd8 <HTS_Init>

  IAS_Init();
 8008da8:	f7ff ff9d 	bl	8008ce6 <IAS_Init>

  LLS_Init();
 8008dac:	f7ff ffa2 	bl	8008cf4 <LLS_Init>

  TPS_Init();
 8008db0:	f7ff ffa7 	bl	8008d02 <TPS_Init>

  MOTENV_STM_Init();
 8008db4:	f7ff ffac 	bl	8008d10 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008db8:	f7ff ffb1 	bl	8008d1e <P2PS_STM_Init>

  ZDD_STM_Init();
 8008dbc:	f7ff ffb6 	bl	8008d2c <ZDD_STM_Init>

  OTAS_STM_Init();
 8008dc0:	f7ff ffbb 	bl	8008d3a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008dc4:	f7ff ffc7 	bl	8008d56 <BVOPUS_STM_Init>

  MESH_Init();
 8008dc8:	f7ff ffbe 	bl	8008d48 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008dcc:	f001 fafa 	bl	800a3c4 <SVCCTL_InitCustomSvc>
  
  return;
 8008dd0:	bf00      	nop
}
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008ddc:	4b09      	ldr	r3, [pc, #36]	@ (8008e04 <SVCCTL_RegisterSvcHandler+0x30>)
 8008dde:	7f1b      	ldrb	r3, [r3, #28]
 8008de0:	4619      	mov	r1, r3
 8008de2:	4a08      	ldr	r2, [pc, #32]	@ (8008e04 <SVCCTL_RegisterSvcHandler+0x30>)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008dea:	4b06      	ldr	r3, [pc, #24]	@ (8008e04 <SVCCTL_RegisterSvcHandler+0x30>)
 8008dec:	7f1b      	ldrb	r3, [r3, #28]
 8008dee:	3301      	adds	r3, #1
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	4b04      	ldr	r3, [pc, #16]	@ (8008e04 <SVCCTL_RegisterSvcHandler+0x30>)
 8008df4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008df6:	bf00      	nop
}
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	200000a0 	.word	0x200000a0

08008e08 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3301      	adds	r3, #1
 8008e14:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2bff      	cmp	r3, #255	@ 0xff
 8008e20:	d125      	bne.n	8008e6e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	3302      	adds	r3, #2
 8008e26:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e36:	d118      	bne.n	8008e6a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008e38:	2300      	movs	r3, #0
 8008e3a:	757b      	strb	r3, [r7, #21]
 8008e3c:	e00d      	b.n	8008e5a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008e3e:	7d7b      	ldrb	r3, [r7, #21]
 8008e40:	4a1a      	ldr	r2, [pc, #104]	@ (8008eac <SVCCTL_UserEvtRx+0xa4>)
 8008e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	4798      	blx	r3
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d108      	bne.n	8008e66 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008e54:	7d7b      	ldrb	r3, [r7, #21]
 8008e56:	3301      	adds	r3, #1
 8008e58:	757b      	strb	r3, [r7, #21]
 8008e5a:	4b14      	ldr	r3, [pc, #80]	@ (8008eac <SVCCTL_UserEvtRx+0xa4>)
 8008e5c:	7f1b      	ldrb	r3, [r3, #28]
 8008e5e:	7d7a      	ldrb	r2, [r7, #21]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d3ec      	bcc.n	8008e3e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008e64:	e002      	b.n	8008e6c <SVCCTL_UserEvtRx+0x64>
              break;
 8008e66:	bf00      	nop
          break;
 8008e68:	e000      	b.n	8008e6c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008e6a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008e6c:	e000      	b.n	8008e70 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008e6e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d00f      	beq.n	8008e96 <SVCCTL_UserEvtRx+0x8e>
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	dc10      	bgt.n	8008e9c <SVCCTL_UserEvtRx+0x94>
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <SVCCTL_UserEvtRx+0x7c>
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d006      	beq.n	8008e90 <SVCCTL_UserEvtRx+0x88>
 8008e82:	e00b      	b.n	8008e9c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 ff85 	bl	8009d94 <SVCCTL_App_Notification>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75bb      	strb	r3, [r7, #22]
      break;
 8008e8e:	e008      	b.n	8008ea2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008e90:	2301      	movs	r3, #1
 8008e92:	75bb      	strb	r3, [r7, #22]
      break;
 8008e94:	e005      	b.n	8008ea2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75bb      	strb	r3, [r7, #22]
      break;
 8008e9a:	e002      	b.n	8008ea2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	75bb      	strb	r3, [r7, #22]
      break;
 8008ea0:	bf00      	nop
  }

  return (return_status);
 8008ea2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	200000a0 	.word	0x200000a0

08008eb0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008eb8:	f107 030c 	add.w	r3, r7, #12
 8008ebc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	212e      	movs	r1, #46	@ 0x2e
 8008ec8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8008ecc:	f000 fae8 	bl	80094a0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	330b      	adds	r3, #11
 8008ed4:	78db      	ldrb	r3, [r3, #3]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3720      	adds	r7, #32
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b088      	sub	sp, #32
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008ee6:	f107 030c 	add.w	r3, r7, #12
 8008eea:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	210f      	movs	r1, #15
 8008ef6:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8008efa:	f000 fad1 	bl	80094a0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	330b      	adds	r3, #11
 8008f02:	78db      	ldrb	r3, [r3, #3]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3720      	adds	r7, #32
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008f14:	f107 030c 	add.w	r3, r7, #12
 8008f18:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	2110      	movs	r1, #16
 8008f20:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8008f24:	f000 fabc 	bl	80094a0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	330b      	adds	r3, #11
 8008f2c:	78db      	ldrb	r3, [r3, #3]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3720      	adds	r7, #32
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b08b      	sub	sp, #44	@ 0x2c
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008f54:	2300      	movs	r3, #0
 8008f56:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008f60:	4b4a      	ldr	r3, [pc, #296]	@ (800908c <SHCI_GetWirelessFwInfo+0x154>)
 8008f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008f68:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8008f72:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a44      	ldr	r2, [pc, #272]	@ (8009090 <SHCI_GetWirelessFwInfo+0x158>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d10f      	bne.n	8008fa4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	617b      	str	r3, [r7, #20]
 8008fa2:	e01a      	b.n	8008fda <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8008fac:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8008fb0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	0e1b      	lsrs	r3, r3, #24
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe6:	0c1b      	lsrs	r3, r3, #16
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff0:	0a1b      	lsrs	r3, r3, #8
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffa:	091b      	lsrs	r3, r3, #4
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	f003 030f 	and.w	r3, r3, #15
 8009002:	b2da      	uxtb	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900a:	b2db      	uxtb	r3, r3
 800900c:	f003 030f 	and.w	r3, r3, #15
 8009010:	b2da      	uxtb	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	0e1b      	lsrs	r3, r3, #24
 800901a:	b2da      	uxtb	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	0c1b      	lsrs	r3, r3, #16
 8009024:	b2da      	uxtb	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	0a1b      	lsrs	r3, r3, #8
 800902e:	b2da      	uxtb	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	b2da      	uxtb	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	b2da      	uxtb	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	0e1b      	lsrs	r3, r3, #24
 8009048:	b2da      	uxtb	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	0c1b      	lsrs	r3, r3, #16
 8009052:	b2da      	uxtb	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	b2da      	uxtb	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	0e1b      	lsrs	r3, r3, #24
 8009066:	b2da      	uxtb	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	0c1b      	lsrs	r3, r3, #16
 8009070:	b2da      	uxtb	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	b2da      	uxtb	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	372c      	adds	r7, #44	@ 0x2c
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	58004000 	.word	0x58004000
 8009090:	a94656b9 	.word	0xa94656b9

08009094 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	4a08      	ldr	r2, [pc, #32]	@ (80090c4 <hci_init+0x30>)
 80090a4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80090a6:	4a08      	ldr	r2, [pc, #32]	@ (80090c8 <hci_init+0x34>)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80090ac:	4806      	ldr	r0, [pc, #24]	@ (80090c8 <hci_init+0x34>)
 80090ae:	f000 f979 	bl	80093a4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f8da 	bl	8009270 <TlInit>

  return;
 80090bc:	bf00      	nop
}
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	200004dc 	.word	0x200004dc
 80090c8:	200004b4 	.word	0x200004b4

080090cc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80090d2:	4822      	ldr	r0, [pc, #136]	@ (800915c <hci_user_evt_proc+0x90>)
 80090d4:	f000 fd32 	bl	8009b3c <LST_is_empty>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d12b      	bne.n	8009136 <hci_user_evt_proc+0x6a>
 80090de:	4b20      	ldr	r3, [pc, #128]	@ (8009160 <hci_user_evt_proc+0x94>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d027      	beq.n	8009136 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80090e6:	f107 030c 	add.w	r3, r7, #12
 80090ea:	4619      	mov	r1, r3
 80090ec:	481b      	ldr	r0, [pc, #108]	@ (800915c <hci_user_evt_proc+0x90>)
 80090ee:	f000 fdb4 	bl	8009c5a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80090f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009164 <hci_user_evt_proc+0x98>)
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00c      	beq.n	8009114 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80090fe:	2301      	movs	r3, #1
 8009100:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009102:	4b18      	ldr	r3, [pc, #96]	@ (8009164 <hci_user_evt_proc+0x98>)
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	1d3a      	adds	r2, r7, #4
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800910c:	793a      	ldrb	r2, [r7, #4]
 800910e:	4b14      	ldr	r3, [pc, #80]	@ (8009160 <hci_user_evt_proc+0x94>)
 8009110:	701a      	strb	r2, [r3, #0]
 8009112:	e002      	b.n	800911a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009114:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <hci_user_evt_proc+0x94>)
 8009116:	2201      	movs	r2, #1
 8009118:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800911a:	4b11      	ldr	r3, [pc, #68]	@ (8009160 <hci_user_evt_proc+0x94>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d004      	beq.n	800912c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fc0d 	bl	8009944 <TL_MM_EvtDone>
 800912a:	e004      	b.n	8009136 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4619      	mov	r1, r3
 8009130:	480a      	ldr	r0, [pc, #40]	@ (800915c <hci_user_evt_proc+0x90>)
 8009132:	f000 fd25 	bl	8009b80 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009136:	4809      	ldr	r0, [pc, #36]	@ (800915c <hci_user_evt_proc+0x90>)
 8009138:	f000 fd00 	bl	8009b3c <LST_is_empty>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d107      	bne.n	8009152 <hci_user_evt_proc+0x86>
 8009142:	4b07      	ldr	r3, [pc, #28]	@ (8009160 <hci_user_evt_proc+0x94>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800914a:	4804      	ldr	r0, [pc, #16]	@ (800915c <hci_user_evt_proc+0x90>)
 800914c:	f001 f848 	bl	800a1e0 <hci_notify_asynch_evt>
  }


  return;
 8009150:	bf00      	nop
 8009152:	bf00      	nop
}
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	200000c8 	.word	0x200000c8
 8009160:	200000d4 	.word	0x200000d4
 8009164:	200004b4 	.word	0x200004b4

08009168 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009174:	2000      	movs	r0, #0
 8009176:	f000 f8d1 	bl	800931c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800917a:	2300      	movs	r3, #0
 800917c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	885b      	ldrh	r3, [r3, #2]
 8009182:	b21b      	sxth	r3, r3
 8009184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009188:	b21a      	sxth	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	029b      	lsls	r3, r3, #10
 8009190:	b21b      	sxth	r3, r3
 8009192:	4313      	orrs	r3, r2
 8009194:	b21b      	sxth	r3, r3
 8009196:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8009198:	4b33      	ldr	r3, [pc, #204]	@ (8009268 <hci_send_req+0x100>)
 800919a:	2201      	movs	r2, #1
 800919c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	b2d9      	uxtb	r1, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	8bbb      	ldrh	r3, [r7, #28]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f890 	bl	80092d0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80091b0:	e04e      	b.n	8009250 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80091b2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80091b6:	f001 f82a 	bl	800a20e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80091ba:	e043      	b.n	8009244 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80091bc:	f107 030c 	add.w	r3, r7, #12
 80091c0:	4619      	mov	r1, r3
 80091c2:	482a      	ldr	r0, [pc, #168]	@ (800926c <hci_send_req+0x104>)
 80091c4:	f000 fd49 	bl	8009c5a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	7a5b      	ldrb	r3, [r3, #9]
 80091cc:	2b0f      	cmp	r3, #15
 80091ce:	d114      	bne.n	80091fa <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	330b      	adds	r3, #11
 80091d4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	885b      	ldrh	r3, [r3, #2]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	8bba      	ldrh	r2, [r7, #28]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d104      	bne.n	80091ec <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	7812      	ldrb	r2, [r2, #0]
 80091ea:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d027      	beq.n	8009244 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80091f4:	2301      	movs	r3, #1
 80091f6:	77fb      	strb	r3, [r7, #31]
 80091f8:	e024      	b.n	8009244 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	330b      	adds	r3, #11
 80091fe:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009206:	b29b      	uxth	r3, r3
 8009208:	8bba      	ldrh	r2, [r7, #28]
 800920a:	429a      	cmp	r2, r3
 800920c:	d114      	bne.n	8009238 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	7a9b      	ldrb	r3, [r3, #10]
 8009212:	3b03      	subs	r3, #3
 8009214:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695a      	ldr	r2, [r3, #20]
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	429a      	cmp	r2, r3
 800921e:	bfa8      	it	ge
 8009220:	461a      	movge	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6918      	ldr	r0, [r3, #16]
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	1cd9      	adds	r1, r3, #3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	461a      	mov	r2, r3
 8009234:	f001 fe68 	bl	800af08 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009240:	2301      	movs	r3, #1
 8009242:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009244:	4809      	ldr	r0, [pc, #36]	@ (800926c <hci_send_req+0x104>)
 8009246:	f000 fc79 	bl	8009b3c <LST_is_empty>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0b5      	beq.n	80091bc <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009250:	7ffb      	ldrb	r3, [r7, #31]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0ad      	beq.n	80091b2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009256:	2001      	movs	r0, #1
 8009258:	f000 f860 	bl	800931c <NotifyCmdStatus>

  return 0;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	200004e0 	.word	0x200004e0
 800926c:	200004d4 	.word	0x200004d4

08009270 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009278:	480f      	ldr	r0, [pc, #60]	@ (80092b8 <TlInit+0x48>)
 800927a:	f000 fc4f 	bl	8009b1c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800927e:	4a0f      	ldr	r2, [pc, #60]	@ (80092bc <TlInit+0x4c>)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009284:	480e      	ldr	r0, [pc, #56]	@ (80092c0 <TlInit+0x50>)
 8009286:	f000 fc49 	bl	8009b1c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800928a:	4b0e      	ldr	r3, [pc, #56]	@ (80092c4 <TlInit+0x54>)
 800928c:	2201      	movs	r2, #1
 800928e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009290:	4b0d      	ldr	r3, [pc, #52]	@ (80092c8 <TlInit+0x58>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800929c:	4b0b      	ldr	r3, [pc, #44]	@ (80092cc <TlInit+0x5c>)
 800929e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80092a0:	4b09      	ldr	r3, [pc, #36]	@ (80092c8 <TlInit+0x58>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f107 0208 	add.w	r2, r7, #8
 80092a8:	4610      	mov	r0, r2
 80092aa:	4798      	blx	r3
  }

  return;
 80092ac:	bf00      	nop
 80092ae:	bf00      	nop
}
 80092b0:	3718      	adds	r7, #24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	200004d4 	.word	0x200004d4
 80092bc:	200000d0 	.word	0x200000d0
 80092c0:	200000c8 	.word	0x200000c8
 80092c4:	200000d4 	.word	0x200000d4
 80092c8:	200004b4 	.word	0x200004b4
 80092cc:	0800935d 	.word	0x0800935d

080092d0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	603a      	str	r2, [r7, #0]
 80092da:	80fb      	strh	r3, [r7, #6]
 80092dc:	460b      	mov	r3, r1
 80092de:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80092e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009314 <SendCmd+0x44>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	88fa      	ldrh	r2, [r7, #6]
 80092e6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80092ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009314 <SendCmd+0x44>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	797a      	ldrb	r2, [r7, #5]
 80092f0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80092f2:	4b08      	ldr	r3, [pc, #32]	@ (8009314 <SendCmd+0x44>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	797a      	ldrb	r2, [r7, #5]
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f001 fe03 	bl	800af08 <memcpy>

  hciContext.io.Send(0,0);
 8009302:	4b05      	ldr	r3, [pc, #20]	@ (8009318 <SendCmd+0x48>)
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	2100      	movs	r1, #0
 8009308:	2000      	movs	r0, #0
 800930a:	4798      	blx	r3

  return;
 800930c:	bf00      	nop
}
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	200000d0 	.word	0x200000d0
 8009318:	200004b4 	.word	0x200004b4

0800931c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009326:	79fb      	ldrb	r3, [r7, #7]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d108      	bne.n	800933e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800932c:	4b0a      	ldr	r3, [pc, #40]	@ (8009358 <NotifyCmdStatus+0x3c>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00d      	beq.n	8009350 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009334:	4b08      	ldr	r3, [pc, #32]	@ (8009358 <NotifyCmdStatus+0x3c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2000      	movs	r0, #0
 800933a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800933c:	e008      	b.n	8009350 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800933e:	4b06      	ldr	r3, [pc, #24]	@ (8009358 <NotifyCmdStatus+0x3c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009346:	4b04      	ldr	r3, [pc, #16]	@ (8009358 <NotifyCmdStatus+0x3c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2001      	movs	r0, #1
 800934c:	4798      	blx	r3
  return;
 800934e:	bf00      	nop
 8009350:	bf00      	nop
}
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	200004dc 	.word	0x200004dc

0800935c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	7a5b      	ldrb	r3, [r3, #9]
 8009368:	2b0f      	cmp	r3, #15
 800936a:	d003      	beq.n	8009374 <TlEvtReceived+0x18>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	7a5b      	ldrb	r3, [r3, #9]
 8009370:	2b0e      	cmp	r3, #14
 8009372:	d107      	bne.n	8009384 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	4809      	ldr	r0, [pc, #36]	@ (800939c <TlEvtReceived+0x40>)
 8009378:	f000 fc28 	bl	8009bcc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800937c:	2000      	movs	r0, #0
 800937e:	f000 ff3b 	bl	800a1f8 <hci_cmd_resp_release>
 8009382:	e006      	b.n	8009392 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009384:	6879      	ldr	r1, [r7, #4]
 8009386:	4806      	ldr	r0, [pc, #24]	@ (80093a0 <TlEvtReceived+0x44>)
 8009388:	f000 fc20 	bl	8009bcc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800938c:	4804      	ldr	r0, [pc, #16]	@ (80093a0 <TlEvtReceived+0x44>)
 800938e:	f000 ff27 	bl	800a1e0 <hci_notify_asynch_evt>
  }

  return;
 8009392:	bf00      	nop
}
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	200004d4 	.word	0x200004d4
 80093a0:	200000c8 	.word	0x200000c8

080093a4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a05      	ldr	r2, [pc, #20]	@ (80093c4 <hci_register_io_bus+0x20>)
 80093b0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a04      	ldr	r2, [pc, #16]	@ (80093c8 <hci_register_io_bus+0x24>)
 80093b6:	611a      	str	r2, [r3, #16]

  return;
 80093b8:	bf00      	nop
}
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	080096bd 	.word	0x080096bd
 80093c8:	08009725 	.word	0x08009725

080093cc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	4a08      	ldr	r2, [pc, #32]	@ (80093fc <shci_init+0x30>)
 80093dc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80093de:	4a08      	ldr	r2, [pc, #32]	@ (8009400 <shci_init+0x34>)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80093e4:	4806      	ldr	r0, [pc, #24]	@ (8009400 <shci_init+0x34>)
 80093e6:	f000 f915 	bl	8009614 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 f898 	bl	8009524 <TlInit>

  return;
 80093f4:	bf00      	nop
}
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	20000504 	.word	0x20000504
 8009400:	200004e4 	.word	0x200004e4

08009404 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800940a:	4822      	ldr	r0, [pc, #136]	@ (8009494 <shci_user_evt_proc+0x90>)
 800940c:	f000 fb96 	bl	8009b3c <LST_is_empty>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d12b      	bne.n	800946e <shci_user_evt_proc+0x6a>
 8009416:	4b20      	ldr	r3, [pc, #128]	@ (8009498 <shci_user_evt_proc+0x94>)
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d027      	beq.n	800946e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800941e:	f107 030c 	add.w	r3, r7, #12
 8009422:	4619      	mov	r1, r3
 8009424:	481b      	ldr	r0, [pc, #108]	@ (8009494 <shci_user_evt_proc+0x90>)
 8009426:	f000 fc18 	bl	8009c5a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800942a:	4b1c      	ldr	r3, [pc, #112]	@ (800949c <shci_user_evt_proc+0x98>)
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00c      	beq.n	800944c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009436:	2301      	movs	r3, #1
 8009438:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800943a:	4b18      	ldr	r3, [pc, #96]	@ (800949c <shci_user_evt_proc+0x98>)
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	1d3a      	adds	r2, r7, #4
 8009440:	4610      	mov	r0, r2
 8009442:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009444:	793a      	ldrb	r2, [r7, #4]
 8009446:	4b14      	ldr	r3, [pc, #80]	@ (8009498 <shci_user_evt_proc+0x94>)
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	e002      	b.n	8009452 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800944c:	4b12      	ldr	r3, [pc, #72]	@ (8009498 <shci_user_evt_proc+0x94>)
 800944e:	2201      	movs	r2, #1
 8009450:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009452:	4b11      	ldr	r3, [pc, #68]	@ (8009498 <shci_user_evt_proc+0x94>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fa71 	bl	8009944 <TL_MM_EvtDone>
 8009462:	e004      	b.n	800946e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4619      	mov	r1, r3
 8009468:	480a      	ldr	r0, [pc, #40]	@ (8009494 <shci_user_evt_proc+0x90>)
 800946a:	f000 fb89 	bl	8009b80 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800946e:	4809      	ldr	r0, [pc, #36]	@ (8009494 <shci_user_evt_proc+0x90>)
 8009470:	f000 fb64 	bl	8009b3c <LST_is_empty>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d107      	bne.n	800948a <shci_user_evt_proc+0x86>
 800947a:	4b07      	ldr	r3, [pc, #28]	@ (8009498 <shci_user_evt_proc+0x94>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009482:	4804      	ldr	r0, [pc, #16]	@ (8009494 <shci_user_evt_proc+0x90>)
 8009484:	f7fa f84e 	bl	8003524 <shci_notify_asynch_evt>
  }


  return;
 8009488:	bf00      	nop
 800948a:	bf00      	nop
}
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	200000d8 	.word	0x200000d8
 8009498:	200000e8 	.word	0x200000e8
 800949c:	200004e4 	.word	0x200004e4

080094a0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60ba      	str	r2, [r7, #8]
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	4603      	mov	r3, r0
 80094ac:	81fb      	strh	r3, [r7, #14]
 80094ae:	460b      	mov	r3, r1
 80094b0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80094b2:	2000      	movs	r0, #0
 80094b4:	f000 f868 	bl	8009588 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80094b8:	4b17      	ldr	r3, [pc, #92]	@ (8009518 <shci_send+0x78>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	89fa      	ldrh	r2, [r7, #14]
 80094be:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80094c2:	4b15      	ldr	r3, [pc, #84]	@ (8009518 <shci_send+0x78>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	7b7a      	ldrb	r2, [r7, #13]
 80094c8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80094ca:	4b13      	ldr	r3, [pc, #76]	@ (8009518 <shci_send+0x78>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	330c      	adds	r3, #12
 80094d0:	7b7a      	ldrb	r2, [r7, #13]
 80094d2:	68b9      	ldr	r1, [r7, #8]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 fd17 	bl	800af08 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80094da:	4b10      	ldr	r3, [pc, #64]	@ (800951c <shci_send+0x7c>)
 80094dc:	2201      	movs	r2, #1
 80094de:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80094e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009520 <shci_send+0x80>)
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	2100      	movs	r1, #0
 80094e6:	2000      	movs	r0, #0
 80094e8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80094ea:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80094ee:	f7fa f830 	bl	8003552 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f103 0008 	add.w	r0, r3, #8
 80094f8:	4b07      	ldr	r3, [pc, #28]	@ (8009518 <shci_send+0x78>)
 80094fa:	6819      	ldr	r1, [r3, #0]
 80094fc:	4b06      	ldr	r3, [pc, #24]	@ (8009518 <shci_send+0x78>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	789b      	ldrb	r3, [r3, #2]
 8009502:	3303      	adds	r3, #3
 8009504:	461a      	mov	r2, r3
 8009506:	f001 fcff 	bl	800af08 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800950a:	2001      	movs	r0, #1
 800950c:	f000 f83c 	bl	8009588 <Cmd_SetStatus>

  return;
 8009510:	bf00      	nop
}
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	200000e4 	.word	0x200000e4
 800951c:	20000508 	.word	0x20000508
 8009520:	200004e4 	.word	0x200004e4

08009524 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800952c:	4a10      	ldr	r2, [pc, #64]	@ (8009570 <TlInit+0x4c>)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009532:	4810      	ldr	r0, [pc, #64]	@ (8009574 <TlInit+0x50>)
 8009534:	f000 faf2 	bl	8009b1c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009538:	2001      	movs	r0, #1
 800953a:	f000 f825 	bl	8009588 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800953e:	4b0e      	ldr	r3, [pc, #56]	@ (8009578 <TlInit+0x54>)
 8009540:	2201      	movs	r2, #1
 8009542:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009544:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <TlInit+0x58>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00c      	beq.n	8009566 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009550:	4b0b      	ldr	r3, [pc, #44]	@ (8009580 <TlInit+0x5c>)
 8009552:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009554:	4b0b      	ldr	r3, [pc, #44]	@ (8009584 <TlInit+0x60>)
 8009556:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009558:	4b08      	ldr	r3, [pc, #32]	@ (800957c <TlInit+0x58>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f107 020c 	add.w	r2, r7, #12
 8009560:	4610      	mov	r0, r2
 8009562:	4798      	blx	r3
  }

  return;
 8009564:	bf00      	nop
 8009566:	bf00      	nop
}
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	200000e4 	.word	0x200000e4
 8009574:	200000d8 	.word	0x200000d8
 8009578:	200000e8 	.word	0x200000e8
 800957c:	200004e4 	.word	0x200004e4
 8009580:	080095d9 	.word	0x080095d9
 8009584:	080095f1 	.word	0x080095f1

08009588 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10b      	bne.n	80095b0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009598:	4b0d      	ldr	r3, [pc, #52]	@ (80095d0 <Cmd_SetStatus+0x48>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80095a0:	4b0b      	ldr	r3, [pc, #44]	@ (80095d0 <Cmd_SetStatus+0x48>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2000      	movs	r0, #0
 80095a6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80095a8:	4b0a      	ldr	r3, [pc, #40]	@ (80095d4 <Cmd_SetStatus+0x4c>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80095ae:	e00b      	b.n	80095c8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80095b0:	4b08      	ldr	r3, [pc, #32]	@ (80095d4 <Cmd_SetStatus+0x4c>)
 80095b2:	2201      	movs	r2, #1
 80095b4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80095b6:	4b06      	ldr	r3, [pc, #24]	@ (80095d0 <Cmd_SetStatus+0x48>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d004      	beq.n	80095c8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80095be:	4b04      	ldr	r3, [pc, #16]	@ (80095d0 <Cmd_SetStatus+0x48>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2001      	movs	r0, #1
 80095c4:	4798      	blx	r3
  return;
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
}
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000504 	.word	0x20000504
 80095d4:	200000e0 	.word	0x200000e0

080095d8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80095e0:	2000      	movs	r0, #0
 80095e2:	f7f9 ffab 	bl	800353c <shci_cmd_resp_release>

  return;
 80095e6:	bf00      	nop
}
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4805      	ldr	r0, [pc, #20]	@ (8009610 <TlUserEvtReceived+0x20>)
 80095fc:	f000 fae6 	bl	8009bcc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009600:	4803      	ldr	r0, [pc, #12]	@ (8009610 <TlUserEvtReceived+0x20>)
 8009602:	f7f9 ff8f 	bl	8003524 <shci_notify_asynch_evt>

  return;
 8009606:	bf00      	nop
}
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	200000d8 	.word	0x200000d8

08009614 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a05      	ldr	r2, [pc, #20]	@ (8009634 <shci_register_io_bus+0x20>)
 8009620:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a04      	ldr	r2, [pc, #16]	@ (8009638 <shci_register_io_bus+0x24>)
 8009626:	611a      	str	r2, [r3, #16]

  return;
 8009628:	bf00      	nop
}
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	080097d1 	.word	0x080097d1
 8009638:	08009825 	.word	0x08009825

0800963c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009640:	f001 f8d2 	bl	800a7e8 <HW_IPCC_Enable>

  return;
 8009644:	bf00      	nop
}
 8009646:	bd80      	pop	{r7, pc}

08009648 <TL_Init>:


void TL_Init( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800964c:	4b10      	ldr	r3, [pc, #64]	@ (8009690 <TL_Init+0x48>)
 800964e:	4a11      	ldr	r2, [pc, #68]	@ (8009694 <TL_Init+0x4c>)
 8009650:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009652:	4b0f      	ldr	r3, [pc, #60]	@ (8009690 <TL_Init+0x48>)
 8009654:	4a10      	ldr	r2, [pc, #64]	@ (8009698 <TL_Init+0x50>)
 8009656:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009658:	4b0d      	ldr	r3, [pc, #52]	@ (8009690 <TL_Init+0x48>)
 800965a:	4a10      	ldr	r2, [pc, #64]	@ (800969c <TL_Init+0x54>)
 800965c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800965e:	4b0c      	ldr	r3, [pc, #48]	@ (8009690 <TL_Init+0x48>)
 8009660:	4a0f      	ldr	r2, [pc, #60]	@ (80096a0 <TL_Init+0x58>)
 8009662:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009664:	4b0a      	ldr	r3, [pc, #40]	@ (8009690 <TL_Init+0x48>)
 8009666:	4a0f      	ldr	r2, [pc, #60]	@ (80096a4 <TL_Init+0x5c>)
 8009668:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800966a:	4b09      	ldr	r3, [pc, #36]	@ (8009690 <TL_Init+0x48>)
 800966c:	4a0e      	ldr	r2, [pc, #56]	@ (80096a8 <TL_Init+0x60>)
 800966e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009670:	4b07      	ldr	r3, [pc, #28]	@ (8009690 <TL_Init+0x48>)
 8009672:	4a0e      	ldr	r2, [pc, #56]	@ (80096ac <TL_Init+0x64>)
 8009674:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009676:	4b06      	ldr	r3, [pc, #24]	@ (8009690 <TL_Init+0x48>)
 8009678:	4a0d      	ldr	r2, [pc, #52]	@ (80096b0 <TL_Init+0x68>)
 800967a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800967c:	4b04      	ldr	r3, [pc, #16]	@ (8009690 <TL_Init+0x48>)
 800967e:	4a0d      	ldr	r2, [pc, #52]	@ (80096b4 <TL_Init+0x6c>)
 8009680:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009682:	4b03      	ldr	r3, [pc, #12]	@ (8009690 <TL_Init+0x48>)
 8009684:	4a0c      	ldr	r2, [pc, #48]	@ (80096b8 <TL_Init+0x70>)
 8009686:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009688:	f001 f8c2 	bl	800a810 <HW_IPCC_Init>

  return;
 800968c:	bf00      	nop
}
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20030000 	.word	0x20030000
 8009694:	20030028 	.word	0x20030028
 8009698:	20030048 	.word	0x20030048
 800969c:	20030058 	.word	0x20030058
 80096a0:	20030068 	.word	0x20030068
 80096a4:	20030070 	.word	0x20030070
 80096a8:	20030078 	.word	0x20030078
 80096ac:	20030080 	.word	0x20030080
 80096b0:	2003009c 	.word	0x2003009c
 80096b4:	200300a0 	.word	0x200300a0
 80096b8:	200300ac 	.word	0x200300ac

080096bc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80096c8:	4811      	ldr	r0, [pc, #68]	@ (8009710 <TL_BLE_Init+0x54>)
 80096ca:	f000 fa27 	bl	8009b1c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80096ce:	4b11      	ldr	r3, [pc, #68]	@ (8009714 <TL_BLE_Init+0x58>)
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	68da      	ldr	r2, [r3, #12]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4a0c      	ldr	r2, [pc, #48]	@ (8009718 <TL_BLE_Init+0x5c>)
 80096e8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	4a08      	ldr	r2, [pc, #32]	@ (8009710 <TL_BLE_Init+0x54>)
 80096ee:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80096f0:	f001 f8a4 	bl	800a83c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a08      	ldr	r2, [pc, #32]	@ (800971c <TL_BLE_Init+0x60>)
 80096fa:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	4a07      	ldr	r2, [pc, #28]	@ (8009720 <TL_BLE_Init+0x64>)
 8009702:	6013      	str	r3, [r2, #0]

  return 0;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	200300c8 	.word	0x200300c8
 8009714:	20030000 	.word	0x20030000
 8009718:	20030a58 	.word	0x20030a58
 800971c:	20000514 	.word	0x20000514
 8009720:	20000518 	.word	0x20000518

08009724 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009730:	4b09      	ldr	r3, [pc, #36]	@ (8009758 <TL_BLE_SendCmd+0x34>)
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2201      	movs	r2, #1
 8009738:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800973a:	4b07      	ldr	r3, [pc, #28]	@ (8009758 <TL_BLE_SendCmd+0x34>)
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4619      	mov	r1, r3
 8009742:	2001      	movs	r0, #1
 8009744:	f000 f96c 	bl	8009a20 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009748:	f001 f882 	bl	800a850 <HW_IPCC_BLE_SendCmd>

  return 0;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20030000 	.word	0x20030000

0800975c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009762:	e01c      	b.n	800979e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009764:	1d3b      	adds	r3, r7, #4
 8009766:	4619      	mov	r1, r3
 8009768:	4812      	ldr	r0, [pc, #72]	@ (80097b4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800976a:	f000 fa76 	bl	8009c5a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	7a5b      	ldrb	r3, [r3, #9]
 8009772:	2b0f      	cmp	r3, #15
 8009774:	d003      	beq.n	800977e <HW_IPCC_BLE_RxEvtNot+0x22>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	7a5b      	ldrb	r3, [r3, #9]
 800977a:	2b0e      	cmp	r3, #14
 800977c:	d105      	bne.n	800978a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4619      	mov	r1, r3
 8009782:	2002      	movs	r0, #2
 8009784:	f000 f94c 	bl	8009a20 <OutputDbgTrace>
 8009788:	e004      	b.n	8009794 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4619      	mov	r1, r3
 800978e:	2003      	movs	r0, #3
 8009790:	f000 f946 	bl	8009a20 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009794:	4b08      	ldr	r3, [pc, #32]	@ (80097b8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	4610      	mov	r0, r2
 800979c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800979e:	4805      	ldr	r0, [pc, #20]	@ (80097b4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80097a0:	f000 f9cc 	bl	8009b3c <LST_is_empty>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0dc      	beq.n	8009764 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80097aa:	bf00      	nop
}
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	200300c8 	.word	0x200300c8
 80097b8:	20000514 	.word	0x20000514

080097bc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80097c0:	4b02      	ldr	r3, [pc, #8]	@ (80097cc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4798      	blx	r3

  return;
 80097c6:	bf00      	nop
}
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000518 	.word	0x20000518

080097d0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80097dc:	480d      	ldr	r0, [pc, #52]	@ (8009814 <TL_SYS_Init+0x44>)
 80097de:	f000 f99d 	bl	8009b1c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80097e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009818 <TL_SYS_Init+0x48>)
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	689a      	ldr	r2, [r3, #8]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	4a08      	ldr	r2, [pc, #32]	@ (8009814 <TL_SYS_Init+0x44>)
 80097f4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80097f6:	f001 f84d 	bl	800a894 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a07      	ldr	r2, [pc, #28]	@ (800981c <TL_SYS_Init+0x4c>)
 8009800:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	4a06      	ldr	r2, [pc, #24]	@ (8009820 <TL_SYS_Init+0x50>)
 8009808:	6013      	str	r3, [r2, #0]

  return 0;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	200300d0 	.word	0x200300d0
 8009818:	20030000 	.word	0x20030000
 800981c:	2000051c 	.word	0x2000051c
 8009820:	20000520 	.word	0x20000520

08009824 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009830:	4b09      	ldr	r3, [pc, #36]	@ (8009858 <TL_SYS_SendCmd+0x34>)
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2210      	movs	r2, #16
 8009838:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800983a:	4b07      	ldr	r3, [pc, #28]	@ (8009858 <TL_SYS_SendCmd+0x34>)
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4619      	mov	r1, r3
 8009842:	2004      	movs	r0, #4
 8009844:	f000 f8ec 	bl	8009a20 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009848:	f001 f82e 	bl	800a8a8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20030000 	.word	0x20030000

0800985c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009860:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4619      	mov	r1, r3
 8009868:	2005      	movs	r0, #5
 800986a:	f000 f8d9 	bl	8009a20 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800986e:	4b05      	ldr	r3, [pc, #20]	@ (8009884 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a03      	ldr	r2, [pc, #12]	@ (8009880 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009874:	68d2      	ldr	r2, [r2, #12]
 8009876:	6812      	ldr	r2, [r2, #0]
 8009878:	4610      	mov	r0, r2
 800987a:	4798      	blx	r3

  return;
 800987c:	bf00      	nop
}
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20030000 	.word	0x20030000
 8009884:	2000051c 	.word	0x2000051c

08009888 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800988e:	e00e      	b.n	80098ae <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009890:	1d3b      	adds	r3, r7, #4
 8009892:	4619      	mov	r1, r3
 8009894:	480b      	ldr	r0, [pc, #44]	@ (80098c4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009896:	f000 f9e0 	bl	8009c5a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4619      	mov	r1, r3
 800989e:	2006      	movs	r0, #6
 80098a0:	f000 f8be 	bl	8009a20 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80098a4:	4b08      	ldr	r3, [pc, #32]	@ (80098c8 <HW_IPCC_SYS_EvtNot+0x40>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	4610      	mov	r0, r2
 80098ac:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80098ae:	4805      	ldr	r0, [pc, #20]	@ (80098c4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80098b0:	f000 f944 	bl	8009b3c <LST_is_empty>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0ea      	beq.n	8009890 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80098ba:	bf00      	nop
}
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200300d0 	.word	0x200300d0
 80098c8:	20000520 	.word	0x20000520

080098cc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80098d4:	4817      	ldr	r0, [pc, #92]	@ (8009934 <TL_MM_Init+0x68>)
 80098d6:	f000 f921 	bl	8009b1c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80098da:	4817      	ldr	r0, [pc, #92]	@ (8009938 <TL_MM_Init+0x6c>)
 80098dc:	f000 f91e 	bl	8009b1c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80098e0:	4b16      	ldr	r3, [pc, #88]	@ (800993c <TL_MM_Init+0x70>)
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	4a16      	ldr	r2, [pc, #88]	@ (8009940 <TL_MM_Init+0x74>)
 80098e6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80098e8:	4b15      	ldr	r3, [pc, #84]	@ (8009940 <TL_MM_Init+0x74>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6892      	ldr	r2, [r2, #8]
 80098f0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80098f2:	4b13      	ldr	r3, [pc, #76]	@ (8009940 <TL_MM_Init+0x74>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	68d2      	ldr	r2, [r2, #12]
 80098fa:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80098fc:	4b10      	ldr	r3, [pc, #64]	@ (8009940 <TL_MM_Init+0x74>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a0c      	ldr	r2, [pc, #48]	@ (8009934 <TL_MM_Init+0x68>)
 8009902:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009904:	4b0e      	ldr	r3, [pc, #56]	@ (8009940 <TL_MM_Init+0x74>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800990e:	4b0c      	ldr	r3, [pc, #48]	@ (8009940 <TL_MM_Init+0x74>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	6852      	ldr	r2, [r2, #4]
 8009916:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009918:	4b09      	ldr	r3, [pc, #36]	@ (8009940 <TL_MM_Init+0x74>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	6912      	ldr	r2, [r2, #16]
 8009920:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009922:	4b07      	ldr	r3, [pc, #28]	@ (8009940 <TL_MM_Init+0x74>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	6952      	ldr	r2, [r2, #20]
 800992a:	619a      	str	r2, [r3, #24]

  return;
 800992c:	bf00      	nop
}
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	200300b8 	.word	0x200300b8
 8009938:	2000050c 	.word	0x2000050c
 800993c:	20030000 	.word	0x20030000
 8009940:	20000524 	.word	0x20000524

08009944 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800994c:	6879      	ldr	r1, [r7, #4]
 800994e:	4807      	ldr	r0, [pc, #28]	@ (800996c <TL_MM_EvtDone+0x28>)
 8009950:	f000 f93c 	bl	8009bcc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	2000      	movs	r0, #0
 8009958:	f000 f862 	bl	8009a20 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800995c:	4804      	ldr	r0, [pc, #16]	@ (8009970 <TL_MM_EvtDone+0x2c>)
 800995e:	f000 ffc9 	bl	800a8f4 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009962:	bf00      	nop
}
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	2000050c 	.word	0x2000050c
 8009970:	08009975 	.word	0x08009975

08009974 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800997a:	e00c      	b.n	8009996 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800997c:	1d3b      	adds	r3, r7, #4
 800997e:	4619      	mov	r1, r3
 8009980:	480a      	ldr	r0, [pc, #40]	@ (80099ac <SendFreeBuf+0x38>)
 8009982:	f000 f96a 	bl	8009c5a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009986:	4b0a      	ldr	r3, [pc, #40]	@ (80099b0 <SendFreeBuf+0x3c>)
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f000 f91b 	bl	8009bcc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009996:	4805      	ldr	r0, [pc, #20]	@ (80099ac <SendFreeBuf+0x38>)
 8009998:	f000 f8d0 	bl	8009b3c <LST_is_empty>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0ec      	beq.n	800997c <SendFreeBuf+0x8>
  }

  return;
 80099a2:	bf00      	nop
}
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	2000050c 	.word	0x2000050c
 80099b0:	20030000 	.word	0x20030000

080099b4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80099b8:	4805      	ldr	r0, [pc, #20]	@ (80099d0 <TL_TRACES_Init+0x1c>)
 80099ba:	f000 f8af 	bl	8009b1c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80099be:	4b05      	ldr	r3, [pc, #20]	@ (80099d4 <TL_TRACES_Init+0x20>)
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	4a03      	ldr	r2, [pc, #12]	@ (80099d0 <TL_TRACES_Init+0x1c>)
 80099c4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80099c6:	f000 ffcb 	bl	800a960 <HW_IPCC_TRACES_Init>

  return;
 80099ca:	bf00      	nop
}
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	200300c0 	.word	0x200300c0
 80099d4:	20030000 	.word	0x20030000

080099d8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80099de:	e008      	b.n	80099f2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80099e0:	1d3b      	adds	r3, r7, #4
 80099e2:	4619      	mov	r1, r3
 80099e4:	4808      	ldr	r0, [pc, #32]	@ (8009a08 <HW_IPCC_TRACES_EvtNot+0x30>)
 80099e6:	f000 f938 	bl	8009c5a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f80d 	bl	8009a0c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80099f2:	4805      	ldr	r0, [pc, #20]	@ (8009a08 <HW_IPCC_TRACES_EvtNot+0x30>)
 80099f4:	f000 f8a2 	bl	8009b3c <LST_is_empty>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0f0      	beq.n	80099e0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80099fe:	bf00      	nop
}
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	200300c0 	.word	0x200300c0

08009a0c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	6039      	str	r1, [r7, #0]
 8009a2a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	2b06      	cmp	r3, #6
 8009a30:	d845      	bhi.n	8009abe <OutputDbgTrace+0x9e>
 8009a32:	a201      	add	r2, pc, #4	@ (adr r2, 8009a38 <OutputDbgTrace+0x18>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009a55 	.word	0x08009a55
 8009a3c:	08009a79 	.word	0x08009a79
 8009a40:	08009a7f 	.word	0x08009a7f
 8009a44:	08009a93 	.word	0x08009a93
 8009a48:	08009a9f 	.word	0x08009a9f
 8009a4c:	08009aa5 	.word	0x08009aa5
 8009a50:	08009ab3 	.word	0x08009ab3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	7a5b      	ldrb	r3, [r3, #9]
 8009a5c:	2bff      	cmp	r3, #255	@ 0xff
 8009a5e:	d005      	beq.n	8009a6c <OutputDbgTrace+0x4c>
 8009a60:	2bff      	cmp	r3, #255	@ 0xff
 8009a62:	dc05      	bgt.n	8009a70 <OutputDbgTrace+0x50>
 8009a64:	2b0e      	cmp	r3, #14
 8009a66:	d005      	beq.n	8009a74 <OutputDbgTrace+0x54>
 8009a68:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009a6a:	e001      	b.n	8009a70 <OutputDbgTrace+0x50>
          break;
 8009a6c:	bf00      	nop
 8009a6e:	e027      	b.n	8009ac0 <OutputDbgTrace+0xa0>
          break;
 8009a70:	bf00      	nop
 8009a72:	e025      	b.n	8009ac0 <OutputDbgTrace+0xa0>
          break;
 8009a74:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009a76:	e023      	b.n	8009ac0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009a7c:	e020      	b.n	8009ac0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	7a5b      	ldrb	r3, [r3, #9]
 8009a86:	2b0e      	cmp	r3, #14
 8009a88:	d001      	beq.n	8009a8e <OutputDbgTrace+0x6e>
 8009a8a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009a8c:	e000      	b.n	8009a90 <OutputDbgTrace+0x70>
          break;
 8009a8e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009a90:	e016      	b.n	8009ac0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	7a5b      	ldrb	r3, [r3, #9]
 8009a9a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009a9c:	e010      	b.n	8009ac0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009aa2:	e00d      	b.n	8009ac0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	7a5b      	ldrb	r3, [r3, #9]
 8009aac:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009aae:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009ab0:	e006      	b.n	8009ac0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	7a5b      	ldrb	r3, [r3, #9]
 8009aba:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009abc:	e000      	b.n	8009ac0 <OutputDbgTrace+0xa0>

    default:
      break;
 8009abe:	bf00      	nop
  }

  return;
 8009ac0:	bf00      	nop
}
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8009b14 <OTP_Read+0x48>)
 8009ad8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009ada:	e002      	b.n	8009ae2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3b08      	subs	r3, #8
 8009ae0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3307      	adds	r3, #7
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	79fa      	ldrb	r2, [r7, #7]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d003      	beq.n	8009af6 <OTP_Read+0x2a>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	4a09      	ldr	r2, [pc, #36]	@ (8009b18 <OTP_Read+0x4c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d1f2      	bne.n	8009adc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3307      	adds	r3, #7
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	79fa      	ldrb	r2, [r7, #7]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d001      	beq.n	8009b06 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009b06:	68fb      	ldr	r3, [r7, #12]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	1fff73f8 	.word	0x1fff73f8
 8009b18:	1fff7000 	.word	0x1fff7000

08009b1c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	605a      	str	r2, [r3, #4]
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b44:	f3ef 8310 	mrs	r3, PRIMASK
 8009b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009b4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b4e:	b672      	cpsid	i
}
 8009b50:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d102      	bne.n	8009b62 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	75fb      	strb	r3, [r7, #23]
 8009b60:	e001      	b.n	8009b66 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009b62:	2300      	movs	r3, #0
 8009b64:	75fb      	strb	r3, [r7, #23]
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f383 8810 	msr	PRIMASK, r3
}
 8009b70:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b90:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009b92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b94:	b672      	cpsid	i
}
 8009b96:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	605a      	str	r2, [r3, #4]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f383 8810 	msr	PRIMASK, r3
}
 8009bbe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009bc0:	bf00      	nop
 8009bc2:	371c      	adds	r7, #28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8009bda:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009bde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009be0:	b672      	cpsid	i
}
 8009be2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	f383 8810 	msr	PRIMASK, r3
}
 8009c0a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009c0c:	bf00      	nop
 8009c0e:	371c      	adds	r7, #28
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c20:	f3ef 8310 	mrs	r3, PRIMASK
 8009c24:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c26:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c2a:	b672      	cpsid	i
}
 8009c2c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	6812      	ldr	r2, [r2, #0]
 8009c36:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	6852      	ldr	r2, [r2, #4]
 8009c40:	605a      	str	r2, [r3, #4]
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f383 8810 	msr	PRIMASK, r3
}
 8009c4c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009c4e:	bf00      	nop
 8009c50:	371c      	adds	r7, #28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b086      	sub	sp, #24
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c64:	f3ef 8310 	mrs	r3, PRIMASK
 8009c68:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c6e:	b672      	cpsid	i
}
 8009c70:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff ffca 	bl	8009c18 <LST_remove_node>
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f383 8810 	msr	PRIMASK, r3
}
 8009c8e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009c90:	bf00      	nop
 8009c92:	3718      	adds	r7, #24
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8009c9c:	4b03      	ldr	r3, [pc, #12]	@ (8009cac <LL_FLASH_GetUDN+0x14>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	1fff7580 	.word	0x1fff7580

08009cb0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8009cb4:	4b03      	ldr	r3, [pc, #12]	@ (8009cc4 <LL_FLASH_GetDeviceID+0x14>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	b2db      	uxtb	r3, r3
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	1fff7584 	.word	0x1fff7584

08009cc8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8009ccc:	4b03      	ldr	r3, [pc, #12]	@ (8009cdc <LL_FLASH_GetSTCompanyID+0x14>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	0a1b      	lsrs	r3, r3, #8
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	1fff7584 	.word	0x1fff7584

08009ce0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8009ce0:	b5b0      	push	{r4, r5, r7, lr}
 8009ce2:	b090      	sub	sp, #64	@ 0x40
 8009ce4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009ce6:	2392      	movs	r3, #146	@ 0x92
 8009ce8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8009cec:	4b25      	ldr	r3, [pc, #148]	@ (8009d84 <APP_BLE_Init+0xa4>)
 8009cee:	1d3c      	adds	r4, r7, #4
 8009cf0:	461d      	mov	r5, r3
 8009cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009d02:	c403      	stmia	r4!, {r0, r1}
 8009d04:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8009d06:	f000 f913 	bl	8009f30 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	2002      	movs	r0, #2
 8009d0e:	f000 fe4f 	bl	800a9b0 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8009d12:	4a1d      	ldr	r2, [pc, #116]	@ (8009d88 <APP_BLE_Init+0xa8>)
 8009d14:	2100      	movs	r1, #0
 8009d16:	2002      	movs	r0, #2
 8009d18:	f000 ff76 	bl	800ac08 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009d1c:	1d3b      	adds	r3, r7, #4
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff f8c6 	bl	8008eb0 <SHCI_C2_BLE_Init>
 8009d24:	4603      	mov	r3, r0
 8009d26:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8009d2a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009d32:	f7fa fc35 	bl	80045a0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009d36:	f000 f911 	bl	8009f5c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009d3a:	f7ff f813 	bl	8008d64 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009d3e:	4b13      	ldr	r3, [pc, #76]	@ (8009d8c <APP_BLE_Init+0xac>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8009d46:	4b11      	ldr	r3, [pc, #68]	@ (8009d8c <APP_BLE_Init+0xac>)
 8009d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d4c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009d4e:	4a10      	ldr	r2, [pc, #64]	@ (8009d90 <APP_BLE_Init+0xb0>)
 8009d50:	2100      	movs	r1, #0
 8009d52:	2001      	movs	r0, #1
 8009d54:	f000 ff58 	bl	800ac08 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8009d58:	2006      	movs	r0, #6
 8009d5a:	f7fe fe77 	bl	8008a4c <aci_hal_set_radio_activity_mask>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8009d64:	f000 fabd 	bl	800a2e2 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8009d68:	4b08      	ldr	r3, [pc, #32]	@ (8009d8c <APP_BLE_Init+0xac>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8009d6e:	4b07      	ldr	r3, [pc, #28]	@ (8009d8c <APP_BLE_Init+0xac>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8009d74:	2001      	movs	r0, #1
 8009d76:	f000 f9a5 	bl	800a0c4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8009d7a:	bf00      	nop
}
 8009d7c:	3740      	adds	r7, #64	@ 0x40
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bdb0      	pop	{r4, r5, r7, pc}
 8009d82:	bf00      	nop
 8009d84:	0800b184 	.word	0x0800b184
 8009d88:	080090cd 	.word	0x080090cd
 8009d8c:	20000530 	.word	0x20000530
 8009d90:	0800a1ad 	.word	0x0800a1ad

08009d94 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	@ 0x28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009d9c:	2392      	movs	r3, #146	@ 0x92
 8009d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3301      	adds	r3, #1
 8009da6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	2bff      	cmp	r3, #255	@ 0xff
 8009dae:	d053      	beq.n	8009e58 <SVCCTL_App_Notification+0xc4>
 8009db0:	2bff      	cmp	r3, #255	@ 0xff
 8009db2:	f300 80af 	bgt.w	8009f14 <SVCCTL_App_Notification+0x180>
 8009db6:	2b05      	cmp	r3, #5
 8009db8:	d002      	beq.n	8009dc0 <SVCCTL_App_Notification+0x2c>
 8009dba:	2b3e      	cmp	r3, #62	@ 0x3e
 8009dbc:	d020      	beq.n	8009e00 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009dbe:	e0a9      	b.n	8009f14 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8009dc0:	6a3b      	ldr	r3, [r7, #32]
 8009dc2:	3302      	adds	r3, #2
 8009dc4:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	4b55      	ldr	r3, [pc, #340]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009dd0:	8adb      	ldrh	r3, [r3, #22]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d106      	bne.n	8009de4 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8009dd6:	4b53      	ldr	r3, [pc, #332]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009ddc:	4b51      	ldr	r3, [pc, #324]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8009de4:	2001      	movs	r0, #1
 8009de6:	f000 f96d 	bl	800a0c4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8009dea:	4b4f      	ldr	r3, [pc, #316]	@ (8009f28 <SVCCTL_App_Notification+0x194>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009df0:	4b4c      	ldr	r3, [pc, #304]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009df2:	8ada      	ldrh	r2, [r3, #22]
 8009df4:	4b4c      	ldr	r3, [pc, #304]	@ (8009f28 <SVCCTL_App_Notification+0x194>)
 8009df6:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8009df8:	484b      	ldr	r0, [pc, #300]	@ (8009f28 <SVCCTL_App_Notification+0x194>)
 8009dfa:	f000 fa5e 	bl	800a2ba <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8009dfe:	e08c      	b.n	8009f1a <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	3302      	adds	r3, #2
 8009e04:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d001      	beq.n	8009e12 <SVCCTL_App_Notification+0x7e>
 8009e0e:	2b03      	cmp	r3, #3
          break;
 8009e10:	e021      	b.n	8009e56 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	3301      	adds	r3, #1
 8009e16:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009e18:	4b42      	ldr	r3, [pc, #264]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009e1a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d104      	bne.n	8009e2c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8009e22:	4b40      	ldr	r3, [pc, #256]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009e24:	2206      	movs	r2, #6
 8009e26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8009e2a:	e003      	b.n	8009e34 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009e2e:	2205      	movs	r2, #5
 8009e30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	4b39      	ldr	r3, [pc, #228]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009e3e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8009e40:	4b39      	ldr	r3, [pc, #228]	@ (8009f28 <SVCCTL_App_Notification+0x194>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009e46:	4b37      	ldr	r3, [pc, #220]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009e48:	8ada      	ldrh	r2, [r3, #22]
 8009e4a:	4b37      	ldr	r3, [pc, #220]	@ (8009f28 <SVCCTL_App_Notification+0x194>)
 8009e4c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009e4e:	4836      	ldr	r0, [pc, #216]	@ (8009f28 <SVCCTL_App_Notification+0x194>)
 8009e50:	f000 fa33 	bl	800a2ba <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009e54:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8009e56:	e060      	b.n	8009f1a <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	3302      	adds	r3, #2
 8009e5c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d047      	beq.n	8009efc <SVCCTL_App_Notification+0x168>
 8009e6c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8009e70:	4293      	cmp	r3, r2
 8009e72:	dc51      	bgt.n	8009f18 <SVCCTL_App_Notification+0x184>
 8009e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e78:	d046      	beq.n	8009f08 <SVCCTL_App_Notification+0x174>
 8009e7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e7e:	dc4b      	bgt.n	8009f18 <SVCCTL_App_Notification+0x184>
 8009e80:	2b04      	cmp	r3, #4
 8009e82:	d043      	beq.n	8009f0c <SVCCTL_App_Notification+0x178>
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	db47      	blt.n	8009f18 <SVCCTL_App_Notification+0x184>
 8009e88:	f240 420a 	movw	r2, #1034	@ 0x40a
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	dc43      	bgt.n	8009f18 <SVCCTL_App_Notification+0x184>
 8009e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e94:	dd40      	ble.n	8009f18 <SVCCTL_App_Notification+0x184>
 8009e96:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8009e9a:	2b09      	cmp	r3, #9
 8009e9c:	d83c      	bhi.n	8009f18 <SVCCTL_App_Notification+0x184>
 8009e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea4 <SVCCTL_App_Notification+0x110>)
 8009ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea4:	08009ef5 	.word	0x08009ef5
 8009ea8:	08009ecd 	.word	0x08009ecd
 8009eac:	08009f19 	.word	0x08009f19
 8009eb0:	08009f19 	.word	0x08009f19
 8009eb4:	08009f19 	.word	0x08009f19
 8009eb8:	08009f19 	.word	0x08009f19
 8009ebc:	08009f11 	.word	0x08009f11
 8009ec0:	08009f19 	.word	0x08009f19
 8009ec4:	08009ee1 	.word	0x08009ee1
 8009ec8:	08009f11 	.word	0x08009f11
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8009ecc:	4b15      	ldr	r3, [pc, #84]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009ece:	8adb      	ldrh	r3, [r3, #22]
 8009ed0:	4916      	ldr	r1, [pc, #88]	@ (8009f2c <SVCCTL_App_Notification+0x198>)
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fd ffbc 	bl	8007e50 <aci_gap_pass_key_resp>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8009ede:	e018      	b.n	8009f12 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8009ee0:	4b10      	ldr	r3, [pc, #64]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009ee2:	8adb      	ldrh	r3, [r3, #22]
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fe f95c 	bl	80081a4 <aci_gap_numeric_comparison_value_confirm_yesno>
 8009eec:	4603      	mov	r3, r0
 8009eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8009ef2:	e00e      	b.n	8009f12 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	3302      	adds	r3, #2
 8009ef8:	61bb      	str	r3, [r7, #24]
          break;
 8009efa:	e00a      	b.n	8009f12 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8009efc:	4b09      	ldr	r3, [pc, #36]	@ (8009f24 <SVCCTL_App_Notification+0x190>)
 8009efe:	8adb      	ldrh	r3, [r3, #22]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe fc62 	bl	80087ca <aci_gatt_confirm_indication>
        break;
 8009f06:	e004      	b.n	8009f12 <SVCCTL_App_Notification+0x17e>
          break;
 8009f08:	bf00      	nop
 8009f0a:	e005      	b.n	8009f18 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009f0c:	bf00      	nop
 8009f0e:	e003      	b.n	8009f18 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009f10:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009f12:	e001      	b.n	8009f18 <SVCCTL_App_Notification+0x184>
      break;
 8009f14:	bf00      	nop
 8009f16:	e000      	b.n	8009f1a <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009f18:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8009f1a:	2301      	movs	r3, #1
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3728      	adds	r7, #40	@ 0x28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	20000530 	.word	0x20000530
 8009f28:	200005b4 	.word	0x200005b4
 8009f2c:	0001b207 	.word	0x0001b207

08009f30 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009f36:	4b06      	ldr	r3, [pc, #24]	@ (8009f50 <Ble_Tl_Init+0x20>)
 8009f38:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009f3a:	4b06      	ldr	r3, [pc, #24]	@ (8009f54 <Ble_Tl_Init+0x24>)
 8009f3c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009f3e:	463b      	mov	r3, r7
 8009f40:	4619      	mov	r1, r3
 8009f42:	4805      	ldr	r0, [pc, #20]	@ (8009f58 <Ble_Tl_Init+0x28>)
 8009f44:	f7ff f8a6 	bl	8009094 <hci_init>

  return;
 8009f48:	bf00      	nop
}
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	200300d8 	.word	0x200300d8
 8009f54:	0800a25d 	.word	0x0800a25d
 8009f58:	0800a225 	.word	0x0800a225

08009f5c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5e:	b08d      	sub	sp, #52	@ 0x34
 8009f60:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8009f62:	2300      	movs	r3, #0
 8009f64:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009f66:	2392      	movs	r3, #146	@ 0x92
 8009f68:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009f6a:	f7fe fdc3 	bl	8008af4 <hci_reset>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8009f72:	f000 f8d7 	bl	800a124 <BleGetBdAddress>
 8009f76:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	2106      	movs	r1, #6
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	f7fe fc79 	bl	8008874 <aci_hal_write_config_data>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8009f86:	4a4a      	ldr	r2, [pc, #296]	@ (800a0b0 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8009f88:	2110      	movs	r1, #16
 8009f8a:	2018      	movs	r0, #24
 8009f8c:	f7fe fc72 	bl	8008874 <aci_hal_write_config_data>
 8009f90:	4603      	mov	r3, r0
 8009f92:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8009f94:	4a47      	ldr	r2, [pc, #284]	@ (800a0b4 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8009f96:	2110      	movs	r1, #16
 8009f98:	2008      	movs	r0, #8
 8009f9a:	f7fe fc6b 	bl	8008874 <aci_hal_write_config_data>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8009fa2:	2118      	movs	r1, #24
 8009fa4:	2001      	movs	r0, #1
 8009fa6:	f7fe fcea 	bl	800897e <aci_hal_set_tx_power_level>
 8009faa:	4603      	mov	r3, r0
 8009fac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8009fae:	f7fe f960 	bl	8008272 <aci_gatt_init>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
 8009fbc:	f043 0301 	orr.w	r3, r3, #1
 8009fc0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d01f      	beq.n	800a008 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009fc8:	4b3b      	ldr	r3, [pc, #236]	@ (800a0b8 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8009fca:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009fcc:	1dba      	adds	r2, r7, #6
 8009fce:	7bf8      	ldrb	r0, [r7, #15]
 8009fd0:	1cbb      	adds	r3, r7, #2
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	1d3b      	adds	r3, r7, #4
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	2208      	movs	r2, #8
 8009fdc:	2100      	movs	r1, #0
 8009fde:	f7fd ff9e 	bl	8007f1e <aci_gap_init>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8009fe6:	88fc      	ldrh	r4, [r7, #6]
 8009fe8:	88bd      	ldrh	r5, [r7, #4]
 8009fea:	68b8      	ldr	r0, [r7, #8]
 8009fec:	f7f6 f8c8 	bl	8000180 <strlen>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	b2da      	uxtb	r2, r3
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4620      	mov	r0, r4
 800a000:	f7fe fb3a 	bl	8008678 <aci_gatt_update_char_value>
 800a004:	4603      	mov	r3, r0
 800a006:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800a008:	88f8      	ldrh	r0, [r7, #6]
 800a00a:	8879      	ldrh	r1, [r7, #2]
 800a00c:	463b      	mov	r3, r7
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	2302      	movs	r3, #2
 800a012:	2200      	movs	r2, #0
 800a014:	f7fe fb30 	bl	8008678 <aci_gatt_update_char_value>
 800a018:	4603      	mov	r3, r0
 800a01a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800a01c:	2202      	movs	r2, #2
 800a01e:	2102      	movs	r1, #2
 800a020:	2000      	movs	r0, #0
 800a022:	f7fe fd8b 	bl	8008b3c <hci_le_set_default_phy>
 800a026:	4603      	mov	r3, r0
 800a028:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800a02a:	4b24      	ldr	r3, [pc, #144]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a02c:	2201      	movs	r2, #1
 800a02e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800a030:	4b22      	ldr	r3, [pc, #136]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	4618      	mov	r0, r3
 800a036:	f7fd fdf3 	bl	8007c20 <aci_gap_set_io_capability>
 800a03a:	4603      	mov	r3, r0
 800a03c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800a03e:	4b1f      	ldr	r3, [pc, #124]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a040:	2201      	movs	r2, #1
 800a042:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800a044:	4b1d      	ldr	r3, [pc, #116]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a046:	2208      	movs	r2, #8
 800a048:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800a04a:	4b1c      	ldr	r3, [pc, #112]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a04c:	2210      	movs	r2, #16
 800a04e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800a050:	4b1a      	ldr	r3, [pc, #104]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a052:	2200      	movs	r2, #0
 800a054:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800a056:	4b19      	ldr	r3, [pc, #100]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a058:	4a19      	ldr	r2, [pc, #100]	@ (800a0c0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800a05a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800a05c:	4b17      	ldr	r3, [pc, #92]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a05e:	2200      	movs	r2, #0
 800a060:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800a062:	4b16      	ldr	r3, [pc, #88]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a064:	789c      	ldrb	r4, [r3, #2]
 800a066:	4b15      	ldr	r3, [pc, #84]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a068:	785d      	ldrb	r5, [r3, #1]
 800a06a:	4b14      	ldr	r3, [pc, #80]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a06c:	791b      	ldrb	r3, [r3, #4]
 800a06e:	4a13      	ldr	r2, [pc, #76]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a070:	7952      	ldrb	r2, [r2, #5]
 800a072:	4912      	ldr	r1, [pc, #72]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a074:	78c9      	ldrb	r1, [r1, #3]
 800a076:	4811      	ldr	r0, [pc, #68]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a078:	6880      	ldr	r0, [r0, #8]
 800a07a:	2600      	movs	r6, #0
 800a07c:	9604      	str	r6, [sp, #16]
 800a07e:	9003      	str	r0, [sp, #12]
 800a080:	9102      	str	r1, [sp, #8]
 800a082:	9201      	str	r2, [sp, #4]
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	2300      	movs	r3, #0
 800a088:	2201      	movs	r2, #1
 800a08a:	4629      	mov	r1, r5
 800a08c:	4620      	mov	r0, r4
 800a08e:	f7fd fe1b 	bl	8007cc8 <aci_gap_set_authentication_requirement>
 800a092:	4603      	mov	r3, r0
 800a094:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800a096:	4b09      	ldr	r3, [pc, #36]	@ (800a0bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a098:	789b      	ldrb	r3, [r3, #2]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800a09e:	f7fe f85d 	bl	800815c <aci_gap_configure_filter_accept_list>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800a0a6:	bf00      	nop
 800a0a8:	371c      	adds	r7, #28
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	0800ec8c 	.word	0x0800ec8c
 800a0b4:	0800ec9c 	.word	0x0800ec9c
 800a0b8:	0800b1c0 	.word	0x0800b1c0
 800a0bc:	20000530 	.word	0x20000530
 800a0c0:	0001b207 	.word	0x0001b207

0800a0c4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08c      	sub	sp, #48	@ 0x30
 800a0c8:	af08      	add	r7, sp, #32
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a0ce:	2392      	movs	r3, #146	@ 0x92
 800a0d0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800a0d2:	4a12      	ldr	r2, [pc, #72]	@ (800a11c <Adv_Request+0x58>)
 800a0d4:	79fb      	ldrb	r3, [r7, #7]
 800a0d6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9306      	str	r3, [sp, #24]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9305      	str	r3, [sp, #20]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9304      	str	r3, [sp, #16]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	9303      	str	r3, [sp, #12]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	9302      	str	r3, [sp, #8]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9301      	str	r3, [sp, #4]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	22a0      	movs	r2, #160	@ 0xa0
 800a0fa:	2180      	movs	r1, #128	@ 0x80
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	f7fd fc95 	bl	8007a2c <aci_gap_set_discoverable>
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800a106:	4906      	ldr	r1, [pc, #24]	@ (800a120 <Adv_Request+0x5c>)
 800a108:	2010      	movs	r0, #16
 800a10a:	f7fd ffb5 	bl	8008078 <aci_gap_update_adv_data>
 800a10e:	4603      	mov	r3, r0
 800a110:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800a112:	bf00      	nop
}
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20000530 	.word	0x20000530
 800a120:	20000020 	.word	0x20000020

0800a124 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800a12a:	f7ff fdb5 	bl	8009c98 <LL_FLASH_GetUDN>
 800a12e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a136:	d023      	beq.n	800a180 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800a138:	f7ff fdc6 	bl	8009cc8 <LL_FLASH_GetSTCompanyID>
 800a13c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800a13e:	f7ff fdb7 	bl	8009cb0 <LL_FLASH_GetDeviceID>
 800a142:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	b2da      	uxtb	r2, r3
 800a148:	4b16      	ldr	r3, [pc, #88]	@ (800a1a4 <BleGetBdAddress+0x80>)
 800a14a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	0a1b      	lsrs	r3, r3, #8
 800a150:	b2da      	uxtb	r2, r3
 800a152:	4b14      	ldr	r3, [pc, #80]	@ (800a1a4 <BleGetBdAddress+0x80>)
 800a154:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	b2da      	uxtb	r2, r3
 800a15a:	4b12      	ldr	r3, [pc, #72]	@ (800a1a4 <BleGetBdAddress+0x80>)
 800a15c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	b2da      	uxtb	r2, r3
 800a162:	4b10      	ldr	r3, [pc, #64]	@ (800a1a4 <BleGetBdAddress+0x80>)
 800a164:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	0a1b      	lsrs	r3, r3, #8
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	4b0d      	ldr	r3, [pc, #52]	@ (800a1a4 <BleGetBdAddress+0x80>)
 800a16e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	0c1b      	lsrs	r3, r3, #16
 800a174:	b2da      	uxtb	r2, r3
 800a176:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a4 <BleGetBdAddress+0x80>)
 800a178:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800a17a:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a4 <BleGetBdAddress+0x80>)
 800a17c:	617b      	str	r3, [r7, #20]
 800a17e:	e00b      	b.n	800a198 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800a180:	2000      	movs	r0, #0
 800a182:	f7ff fca3 	bl	8009acc <OTP_Read>
 800a186:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	617b      	str	r3, [r7, #20]
 800a192:	e001      	b.n	800a198 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800a194:	4b04      	ldr	r3, [pc, #16]	@ (800a1a8 <BleGetBdAddress+0x84>)
 800a196:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800a198:	697b      	ldr	r3, [r7, #20]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000528 	.word	0x20000528
 800a1a8:	0800ec84 	.word	0x0800ec84

0800a1ac <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800a1b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a1dc <Adv_Cancel+0x30>)
 800a1b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a1b8:	2b05      	cmp	r3, #5
 800a1ba:	d00a      	beq.n	800a1d2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a1bc:	2392      	movs	r3, #146	@ 0x92
 800a1be:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800a1c0:	f7fd fc10 	bl	80079e4 <aci_gap_set_non_discoverable>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a1c8:	4b04      	ldr	r3, [pc, #16]	@ (800a1dc <Adv_Cancel+0x30>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800a1d0:	bf00      	nop
 800a1d2:	bf00      	nop
}
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000530 	.word	0x20000530

0800a1e0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	2002      	movs	r0, #2
 800a1ec:	f000 fd2e 	bl	800ac4c <UTIL_SEQ_SetTask>

  return;
 800a1f0:	bf00      	nop
}
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a200:	2001      	movs	r0, #1
 800a202:	f000 fd8f 	bl	800ad24 <UTIL_SEQ_SetEvt>

  return;
 800a206:	bf00      	nop
}
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a216:	2001      	movs	r0, #1
 800a218:	f000 fda4 	bl	800ad64 <UTIL_SEQ_WaitEvt>

  return;
 800a21c:	bf00      	nop
}
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	3308      	adds	r3, #8
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe fde6 	bl	8008e08 <SVCCTL_UserEvtRx>
 800a23c:	4603      	mov	r3, r0
 800a23e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800a24c:	e003      	b.n	800a256 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	701a      	strb	r2, [r3, #0]
  return;
 800a254:	bf00      	nop
}
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800a266:	79fb      	ldrb	r3, [r7, #7]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <BLE_StatusNot+0x16>
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d006      	beq.n	800a27e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800a270:	e00b      	b.n	800a28a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a272:	2303      	movs	r3, #3
 800a274:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 fd14 	bl	800aca4 <UTIL_SEQ_PauseTask>
      break;
 800a27c:	e005      	b.n	800a28a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a27e:	2303      	movs	r3, #3
 800a280:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 fd2e 	bl	800ace4 <UTIL_SEQ_ResumeTask>
      break;
 800a288:	bf00      	nop
  }

  return;
 800a28a:	bf00      	nop
}
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <Custom_STM_App_Notification+0x16>
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d002      	beq.n	800a2ac <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800a2a6:	e002      	b.n	800a2ae <Custom_STM_App_Notification+0x1c>
      break;
 800a2a8:	bf00      	nop
 800a2aa:	e000      	b.n	800a2ae <Custom_STM_App_Notification+0x1c>
      break;
 800a2ac:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800a2ae:	bf00      	nop
}
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <Custom_APP_Notification+0x16>
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d002      	beq.n	800a2d4 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800a2ce:	e002      	b.n	800a2d6 <Custom_APP_Notification+0x1c>
      break;
 800a2d0:	bf00      	nop
 800a2d2:	e000      	b.n	800a2d6 <Custom_APP_Notification+0x1c>
      break;
 800a2d4:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800a2d6:	bf00      	nop
}
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800a2e6:	bf00      	nop
}
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08c      	sub	sp, #48	@ 0x30
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3301      	adds	r3, #1
 800a302:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800a304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	2bff      	cmp	r3, #255	@ 0xff
 800a30a:	d154      	bne.n	800a3b6 <Custom_STM_Event_Handler+0xc6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800a30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30e:	3302      	adds	r3, #2
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	b29b      	uxth	r3, r3
 800a318:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800a31c:	2b1a      	cmp	r3, #26
 800a31e:	d848      	bhi.n	800a3b2 <Custom_STM_Event_Handler+0xc2>
 800a320:	a201      	add	r2, pc, #4	@ (adr r2, 800a328 <Custom_STM_Event_Handler+0x38>)
 800a322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a326:	bf00      	nop
 800a328:	0800a3b3 	.word	0x0800a3b3
 800a32c:	0800a3b3 	.word	0x0800a3b3
 800a330:	0800a3b3 	.word	0x0800a3b3
 800a334:	0800a3b3 	.word	0x0800a3b3
 800a338:	0800a3b3 	.word	0x0800a3b3
 800a33c:	0800a3b3 	.word	0x0800a3b3
 800a340:	0800a3b3 	.word	0x0800a3b3
 800a344:	0800a3b3 	.word	0x0800a3b3
 800a348:	0800a3b3 	.word	0x0800a3b3
 800a34c:	0800a3b3 	.word	0x0800a3b3
 800a350:	0800a3b3 	.word	0x0800a3b3
 800a354:	0800a3b3 	.word	0x0800a3b3
 800a358:	0800a3b3 	.word	0x0800a3b3
 800a35c:	0800a3b3 	.word	0x0800a3b3
 800a360:	0800a3b3 	.word	0x0800a3b3
 800a364:	0800a3b3 	.word	0x0800a3b3
 800a368:	0800a3b3 	.word	0x0800a3b3
 800a36c:	0800a3b3 	.word	0x0800a3b3
 800a370:	0800a3b3 	.word	0x0800a3b3
 800a374:	0800a3b3 	.word	0x0800a3b3
 800a378:	0800a3b3 	.word	0x0800a3b3
 800a37c:	0800a3b3 	.word	0x0800a3b3
 800a380:	0800a3b3 	.word	0x0800a3b3
 800a384:	0800a3b3 	.word	0x0800a3b3
 800a388:	0800a3b3 	.word	0x0800a3b3
 800a38c:	0800a3b3 	.word	0x0800a3b3
 800a390:	0800a395 	.word	0x0800a395
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800a394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a396:	3302      	adds	r3, #2
 800a398:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800a39a:	2301      	movs	r3, #1
 800a39c:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 800a3a6:	f107 030c 	add.w	r3, r7, #12
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7ff ff71 	bl	800a292 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800a3b0:	e000      	b.n	800a3b4 <Custom_STM_Event_Handler+0xc4>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800a3b2:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a3b4:	e000      	b.n	800a3b8 <Custom_STM_Event_Handler+0xc8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800a3b6:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800a3b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3730      	adds	r7, #48	@ 0x30
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08c      	sub	sp, #48	@ 0x30
 800a3c8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a3ca:	2392      	movs	r3, #146	@ 0x92
 800a3cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800a3ce:	4834      	ldr	r0, [pc, #208]	@ (800a4a0 <SVCCTL_InitCustomSvc+0xdc>)
 800a3d0:	f7fe fd00 	bl	8008dd4 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_PRESSCOUNTER_UUID(uuid.Char_UUID_128);
 800a3d8:	238f      	movs	r3, #143	@ 0x8f
 800a3da:	713b      	strb	r3, [r7, #4]
 800a3dc:	23e5      	movs	r3, #229	@ 0xe5
 800a3de:	717b      	strb	r3, [r7, #5]
 800a3e0:	23b3      	movs	r3, #179	@ 0xb3
 800a3e2:	71bb      	strb	r3, [r7, #6]
 800a3e4:	23d5      	movs	r3, #213	@ 0xd5
 800a3e6:	71fb      	strb	r3, [r7, #7]
 800a3e8:	232e      	movs	r3, #46	@ 0x2e
 800a3ea:	723b      	strb	r3, [r7, #8]
 800a3ec:	237f      	movs	r3, #127	@ 0x7f
 800a3ee:	727b      	strb	r3, [r7, #9]
 800a3f0:	234a      	movs	r3, #74	@ 0x4a
 800a3f2:	72bb      	strb	r3, [r7, #10]
 800a3f4:	2398      	movs	r3, #152	@ 0x98
 800a3f6:	72fb      	strb	r3, [r7, #11]
 800a3f8:	232a      	movs	r3, #42	@ 0x2a
 800a3fa:	733b      	strb	r3, [r7, #12]
 800a3fc:	2348      	movs	r3, #72	@ 0x48
 800a3fe:	737b      	strb	r3, [r7, #13]
 800a400:	237a      	movs	r3, #122	@ 0x7a
 800a402:	73bb      	strb	r3, [r7, #14]
 800a404:	23cc      	movs	r3, #204	@ 0xcc
 800a406:	73fb      	strb	r3, [r7, #15]
 800a408:	2301      	movs	r3, #1
 800a40a:	743b      	strb	r3, [r7, #16]
 800a40c:	2318      	movs	r3, #24
 800a40e:	747b      	strb	r3, [r7, #17]
 800a410:	2300      	movs	r3, #0
 800a412:	74bb      	strb	r3, [r7, #18]
 800a414:	2300      	movs	r3, #0
 800a416:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800a418:	7dbb      	ldrb	r3, [r7, #22]
 800a41a:	1d39      	adds	r1, r7, #4
 800a41c:	4a21      	ldr	r2, [pc, #132]	@ (800a4a4 <SVCCTL_InitCustomSvc+0xe0>)
 800a41e:	9200      	str	r2, [sp, #0]
 800a420:	2201      	movs	r2, #1
 800a422:	2002      	movs	r0, #2
 800a424:	f7fd ff4a 	bl	80082bc <aci_gatt_add_service>
 800a428:	4603      	mov	r3, r0
 800a42a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  information
   */
  COPY_INFORMATION_UUID(uuid.Char_UUID_128);
 800a42c:	2319      	movs	r3, #25
 800a42e:	713b      	strb	r3, [r7, #4]
 800a430:	23ed      	movs	r3, #237	@ 0xed
 800a432:	717b      	strb	r3, [r7, #5]
 800a434:	2382      	movs	r3, #130	@ 0x82
 800a436:	71bb      	strb	r3, [r7, #6]
 800a438:	23ae      	movs	r3, #174	@ 0xae
 800a43a:	71fb      	strb	r3, [r7, #7]
 800a43c:	23ed      	movs	r3, #237	@ 0xed
 800a43e:	723b      	strb	r3, [r7, #8]
 800a440:	2321      	movs	r3, #33	@ 0x21
 800a442:	727b      	strb	r3, [r7, #9]
 800a444:	234c      	movs	r3, #76	@ 0x4c
 800a446:	72bb      	strb	r3, [r7, #10]
 800a448:	239d      	movs	r3, #157	@ 0x9d
 800a44a:	72fb      	strb	r3, [r7, #11]
 800a44c:	2341      	movs	r3, #65	@ 0x41
 800a44e:	733b      	strb	r3, [r7, #12]
 800a450:	2345      	movs	r3, #69	@ 0x45
 800a452:	737b      	strb	r3, [r7, #13]
 800a454:	2322      	movs	r3, #34	@ 0x22
 800a456:	73bb      	strb	r3, [r7, #14]
 800a458:	238e      	movs	r3, #142	@ 0x8e
 800a45a:	73fb      	strb	r3, [r7, #15]
 800a45c:	2334      	movs	r3, #52	@ 0x34
 800a45e:	743b      	strb	r3, [r7, #16]
 800a460:	2312      	movs	r3, #18
 800a462:	747b      	strb	r3, [r7, #17]
 800a464:	2300      	movs	r3, #0
 800a466:	74bb      	strb	r3, [r7, #18]
 800a468:	2300      	movs	r3, #0
 800a46a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomPressctrHdle,
 800a46c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a4 <SVCCTL_InitCustomSvc+0xe0>)
 800a46e:	8818      	ldrh	r0, [r3, #0]
 800a470:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a8 <SVCCTL_InitCustomSvc+0xe4>)
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	1d3a      	adds	r2, r7, #4
 800a476:	490d      	ldr	r1, [pc, #52]	@ (800a4ac <SVCCTL_InitCustomSvc+0xe8>)
 800a478:	9105      	str	r1, [sp, #20]
 800a47a:	2100      	movs	r1, #0
 800a47c:	9104      	str	r1, [sp, #16]
 800a47e:	2110      	movs	r1, #16
 800a480:	9103      	str	r1, [sp, #12]
 800a482:	2100      	movs	r1, #0
 800a484:	9102      	str	r1, [sp, #8]
 800a486:	2100      	movs	r1, #0
 800a488:	9101      	str	r1, [sp, #4]
 800a48a:	2102      	movs	r1, #2
 800a48c:	9100      	str	r1, [sp, #0]
 800a48e:	2102      	movs	r1, #2
 800a490:	f7fd ffea 	bl	8008468 <aci_gatt_add_char>
 800a494:	4603      	mov	r3, r0
 800a496:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800a498:	bf00      	nop
}
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	0800a2f1 	.word	0x0800a2f1
 800a4a4:	200005b8 	.word	0x200005b8
 800a4a8:	20000030 	.word	0x20000030
 800a4ac:	200005ba 	.word	0x200005ba

0800a4b0 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af02      	add	r7, sp, #8
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	6039      	str	r1, [r7, #0]
 800a4ba:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a4bc:	2392      	movs	r3, #146	@ 0x92
 800a4be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10f      	bne.n	800a4e6 <Custom_STM_App_Update_Char+0x36>
  {

    case CUSTOM_STM_INFO_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomPressctrHdle,
 800a4c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a4f4 <Custom_STM_App_Update_Char+0x44>)
 800a4c8:	8818      	ldrh	r0, [r3, #0]
 800a4ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f4 <Custom_STM_App_Update_Char+0x44>)
 800a4cc:	8859      	ldrh	r1, [r3, #2]
 800a4ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f8 <Custom_STM_App_Update_Char+0x48>)
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f7fe f8cc 	bl	8008678 <aci_gatt_update_char_value>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value INFO_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800a4e4:	e000      	b.n	800a4e8 <Custom_STM_App_Update_Char+0x38>

    default:
      break;
 800a4e6:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	200005b8 	.word	0x200005b8
 800a4f8:	20000030 	.word	0x20000030

0800a4fc <LL_PWR_EnableBootC2>:
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800a500:	4b05      	ldr	r3, [pc, #20]	@ (800a518 <LL_PWR_EnableBootC2+0x1c>)
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	4a04      	ldr	r2, [pc, #16]	@ (800a518 <LL_PWR_EnableBootC2+0x1c>)
 800a506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a50a:	60d3      	str	r3, [r2, #12]
}
 800a50c:	bf00      	nop
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	58000400 	.word	0x58000400

0800a51c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800a524:	4b06      	ldr	r3, [pc, #24]	@ (800a540 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a526:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a52a:	4905      	ldr	r1, [pc, #20]	@ (800a540 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4313      	orrs	r3, r2
 800a530:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	58000800 	.word	0x58000800

0800a544 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a54c:	4b05      	ldr	r3, [pc, #20]	@ (800a564 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a54e:	6a1a      	ldr	r2, [r3, #32]
 800a550:	4904      	ldr	r1, [pc, #16]	@ (800a564 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4313      	orrs	r3, r2
 800a556:	620b      	str	r3, [r1, #32]
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	58000800 	.word	0x58000800

0800a568 <LL_AHB3_GRP1_EnableClock>:
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a574:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a576:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a584:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4013      	ands	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a58c:	68fb      	ldr	r3, [r7, #12]
}
 800a58e:	bf00      	nop
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b085      	sub	sp, #20
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800a5a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800a5aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800a5b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
}
 800a5c6:	bf00      	nop
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	601a      	str	r2, [r3, #0]
}
 800a5e6:	bf00      	nop
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f043 0201 	orr.w	r2, r3, #1
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	601a      	str	r2, [r3, #0]
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	041b      	lsls	r3, r3, #16
 800a624:	43db      	mvns	r3, r3
 800a626:	401a      	ands	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	605a      	str	r2, [r3, #4]
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	041b      	lsls	r3, r3, #16
 800a64a:	431a      	orrs	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	605a      	str	r2, [r3, #4]
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	43db      	mvns	r3, r3
 800a66e:	401a      	ands	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	605a      	str	r2, [r3, #4]
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	609a      	str	r2, [r3, #8]
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	041a      	lsls	r2, r3, #16
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	609a      	str	r2, [r3, #8]
}
 800a6ae:	bf00      	nop
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	b083      	sub	sp, #12
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68da      	ldr	r2, [r3, #12]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d101      	bne.n	800a6d6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e000      	b.n	800a6d8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	69da      	ldr	r2, [r3, #28]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d101      	bne.n	800a700 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
	...

0800a710 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a714:	2102      	movs	r1, #2
 800a716:	4818      	ldr	r0, [pc, #96]	@ (800a778 <HW_IPCC_Rx_Handler+0x68>)
 800a718:	f7ff ffe4 	bl	800a6e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d008      	beq.n	800a734 <HW_IPCC_Rx_Handler+0x24>
 800a722:	4b15      	ldr	r3, [pc, #84]	@ (800a778 <HW_IPCC_Rx_Handler+0x68>)
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	f003 0302 	and.w	r3, r3, #2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d102      	bne.n	800a734 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800a72e:	f000 f8d5 	bl	800a8dc <HW_IPCC_SYS_EvtHandler>
 800a732:	e01e      	b.n	800a772 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a734:	2101      	movs	r1, #1
 800a736:	4810      	ldr	r0, [pc, #64]	@ (800a778 <HW_IPCC_Rx_Handler+0x68>)
 800a738:	f7ff ffd4 	bl	800a6e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d008      	beq.n	800a754 <HW_IPCC_Rx_Handler+0x44>
 800a742:	4b0d      	ldr	r3, [pc, #52]	@ (800a778 <HW_IPCC_Rx_Handler+0x68>)
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800a74e:	f000 f889 	bl	800a864 <HW_IPCC_BLE_EvtHandler>
 800a752:	e00e      	b.n	800a772 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a754:	2108      	movs	r1, #8
 800a756:	4808      	ldr	r0, [pc, #32]	@ (800a778 <HW_IPCC_Rx_Handler+0x68>)
 800a758:	f7ff ffc4 	bl	800a6e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d008      	beq.n	800a774 <HW_IPCC_Rx_Handler+0x64>
 800a762:	4b05      	ldr	r3, [pc, #20]	@ (800a778 <HW_IPCC_Rx_Handler+0x68>)
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f003 0308 	and.w	r3, r3, #8
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d102      	bne.n	800a774 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a76e:	f000 f901 	bl	800a974 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a772:	bf00      	nop
 800a774:	bf00      	nop
}
 800a776:	bd80      	pop	{r7, pc}
 800a778:	58000c00 	.word	0x58000c00

0800a77c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a780:	2102      	movs	r1, #2
 800a782:	4818      	ldr	r0, [pc, #96]	@ (800a7e4 <HW_IPCC_Tx_Handler+0x68>)
 800a784:	f7ff ff99 	bl	800a6ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d108      	bne.n	800a7a0 <HW_IPCC_Tx_Handler+0x24>
 800a78e:	4b15      	ldr	r3, [pc, #84]	@ (800a7e4 <HW_IPCC_Tx_Handler+0x68>)
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a79a:	f000 f893 	bl	800a8c4 <HW_IPCC_SYS_CmdEvtHandler>
 800a79e:	e01e      	b.n	800a7de <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a7a0:	2108      	movs	r1, #8
 800a7a2:	4810      	ldr	r0, [pc, #64]	@ (800a7e4 <HW_IPCC_Tx_Handler+0x68>)
 800a7a4:	f7ff ff89 	bl	800a6ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d108      	bne.n	800a7c0 <HW_IPCC_Tx_Handler+0x44>
 800a7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e4 <HW_IPCC_Tx_Handler+0x68>)
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d102      	bne.n	800a7c0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a7ba:	f000 f8bd 	bl	800a938 <HW_IPCC_MM_FreeBufHandler>
 800a7be:	e00e      	b.n	800a7de <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a7c0:	2120      	movs	r1, #32
 800a7c2:	4808      	ldr	r0, [pc, #32]	@ (800a7e4 <HW_IPCC_Tx_Handler+0x68>)
 800a7c4:	f7ff ff79 	bl	800a6ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d108      	bne.n	800a7e0 <HW_IPCC_Tx_Handler+0x64>
 800a7ce:	4b05      	ldr	r3, [pc, #20]	@ (800a7e4 <HW_IPCC_Tx_Handler+0x68>)
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d102      	bne.n	800a7e0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a7da:	f000 f84f 	bl	800a87c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a7de:	bf00      	nop
 800a7e0:	bf00      	nop
}
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	58000c00 	.word	0x58000c00

0800a7e8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a7ec:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a7f0:	f7ff fed3 	bl	800a59a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a7f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a7f8:	f7ff fea4 	bl	800a544 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a7fc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a800:	f7ff fe8c 	bl	800a51c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a804:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a806:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a808:	f7ff fe78 	bl	800a4fc <LL_PWR_EnableBootC2>

  return;
 800a80c:	bf00      	nop
}
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a814:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a818:	f7ff fea6 	bl	800a568 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a81c:	4806      	ldr	r0, [pc, #24]	@ (800a838 <HW_IPCC_Init+0x28>)
 800a81e:	f7ff fee8 	bl	800a5f2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a822:	4805      	ldr	r0, [pc, #20]	@ (800a838 <HW_IPCC_Init+0x28>)
 800a824:	f7ff fed5 	bl	800a5d2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a828:	202c      	movs	r0, #44	@ 0x2c
 800a82a:	f7fa fad2 	bl	8004dd2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a82e:	202d      	movs	r0, #45	@ 0x2d
 800a830:	f7fa facf 	bl	8004dd2 <HAL_NVIC_EnableIRQ>

  return;
 800a834:	bf00      	nop
}
 800a836:	bd80      	pop	{r7, pc}
 800a838:	58000c00 	.word	0x58000c00

0800a83c <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a840:	2101      	movs	r1, #1
 800a842:	4802      	ldr	r0, [pc, #8]	@ (800a84c <HW_IPCC_BLE_Init+0x10>)
 800a844:	f7ff ff0a 	bl	800a65c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a848:	bf00      	nop
}
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	58000c00 	.word	0x58000c00

0800a850 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 800a854:	2101      	movs	r1, #1
 800a856:	4802      	ldr	r0, [pc, #8]	@ (800a860 <HW_IPCC_BLE_SendCmd+0x10>)
 800a858:	f7ff ff20 	bl	800a69c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a85c:	bf00      	nop
}
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	58000c00 	.word	0x58000c00

0800a864 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a868:	f7fe ff78 	bl	800975c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a86c:	2101      	movs	r1, #1
 800a86e:	4802      	ldr	r0, [pc, #8]	@ (800a878 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a870:	f7ff ff06 	bl	800a680 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a874:	bf00      	nop
}
 800a876:	bd80      	pop	{r7, pc}
 800a878:	58000c00 	.word	0x58000c00

0800a87c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a880:	2120      	movs	r1, #32
 800a882:	4803      	ldr	r0, [pc, #12]	@ (800a890 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800a884:	f7ff fed8 	bl	800a638 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800a888:	f7fe ff98 	bl	80097bc <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a88c:	bf00      	nop
}
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	58000c00 	.word	0x58000c00

0800a894 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a898:	2102      	movs	r1, #2
 800a89a:	4802      	ldr	r0, [pc, #8]	@ (800a8a4 <HW_IPCC_SYS_Init+0x10>)
 800a89c:	f7ff fede 	bl	800a65c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a8a0:	bf00      	nop
}
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	58000c00 	.word	0x58000c00

0800a8a8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a8ac:	2102      	movs	r1, #2
 800a8ae:	4804      	ldr	r0, [pc, #16]	@ (800a8c0 <HW_IPCC_SYS_SendCmd+0x18>)
 800a8b0:	f7ff fef4 	bl	800a69c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a8b4:	2102      	movs	r1, #2
 800a8b6:	4802      	ldr	r0, [pc, #8]	@ (800a8c0 <HW_IPCC_SYS_SendCmd+0x18>)
 800a8b8:	f7ff feab 	bl	800a612 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a8bc:	bf00      	nop
}
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	58000c00 	.word	0x58000c00

0800a8c4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a8c8:	2102      	movs	r1, #2
 800a8ca:	4803      	ldr	r0, [pc, #12]	@ (800a8d8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800a8cc:	f7ff feb4 	bl	800a638 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800a8d0:	f7fe ffc4 	bl	800985c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a8d4:	bf00      	nop
}
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	58000c00 	.word	0x58000c00

0800a8dc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a8e0:	f7fe ffd2 	bl	8009888 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a8e4:	2102      	movs	r1, #2
 800a8e6:	4802      	ldr	r0, [pc, #8]	@ (800a8f0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800a8e8:	f7ff feca 	bl	800a680 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a8ec:	bf00      	nop
}
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	58000c00 	.word	0x58000c00

0800a8f4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a8fc:	2108      	movs	r1, #8
 800a8fe:	480c      	ldr	r0, [pc, #48]	@ (800a930 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a900:	f7ff fedb 	bl	800a6ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d007      	beq.n	800a91a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a90a:	4a0a      	ldr	r2, [pc, #40]	@ (800a934 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a910:	2108      	movs	r1, #8
 800a912:	4807      	ldr	r0, [pc, #28]	@ (800a930 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a914:	f7ff fe7d 	bl	800a612 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a918:	e006      	b.n	800a928 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a91e:	2108      	movs	r1, #8
 800a920:	4803      	ldr	r0, [pc, #12]	@ (800a930 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a922:	f7ff febb 	bl	800a69c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a926:	bf00      	nop
}
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	58000c00 	.word	0x58000c00
 800a934:	200005bc 	.word	0x200005bc

0800a938 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a93c:	2108      	movs	r1, #8
 800a93e:	4806      	ldr	r0, [pc, #24]	@ (800a958 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a940:	f7ff fe7a 	bl	800a638 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800a944:	4b05      	ldr	r3, [pc, #20]	@ (800a95c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a94a:	2108      	movs	r1, #8
 800a94c:	4802      	ldr	r0, [pc, #8]	@ (800a958 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a94e:	f7ff fea5 	bl	800a69c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a952:	bf00      	nop
}
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	58000c00 	.word	0x58000c00
 800a95c:	200005bc 	.word	0x200005bc

0800a960 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a964:	2108      	movs	r1, #8
 800a966:	4802      	ldr	r0, [pc, #8]	@ (800a970 <HW_IPCC_TRACES_Init+0x10>)
 800a968:	f7ff fe78 	bl	800a65c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a96c:	bf00      	nop
}
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	58000c00 	.word	0x58000c00

0800a974 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a978:	f7ff f82e 	bl	80099d8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a97c:	2108      	movs	r1, #8
 800a97e:	4802      	ldr	r0, [pc, #8]	@ (800a988 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a980:	f7ff fe7e 	bl	800a680 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a984:	bf00      	nop
}
 800a986:	bd80      	pop	{r7, pc}
 800a988:	58000c00 	.word	0x58000c00

0800a98c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a98c:	b480      	push	{r7}
 800a98e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a990:	4b05      	ldr	r3, [pc, #20]	@ (800a9a8 <UTIL_LPM_Init+0x1c>)
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a996:	4b05      	ldr	r3, [pc, #20]	@ (800a9ac <UTIL_LPM_Init+0x20>)
 800a998:	2200      	movs	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a99c:	bf00      	nop
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	200005c0 	.word	0x200005c0
 800a9ac:	200005c4 	.word	0x200005c4

0800a9b0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a9c0:	613b      	str	r3, [r7, #16]
  return(result);
 800a9c2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a9c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9c6:	b672      	cpsid	i
}
 800a9c8:	bf00      	nop
  
  switch(state)
 800a9ca:	78fb      	ldrb	r3, [r7, #3]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d008      	beq.n	800a9e2 <UTIL_LPM_SetOffMode+0x32>
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d10e      	bne.n	800a9f2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a9d4:	4b0d      	ldr	r3, [pc, #52]	@ (800aa0c <UTIL_LPM_SetOffMode+0x5c>)
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	4a0b      	ldr	r2, [pc, #44]	@ (800aa0c <UTIL_LPM_SetOffMode+0x5c>)
 800a9de:	6013      	str	r3, [r2, #0]
      break;
 800a9e0:	e008      	b.n	800a9f4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	43da      	mvns	r2, r3
 800a9e6:	4b09      	ldr	r3, [pc, #36]	@ (800aa0c <UTIL_LPM_SetOffMode+0x5c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	4a07      	ldr	r2, [pc, #28]	@ (800aa0c <UTIL_LPM_SetOffMode+0x5c>)
 800a9ee:	6013      	str	r3, [r2, #0]
      break;
 800a9f0:	e000      	b.n	800a9f4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a9f2:	bf00      	nop
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f383 8810 	msr	PRIMASK, r3
}
 800a9fe:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800aa00:	bf00      	nop
 800aa02:	371c      	adds	r7, #28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	200005c4 	.word	0x200005c4

0800aa10 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b090      	sub	sp, #64	@ 0x40
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800aa18:	4b73      	ldr	r3, [pc, #460]	@ (800abe8 <UTIL_SEQ_Run+0x1d8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800aa1e:	4b72      	ldr	r3, [pc, #456]	@ (800abe8 <UTIL_SEQ_Run+0x1d8>)
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4013      	ands	r3, r2
 800aa26:	4a70      	ldr	r2, [pc, #448]	@ (800abe8 <UTIL_SEQ_Run+0x1d8>)
 800aa28:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800aa2a:	4b70      	ldr	r3, [pc, #448]	@ (800abec <UTIL_SEQ_Run+0x1dc>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800aa30:	4b6f      	ldr	r3, [pc, #444]	@ (800abf0 <UTIL_SEQ_Run+0x1e0>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800aa36:	4b6f      	ldr	r3, [pc, #444]	@ (800abf4 <UTIL_SEQ_Run+0x1e4>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800aa3c:	4b6e      	ldr	r3, [pc, #440]	@ (800abf8 <UTIL_SEQ_Run+0x1e8>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800aa42:	e08d      	b.n	800ab60 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800aa48:	e002      	b.n	800aa50 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800aa4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800aa50:	4a6a      	ldr	r2, [pc, #424]	@ (800abfc <UTIL_SEQ_Run+0x1ec>)
 800aa52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800aa58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5a:	401a      	ands	r2, r3
 800aa5c:	4b62      	ldr	r3, [pc, #392]	@ (800abe8 <UTIL_SEQ_Run+0x1d8>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4013      	ands	r3, r2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0f1      	beq.n	800aa4a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800aa66:	4a65      	ldr	r2, [pc, #404]	@ (800abfc <UTIL_SEQ_Run+0x1ec>)
 800aa68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa6a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	401a      	ands	r2, r3
 800aa72:	4b5d      	ldr	r3, [pc, #372]	@ (800abe8 <UTIL_SEQ_Run+0x1d8>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4013      	ands	r3, r2
 800aa78:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800aa7a:	4a60      	ldr	r2, [pc, #384]	@ (800abfc <UTIL_SEQ_Run+0x1ec>)
 800aa7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa7e:	00db      	lsls	r3, r3, #3
 800aa80:	4413      	add	r3, r2
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa86:	4013      	ands	r3, r2
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d106      	bne.n	800aa9a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800aa8c:	4a5b      	ldr	r2, [pc, #364]	@ (800abfc <UTIL_SEQ_Run+0x1ec>)
 800aa8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa90:	00db      	lsls	r3, r3, #3
 800aa92:	4413      	add	r3, r2
 800aa94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa98:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800aa9a:	4a58      	ldr	r2, [pc, #352]	@ (800abfc <UTIL_SEQ_Run+0x1ec>)
 800aa9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f9b3 	bl	800ae14 <SEQ_BitPosition>
 800aaae:	4603      	mov	r3, r0
 800aab0:	461a      	mov	r2, r3
 800aab2:	4b53      	ldr	r3, [pc, #332]	@ (800ac00 <UTIL_SEQ_Run+0x1f0>)
 800aab4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800aab6:	4a51      	ldr	r2, [pc, #324]	@ (800abfc <UTIL_SEQ_Run+0x1ec>)
 800aab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaba:	00db      	lsls	r3, r3, #3
 800aabc:	4413      	add	r3, r2
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	4b4f      	ldr	r3, [pc, #316]	@ (800ac00 <UTIL_SEQ_Run+0x1f0>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2101      	movs	r1, #1
 800aac6:	fa01 f303 	lsl.w	r3, r1, r3
 800aaca:	43db      	mvns	r3, r3
 800aacc:	401a      	ands	r2, r3
 800aace:	494b      	ldr	r1, [pc, #300]	@ (800abfc <UTIL_SEQ_Run+0x1ec>)
 800aad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	440b      	add	r3, r1
 800aad6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aad8:	f3ef 8310 	mrs	r3, PRIMASK
 800aadc:	61bb      	str	r3, [r7, #24]
  return(result);
 800aade:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aae0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800aae2:	b672      	cpsid	i
}
 800aae4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800aae6:	4b46      	ldr	r3, [pc, #280]	@ (800ac00 <UTIL_SEQ_Run+0x1f0>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2201      	movs	r2, #1
 800aaec:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf0:	43da      	mvns	r2, r3
 800aaf2:	4b3e      	ldr	r3, [pc, #248]	@ (800abec <UTIL_SEQ_Run+0x1dc>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	4a3c      	ldr	r2, [pc, #240]	@ (800abec <UTIL_SEQ_Run+0x1dc>)
 800aafa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800aafc:	2302      	movs	r3, #2
 800aafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab00:	e013      	b.n	800ab2a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800ab02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab04:	3b01      	subs	r3, #1
 800ab06:	4a3d      	ldr	r2, [pc, #244]	@ (800abfc <UTIL_SEQ_Run+0x1ec>)
 800ab08:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ab0c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac00 <UTIL_SEQ_Run+0x1f0>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2201      	movs	r2, #1
 800ab12:	fa02 f303 	lsl.w	r3, r2, r3
 800ab16:	43da      	mvns	r2, r3
 800ab18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	400a      	ands	r2, r1
 800ab1e:	4937      	ldr	r1, [pc, #220]	@ (800abfc <UTIL_SEQ_Run+0x1ec>)
 800ab20:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ab24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab26:	3b01      	subs	r3, #1
 800ab28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1e8      	bne.n	800ab02 <UTIL_SEQ_Run+0xf2>
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f383 8810 	msr	PRIMASK, r3
}
 800ab3a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800ab3c:	4b30      	ldr	r3, [pc, #192]	@ (800ac00 <UTIL_SEQ_Run+0x1f0>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a30      	ldr	r2, [pc, #192]	@ (800ac04 <UTIL_SEQ_Run+0x1f4>)
 800ab42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab46:	4798      	blx	r3

    local_taskset = TaskSet;
 800ab48:	4b28      	ldr	r3, [pc, #160]	@ (800abec <UTIL_SEQ_Run+0x1dc>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800ab4e:	4b28      	ldr	r3, [pc, #160]	@ (800abf0 <UTIL_SEQ_Run+0x1e0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800ab54:	4b27      	ldr	r3, [pc, #156]	@ (800abf4 <UTIL_SEQ_Run+0x1e4>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800ab5a:	4b27      	ldr	r3, [pc, #156]	@ (800abf8 <UTIL_SEQ_Run+0x1e8>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ab60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab64:	401a      	ands	r2, r3
 800ab66:	4b20      	ldr	r3, [pc, #128]	@ (800abe8 <UTIL_SEQ_Run+0x1d8>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <UTIL_SEQ_Run+0x16c>
 800ab70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab74:	4013      	ands	r3, r2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f43f af64 	beq.w	800aa44 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800ab7c:	4b20      	ldr	r3, [pc, #128]	@ (800ac00 <UTIL_SEQ_Run+0x1f0>)
 800ab7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab82:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800ab84:	f000 f938 	bl	800adf8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab88:	f3ef 8310 	mrs	r3, PRIMASK
 800ab8c:	613b      	str	r3, [r7, #16]
  return(result);
 800ab8e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800ab90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab92:	b672      	cpsid	i
}
 800ab94:	bf00      	nop
  local_taskset = TaskSet;
 800ab96:	4b15      	ldr	r3, [pc, #84]	@ (800abec <UTIL_SEQ_Run+0x1dc>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ab9c:	4b14      	ldr	r3, [pc, #80]	@ (800abf0 <UTIL_SEQ_Run+0x1e0>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800aba2:	4b14      	ldr	r3, [pc, #80]	@ (800abf4 <UTIL_SEQ_Run+0x1e4>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800aba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abac:	401a      	ands	r2, r3
 800abae:	4b0e      	ldr	r3, [pc, #56]	@ (800abe8 <UTIL_SEQ_Run+0x1d8>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4013      	ands	r3, r2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d107      	bne.n	800abc8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800abb8:	4b0f      	ldr	r3, [pc, #60]	@ (800abf8 <UTIL_SEQ_Run+0x1e8>)
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abbe:	4013      	ands	r3, r2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800abc4:	f7f8 fc9a 	bl	80034fc <UTIL_SEQ_Idle>
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f383 8810 	msr	PRIMASK, r3
}
 800abd2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800abd4:	f000 f917 	bl	800ae06 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800abd8:	4a03      	ldr	r2, [pc, #12]	@ (800abe8 <UTIL_SEQ_Run+0x1d8>)
 800abda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abdc:	6013      	str	r3, [r2, #0]

  return;
 800abde:	bf00      	nop
}
 800abe0:	3740      	adds	r7, #64	@ 0x40
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20000038 	.word	0x20000038
 800abec:	200005c8 	.word	0x200005c8
 800abf0:	200005cc 	.word	0x200005cc
 800abf4:	20000034 	.word	0x20000034
 800abf8:	200005d0 	.word	0x200005d0
 800abfc:	20000658 	.word	0x20000658
 800ac00:	200005d4 	.word	0x200005d4
 800ac04:	200005d8 	.word	0x200005d8

0800ac08 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac14:	f3ef 8310 	mrs	r3, PRIMASK
 800ac18:	617b      	str	r3, [r7, #20]
  return(result);
 800ac1a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ac1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac1e:	b672      	cpsid	i
}
 800ac20:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f000 f8f6 	bl	800ae14 <SEQ_BitPosition>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4a06      	ldr	r2, [pc, #24]	@ (800ac48 <UTIL_SEQ_RegTask+0x40>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	f383 8810 	msr	PRIMASK, r3
}
 800ac3e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ac40:	bf00      	nop
}
 800ac42:	3720      	adds	r7, #32
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	200005d8 	.word	0x200005d8

0800ac4c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac56:	f3ef 8310 	mrs	r3, PRIMASK
 800ac5a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ac5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac60:	b672      	cpsid	i
}
 800ac62:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ac64:	4b0d      	ldr	r3, [pc, #52]	@ (800ac9c <UTIL_SEQ_SetTask+0x50>)
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	4a0b      	ldr	r2, [pc, #44]	@ (800ac9c <UTIL_SEQ_SetTask+0x50>)
 800ac6e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ac70:	4a0b      	ldr	r2, [pc, #44]	@ (800aca0 <UTIL_SEQ_SetTask+0x54>)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	431a      	orrs	r2, r3
 800ac7c:	4908      	ldr	r1, [pc, #32]	@ (800aca0 <UTIL_SEQ_SetTask+0x54>)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f383 8810 	msr	PRIMASK, r3
}
 800ac8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ac90:	bf00      	nop
}
 800ac92:	371c      	adds	r7, #28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	200005c8 	.word	0x200005c8
 800aca0:	20000658 	.word	0x20000658

0800aca4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acac:	f3ef 8310 	mrs	r3, PRIMASK
 800acb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800acb2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800acb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800acb6:	b672      	cpsid	i
}
 800acb8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	43da      	mvns	r2, r3
 800acbe:	4b08      	ldr	r3, [pc, #32]	@ (800ace0 <UTIL_SEQ_PauseTask+0x3c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4013      	ands	r3, r2
 800acc4:	4a06      	ldr	r2, [pc, #24]	@ (800ace0 <UTIL_SEQ_PauseTask+0x3c>)
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f383 8810 	msr	PRIMASK, r3
}
 800acd2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800acd4:	bf00      	nop
}
 800acd6:	371c      	adds	r7, #28
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr
 800ace0:	20000034 	.word	0x20000034

0800ace4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acec:	f3ef 8310 	mrs	r3, PRIMASK
 800acf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800acf2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800acf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800acf6:	b672      	cpsid	i
}
 800acf8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800acfa:	4b09      	ldr	r3, [pc, #36]	@ (800ad20 <UTIL_SEQ_ResumeTask+0x3c>)
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	4a07      	ldr	r2, [pc, #28]	@ (800ad20 <UTIL_SEQ_ResumeTask+0x3c>)
 800ad04:	6013      	str	r3, [r2, #0]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f383 8810 	msr	PRIMASK, r3
}
 800ad10:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ad12:	bf00      	nop
}
 800ad14:	371c      	adds	r7, #28
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	20000034 	.word	0x20000034

0800ad24 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ad30:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad32:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ad34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad36:	b672      	cpsid	i
}
 800ad38:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ad3a:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <UTIL_SEQ_SetEvt+0x3c>)
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	4a07      	ldr	r2, [pc, #28]	@ (800ad60 <UTIL_SEQ_SetEvt+0x3c>)
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	f383 8810 	msr	PRIMASK, r3
}
 800ad50:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ad52:	bf00      	nop
}
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	200005cc 	.word	0x200005cc

0800ad64 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b088      	sub	sp, #32
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800ad6c:	4b1f      	ldr	r3, [pc, #124]	@ (800adec <UTIL_SEQ_WaitEvt+0x88>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ad72:	4b1e      	ldr	r3, [pc, #120]	@ (800adec <UTIL_SEQ_WaitEvt+0x88>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad7a:	d102      	bne.n	800ad82 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	e005      	b.n	800ad8e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800ad82:	4b1a      	ldr	r3, [pc, #104]	@ (800adec <UTIL_SEQ_WaitEvt+0x88>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2201      	movs	r2, #1
 800ad88:	fa02 f303 	lsl.w	r3, r2, r3
 800ad8c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ad8e:	4b18      	ldr	r3, [pc, #96]	@ (800adf0 <UTIL_SEQ_WaitEvt+0x8c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ad94:	4a16      	ldr	r2, [pc, #88]	@ (800adf0 <UTIL_SEQ_WaitEvt+0x8c>)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800ad9a:	e003      	b.n	800ada4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800ad9c:	6879      	ldr	r1, [r7, #4]
 800ad9e:	69f8      	ldr	r0, [r7, #28]
 800ada0:	f7f8 fbb3 	bl	800350a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ada4:	4b13      	ldr	r3, [pc, #76]	@ (800adf4 <UTIL_SEQ_WaitEvt+0x90>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4013      	ands	r3, r2
 800adac:	2b00      	cmp	r3, #0
 800adae:	d0f5      	beq.n	800ad9c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800adb0:	4a0e      	ldr	r2, [pc, #56]	@ (800adec <UTIL_SEQ_WaitEvt+0x88>)
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adb6:	f3ef 8310 	mrs	r3, PRIMASK
 800adba:	60bb      	str	r3, [r7, #8]
  return(result);
 800adbc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800adbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800adc0:	b672      	cpsid	i
}
 800adc2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	43da      	mvns	r2, r3
 800adc8:	4b0a      	ldr	r3, [pc, #40]	@ (800adf4 <UTIL_SEQ_WaitEvt+0x90>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4013      	ands	r3, r2
 800adce:	4a09      	ldr	r2, [pc, #36]	@ (800adf4 <UTIL_SEQ_WaitEvt+0x90>)
 800add0:	6013      	str	r3, [r2, #0]
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f383 8810 	msr	PRIMASK, r3
}
 800addc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800adde:	4a04      	ldr	r2, [pc, #16]	@ (800adf0 <UTIL_SEQ_WaitEvt+0x8c>)
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	6013      	str	r3, [r2, #0]
  return;
 800ade4:	bf00      	nop
}
 800ade6:	3720      	adds	r7, #32
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	200005d4 	.word	0x200005d4
 800adf0:	200005d0 	.word	0x200005d0
 800adf4:	200005cc 	.word	0x200005cc

0800adf8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800adf8:	b480      	push	{r7}
 800adfa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800adfc:	bf00      	nop
}
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ae06:	b480      	push	{r7}
 800ae08:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ae0a:	bf00      	nop
}
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae2a:	d204      	bcs.n	800ae36 <SEQ_BitPosition+0x22>
 800ae2c:	2310      	movs	r3, #16
 800ae2e:	73fb      	strb	r3, [r7, #15]
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	041b      	lsls	r3, r3, #16
 800ae34:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae3c:	d205      	bcs.n	800ae4a <SEQ_BitPosition+0x36>
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
 800ae40:	3308      	adds	r3, #8
 800ae42:	73fb      	strb	r3, [r7, #15]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	021b      	lsls	r3, r3, #8
 800ae48:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae50:	d205      	bcs.n	800ae5e <SEQ_BitPosition+0x4a>
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	3304      	adds	r3, #4
 800ae56:	73fb      	strb	r3, [r7, #15]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	0f1b      	lsrs	r3, r3, #28
 800ae62:	4a07      	ldr	r2, [pc, #28]	@ (800ae80 <SEQ_BitPosition+0x6c>)
 800ae64:	5cd2      	ldrb	r2, [r2, r3]
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
 800ae68:	4413      	add	r3, r2
 800ae6a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	f1c3 031f 	rsb	r3, r3, #31
 800ae72:	b2db      	uxtb	r3, r3
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	0800ecac 	.word	0x0800ecac

0800ae84 <memcmp>:
 800ae84:	b510      	push	{r4, lr}
 800ae86:	3901      	subs	r1, #1
 800ae88:	4402      	add	r2, r0
 800ae8a:	4290      	cmp	r0, r2
 800ae8c:	d101      	bne.n	800ae92 <memcmp+0xe>
 800ae8e:	2000      	movs	r0, #0
 800ae90:	e005      	b.n	800ae9e <memcmp+0x1a>
 800ae92:	7803      	ldrb	r3, [r0, #0]
 800ae94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ae98:	42a3      	cmp	r3, r4
 800ae9a:	d001      	beq.n	800aea0 <memcmp+0x1c>
 800ae9c:	1b18      	subs	r0, r3, r4
 800ae9e:	bd10      	pop	{r4, pc}
 800aea0:	3001      	adds	r0, #1
 800aea2:	e7f2      	b.n	800ae8a <memcmp+0x6>

0800aea4 <memset>:
 800aea4:	4402      	add	r2, r0
 800aea6:	4603      	mov	r3, r0
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d100      	bne.n	800aeae <memset+0xa>
 800aeac:	4770      	bx	lr
 800aeae:	f803 1b01 	strb.w	r1, [r3], #1
 800aeb2:	e7f9      	b.n	800aea8 <memset+0x4>

0800aeb4 <__errno>:
 800aeb4:	4b01      	ldr	r3, [pc, #4]	@ (800aebc <__errno+0x8>)
 800aeb6:	6818      	ldr	r0, [r3, #0]
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	2000003c 	.word	0x2000003c

0800aec0 <__libc_init_array>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	4d0d      	ldr	r5, [pc, #52]	@ (800aef8 <__libc_init_array+0x38>)
 800aec4:	4c0d      	ldr	r4, [pc, #52]	@ (800aefc <__libc_init_array+0x3c>)
 800aec6:	1b64      	subs	r4, r4, r5
 800aec8:	10a4      	asrs	r4, r4, #2
 800aeca:	2600      	movs	r6, #0
 800aecc:	42a6      	cmp	r6, r4
 800aece:	d109      	bne.n	800aee4 <__libc_init_array+0x24>
 800aed0:	4d0b      	ldr	r5, [pc, #44]	@ (800af00 <__libc_init_array+0x40>)
 800aed2:	4c0c      	ldr	r4, [pc, #48]	@ (800af04 <__libc_init_array+0x44>)
 800aed4:	f000 f92c 	bl	800b130 <_init>
 800aed8:	1b64      	subs	r4, r4, r5
 800aeda:	10a4      	asrs	r4, r4, #2
 800aedc:	2600      	movs	r6, #0
 800aede:	42a6      	cmp	r6, r4
 800aee0:	d105      	bne.n	800aeee <__libc_init_array+0x2e>
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee8:	4798      	blx	r3
 800aeea:	3601      	adds	r6, #1
 800aeec:	e7ee      	b.n	800aecc <__libc_init_array+0xc>
 800aeee:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef2:	4798      	blx	r3
 800aef4:	3601      	adds	r6, #1
 800aef6:	e7f2      	b.n	800aede <__libc_init_array+0x1e>
 800aef8:	0800ecc4 	.word	0x0800ecc4
 800aefc:	0800ecc4 	.word	0x0800ecc4
 800af00:	0800ecc4 	.word	0x0800ecc4
 800af04:	0800ecc8 	.word	0x0800ecc8

0800af08 <memcpy>:
 800af08:	440a      	add	r2, r1
 800af0a:	4291      	cmp	r1, r2
 800af0c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800af10:	d100      	bne.n	800af14 <memcpy+0xc>
 800af12:	4770      	bx	lr
 800af14:	b510      	push	{r4, lr}
 800af16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af1e:	4291      	cmp	r1, r2
 800af20:	d1f9      	bne.n	800af16 <memcpy+0xe>
 800af22:	bd10      	pop	{r4, pc}

0800af24 <sqrt>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	ed2d 8b02 	vpush	{d8}
 800af2a:	ec55 4b10 	vmov	r4, r5, d0
 800af2e:	f000 f825 	bl	800af7c <__ieee754_sqrt>
 800af32:	4622      	mov	r2, r4
 800af34:	462b      	mov	r3, r5
 800af36:	4620      	mov	r0, r4
 800af38:	4629      	mov	r1, r5
 800af3a:	eeb0 8a40 	vmov.f32	s16, s0
 800af3e:	eef0 8a60 	vmov.f32	s17, s1
 800af42:	f7f5 fd7b 	bl	8000a3c <__aeabi_dcmpun>
 800af46:	b990      	cbnz	r0, 800af6e <sqrt+0x4a>
 800af48:	2200      	movs	r2, #0
 800af4a:	2300      	movs	r3, #0
 800af4c:	4620      	mov	r0, r4
 800af4e:	4629      	mov	r1, r5
 800af50:	f7f5 fd4c 	bl	80009ec <__aeabi_dcmplt>
 800af54:	b158      	cbz	r0, 800af6e <sqrt+0x4a>
 800af56:	f7ff ffad 	bl	800aeb4 <__errno>
 800af5a:	2321      	movs	r3, #33	@ 0x21
 800af5c:	6003      	str	r3, [r0, #0]
 800af5e:	2200      	movs	r2, #0
 800af60:	2300      	movs	r3, #0
 800af62:	4610      	mov	r0, r2
 800af64:	4619      	mov	r1, r3
 800af66:	f7f5 fbf9 	bl	800075c <__aeabi_ddiv>
 800af6a:	ec41 0b18 	vmov	d8, r0, r1
 800af6e:	eeb0 0a48 	vmov.f32	s0, s16
 800af72:	eef0 0a68 	vmov.f32	s1, s17
 800af76:	ecbd 8b02 	vpop	{d8}
 800af7a:	bd38      	pop	{r3, r4, r5, pc}

0800af7c <__ieee754_sqrt>:
 800af7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	4a68      	ldr	r2, [pc, #416]	@ (800b124 <__ieee754_sqrt+0x1a8>)
 800af82:	ec55 4b10 	vmov	r4, r5, d0
 800af86:	43aa      	bics	r2, r5
 800af88:	462b      	mov	r3, r5
 800af8a:	4621      	mov	r1, r4
 800af8c:	d110      	bne.n	800afb0 <__ieee754_sqrt+0x34>
 800af8e:	4622      	mov	r2, r4
 800af90:	4620      	mov	r0, r4
 800af92:	4629      	mov	r1, r5
 800af94:	f7f5 fab8 	bl	8000508 <__aeabi_dmul>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	4620      	mov	r0, r4
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7f5 f8fc 	bl	800019c <__adddf3>
 800afa4:	4604      	mov	r4, r0
 800afa6:	460d      	mov	r5, r1
 800afa8:	ec45 4b10 	vmov	d0, r4, r5
 800afac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	dc0e      	bgt.n	800afd2 <__ieee754_sqrt+0x56>
 800afb4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800afb8:	4322      	orrs	r2, r4
 800afba:	d0f5      	beq.n	800afa8 <__ieee754_sqrt+0x2c>
 800afbc:	b19d      	cbz	r5, 800afe6 <__ieee754_sqrt+0x6a>
 800afbe:	4622      	mov	r2, r4
 800afc0:	4620      	mov	r0, r4
 800afc2:	4629      	mov	r1, r5
 800afc4:	f7f5 f8e8 	bl	8000198 <__aeabi_dsub>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	f7f5 fbc6 	bl	800075c <__aeabi_ddiv>
 800afd0:	e7e8      	b.n	800afa4 <__ieee754_sqrt+0x28>
 800afd2:	152a      	asrs	r2, r5, #20
 800afd4:	d115      	bne.n	800b002 <__ieee754_sqrt+0x86>
 800afd6:	2000      	movs	r0, #0
 800afd8:	e009      	b.n	800afee <__ieee754_sqrt+0x72>
 800afda:	0acb      	lsrs	r3, r1, #11
 800afdc:	3a15      	subs	r2, #21
 800afde:	0549      	lsls	r1, r1, #21
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0fa      	beq.n	800afda <__ieee754_sqrt+0x5e>
 800afe4:	e7f7      	b.n	800afd6 <__ieee754_sqrt+0x5a>
 800afe6:	462a      	mov	r2, r5
 800afe8:	e7fa      	b.n	800afe0 <__ieee754_sqrt+0x64>
 800afea:	005b      	lsls	r3, r3, #1
 800afec:	3001      	adds	r0, #1
 800afee:	02dc      	lsls	r4, r3, #11
 800aff0:	d5fb      	bpl.n	800afea <__ieee754_sqrt+0x6e>
 800aff2:	1e44      	subs	r4, r0, #1
 800aff4:	1b12      	subs	r2, r2, r4
 800aff6:	f1c0 0420 	rsb	r4, r0, #32
 800affa:	fa21 f404 	lsr.w	r4, r1, r4
 800affe:	4323      	orrs	r3, r4
 800b000:	4081      	lsls	r1, r0
 800b002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b006:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b00a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b00e:	07d2      	lsls	r2, r2, #31
 800b010:	bf5c      	itt	pl
 800b012:	005b      	lslpl	r3, r3, #1
 800b014:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b018:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b01c:	bf58      	it	pl
 800b01e:	0049      	lslpl	r1, r1, #1
 800b020:	2600      	movs	r6, #0
 800b022:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b026:	106d      	asrs	r5, r5, #1
 800b028:	0049      	lsls	r1, r1, #1
 800b02a:	2016      	movs	r0, #22
 800b02c:	4632      	mov	r2, r6
 800b02e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b032:	1917      	adds	r7, r2, r4
 800b034:	429f      	cmp	r7, r3
 800b036:	bfde      	ittt	le
 800b038:	193a      	addle	r2, r7, r4
 800b03a:	1bdb      	suble	r3, r3, r7
 800b03c:	1936      	addle	r6, r6, r4
 800b03e:	0fcf      	lsrs	r7, r1, #31
 800b040:	3801      	subs	r0, #1
 800b042:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b046:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b04a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b04e:	d1f0      	bne.n	800b032 <__ieee754_sqrt+0xb6>
 800b050:	4604      	mov	r4, r0
 800b052:	2720      	movs	r7, #32
 800b054:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b058:	429a      	cmp	r2, r3
 800b05a:	eb00 0e0c 	add.w	lr, r0, ip
 800b05e:	db02      	blt.n	800b066 <__ieee754_sqrt+0xea>
 800b060:	d113      	bne.n	800b08a <__ieee754_sqrt+0x10e>
 800b062:	458e      	cmp	lr, r1
 800b064:	d811      	bhi.n	800b08a <__ieee754_sqrt+0x10e>
 800b066:	f1be 0f00 	cmp.w	lr, #0
 800b06a:	eb0e 000c 	add.w	r0, lr, ip
 800b06e:	da42      	bge.n	800b0f6 <__ieee754_sqrt+0x17a>
 800b070:	2800      	cmp	r0, #0
 800b072:	db40      	blt.n	800b0f6 <__ieee754_sqrt+0x17a>
 800b074:	f102 0801 	add.w	r8, r2, #1
 800b078:	1a9b      	subs	r3, r3, r2
 800b07a:	458e      	cmp	lr, r1
 800b07c:	bf88      	it	hi
 800b07e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800b082:	eba1 010e 	sub.w	r1, r1, lr
 800b086:	4464      	add	r4, ip
 800b088:	4642      	mov	r2, r8
 800b08a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b08e:	3f01      	subs	r7, #1
 800b090:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b094:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b098:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b09c:	d1dc      	bne.n	800b058 <__ieee754_sqrt+0xdc>
 800b09e:	4319      	orrs	r1, r3
 800b0a0:	d01b      	beq.n	800b0da <__ieee754_sqrt+0x15e>
 800b0a2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b128 <__ieee754_sqrt+0x1ac>
 800b0a6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b12c <__ieee754_sqrt+0x1b0>
 800b0aa:	e9da 0100 	ldrd	r0, r1, [sl]
 800b0ae:	e9db 2300 	ldrd	r2, r3, [fp]
 800b0b2:	f7f5 f871 	bl	8000198 <__aeabi_dsub>
 800b0b6:	e9da 8900 	ldrd	r8, r9, [sl]
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	4640      	mov	r0, r8
 800b0c0:	4649      	mov	r1, r9
 800b0c2:	f7f5 fc9d 	bl	8000a00 <__aeabi_dcmple>
 800b0c6:	b140      	cbz	r0, 800b0da <__ieee754_sqrt+0x15e>
 800b0c8:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800b0cc:	e9da 0100 	ldrd	r0, r1, [sl]
 800b0d0:	e9db 2300 	ldrd	r2, r3, [fp]
 800b0d4:	d111      	bne.n	800b0fa <__ieee754_sqrt+0x17e>
 800b0d6:	3601      	adds	r6, #1
 800b0d8:	463c      	mov	r4, r7
 800b0da:	1072      	asrs	r2, r6, #1
 800b0dc:	0863      	lsrs	r3, r4, #1
 800b0de:	07f1      	lsls	r1, r6, #31
 800b0e0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b0e4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b0e8:	bf48      	it	mi
 800b0ea:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b0ee:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	e756      	b.n	800afa4 <__ieee754_sqrt+0x28>
 800b0f6:	4690      	mov	r8, r2
 800b0f8:	e7be      	b.n	800b078 <__ieee754_sqrt+0xfc>
 800b0fa:	f7f5 f84f 	bl	800019c <__adddf3>
 800b0fe:	e9da 8900 	ldrd	r8, r9, [sl]
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	4640      	mov	r0, r8
 800b108:	4649      	mov	r1, r9
 800b10a:	f7f5 fc6f 	bl	80009ec <__aeabi_dcmplt>
 800b10e:	b120      	cbz	r0, 800b11a <__ieee754_sqrt+0x19e>
 800b110:	1ca0      	adds	r0, r4, #2
 800b112:	bf08      	it	eq
 800b114:	3601      	addeq	r6, #1
 800b116:	3402      	adds	r4, #2
 800b118:	e7df      	b.n	800b0da <__ieee754_sqrt+0x15e>
 800b11a:	1c63      	adds	r3, r4, #1
 800b11c:	f023 0401 	bic.w	r4, r3, #1
 800b120:	e7db      	b.n	800b0da <__ieee754_sqrt+0x15e>
 800b122:	bf00      	nop
 800b124:	7ff00000 	.word	0x7ff00000
 800b128:	20000098 	.word	0x20000098
 800b12c:	20000090 	.word	0x20000090

0800b130 <_init>:
 800b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b132:	bf00      	nop
 800b134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b136:	bc08      	pop	{r3}
 800b138:	469e      	mov	lr, r3
 800b13a:	4770      	bx	lr

0800b13c <_fini>:
 800b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13e:	bf00      	nop
 800b140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b142:	bc08      	pop	{r3}
 800b144:	469e      	mov	lr, r3
 800b146:	4770      	bx	lr
