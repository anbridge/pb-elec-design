
ble_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079cc  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08007b08  08007b08  00008b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007d74  08007d74  00008d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007d7c  08007d7c  00008d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007d80  08007d80  00008d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  20000008  08007d84  00009008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000003c  08007db8  0000903c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000074  08007ded  00009074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000088  08007dfe  00009088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08007dfe  000095b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000a000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000a000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08007dfe  000091e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000267fa  00000000  00000000  00009a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000582e  00000000  00000000  00030291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002310  00000000  00000000  00035ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001ab4  00000000  00000000  00037dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025692  00000000  00000000  00039884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00026037  00000000  00000000  0005ef16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cb7b5  00000000  00000000  00084f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00150702  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000911c  00000000  00000000  00150748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000083  00000000  00000000  00159864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000088 	.word	0x20000088
 8000158:	00000000 	.word	0x00000000
 800015c:	08007af0 	.word	0x08007af0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000008c 	.word	0x2000008c
 8000178:	08007af0 	.word	0x08007af0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000192:	4b15      	ldr	r3, [pc, #84]	@ (80001e8 <APPD_EnableCPU2+0x5c>)
 8000194:	881a      	ldrh	r2, [r3, #0]
 8000196:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <APPD_EnableCPU2+0x60>)
 8000198:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800019a:	4b15      	ldr	r3, [pc, #84]	@ (80001f0 <APPD_EnableCPU2+0x64>)
 800019c:	881a      	ldrh	r2, [r3, #0]
 800019e:	4b13      	ldr	r3, [pc, #76]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a0:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 80001a2:	4b14      	ldr	r3, [pc, #80]	@ (80001f4 <APPD_EnableCPU2+0x68>)
 80001a4:	881a      	ldrh	r2, [r3, #0]
 80001a6:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a8:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 80001aa:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <APPD_EnableCPU2+0x6c>)
 80001ac:	881a      	ldrh	r2, [r3, #0]
 80001ae:	4b0f      	ldr	r3, [pc, #60]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b0:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 80001b2:	4b12      	ldr	r3, [pc, #72]	@ (80001fc <APPD_EnableCPU2+0x70>)
 80001b4:	881a      	ldrh	r2, [r3, #0]
 80001b6:	4b0d      	ldr	r3, [pc, #52]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b8:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80001ba:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <APPD_EnableCPU2+0x74>)
 80001bc:	1d3c      	adds	r4, r7, #4
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	c403      	stmia	r4!, {r0, r1}
 80001ca:	8022      	strh	r2, [r4, #0]
 80001cc:	3402      	adds	r4, #2
 80001ce:	0c13      	lsrs	r3, r2, #16
 80001d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001d2:	f006 f9eb 	bl	80065ac <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f005 fc7c 	bl	8005ad6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001de:	bf00      	nop
}
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bdb0      	pop	{r4, r5, r7, pc}
 80001e6:	bf00      	nop
 80001e8:	2000000a 	.word	0x2000000a
 80001ec:	200301e8 	.word	0x200301e8
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	2000000e 	.word	0x2000000e
 80001f8:	20000010 	.word	0x20000010
 80001fc:	20000012 	.word	0x20000012
 8000200:	08007b08 	.word	0x08007b08

08000204 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 800020e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000212:	f023 0207 	bic.w	r2, r3, #7
 8000216:	4905      	ldr	r1, [pc, #20]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4313      	orrs	r3, r2
 800021c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	58000400 	.word	0x58000400

08000230 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 800023a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800023e:	4905      	ldr	r1, [pc, #20]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4313      	orrs	r3, r2
 8000244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	58000800 	.word	0x58000800

08000258 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000266:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800026a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800026e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000272:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	021b      	lsls	r3, r3, #8
 800027a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800027e:	4313      	orrs	r3, r2
 8000280:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	cafecafe 	.word	0xcafecafe

08000294 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800029c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80002a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	608b      	str	r3, [r1, #8]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <LL_DBGMCU_GetDeviceID+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e0042000 	.word	0xe0042000

080002d8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <LL_DBGMCU_GetRevisionID+0x18>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	b29b      	uxth	r3, r3
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e0042000 	.word	0xe0042000

080002f4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <LL_LPM_EnableSleep+0x1c>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <LL_LPM_EnableSleep+0x1c>)
 80002fe:	f023 0304 	bic.w	r3, r3, #4
 8000302:	6113      	str	r3, [r2, #16]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	22ff      	movs	r2, #255	@ 0xff
 8000320:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	22ca      	movs	r2, #202	@ 0xca
 800033a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2253      	movs	r2, #83	@ 0x53
 8000340:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	f023 0207 	bic.w	r2, r3, #7
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	431a      	orrs	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000378:	4b04      	ldr	r3, [pc, #16]	@ (800038c <MX_APPE_Config+0x18>)
 800037a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800037e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000380:	f000 f81d 	bl	80003be <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000384:	f000 f822 	bl	80003cc <Config_HSE>

  return;
 8000388:	bf00      	nop
}
 800038a:	bd80      	pop	{r7, pc}
 800038c:	58004000 	.word	0x58004000

08000390 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000394:	f000 f82e 	bl	80003f4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000398:	f000 f844 	bl	8000424 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800039c:	4903      	ldr	r1, [pc, #12]	@ (80003ac <MX_APPE_Init+0x1c>)
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fd92 	bl	8000ec8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80003a4:	f000 f84e 	bl	8000444 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80003a8:	bf00      	nop
}
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	200001d4 	.word	0x200001d4

080003b0 <Init_Exti>:

void Init_Exti(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80003b4:	2050      	movs	r0, #80	@ 0x50
 80003b6:	f7ff ff3b 	bl	8000230 <LL_EXTI_EnableIT_32_63>

  return;
 80003ba:	bf00      	nop
}
 80003bc:	bd80      	pop	{r7, pc}

080003be <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80003c2:	bf00      	nop
}
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80003d2:	2000      	movs	r0, #0
 80003d4:	f006 f976 	bl	80066c4 <OTP_Read>
 80003d8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d005      	beq.n	80003ec <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	799b      	ldrb	r3, [r3, #6]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff ff37 	bl	8000258 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80003ea:	bf00      	nop
 80003ec:	bf00      	nop
}
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <System_Init>:

static void System_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  Init_Exti();
 80003f8:	f7ff ffda 	bl	80003b0 <Init_Exti>

  Init_Rtc();
 80003fc:	f000 f802 	bl	8000404 <Init_Rtc>

  return;
 8000400:	bf00      	nop
}
 8000402:	bd80      	pop	{r7, pc}

08000404 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000408:	4805      	ldr	r0, [pc, #20]	@ (8000420 <Init_Rtc+0x1c>)
 800040a:	f7ff ff90 	bl	800032e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800040e:	2100      	movs	r1, #0
 8000410:	4803      	ldr	r0, [pc, #12]	@ (8000420 <Init_Rtc+0x1c>)
 8000412:	f7ff ff9c 	bl	800034e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000416:	4802      	ldr	r0, [pc, #8]	@ (8000420 <Init_Rtc+0x1c>)
 8000418:	f7ff ff7c 	bl	8000314 <LL_RTC_EnableWriteProtection>

  return;
 800041c:	bf00      	nop
}
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40002800 	.word	0x40002800

08000424 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000428:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800042c:	f7ff ff32 	bl	8000294 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000430:	f007 f8a8 	bl	8007584 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000434:	2004      	movs	r0, #4
 8000436:	f7ff fee5 	bl	8000204 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800043a:	f002 fc79 	bl	8002d30 <HAL_PWREx_EnableSRAMRetention>

  return;
 800043e:	bf00      	nop
}
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800044a:	f005 fef9 	bl	8006240 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800044e:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <appe_Tl_Init+0x50>)
 8000450:	2100      	movs	r1, #0
 8000452:	2004      	movs	r0, #4
 8000454:	f007 f9d4 	bl	8007800 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <appe_Tl_Init+0x54>)
 800045a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800045c:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <appe_Tl_Init+0x58>)
 800045e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000460:	463b      	mov	r3, r7
 8000462:	4619      	mov	r1, r3
 8000464:	480e      	ldr	r0, [pc, #56]	@ (80004a0 <appe_Tl_Init+0x5c>)
 8000466:	f005 fdad 	bl	8005fc4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <appe_Tl_Init+0x60>)
 800046c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800046e:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <appe_Tl_Init+0x64>)
 8000470:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <appe_Tl_Init+0x68>)
 8000474:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000476:	f240 533c 	movw	r3, #1340	@ 0x53c
 800047a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	4618      	mov	r0, r3
 8000482:	f006 f81f 	bl	80064c4 <TL_MM_Init>

  TL_Enable();
 8000486:	f005 fed5 	bl	8006234 <TL_Enable>

  return;
 800048a:	bf00      	nop
}
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	08005ffd 	.word	0x08005ffd
 8000498:	20030734 	.word	0x20030734
 800049c:	080004b1 	.word	0x080004b1
 80004a0:	080004c9 	.word	0x080004c9
 80004a4:	2003094c 	.word	0x2003094c
 80004a8:	20030840 	.word	0x20030840
 80004ac:	200301f8 	.word	0x200301f8

080004b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80004ba:	bf00      	nop
}
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	330b      	adds	r3, #11
 80004d6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80004e2:	2b07      	cmp	r3, #7
 80004e4:	d81f      	bhi.n	8000526 <APPE_SysUserEvtRx+0x5e>
 80004e6:	a201      	add	r2, pc, #4	@ (adr r2, 80004ec <APPE_SysUserEvtRx+0x24>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	0800050d 	.word	0x0800050d
 80004f0:	0800051f 	.word	0x0800051f
 80004f4:	08000527 	.word	0x08000527
 80004f8:	08000527 	.word	0x08000527
 80004fc:	08000527 	.word	0x08000527
 8000500:	08000527 	.word	0x08000527
 8000504:	08000527 	.word	0x08000527
 8000508:	08000527 	.word	0x08000527
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	4618      	mov	r0, r3
 8000512:	f005 fb0d 	bl	8005b30 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 f81b 	bl	8000552 <APPE_SysEvtReadyProcessing>
    break;
 800051c:	e004      	b.n	8000528 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f000 f806 	bl	8000530 <APPE_SysEvtError>
    break;
 8000524:	e000      	b.n	8000528 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000526:	bf00      	nop
  }

  return;
 8000528:	bf00      	nop
}
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	330b      	adds	r3, #11
 800053e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3302      	adds	r3, #2
 8000544:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000546:	bf00      	nop
}
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b08a      	sub	sp, #40	@ 0x28
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000568:	2300      	movs	r3, #0
 800056a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	330b      	adds	r3, #11
 8000576:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000578:	69fb      	ldr	r3, [r7, #28]
 800057a:	3302      	adds	r3, #2
 800057c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d11d      	bne.n	80005c2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000586:	f7ff fe01 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800058a:	230f      	movs	r3, #15
 800058c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800058e:	237f      	movs	r3, #127	@ 0x7f
 8000590:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000592:	f7ff fea1 	bl	80002d8 <LL_DBGMCU_GetRevisionID>
 8000596:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800059a:	b29b      	uxth	r3, r3
 800059c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800059e:	f7ff fe8d 	bl	80002bc <LL_DBGMCU_GetDeviceID>
 80005a2:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 faa8 	bl	8005b04 <SHCI_C2_Config>

    APP_BLE_Init();
 80005b4:	f006 f990 	bl	80068d8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2001      	movs	r0, #1
 80005bc:	f006 fff4 	bl	80075a8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80005c0:	e007      	b.n	80005d2 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d103      	bne.n	80005d2 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
  return;
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
}
 80005d4:	3728      	adds	r7, #40	@ 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e2:	f001 fa4b 	bl	8001a7c <HAL_GetTick>
 80005e6:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80005f2:	d00a      	beq.n	800060a <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80005f4:	f001 fa5a 	bl	8001aac <HAL_GetTickFreq>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000602:	e002      	b.n	800060a <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000604:	f7ff fe76 	bl	80002f4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000608:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800060a:	f001 fa37 	bl	8001a7c <HAL_GetTick>
 800060e:	4602      	mov	r2, r0
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	429a      	cmp	r2, r3
 8000618:	d8f4      	bhi.n	8000604 <HAL_Delay+0x2a>
  }
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800062c:	f006 ffec 	bl	8007608 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000638:	bf00      	nop
}
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800064c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000650:	f006 ffda 	bl	8007608 <UTIL_SEQ_Run>
  return;
 8000654:	bf00      	nop
}
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000664:	2100      	movs	r1, #0
 8000666:	2004      	movs	r0, #4
 8000668:	f007 f8ec 	bl	8007844 <UTIL_SEQ_SetTask>
  return;
 800066c:	bf00      	nop
}
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800067c:	2002      	movs	r0, #2
 800067e:	f007 f94d 	bl	800791c <UTIL_SEQ_SetEvt>
  return;
 8000682:	bf00      	nop
}
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000692:	2002      	movs	r0, #2
 8000694:	f007 f962 	bl	800795c <UTIL_SEQ_WaitEvt>
  return;
 8000698:	bf00      	nop
}
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <LL_EXTI_EnableIT_0_31>:
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80006aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80006ae:	4905      	ldr	r1, [pc, #20]	@ (80006c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	58000800 	.word	0x58000800

080006c8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4904      	ldr	r1, [pc, #16]	@ (80006e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4313      	orrs	r3, r2
 80006da:	600b      	str	r3, [r1, #0]

}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	58000800 	.word	0x58000800

080006ec <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <ReadRtcSsrValue+0x3c>)
 80006f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <ReadRtcSsrValue+0x3c>)
 80006fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006fe:	b29b      	uxth	r3, r3
 8000700:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000702:	e005      	b.n	8000710 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <ReadRtcSsrValue+0x3c>)
 800070a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800070c:	b29b      	uxth	r3, r3
 800070e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d1f5      	bne.n	8000704 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000718:	683b      	ldr	r3, [r7, #0]
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40002800 	.word	0x40002800

0800072c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	460a      	mov	r2, r1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	491d      	ldr	r1, [pc, #116]	@ (80007b4 <LinkTimerAfter+0x88>)
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	3315      	adds	r3, #21
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b06      	cmp	r3, #6
 8000754:	d009      	beq.n	800076a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000756:	7bfa      	ldrb	r2, [r7, #15]
 8000758:	4916      	ldr	r1, [pc, #88]	@ (80007b4 <LinkTimerAfter+0x88>)
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	440b      	add	r3, r1
 8000764:	3314      	adds	r3, #20
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	4911      	ldr	r1, [pc, #68]	@ (80007b4 <LinkTimerAfter+0x88>)
 800076e:	4613      	mov	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	4413      	add	r3, r2
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	440b      	add	r3, r1
 8000778:	3315      	adds	r3, #21
 800077a:	7bfa      	ldrb	r2, [r7, #15]
 800077c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800077e:	79fa      	ldrb	r2, [r7, #7]
 8000780:	490c      	ldr	r1, [pc, #48]	@ (80007b4 <LinkTimerAfter+0x88>)
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	440b      	add	r3, r1
 800078c:	3314      	adds	r3, #20
 800078e:	79ba      	ldrb	r2, [r7, #6]
 8000790:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000792:	79ba      	ldrb	r2, [r7, #6]
 8000794:	4907      	ldr	r1, [pc, #28]	@ (80007b4 <LinkTimerAfter+0x88>)
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3315      	adds	r3, #21
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	701a      	strb	r2, [r3, #0]

  return;
 80007a6:	bf00      	nop
}
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	200000a4 	.word	0x200000a4

080007b8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	460a      	mov	r2, r1
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	4613      	mov	r3, r2
 80007c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80007c8:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <LinkTimerBefore+0xb8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	79ba      	ldrb	r2, [r7, #6]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d032      	beq.n	800083a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	4927      	ldr	r1, [pc, #156]	@ (8000874 <LinkTimerBefore+0xbc>)
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	440b      	add	r3, r1
 80007e2:	3314      	adds	r3, #20
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	4922      	ldr	r1, [pc, #136]	@ (8000874 <LinkTimerBefore+0xbc>)
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	440b      	add	r3, r1
 80007f6:	3315      	adds	r3, #21
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	491d      	ldr	r1, [pc, #116]	@ (8000874 <LinkTimerBefore+0xbc>)
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	440b      	add	r3, r1
 800080a:	3315      	adds	r3, #21
 800080c:	79ba      	ldrb	r2, [r7, #6]
 800080e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	4918      	ldr	r1, [pc, #96]	@ (8000874 <LinkTimerBefore+0xbc>)
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	440b      	add	r3, r1
 800081e:	3314      	adds	r3, #20
 8000820:	7bfa      	ldrb	r2, [r7, #15]
 8000822:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000824:	79ba      	ldrb	r2, [r7, #6]
 8000826:	4913      	ldr	r1, [pc, #76]	@ (8000874 <LinkTimerBefore+0xbc>)
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	440b      	add	r3, r1
 8000832:	3314      	adds	r3, #20
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000838:	e014      	b.n	8000864 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	490d      	ldr	r1, [pc, #52]	@ (8000874 <LinkTimerBefore+0xbc>)
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	3315      	adds	r3, #21
 800084a:	79ba      	ldrb	r2, [r7, #6]
 800084c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800084e:	79ba      	ldrb	r2, [r7, #6]
 8000850:	4908      	ldr	r1, [pc, #32]	@ (8000874 <LinkTimerBefore+0xbc>)
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	3314      	adds	r3, #20
 800085e:	79fa      	ldrb	r2, [r7, #7]
 8000860:	701a      	strb	r2, [r3, #0]
  return;
 8000862:	bf00      	nop
}
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000134 	.word	0x20000134
 8000874:	200000a4 	.word	0x200000a4

08000878 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000882:	4b4e      	ldr	r3, [pc, #312]	@ (80009bc <linkTimer+0x144>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b06      	cmp	r3, #6
 800088a:	d118      	bne.n	80008be <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800088c:	4b4b      	ldr	r3, [pc, #300]	@ (80009bc <linkTimer+0x144>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b4b      	ldr	r3, [pc, #300]	@ (80009c0 <linkTimer+0x148>)
 8000894:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000896:	4a49      	ldr	r2, [pc, #292]	@ (80009bc <linkTimer+0x144>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	4949      	ldr	r1, [pc, #292]	@ (80009c4 <linkTimer+0x14c>)
 80008a0:	4613      	mov	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	440b      	add	r3, r1
 80008aa:	3315      	adds	r3, #21
 80008ac:	2206      	movs	r2, #6
 80008ae:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80008b0:	4b45      	ldr	r3, [pc, #276]	@ (80009c8 <linkTimer+0x150>)
 80008b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008b6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	81fb      	strh	r3, [r7, #14]
 80008bc:	e078      	b.n	80009b0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80008be:	f000 f909 	bl	8000ad4 <ReturnTimeElapsed>
 80008c2:	4603      	mov	r3, r0
 80008c4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80008c6:	79fa      	ldrb	r2, [r7, #7]
 80008c8:	493e      	ldr	r1, [pc, #248]	@ (80009c4 <linkTimer+0x14c>)
 80008ca:	4613      	mov	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4413      	add	r3, r2
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	440b      	add	r3, r1
 80008d4:	3308      	adds	r3, #8
 80008d6:	6819      	ldr	r1, [r3, #0]
 80008d8:	89fb      	ldrh	r3, [r7, #14]
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	4419      	add	r1, r3
 80008de:	4839      	ldr	r0, [pc, #228]	@ (80009c4 <linkTimer+0x14c>)
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	4403      	add	r3, r0
 80008ea:	3308      	adds	r3, #8
 80008ec:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	4934      	ldr	r1, [pc, #208]	@ (80009c4 <linkTimer+0x14c>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	3308      	adds	r3, #8
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000902:	4b2e      	ldr	r3, [pc, #184]	@ (80009bc <linkTimer+0x144>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4619      	mov	r1, r3
 800090a:	4a2e      	ldr	r2, [pc, #184]	@ (80009c4 <linkTimer+0x14c>)
 800090c:	460b      	mov	r3, r1
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	440b      	add	r3, r1
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	4413      	add	r3, r2
 8000916:	3308      	adds	r3, #8
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	429a      	cmp	r2, r3
 800091e:	d337      	bcc.n	8000990 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000920:	4b26      	ldr	r3, [pc, #152]	@ (80009bc <linkTimer+0x144>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000926:	7b7a      	ldrb	r2, [r7, #13]
 8000928:	4926      	ldr	r1, [pc, #152]	@ (80009c4 <linkTimer+0x14c>)
 800092a:	4613      	mov	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	4413      	add	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	440b      	add	r3, r1
 8000934:	3315      	adds	r3, #21
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800093a:	e013      	b.n	8000964 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800093c:	7b7a      	ldrb	r2, [r7, #13]
 800093e:	4921      	ldr	r1, [pc, #132]	@ (80009c4 <linkTimer+0x14c>)
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	440b      	add	r3, r1
 800094a:	3315      	adds	r3, #21
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000950:	7b7a      	ldrb	r2, [r7, #13]
 8000952:	491c      	ldr	r1, [pc, #112]	@ (80009c4 <linkTimer+0x14c>)
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	440b      	add	r3, r1
 800095e:	3315      	adds	r3, #21
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000964:	7b3b      	ldrb	r3, [r7, #12]
 8000966:	2b06      	cmp	r3, #6
 8000968:	d00b      	beq.n	8000982 <linkTimer+0x10a>
 800096a:	7b3a      	ldrb	r2, [r7, #12]
 800096c:	4915      	ldr	r1, [pc, #84]	@ (80009c4 <linkTimer+0x14c>)
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	440b      	add	r3, r1
 8000978:	3308      	adds	r3, #8
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	429a      	cmp	r2, r3
 8000980:	d2dc      	bcs.n	800093c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000982:	7b7a      	ldrb	r2, [r7, #13]
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fecf 	bl	800072c <LinkTimerAfter>
 800098e:	e00f      	b.n	80009b0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <linkTimer+0x144>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff0c 	bl	80007b8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <linkTimer+0x144>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <linkTimer+0x148>)
 80009a8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80009aa:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <linkTimer+0x144>)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80009b0:	89fb      	ldrh	r3, [r7, #14]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000134 	.word	0x20000134
 80009c0:	20000135 	.word	0x20000135
 80009c4:	200000a4 	.word	0x200000a4
 80009c8:	20000138 	.word	0x20000138

080009cc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	460a      	mov	r2, r1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80009dc:	4b39      	ldr	r3, [pc, #228]	@ (8000ac4 <UnlinkTimer+0xf8>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d111      	bne.n	8000a0c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009e8:	4b36      	ldr	r3, [pc, #216]	@ (8000ac4 <UnlinkTimer+0xf8>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b36      	ldr	r3, [pc, #216]	@ (8000ac8 <UnlinkTimer+0xfc>)
 80009f0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	4935      	ldr	r1, [pc, #212]	@ (8000acc <UnlinkTimer+0x100>)
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	440b      	add	r3, r1
 8000a00:	3315      	adds	r3, #21
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <UnlinkTimer+0xf8>)
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e03e      	b.n	8000a8a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	492f      	ldr	r1, [pc, #188]	@ (8000acc <UnlinkTimer+0x100>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	440b      	add	r3, r1
 8000a1a:	3314      	adds	r3, #20
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	492a      	ldr	r1, [pc, #168]	@ (8000acc <UnlinkTimer+0x100>)
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	440b      	add	r3, r1
 8000a2e:	3315      	adds	r3, #21
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000a34:	79f9      	ldrb	r1, [r7, #7]
 8000a36:	7bfa      	ldrb	r2, [r7, #15]
 8000a38:	4824      	ldr	r0, [pc, #144]	@ (8000acc <UnlinkTimer+0x100>)
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	440b      	add	r3, r1
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	4403      	add	r3, r0
 8000a44:	3315      	adds	r3, #21
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2d8      	uxtb	r0, r3
 8000a4a:	4920      	ldr	r1, [pc, #128]	@ (8000acc <UnlinkTimer+0x100>)
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	440b      	add	r3, r1
 8000a56:	3315      	adds	r3, #21
 8000a58:	4602      	mov	r2, r0
 8000a5a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d013      	beq.n	8000a8a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a62:	79f9      	ldrb	r1, [r7, #7]
 8000a64:	7bba      	ldrb	r2, [r7, #14]
 8000a66:	4819      	ldr	r0, [pc, #100]	@ (8000acc <UnlinkTimer+0x100>)
 8000a68:	460b      	mov	r3, r1
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	440b      	add	r3, r1
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	4403      	add	r3, r0
 8000a72:	3314      	adds	r3, #20
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2d8      	uxtb	r0, r3
 8000a78:	4914      	ldr	r1, [pc, #80]	@ (8000acc <UnlinkTimer+0x100>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	440b      	add	r3, r1
 8000a84:	3314      	adds	r3, #20
 8000a86:	4602      	mov	r2, r0
 8000a88:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	490f      	ldr	r1, [pc, #60]	@ (8000acc <UnlinkTimer+0x100>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	440b      	add	r3, r1
 8000a98:	330c      	adds	r3, #12
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <UnlinkTimer+0xf8>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d107      	bne.n	8000ab8 <UnlinkTimer+0xec>
 8000aa8:	79bb      	ldrb	r3, [r7, #6]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d104      	bne.n	8000ab8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <UnlinkTimer+0x104>)
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  return;
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
}
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	20000134 	.word	0x20000134
 8000ac8:	20000135 	.word	0x20000135
 8000acc:	200000a4 	.word	0x200000a4
 8000ad0:	20000138 	.word	0x20000138

08000ad4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000ada:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <ReturnTimeElapsed+0x70>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ae2:	d026      	beq.n	8000b32 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ae4:	f7ff fe02 	bl	80006ec <ReadRtcSsrValue>
 8000ae8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <ReturnTimeElapsed+0x70>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d805      	bhi.n	8000b00 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <ReturnTimeElapsed+0x70>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	e00a      	b.n	8000b16 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <ReturnTimeElapsed+0x74>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <ReturnTimeElapsed+0x70>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <ReturnTimeElapsed+0x78>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	fb02 f303 	mul.w	r3, r2, r3
 8000b22:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <ReturnTimeElapsed+0x7c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	40d3      	lsrs	r3, r2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	e001      	b.n	8000b36 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	b29b      	uxth	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000138 	.word	0x20000138
 8000b48:	20000140 	.word	0x20000140
 8000b4c:	2000013e 	.word	0x2000013e
 8000b50:	2000013d 	.word	0x2000013d

08000b54 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d108      	bne.n	8000b76 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b64:	f7ff fdc2 	bl	80006ec <ReadRtcSsrValue>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <RestartWakeupCounter+0x9c>)
 8000b6c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f001 f925 	bl	8001dbe <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b74:	e039      	b.n	8000bea <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d803      	bhi.n	8000b84 <RestartWakeupCounter+0x30>
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <RestartWakeupCounter+0xa0>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d002      	beq.n	8000b8a <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000b8a:	bf00      	nop
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <RestartWakeupCounter+0xa4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f8      	beq.n	8000b8c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <RestartWakeupCounter+0xa4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <RestartWakeupCounter+0xa4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000baa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <RestartWakeupCounter+0xa8>)
 8000bae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bb2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f001 f910 	bl	8001dda <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000bba:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <RestartWakeupCounter+0xac>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	0c1b      	lsrs	r3, r3, #16
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	490e      	ldr	r1, [pc, #56]	@ (8000c00 <RestartWakeupCounter+0xac>)
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000bca:	f7ff fd8f 	bl	80006ec <ReadRtcSsrValue>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a07      	ldr	r2, [pc, #28]	@ (8000bf0 <RestartWakeupCounter+0x9c>)
 8000bd2:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <RestartWakeupCounter+0xa4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <RestartWakeupCounter+0xa4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000be2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000be4:	f3af 8000 	nop.w
  return ;
 8000be8:	bf00      	nop
}
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000138 	.word	0x20000138
 8000bf4:	2000013d 	.word	0x2000013d
 8000bf8:	200001d4 	.word	0x200001d4
 8000bfc:	58000800 	.word	0x58000800
 8000c00:	40002800 	.word	0x40002800

08000c04 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000c0a:	4b45      	ldr	r3, [pc, #276]	@ (8000d20 <RescheduleTimerList+0x11c>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c16:	d107      	bne.n	8000c28 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000c18:	bf00      	nop
 8000c1a:	4b42      	ldr	r3, [pc, #264]	@ (8000d24 <RescheduleTimerList+0x120>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f8      	bne.n	8000c1a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000c28:	4b3e      	ldr	r3, [pc, #248]	@ (8000d24 <RescheduleTimerList+0x120>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d24 <RescheduleTimerList+0x120>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c36:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c38:	4b3b      	ldr	r3, [pc, #236]	@ (8000d28 <RescheduleTimerList+0x124>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c3e:	7bfa      	ldrb	r2, [r7, #15]
 8000c40:	493a      	ldr	r1, [pc, #232]	@ (8000d2c <RescheduleTimerList+0x128>)
 8000c42:	4613      	mov	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4413      	add	r3, r2
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	440b      	add	r3, r1
 8000c4c:	3308      	adds	r3, #8
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c52:	f7ff ff3f 	bl	8000ad4 <ReturnTimeElapsed>
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d205      	bcs.n	8000c6e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <RescheduleTimerList+0x12c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e04d      	b.n	8000d0a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	4a30      	ldr	r2, [pc, #192]	@ (8000d34 <RescheduleTimerList+0x130>)
 8000c72:	8812      	ldrh	r2, [r2, #0]
 8000c74:	b292      	uxth	r2, r2
 8000c76:	4413      	add	r3, r2
 8000c78:	461a      	mov	r2, r3
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d906      	bls.n	8000c8e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c80:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <RescheduleTimerList+0x130>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c86:	4b2a      	ldr	r3, [pc, #168]	@ (8000d30 <RescheduleTimerList+0x12c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e03d      	b.n	8000d0a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c98:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <RescheduleTimerList+0x12c>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c9e:	e034      	b.n	8000d0a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	4922      	ldr	r1, [pc, #136]	@ (8000d2c <RescheduleTimerList+0x128>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3308      	adds	r3, #8
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d20a      	bcs.n	8000cce <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000cb8:	7bfa      	ldrb	r2, [r7, #15]
 8000cba:	491c      	ldr	r1, [pc, #112]	@ (8000d2c <RescheduleTimerList+0x128>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	e013      	b.n	8000cf6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000cce:	7bfa      	ldrb	r2, [r7, #15]
 8000cd0:	4916      	ldr	r1, [pc, #88]	@ (8000d2c <RescheduleTimerList+0x128>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3308      	adds	r3, #8
 8000cde:	6819      	ldr	r1, [r3, #0]
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	7bfa      	ldrb	r2, [r7, #15]
 8000ce4:	1ac9      	subs	r1, r1, r3
 8000ce6:	4811      	ldr	r0, [pc, #68]	@ (8000d2c <RescheduleTimerList+0x128>)
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	4403      	add	r3, r0
 8000cf2:	3308      	adds	r3, #8
 8000cf4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cf6:	7bfa      	ldrb	r2, [r7, #15]
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <RescheduleTimerList+0x128>)
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	440b      	add	r3, r1
 8000d04:	3315      	adds	r3, #21
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	2b06      	cmp	r3, #6
 8000d0e:	d1c7      	bne.n	8000ca0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000d10:	89bb      	ldrh	r3, [r7, #12]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff1e 	bl	8000b54 <RestartWakeupCounter>

  return ;
 8000d18:	bf00      	nop
}
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40002800 	.word	0x40002800
 8000d24:	200001d4 	.word	0x200001d4
 8000d28:	20000134 	.word	0x20000134
 8000d2c:	200000a4 	.word	0x200000a4
 8000d30:	2000013c 	.word	0x2000013c
 8000d34:	20000142 	.word	0x20000142

08000d38 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8000d42:	617b      	str	r3, [r7, #20]
  return(result);
 8000d44:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000d4c:	4b59      	ldr	r3, [pc, #356]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	22ca      	movs	r2, #202	@ 0xca
 8000d52:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d54:	4b57      	ldr	r3, [pc, #348]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2253      	movs	r2, #83	@ 0x53
 8000d5a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000d5c:	4b55      	ldr	r3, [pc, #340]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	4b54      	ldr	r3, [pc, #336]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000d6a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d6c:	4b52      	ldr	r3, [pc, #328]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d74:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d78:	4950      	ldr	r1, [pc, #320]	@ (8000ebc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	440b      	add	r3, r1
 8000d84:	330c      	adds	r3, #12
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d16e      	bne.n	8000e6c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d8e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d92:	494a      	ldr	r1, [pc, #296]	@ (8000ebc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	440b      	add	r3, r1
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000da2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000da6:	4945      	ldr	r1, [pc, #276]	@ (8000ebc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	3310      	adds	r3, #16
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000db8:	4b41      	ldr	r3, [pc, #260]	@ (8000ec0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d04c      	beq.n	8000e5c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000dc2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dc6:	493d      	ldr	r1, [pc, #244]	@ (8000ebc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	330d      	adds	r3, #13
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d124      	bne.n	8000e26 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000de0:	2101      	movs	r1, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fdf2 	bl	80009cc <UnlinkTimer>
 8000de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dea:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	f383 8810 	msr	PRIMASK, r3
}
 8000df2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000df4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000df8:	4930      	ldr	r1, [pc, #192]	@ (8000ebc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	440b      	add	r3, r1
 8000e04:	3304      	adds	r3, #4
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f9b8 	bl	8001184 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e14:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	22ca      	movs	r2, #202	@ 0xca
 8000e1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e1c:	4b25      	ldr	r3, [pc, #148]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2253      	movs	r2, #83	@ 0x53
 8000e22:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e24:	e012      	b.n	8000e4c <HW_TS_RTC_Wakeup_Handler+0x114>
 8000e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f383 8810 	msr	PRIMASK, r3
}
 8000e30:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f920 	bl	800107c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	22ca      	movs	r2, #202	@ 0xca
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e44:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2253      	movs	r2, #83	@ 0x53
 8000e4a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	4619      	mov	r1, r3
 8000e54:	69b8      	ldr	r0, [r7, #24]
 8000e56:	f000 fa1b 	bl	8001290 <HW_TS_RTC_Int_AppNot>
 8000e5a:	e022      	b.n	8000ea2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000e5c:	f7ff fed2 	bl	8000c04 <RescheduleTimerList>
 8000e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	f383 8810 	msr	PRIMASK, r3
}
 8000e6a:	e01a      	b.n	8000ea2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e6c:	bf00      	nop
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f8      	beq.n	8000e6e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e8c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e90:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f383 8810 	msr	PRIMASK, r3
}
 8000ea0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000ea2:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	22ff      	movs	r2, #255	@ 0xff
 8000ea8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8000eaa:	bf00      	nop
}
 8000eac:	3728      	adds	r7, #40	@ 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200001d4 	.word	0x200001d4
 8000eb8:	20000134 	.word	0x20000134
 8000ebc:	200000a4 	.word	0x200000a4
 8000ec0:	2000013c 	.word	0x2000013c
 8000ec4:	58000800 	.word	0x58000800

08000ec8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000ed4:	4b5e      	ldr	r3, [pc, #376]	@ (8001050 <HW_TS_Init+0x188>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	22ca      	movs	r2, #202	@ 0xca
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24
 8000edc:	4b5c      	ldr	r3, [pc, #368]	@ (8001050 <HW_TS_Init+0x188>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2253      	movs	r2, #83	@ 0x53
 8000ee2:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000ee4:	4b5b      	ldr	r3, [pc, #364]	@ (8001054 <HW_TS_Init+0x18c>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4a5a      	ldr	r2, [pc, #360]	@ (8001054 <HW_TS_Init+0x18c>)
 8000eea:	f043 0320 	orr.w	r3, r3, #32
 8000eee:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000ef0:	4b58      	ldr	r3, [pc, #352]	@ (8001054 <HW_TS_Init+0x18c>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f1c3 0304 	rsb	r3, r3, #4
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b55      	ldr	r3, [pc, #340]	@ (8001058 <HW_TS_Init+0x190>)
 8000f04:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000f06:	4b53      	ldr	r3, [pc, #332]	@ (8001054 <HW_TS_Init+0x18c>)
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000f0e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000f12:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	fa92 f2a2 	rbit	r2, r2
 8000f1a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d101      	bne.n	8000f2a <HW_TS_Init+0x62>
  {
    return 32U;
 8000f26:	2220      	movs	r2, #32
 8000f28:	e003      	b.n	8000f32 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	fab2 f282 	clz	r2, r2
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	40d3      	lsrs	r3, r2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3301      	adds	r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b48      	ldr	r3, [pc, #288]	@ (800105c <HW_TS_Init+0x194>)
 8000f3c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f3e:	4b45      	ldr	r3, [pc, #276]	@ (8001054 <HW_TS_Init+0x18c>)
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b44      	ldr	r3, [pc, #272]	@ (8001060 <HW_TS_Init+0x198>)
 8000f50:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f52:	4b43      	ldr	r3, [pc, #268]	@ (8001060 <HW_TS_Init+0x198>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	4a40      	ldr	r2, [pc, #256]	@ (800105c <HW_TS_Init+0x194>)
 8000f5a:	7812      	ldrb	r2, [r2, #0]
 8000f5c:	fb02 f303 	mul.w	r3, r2, r3
 8000f60:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000f64:	4a3c      	ldr	r2, [pc, #240]	@ (8001058 <HW_TS_Init+0x190>)
 8000f66:	7812      	ldrb	r2, [r2, #0]
 8000f68:	40d3      	lsrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d904      	bls.n	8000f80 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f76:	4b3b      	ldr	r3, [pc, #236]	@ (8001064 <HW_TS_Init+0x19c>)
 8000f78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f7c:	801a      	strh	r2, [r3, #0]
 8000f7e:	e003      	b.n	8000f88 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <HW_TS_Init+0x19c>)
 8000f86:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f88:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f8c:	f7ff fb9c 	bl	80006c8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f90:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f94:	f7ff fb84 	bl	80006a0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d13d      	bne.n	800101a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f9e:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <HW_TS_Init+0x1a0>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000fa4:	4b31      	ldr	r3, [pc, #196]	@ (800106c <HW_TS_Init+0x1a4>)
 8000fa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000faa:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	77fb      	strb	r3, [r7, #31]
 8000fb0:	e00c      	b.n	8000fcc <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000fb2:	7ffa      	ldrb	r2, [r7, #31]
 8000fb4:	492e      	ldr	r1, [pc, #184]	@ (8001070 <HW_TS_Init+0x1a8>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fc6:	7ffb      	ldrb	r3, [r7, #31]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	77fb      	strb	r3, [r7, #31]
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	2b05      	cmp	r3, #5
 8000fd0:	d9ef      	bls.n	8000fb2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fd2:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <HW_TS_Init+0x1ac>)
 8000fd4:	2206      	movs	r2, #6
 8000fd6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <HW_TS_Init+0x188>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <HW_TS_Init+0x188>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fe6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fe8:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <HW_TS_Init+0x188>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <HW_TS_Init+0x188>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000ff8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <HW_TS_Init+0x1b0>)
 8000ffc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001000:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001002:	2003      	movs	r0, #3
 8001004:	f000 fee9 	bl	8001dda <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HW_TS_Init+0x188>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <HW_TS_Init+0x188>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	e009      	b.n	800102e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <HW_TS_Init+0x188>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 fec8 	bl	8001dbe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HW_TS_Init+0x188>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	22ff      	movs	r2, #255	@ 0xff
 8001034:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001036:	2200      	movs	r2, #0
 8001038:	2103      	movs	r1, #3
 800103a:	2003      	movs	r0, #3
 800103c:	f000 fe7d 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001040:	2003      	movs	r0, #3
 8001042:	f000 fe94 	bl	8001d6e <HAL_NVIC_EnableIRQ>

  return;
 8001046:	bf00      	nop
}
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001d4 	.word	0x200001d4
 8001054:	40002800 	.word	0x40002800
 8001058:	2000013d 	.word	0x2000013d
 800105c:	2000013e 	.word	0x2000013e
 8001060:	20000140 	.word	0x20000140
 8001064:	20000142 	.word	0x20000142
 8001068:	2000013c 	.word	0x2000013c
 800106c:	20000138 	.word	0x20000138
 8001070:	200000a4 	.word	0x200000a4
 8001074:	20000134 	.word	0x20000134
 8001078:	58000800 	.word	0x58000800

0800107c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001086:	f3ef 8310 	mrs	r3, PRIMASK
 800108a:	60fb      	str	r3, [r7, #12]
  return(result);
 800108c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800108e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001094:	2003      	movs	r0, #3
 8001096:	f000 fe78 	bl	8001d8a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800109a:	4b34      	ldr	r3, [pc, #208]	@ (800116c <HW_TS_Stop+0xf0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	22ca      	movs	r2, #202	@ 0xca
 80010a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80010a2:	4b32      	ldr	r3, [pc, #200]	@ (800116c <HW_TS_Stop+0xf0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2253      	movs	r2, #83	@ 0x53
 80010a8:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	4930      	ldr	r1, [pc, #192]	@ (8001170 <HW_TS_Stop+0xf4>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	330c      	adds	r3, #12
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d142      	bne.n	8001148 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fc80 	bl	80009cc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80010cc:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <HW_TS_Stop+0xf8>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010d2:	7cfb      	ldrb	r3, [r7, #19]
 80010d4:	2b06      	cmp	r3, #6
 80010d6:	d12f      	bne.n	8001138 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80010d8:	4b27      	ldr	r3, [pc, #156]	@ (8001178 <HW_TS_Stop+0xfc>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e4:	d107      	bne.n	80010f6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80010e6:	bf00      	nop
 80010e8:	4b20      	ldr	r3, [pc, #128]	@ (800116c <HW_TS_Stop+0xf0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f8      	bne.n	80010e8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80010f6:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <HW_TS_Stop+0xf0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <HW_TS_Stop+0xf0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001104:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001106:	bf00      	nop
 8001108:	4b18      	ldr	r3, [pc, #96]	@ (800116c <HW_TS_Stop+0xf0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f8      	beq.n	8001108 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <HW_TS_Stop+0xf0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <HW_TS_Stop+0xf0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001126:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <HW_TS_Stop+0x100>)
 800112a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800112e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001130:	2003      	movs	r0, #3
 8001132:	f000 fe52 	bl	8001dda <HAL_NVIC_ClearPendingIRQ>
 8001136:	e007      	b.n	8001148 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <HW_TS_Stop+0x104>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	7cfa      	ldrb	r2, [r7, #19]
 8001140:	429a      	cmp	r2, r3
 8001142:	d001      	beq.n	8001148 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001144:	f7ff fd5e 	bl	8000c04 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HW_TS_Stop+0xf0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	22ff      	movs	r2, #255	@ 0xff
 800114e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001150:	2003      	movs	r0, #3
 8001152:	f000 fe0c 	bl	8001d6e <HAL_NVIC_EnableIRQ>
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f383 8810 	msr	PRIMASK, r3
}
 8001160:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001162:	bf00      	nop
}
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001d4 	.word	0x200001d4
 8001170:	200000a4 	.word	0x200000a4
 8001174:	20000134 	.word	0x20000134
 8001178:	40002800 	.word	0x40002800
 800117c:	58000800 	.word	0x58000800
 8001180:	20000135 	.word	0x20000135

08001184 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001190:	79fa      	ldrb	r2, [r7, #7]
 8001192:	493b      	ldr	r1, [pc, #236]	@ (8001280 <HW_TS_Start+0xfc>)
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	330c      	adds	r3, #12
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d103      	bne.n	80011b0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff66 	bl	800107c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011b0:	f3ef 8310 	mrs	r3, PRIMASK
 80011b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80011b6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80011ba:	b672      	cpsid	i
}
 80011bc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80011be:	2003      	movs	r0, #3
 80011c0:	f000 fde3 	bl	8001d8a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <HW_TS_Start+0x100>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	22ca      	movs	r2, #202	@ 0xca
 80011ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80011cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <HW_TS_Start+0x100>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2253      	movs	r2, #83	@ 0x53
 80011d2:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	492a      	ldr	r1, [pc, #168]	@ (8001280 <HW_TS_Start+0xfc>)
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	330c      	adds	r3, #12
 80011e4:	2202      	movs	r2, #2
 80011e6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	4925      	ldr	r1, [pc, #148]	@ (8001280 <HW_TS_Start+0xfc>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3308      	adds	r3, #8
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4920      	ldr	r1, [pc, #128]	@ (8001280 <HW_TS_Start+0xfc>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	3304      	adds	r3, #4
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fb30 	bl	8000878 <linkTimer>
 8001218:	4603      	mov	r3, r0
 800121a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800121c:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <HW_TS_Start+0x104>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <HW_TS_Start+0x108>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	7c7a      	ldrb	r2, [r7, #17]
 800122a:	429a      	cmp	r2, r3
 800122c:	d002      	beq.n	8001234 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800122e:	f7ff fce9 	bl	8000c04 <RescheduleTimerList>
 8001232:	e013      	b.n	800125c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001234:	79fa      	ldrb	r2, [r7, #7]
 8001236:	4912      	ldr	r1, [pc, #72]	@ (8001280 <HW_TS_Start+0xfc>)
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	440b      	add	r3, r1
 8001242:	3308      	adds	r3, #8
 8001244:	6819      	ldr	r1, [r3, #0]
 8001246:	8a7b      	ldrh	r3, [r7, #18]
 8001248:	79fa      	ldrb	r2, [r7, #7]
 800124a:	1ac9      	subs	r1, r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <HW_TS_Start+0xfc>)
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4403      	add	r3, r0
 8001258:	3308      	adds	r3, #8
 800125a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HW_TS_Start+0x100>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	22ff      	movs	r2, #255	@ 0xff
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001264:	2003      	movs	r0, #3
 8001266:	f000 fd82 	bl	8001d6e <HAL_NVIC_EnableIRQ>
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	f383 8810 	msr	PRIMASK, r3
}
 8001274:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001276:	bf00      	nop
}
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000a4 	.word	0x200000a4
 8001284:	200001d4 	.word	0x200001d4
 8001288:	20000134 	.word	0x20000134
 800128c:	20000135 	.word	0x20000135

08001290 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	460b      	mov	r3, r1
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4798      	blx	r3

  return;
 80012a2:	bf00      	nop
}
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4313      	orrs	r3, r2
 80012c0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4013      	ands	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <main>:
  */
uint8_t chnl = 0x01;
uint8_t buf22[512];

int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e2:	f000 fb5d 	bl	80019a0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80012e6:	f7ff f845 	bl	8000374 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ea:	f000 f865 	bl	80013b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012ee:	f000 f8a8 	bl	8001442 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80012f2:	f000 f903 	bl	80014fc <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f6:	f000 f94d 	bl	8001594 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012fa:	f000 f8bf 	bl	800147c <MX_I2C1_Init>
  MX_RTC_Init();
 80012fe:	f000 f919 	bl	8001534 <MX_RTC_Init>
  MX_RF_Init();
 8001302:	f000 f90f 	bl	8001524 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001306:	f7ff f843 	bl	8000390 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
 	    /* USER CODE END WHILE */
 	    MX_APPE_Process();
 800130a:	f7ff f98b 	bl	8000624 <MX_APPE_Process>
 	    if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 800130e:	2140      	movs	r1, #64	@ 0x40
 8001310:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001314:	f000 fed8 	bl	80020c8 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f5      	bne.n	800130a <main+0x2e>
 			  buf22[0] = chnl;
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <main+0xd0>)
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <main+0xd4>)
 8001324:	701a      	strb	r2, [r3, #0]
 			  buf22[1] = 0x00;
 8001326:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <main+0xd4>)
 8001328:	2200      	movs	r2, #0
 800132a:	705a      	strb	r2, [r3, #1]
 	    	HAL_I2C_Master_Transmit(&hi2c1, 0x70 << 1, &chnl, 1, 1000);
 800132c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	4a1d      	ldr	r2, [pc, #116]	@ (80013ac <main+0xd0>)
 8001336:	21e0      	movs	r1, #224	@ 0xe0
 8001338:	481e      	ldr	r0, [pc, #120]	@ (80013b4 <main+0xd8>)
 800133a:	f000 ff9d 	bl	8002278 <HAL_I2C_Master_Transmit>
 	    	HAL_StatusTypeDef result;
 	    	for (uint8_t i = 0; i<128; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	e019      	b.n	8001378 <main+0x9c>
 	    		  {
 	    			  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i<<1), 2, 2);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b29b      	uxth	r3, r3
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b299      	uxth	r1, r3
 800134c:	2302      	movs	r3, #2
 800134e:	2202      	movs	r2, #2
 8001350:	4818      	ldr	r0, [pc, #96]	@ (80013b4 <main+0xd8>)
 8001352:	f001 f8a9 	bl	80024a8 <HAL_I2C_IsDeviceReady>
 8001356:	4603      	mov	r3, r0
 8001358:	71bb      	strb	r3, [r7, #6]
 	    			  if (result == HAL_OK && i != 0x70)
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d108      	bne.n	8001372 <main+0x96>
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b70      	cmp	r3, #112	@ 0x70
 8001364:	d005      	beq.n	8001372 <main+0x96>
 	    			  {

 	    				  buf22[2] = 0x00;
 8001366:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <main+0xd4>)
 8001368:	2200      	movs	r2, #0
 800136a:	709a      	strb	r2, [r3, #2]
 	    				  buf22[3] = 0xFF & i;
 800136c:	4a10      	ldr	r2, [pc, #64]	@ (80013b0 <main+0xd4>)
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	70d3      	strb	r3, [r2, #3]
 	    	for (uint8_t i = 0; i<128; i++)
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	3301      	adds	r3, #1
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	dae1      	bge.n	8001344 <main+0x68>

 	    			  }
 	    		  }
 	    	Custom_STM_App_Update_Char(0, (uint8_t *)buf22);
 8001380:	490b      	ldr	r1, [pc, #44]	@ (80013b0 <main+0xd4>)
 8001382:	2000      	movs	r0, #0
 8001384:	f005 fe90 	bl	80070a8 <Custom_STM_App_Update_Char>
 	    	HAL_Delay(250);
 8001388:	20fa      	movs	r0, #250	@ 0xfa
 800138a:	f7ff f926 	bl	80005da <HAL_Delay>
 	    	chnl = chnl << 1;
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <main+0xd0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <main+0xd0>)
 8001398:	701a      	strb	r2, [r3, #0]
 	    	if (chnl == 0)chnl = 1;
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <main+0xd0>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1b3      	bne.n	800130a <main+0x2e>
 80013a2:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <main+0xd0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
 	    MX_APPE_Process();
 80013a8:	e7af      	b.n	800130a <main+0x2e>
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	200001f8 	.word	0x200001f8
 80013b4:	20000144 	.word	0x20000144

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b098      	sub	sp, #96	@ 0x60
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	2244      	movs	r2, #68	@ 0x44
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f006 fb58 	bl	8007a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013de:	2303      	movs	r3, #3
 80013e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ee:	2340      	movs	r3, #64	@ 0x40
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 ffc8 	bl	8003390 <HAL_RCC_OscConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0x52>
  {
    Error_Handler();
 8001406:	f000 f8e5 	bl	80015d4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800140a:	236f      	movs	r3, #111	@ 0x6f
 800140c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800140e:	2302      	movs	r3, #2
 8001410:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fae6 	bl	80039fc <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001436:	f000 f8cd 	bl	80015d4 <Error_Handler>
  }
}
 800143a:	bf00      	nop
 800143c:	3760      	adds	r7, #96	@ 0x60
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b08a      	sub	sp, #40	@ 0x28
 8001446:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2224      	movs	r2, #36	@ 0x24
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f006 fb14 	bl	8007a7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 8001454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001458:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 800145a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4618      	mov	r0, r3
 8001464:	f002 fe22 	bl	80040ac <HAL_RCCEx_PeriphCLKConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 800146e:	f000 f8b1 	bl	80015d4 <Error_Handler>
  }
}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	@ 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <MX_I2C1_Init+0x74>)
 8001482:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <MX_I2C1_Init+0x78>)
 8001484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_I2C1_Init+0x74>)
 8001488:	4a1b      	ldr	r2, [pc, #108]	@ (80014f8 <MX_I2C1_Init+0x7c>)
 800148a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <MX_I2C1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <MX_I2C1_Init+0x74>)
 8001494:	2201      	movs	r2, #1
 8001496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b6:	480e      	ldr	r0, [pc, #56]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014b8:	f000 fe42 	bl	8002140 <HAL_I2C_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014c2:	f000 f887 	bl	80015d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014c6:	2100      	movs	r1, #0
 80014c8:	4809      	ldr	r0, [pc, #36]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014ca:	f001 faf3 	bl	8002ab4 <HAL_I2CEx_ConfigAnalogFilter>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014d4:	f000 f87e 	bl	80015d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014d8:	2100      	movs	r1, #0
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014dc:	f001 fb35 	bl	8002b4a <HAL_I2CEx_ConfigDigitalFilter>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014e6:	f000 f875 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000144 	.word	0x20000144
 80014f4:	40005400 	.word	0x40005400
 80014f8:	00b07cb4 	.word	0x00b07cb4

080014fc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_IPCC_Init+0x20>)
 8001502:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <MX_IPCC_Init+0x24>)
 8001504:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_IPCC_Init+0x20>)
 8001508:	f001 fb6c 	bl	8002be4 <HAL_IPCC_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001512:	f000 f85f 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000198 	.word	0x20000198
 8001520:	58000c00 	.word	0x58000c00

08001524 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_RTC_Init+0x58>)
 800153a:	4a15      	ldr	r2, [pc, #84]	@ (8001590 <MX_RTC_Init+0x5c>)
 800153c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <MX_RTC_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_RTC_Init+0x58>)
 8001546:	227f      	movs	r2, #127	@ 0x7f
 8001548:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <MX_RTC_Init+0x58>)
 800154c:	f641 6284 	movw	r2, #7812	@ 0x1e84
 8001550:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_RTC_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_RTC_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <MX_RTC_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001564:	4809      	ldr	r0, [pc, #36]	@ (800158c <MX_RTC_Init+0x58>)
 8001566:	f002 fe7d 	bl	8004264 <HAL_RTC_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001570:	f000 f830 	bl	80015d4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	4804      	ldr	r0, [pc, #16]	@ (800158c <MX_RTC_Init+0x58>)
 800157a:	f002 ff73 	bl	8004464 <HAL_RTCEx_SetWakeUpTimer_IT>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001584:	f000 f826 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200001d4 	.word	0x200001d4
 8001590:	40002800 	.word	0x40002800

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a8:	2002      	movs	r0, #2
 80015aa:	f7ff fe7e 	bl	80012aa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff fe7b 	bl	80012aa <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : User_BTN_Pin */
  GPIO_InitStruct.Pin = User_BTN_Pin;
 80015b4:	2340      	movs	r3, #64	@ 0x40
 80015b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_BTN_GPIO_Port, &GPIO_InitStruct);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c8:	f000 fc16 	bl	8001df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <Error_Handler+0x8>

080015e0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80015e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_AHB2_GRP1_EnableClock>:
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800160e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001610:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4313      	orrs	r3, r2
 8001618:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800161e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4013      	ands	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001640:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001642:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4313      	orrs	r3, r2
 800164a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001650:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001658:	68fb      	ldr	r3, [r7, #12]
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001666:	b480      	push	{r7}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001672:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001674:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4313      	orrs	r3, r2
 800167c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800167e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001682:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4013      	ands	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800169c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80016a0:	f7ff ffc8 	bl	8001634 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	202e      	movs	r0, #46	@ 0x2e
 80016aa:	f000 fb46 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80016ae:	202e      	movs	r0, #46	@ 0x2e
 80016b0:	f000 fb5d 	bl	8001d6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b090      	sub	sp, #64	@ 0x40
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	2224      	movs	r2, #36	@ 0x24
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f006 f9cf 	bl	8007a7c <memset>
  if(hi2c->Instance==I2C1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a17      	ldr	r2, [pc, #92]	@ (8001740 <HAL_I2C_MspInit+0x88>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d126      	bne.n	8001736 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016e8:	2304      	movs	r3, #4
 80016ea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016ec:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80016f0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fcd8 	bl	80040ac <HAL_RCCEx_PeriphCLKConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001702:	f7ff ff67 	bl	80015d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2002      	movs	r0, #2
 8001708:	f7ff ff7b 	bl	8001602 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800170c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001712:	2312      	movs	r3, #18
 8001714:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800171e:	2304      	movs	r3, #4
 8001720:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001726:	4619      	mov	r1, r3
 8001728:	4806      	ldr	r0, [pc, #24]	@ (8001744 <HAL_I2C_MspInit+0x8c>)
 800172a:	f000 fb65 	bl	8001df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800172e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001732:	f7ff ff98 	bl	8001666 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001736:	bf00      	nop
 8001738:	3740      	adds	r7, #64	@ 0x40
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40005400 	.word	0x40005400
 8001744:	48000400 	.word	0x48000400

08001748 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <HAL_IPCC_MspInit+0x44>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d113      	bne.n	8001782 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800175a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800175e:	f7ff ff69 	bl	8001634 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	202c      	movs	r0, #44	@ 0x2c
 8001768:	f000 fae7 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800176c:	202c      	movs	r0, #44	@ 0x2c
 800176e:	f000 fafe 	bl	8001d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	202d      	movs	r0, #45	@ 0x2d
 8001778:	f000 fadf 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800177c:	202d      	movs	r0, #45	@ 0x2d
 800177e:	f000 faf6 	bl	8001d6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	58000c00 	.word	0x58000c00

08001790 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	@ 0x30
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	2224      	movs	r2, #36	@ 0x24
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f006 f96b 	bl	8007a7c <memset>
  if(hrtc->Instance==RTC)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <HAL_RTC_MspInit+0x6c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d121      	bne.n	80017f4 <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
	  HAL_PWR_EnableBkUpAccess();
 80017b0:	f001 fa9e 	bl	8002cf0 <HAL_PWR_EnableBkUpAccess>
	  HAL_PWR_EnableBkUpAccess(); // written twice to flush apb-ahb bridge
 80017b4:	f001 fa9c 	bl	8002cf0 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 80017be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fc6f 	bl	80040ac <HAL_RCCEx_PeriphCLKConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80017d4:	f7ff fefe 	bl	80015d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017d8:	f7ff ff02 	bl	80015e0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017dc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80017e0:	f7ff ff41 	bl	8001666 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 faa6 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80017ee:	2003      	movs	r0, #3
 80017f0:	f000 fabd 	bl	8001d6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80017f4:	bf00      	nop
 80017f6:	3730      	adds	r7, #48	@ 0x30
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40002800 	.word	0x40002800

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <NMI_Handler+0x4>

08001808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <MemManage_Handler+0x4>

08001818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <UsageFault_Handler+0x4>

08001828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001856:	f000 f8fd 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001862:	f7ff fa69 	bl	8000d38 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800186e:	f005 fd4b 	bl	8007308 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}

08001876 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800187a:	f005 fd7b 	bl	8007374 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}

08001882 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001886:	f000 fc37 	bl	80020f8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001894:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <SystemInit+0x90>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189a:	4a21      	ldr	r2, [pc, #132]	@ (8001920 <SystemInit+0x90>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80018bc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018c8:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <SystemInit+0x94>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018da:	f023 0305 	bic.w	r3, r3, #5
 80018de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <SystemInit+0x98>)
 80018fc:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001908:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800190c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800190e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	faf6fefb 	.word	0xfaf6fefb
 8001928:	22041000 	.word	0x22041000

0800192c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800192c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001930:	3304      	adds	r3, #4

08001932 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001932:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001934:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001936:	d3f9      	bcc.n	800192c <CopyDataInit>
  bx lr
 8001938:	4770      	bx	lr

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800193a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800193c:	3004      	adds	r0, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800193e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>
  bx lr
 8001942:	4770      	bx	lr

08001944 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001946:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001948:	f7ff ffa2 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800194c:	480b      	ldr	r0, [pc, #44]	@ (800197c <LoopForever+0x6>)
 800194e:	490c      	ldr	r1, [pc, #48]	@ (8001980 <LoopForever+0xa>)
 8001950:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <LoopForever+0xe>)
 8001952:	2300      	movs	r3, #0
 8001954:	f7ff ffed 	bl	8001932 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001958:	480b      	ldr	r0, [pc, #44]	@ (8001988 <LoopForever+0x12>)
 800195a:	490c      	ldr	r1, [pc, #48]	@ (800198c <LoopForever+0x16>)
 800195c:	4a0c      	ldr	r2, [pc, #48]	@ (8001990 <LoopForever+0x1a>)
 800195e:	2300      	movs	r3, #0
 8001960:	f7ff ffe7 	bl	8001932 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001964:	480b      	ldr	r0, [pc, #44]	@ (8001994 <LoopForever+0x1e>)
 8001966:	490c      	ldr	r1, [pc, #48]	@ (8001998 <LoopForever+0x22>)
 8001968:	2300      	movs	r3, #0
 800196a:	f7ff ffe8 	bl	800193e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800196e:	f006 f88d 	bl	8007a8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001972:	f7ff fcb3 	bl	80012dc <main>

08001976 <LoopForever>:

LoopForever:
  b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
  ldr   r0, =_estack
 8001978:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 800197c:	20000008 	.word	0x20000008
 8001980:	2000003c 	.word	0x2000003c
 8001984:	08007d84 	.word	0x08007d84
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001988:	200301e4 	.word	0x200301e4
 800198c:	20030a67 	.word	0x20030a67
 8001990:	08007dfe 	.word	0x08007dfe
  INIT_BSS _sbss, _ebss
 8001994:	20000088 	.word	0x20000088
 8001998:	200005b0 	.word	0x200005b0

0800199c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC1_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019aa:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <HAL_Init+0x3c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <HAL_Init+0x3c>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b6:	2003      	movs	r0, #3
 80019b8:	f000 f9b4 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019bc:	200f      	movs	r0, #15
 80019be:	f000 f80f 	bl	80019e0 <HAL_InitTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	e001      	b.n	80019d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ce:	f7ff fe63 	bl	8001698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d2:	79fb      	ldrb	r3, [r7, #7]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	58004000 	.word	0x58004000

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80019ec:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <HAL_InitTick+0x6c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d024      	beq.n	8001a3e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f4:	f002 f9ae 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <HAL_InitTick+0x6c>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a04:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f9ca 	bl	8001da6 <HAL_SYSTICK_Config>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10f      	bne.n	8001a38 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	d809      	bhi.n	8001a32 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a26:	f000 f988 	bl	8001d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a2a:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_InitTick+0x70>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e007      	b.n	8001a42 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
 8001a36:	e004      	b.n	8001a42 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e001      	b.n	8001a42 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2000001c 	.word	0x2000001c
 8001a50:	20000018 	.word	0x20000018

08001a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_IncTick+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_IncTick+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a04      	ldr	r2, [pc, #16]	@ (8001a78 <HAL_IncTick+0x24>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000001c 	.word	0x2000001c
 8001a78:	200003f8 	.word	0x200003f8

08001a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <HAL_GetTick+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200003f8 	.word	0x200003f8

08001a94 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_GetTickPrio+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000018 	.word	0x20000018

08001aac <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <HAL_GetTickFreq+0x14>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	2000001c 	.word	0x2000001c

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	@ (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db12      	blt.n	8001b9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	490a      	ldr	r1, [pc, #40]	@ (8001ba8 <__NVIC_DisableIRQ+0x44>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	3320      	adds	r3, #32
 8001b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b90:	f3bf 8f4f 	dsb	sy
}
 8001b94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b96:	f3bf 8f6f 	isb	sy
}
 8001b9a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0c      	blt.n	8001bd8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4907      	ldr	r1, [pc, #28]	@ (8001be4 <__NVIC_SetPendingIRQ+0x38>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	3340      	adds	r3, #64	@ 0x40
 8001bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0c      	blt.n	8001c14 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	@ (8001c20 <__NVIC_ClearPendingIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	3360      	adds	r3, #96	@ 0x60
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	@ (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	@ (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	@ 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff fec9 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff fee0 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff90 	bl	8001c78 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5f 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fed3 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fee3 	bl	8001b64 <__NVIC_DisableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ff96 	bl	8001ce0 <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff feed 	bl	8001bac <__NVIC_SetPendingIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fefd 	bl	8001be8 <__NVIC_ClearPendingIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e06:	e146      	b.n	8002096 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8138 	beq.w	8002090 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d005      	beq.n	8001e38 <HAL_GPIO_Init+0x40>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d130      	bne.n	8001e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 0201 	and.w	r2, r3, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d017      	beq.n	8001ed6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d123      	bne.n	8001f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	6939      	ldr	r1, [r7, #16]
 8001f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0203 	and.w	r2, r3, #3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8092 	beq.w	8002090 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f6c:	4a51      	ldr	r2, [pc, #324]	@ (80020b4 <HAL_GPIO_Init+0x2bc>)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f96:	d013      	beq.n	8001fc0 <HAL_GPIO_Init+0x1c8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a47      	ldr	r2, [pc, #284]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00d      	beq.n	8001fbc <HAL_GPIO_Init+0x1c4>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a46      	ldr	r2, [pc, #280]	@ (80020bc <HAL_GPIO_Init+0x2c4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d007      	beq.n	8001fb8 <HAL_GPIO_Init+0x1c0>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a45      	ldr	r2, [pc, #276]	@ (80020c0 <HAL_GPIO_Init+0x2c8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_GPIO_Init+0x1bc>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_Init+0x1ca>
 8001fb4:	2307      	movs	r3, #7
 8001fb6:	e004      	b.n	8001fc2 <HAL_GPIO_Init+0x1ca>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_Init+0x1ca>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_GPIO_Init+0x1ca>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fd2:	4938      	ldr	r1, [pc, #224]	@ (80020b4 <HAL_GPIO_Init+0x2bc>)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe0:	4b38      	ldr	r3, [pc, #224]	@ (80020c4 <HAL_GPIO_Init+0x2cc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002004:	4a2f      	ldr	r2, [pc, #188]	@ (80020c4 <HAL_GPIO_Init+0x2cc>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800200a:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <HAL_GPIO_Init+0x2cc>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800202e:	4a25      	ldr	r2, [pc, #148]	@ (80020c4 <HAL_GPIO_Init+0x2cc>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002034:	4b23      	ldr	r3, [pc, #140]	@ (80020c4 <HAL_GPIO_Init+0x2cc>)
 8002036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800205a:	4a1a      	ldr	r2, [pc, #104]	@ (80020c4 <HAL_GPIO_Init+0x2cc>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002062:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <HAL_GPIO_Init+0x2cc>)
 8002064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002088:	4a0e      	ldr	r2, [pc, #56]	@ (80020c4 <HAL_GPIO_Init+0x2cc>)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3301      	adds	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f47f aeb1 	bne.w	8001e08 <HAL_GPIO_Init+0x10>
  }
}
 80020a6:	bf00      	nop
 80020a8:	bf00      	nop
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	40010000 	.word	0x40010000
 80020b8:	48000400 	.word	0x48000400
 80020bc:	48000800 	.word	0x48000800
 80020c0:	48001000 	.word	0x48001000
 80020c4:	58000800 	.word	0x58000800

080020c8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e001      	b.n	80020ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80020fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <HAL_HSEM_IRQHandler+0x30>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002104:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <HAL_HSEM_IRQHandler+0x30>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	43db      	mvns	r3, r3
 800210c:	4906      	ldr	r1, [pc, #24]	@ (8002128 <HAL_HSEM_IRQHandler+0x30>)
 800210e:	4013      	ands	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <HAL_HSEM_IRQHandler+0x30>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f807 	bl	800212c <HAL_HSEM_FreeCallback>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	58001500 	.word	0x58001500

0800212c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e08d      	b.n	800226e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff faa6 	bl	80016b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	@ 0x24
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002190:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e006      	b.n	80021c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d108      	bne.n	80021e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	e007      	b.n	80021f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002200:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69d9      	ldr	r1, [r3, #28]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1a      	ldr	r2, [r3, #32]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2220      	movs	r2, #32
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	461a      	mov	r2, r3
 8002284:	460b      	mov	r3, r1
 8002286:	817b      	strh	r3, [r7, #10]
 8002288:	4613      	mov	r3, r2
 800228a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b20      	cmp	r3, #32
 8002296:	f040 80fd 	bne.w	8002494 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_I2C_Master_Transmit+0x30>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e0f6      	b.n	8002496 <HAL_I2C_Master_Transmit+0x21e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022b0:	f7ff fbe4 	bl	8001a7c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2319      	movs	r3, #25
 80022bc:	2201      	movs	r2, #1
 80022be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fa00 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0e1      	b.n	8002496 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2221      	movs	r2, #33	@ 0x21
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2210      	movs	r2, #16
 80022de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	893a      	ldrh	r2, [r7, #8]
 80022f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2bff      	cmp	r3, #255	@ 0xff
 8002302:	d906      	bls.n	8002312 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	22ff      	movs	r2, #255	@ 0xff
 8002308:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800230a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e007      	b.n	8002322 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800231c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002320:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002326:	2b00      	cmp	r3, #0
 8002328:	d024      	beq.n	8002374 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	8979      	ldrh	r1, [r7, #10]
 8002366:	4b4e      	ldr	r3, [pc, #312]	@ (80024a0 <HAL_I2C_Master_Transmit+0x228>)
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fb6f 	bl	8002a50 <I2C_TransferConfig>
 8002372:	e066      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002378:	b2da      	uxtb	r2, r3
 800237a:	8979      	ldrh	r1, [r7, #10]
 800237c:	4b48      	ldr	r3, [pc, #288]	@ (80024a0 <HAL_I2C_Master_Transmit+0x228>)
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fb64 	bl	8002a50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002388:	e05b      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	6a39      	ldr	r1, [r7, #32]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f9f3 	bl	800277a <I2C_WaitOnTXISFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07b      	b.n	8002496 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d034      	beq.n	8002442 <HAL_I2C_Master_Transmit+0x1ca>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d130      	bne.n	8002442 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2180      	movs	r1, #128	@ 0x80
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f96c 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e04d      	b.n	8002496 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2bff      	cmp	r3, #255	@ 0xff
 8002402:	d90e      	bls.n	8002422 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	22ff      	movs	r2, #255	@ 0xff
 8002408:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240e:	b2da      	uxtb	r2, r3
 8002410:	8979      	ldrh	r1, [r7, #10]
 8002412:	2300      	movs	r3, #0
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fb18 	bl	8002a50 <I2C_TransferConfig>
 8002420:	e00f      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002430:	b2da      	uxtb	r2, r3
 8002432:	8979      	ldrh	r1, [r7, #10]
 8002434:	2300      	movs	r3, #0
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fb07 	bl	8002a50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d19e      	bne.n	800238a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	6a39      	ldr	r1, [r7, #32]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f9d9 	bl	8002808 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e01a      	b.n	8002496 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2220      	movs	r2, #32
 8002466:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <HAL_I2C_Master_Transmit+0x22c>)
 8002474:	400b      	ands	r3, r1
 8002476:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e000      	b.n	8002496 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002494:	2302      	movs	r3, #2
  }
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	80002000 	.word	0x80002000
 80024a4:	fe00e800 	.word	0xfe00e800

080024a8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	460b      	mov	r3, r1
 80024b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	f040 80d6 	bne.w	8002676 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024d8:	d101      	bne.n	80024de <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
 80024dc:	e0cc      	b.n	8002678 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_I2C_IsDeviceReady+0x44>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0c5      	b.n	8002678 <HAL_I2C_IsDeviceReady+0x1d0>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2224      	movs	r2, #36	@ 0x24
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d107      	bne.n	800251a <HAL_I2C_IsDeviceReady+0x72>
 800250a:	897b      	ldrh	r3, [r7, #10]
 800250c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002510:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002514:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002518:	e006      	b.n	8002528 <HAL_I2C_IsDeviceReady+0x80>
 800251a:	897b      	ldrh	r3, [r7, #10]
 800251c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002520:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002524:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800252e:	f7ff faa5 	bl	8001a7c <HAL_GetTick>
 8002532:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b20      	cmp	r3, #32
 8002540:	bf0c      	ite	eq
 8002542:	2301      	moveq	r3, #1
 8002544:	2300      	movne	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b10      	cmp	r3, #16
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002560:	e034      	b.n	80025cc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002568:	d01a      	beq.n	80025a0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800256a:	f7ff fa87 	bl	8001a7c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d302      	bcc.n	8002580 <HAL_I2C_IsDeviceReady+0xd8>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10f      	bne.n	80025a0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e06b      	b.n	8002678 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80025cc:	7ffb      	ldrb	r3, [r7, #31]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <HAL_I2C_IsDeviceReady+0x130>
 80025d2:	7fbb      	ldrb	r3, [r7, #30]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0c4      	beq.n	8002562 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d01a      	beq.n	800261c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	2120      	movs	r1, #32
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f869 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e03b      	b.n	8002678 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2220      	movs	r2, #32
 8002606:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e02d      	b.n	8002678 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2200      	movs	r2, #0
 8002624:	2120      	movs	r1, #32
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f84e 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e020      	b.n	8002678 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2210      	movs	r2, #16
 800263c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2220      	movs	r2, #32
 8002644:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	f63f af56 	bhi.w	8002502 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f043 0220 	orr.w	r2, r3, #32
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d103      	bne.n	800269e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d007      	beq.n	80026bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	619a      	str	r2, [r3, #24]
  }
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d8:	e03b      	b.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f8d6 	bl	8002890 <I2C_IsErrorOccurred>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e041      	b.n	8002772 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026f4:	d02d      	beq.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7ff f9c1 	bl	8001a7c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d122      	bne.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4013      	ands	r3, r2
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	429a      	cmp	r2, r3
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	429a      	cmp	r2, r3
 8002728:	d113      	bne.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4013      	ands	r3, r2
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	429a      	cmp	r2, r3
 800276e:	d0b4      	beq.n	80026da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002786:	e033      	b.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f87f 	bl	8002890 <I2C_IsErrorOccurred>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e031      	b.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027a2:	d025      	beq.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a4:	f7ff f96a 	bl	8001a7c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d302      	bcc.n	80027ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d11a      	bne.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d013      	beq.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	f043 0220 	orr.w	r2, r3, #32
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e007      	b.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d1c4      	bne.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002814:	e02f      	b.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f838 	bl	8002890 <I2C_IsErrorOccurred>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e02d      	b.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282a:	f7ff f927 	bl	8001a7c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d11a      	bne.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b20      	cmp	r3, #32
 800284c:	d013      	beq.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b20      	cmp	r3, #32
 8002882:	d1c8      	bne.n	8002816 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	@ 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d068      	beq.n	800298e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2210      	movs	r2, #16
 80028c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028c4:	e049      	b.n	800295a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028cc:	d045      	beq.n	800295a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028ce:	f7ff f8d5 	bl	8001a7c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <I2C_IsErrorOccurred+0x54>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d13a      	bne.n	800295a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002906:	d121      	bne.n	800294c <I2C_IsErrorOccurred+0xbc>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800290e:	d01d      	beq.n	800294c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	2b20      	cmp	r3, #32
 8002914:	d01a      	beq.n	800294c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002924:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002926:	f7ff f8a9 	bl	8001a7c <HAL_GetTick>
 800292a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800292c:	e00e      	b.n	800294c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800292e:	f7ff f8a5 	bl	8001a7c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b19      	cmp	r3, #25
 800293a:	d907      	bls.n	800294c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	f043 0320 	orr.w	r3, r3, #32
 8002942:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800294a:	e006      	b.n	800295a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b20      	cmp	r3, #32
 8002958:	d1e9      	bne.n	800292e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b20      	cmp	r3, #32
 8002966:	d003      	beq.n	8002970 <I2C_IsErrorOccurred+0xe0>
 8002968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0aa      	beq.n	80028c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002974:	2b00      	cmp	r3, #0
 8002976:	d103      	bne.n	8002980 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2220      	movs	r2, #32
 800297e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00b      	beq.n	80029b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	f043 0308 	orr.w	r3, r3, #8
 80029c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00b      	beq.n	80029fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80029fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01c      	beq.n	8002a3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff fe3b 	bl	8002680 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <I2C_IsErrorOccurred+0x1bc>)
 8002a16:	400b      	ands	r3, r1
 8002a18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3728      	adds	r7, #40	@ 0x28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	fe00e800 	.word	0xfe00e800

08002a50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	817b      	strh	r3, [r7, #10]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a68:	7a7b      	ldrb	r3, [r7, #9]
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	0d5b      	lsrs	r3, r3, #21
 8002a8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a8e:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <I2C_TransferConfig+0x60>)
 8002a90:	430b      	orrs	r3, r1
 8002a92:	43db      	mvns	r3, r3
 8002a94:	ea02 0103 	and.w	r1, r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	03ff63ff 	.word	0x03ff63ff

08002ab4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d138      	bne.n	8002b3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e032      	b.n	8002b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	@ 0x24
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d139      	bne.n	8002bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e033      	b.n	8002bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2224      	movs	r2, #36	@ 0x24
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
  }
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01e      	beq.n	8002c34 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002bf6:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <HAL_IPCC_Init+0x60>)
 8002bf8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fe fd9e 	bl	8001748 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002c0c:	68b8      	ldr	r0, [r7, #8]
 8002c0e:	f000 f85b 	bl	8002cc8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f82c 	bl	8002c7c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002c32:	e001      	b.n	8002c38 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	58000c00 	.word	0x58000c00

08002c48 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e00f      	b.n	8002caa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc0 <IPCC_SetDefaultCallbacks+0x44>)
 8002c94:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3306      	adds	r3, #6
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a08      	ldr	r2, [pc, #32]	@ (8002cc4 <IPCC_SetDefaultCallbacks+0x48>)
 8002ca2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d9ec      	bls.n	8002c8a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	08002c49 	.word	0x08002c49
 8002cc4:	08002c63 	.word	0x08002c63

08002cc8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	223f      	movs	r2, #63	@ 0x3f
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf4:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfe:	6013      	str	r3, [r2, #0]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	58000400 	.word	0x58000400

08002d10 <LL_PWR_EnableSRAM2Retention>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002d14:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a04      	ldr	r2, [pc, #16]	@ (8002d2c <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d1e:	6093      	str	r3, [r2, #8]
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	58000400 	.word	0x58000400

08002d30 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002d34:	f7ff ffec 	bl	8002d10 <LL_PWR_EnableSRAM2Retention>
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d4e:	d101      	bne.n	8002d54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_RCC_HSE_Enable>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_HSE_Disable>:
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_RCC_HSE_IsReady>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dae:	d101      	bne.n	8002db4 <LL_RCC_HSE_IsReady+0x18>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <LL_RCC_HSE_IsReady+0x1a>
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_RCC_HSI_Enable>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd2:	6013      	str	r3, [r2, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_RCC_HSI_Disable>:
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002df0:	6013      	str	r3, [r2, #0]
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_RCC_HSI_IsReady>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e0e:	d101      	bne.n	8002e14 <LL_RCC_HSI_IsReady+0x18>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <LL_RCC_HSI_IsReady+0x1a>
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_RCC_LSE_Enable>:
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e62:	bf00      	nop
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_LSE_Disable>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_RCC_LSE_EnableBypass>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_LSE_DisableBypass>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_LSE_IsReady>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d101      	bne.n	8002eea <LL_RCC_LSE_IsReady+0x18>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <LL_RCC_LSE_IsReady+0x1a>
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_RCC_LSI1_Enable>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_RCC_LSI1_Disable>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_LSI1_IsReady>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d101      	bne.n	8002f52 <LL_RCC_LSI1_IsReady+0x18>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <LL_RCC_LSI1_IsReady+0x1a>
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_RCC_LSI2_Enable>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_RCC_LSI2_Disable>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f90:	f023 0304 	bic.w	r3, r3, #4
 8002f94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_RCC_LSI2_IsReady>:
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d101      	bne.n	8002fba <LL_RCC_LSI2_IsReady+0x18>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <LL_RCC_LSI2_IsReady+0x1a>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_LSI2_SetTrimming>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_RCC_MSI_Enable>:
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_RCC_MSI_Disable>:
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6013      	str	r3, [r2, #0]
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_RCC_MSI_IsReady>:
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d101      	bne.n	8003046 <LL_RCC_MSI_IsReady+0x16>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <LL_RCC_MSI_IsReady+0x18>
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_RCC_MSI_SetRange>:
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800305a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003064:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_RCC_MSI_GetRange>:
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800308a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2bb0      	cmp	r3, #176	@ 0xb0
 8003090:	d901      	bls.n	8003096 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003092:	23b0      	movs	r3, #176	@ 0xb0
 8003094:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003096:	687b      	ldr	r3, [r7, #4]
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_RCC_SetSysClkSource>:
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80030d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f023 0203 	bic.w	r2, r3, #3
 80030e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_RCC_GetSysClkSource>:
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_RCC_SetAHBPrescaler>:
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003120:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003142:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003146:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800314a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <LL_RCC_SetAHB4Prescaler>:
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800316a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003172:	f023 020f 	bic.w	r2, r3, #15
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_RCC_SetAPB1Prescaler>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_RCC_SetAPB2Prescaler>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_RCC_GetAHBPrescaler>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_RCC_GetAHB4Prescaler>:
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80031fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003200:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003222:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003226:	6013      	str	r3, [r2, #0]
}
 8003228:	bf00      	nop
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003240:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003244:	6013      	str	r3, [r2, #0]
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003262:	d101      	bne.n	8003268 <LL_RCC_PLL_IsReady+0x18>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <LL_RCC_PLL_IsReady+0x1a>
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0303 	and.w	r3, r3, #3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e8:	d101      	bne.n	80032ee <LL_RCC_IsActiveFlag_HPRE+0x18>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80032fa:	b480      	push	{r7}
 80032fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80032fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003302:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800330e:	d101      	bne.n	8003314 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003328:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800332c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003334:	d101      	bne.n	800333a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003354:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003358:	d101      	bne.n	800335e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800336a:	b480      	push	{r7}
 800336c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800336e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003378:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800337c:	d101      	bne.n	8003382 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b08d      	sub	sp, #52	@ 0x34
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e324      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 808d 	beq.w	80034ca <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b0:	f7ff fea1 	bl	80030f6 <LL_RCC_GetSysClkSource>
 80033b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b6:	f7ff ff82 	bl	80032be <LL_RCC_PLL_GetMainSource>
 80033ba:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <HAL_RCC_OscConfig+0x3e>
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	2b0c      	cmp	r3, #12
 80033c6:	d147      	bne.n	8003458 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80033c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d144      	bne.n	8003458 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e308      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80033de:	f7ff fe4c 	bl	800307a <LL_RCC_MSI_GetRange>
 80033e2:	4603      	mov	r3, r0
 80033e4:	429c      	cmp	r4, r3
 80033e6:	d914      	bls.n	8003412 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fcc5 	bl	8003d7c <RCC_SetFlashLatencyFromMSIRange>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e2f7      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fe26 	bl	8003052 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fe4a 	bl	80030a4 <LL_RCC_MSI_SetCalibTrimming>
 8003410:	e013      	b.n	800343a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fe1b 	bl	8003052 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fe3f 	bl	80030a4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fca6 	bl	8003d7c <RCC_SetFlashLatencyFromMSIRange>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e2d8      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800343a:	f000 fc8b 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 800343e:	4603      	mov	r3, r0
 8003440:	4aa4      	ldr	r2, [pc, #656]	@ (80036d4 <HAL_RCC_OscConfig+0x344>)
 8003442:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003444:	4ba4      	ldr	r3, [pc, #656]	@ (80036d8 <HAL_RCC_OscConfig+0x348>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe fac9 	bl	80019e0 <HAL_InitTick>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d039      	beq.n	80034c8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e2c9      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01e      	beq.n	800349e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003460:	f7ff fdc8 	bl	8002ff4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003464:	f7fe fb0a 	bl	8001a7c <HAL_GetTick>
 8003468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800346c:	f7fe fb06 	bl	8001a7c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e2b6      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800347e:	f7ff fdd7 	bl	8003030 <LL_RCC_MSI_IsReady>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f1      	beq.n	800346c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fde0 	bl	8003052 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fe04 	bl	80030a4 <LL_RCC_MSI_SetCalibTrimming>
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800349e:	f7ff fdb8 	bl	8003012 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a2:	f7fe faeb 	bl	8001a7c <HAL_GetTick>
 80034a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034aa:	f7fe fae7 	bl	8001a7c <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e297      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80034bc:	f7ff fdb8 	bl	8003030 <LL_RCC_MSI_IsReady>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f1      	bne.n	80034aa <HAL_RCC_OscConfig+0x11a>
 80034c6:	e000      	b.n	80034ca <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80034c8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d047      	beq.n	8003566 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d6:	f7ff fe0e 	bl	80030f6 <LL_RCC_GetSysClkSource>
 80034da:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034dc:	f7ff feef 	bl	80032be <LL_RCC_PLL_GetMainSource>
 80034e0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_OscConfig+0x164>
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d108      	bne.n	8003500 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d105      	bne.n	8003500 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d134      	bne.n	8003566 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e275      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003508:	d102      	bne.n	8003510 <HAL_RCC_OscConfig+0x180>
 800350a:	f7ff fc29 	bl	8002d60 <LL_RCC_HSE_Enable>
 800350e:	e001      	b.n	8003514 <HAL_RCC_OscConfig+0x184>
 8003510:	f7ff fc35 	bl	8002d7e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d012      	beq.n	8003542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe faae 	bl	8001a7c <HAL_GetTick>
 8003520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003524:	f7fe faaa 	bl	8001a7c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	@ 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e25a      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003536:	f7ff fc31 	bl	8002d9c <LL_RCC_HSE_IsReady>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f1      	beq.n	8003524 <HAL_RCC_OscConfig+0x194>
 8003540:	e011      	b.n	8003566 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe fa9b 	bl	8001a7c <HAL_GetTick>
 8003546:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354a:	f7fe fa97 	bl	8001a7c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b64      	cmp	r3, #100	@ 0x64
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e247      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 800355c:	f7ff fc1e 	bl	8002d9c <LL_RCC_HSE_IsReady>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f1      	bne.n	800354a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d04c      	beq.n	800360c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003572:	f7ff fdc0 	bl	80030f6 <LL_RCC_GetSysClkSource>
 8003576:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003578:	f7ff fea1 	bl	80032be <LL_RCC_PLL_GetMainSource>
 800357c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b04      	cmp	r3, #4
 8003582:	d005      	beq.n	8003590 <HAL_RCC_OscConfig+0x200>
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d10e      	bne.n	80035a8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d10b      	bne.n	80035a8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e227      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fc3d 	bl	8002e20 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80035a6:	e031      	b.n	800360c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d019      	beq.n	80035e4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b0:	f7ff fc06 	bl	8002dc0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fa62 	bl	8001a7c <HAL_GetTick>
 80035b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035bc:	f7fe fa5e 	bl	8001a7c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e20e      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80035ce:	f7ff fc15 	bl	8002dfc <LL_RCC_HSI_IsReady>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f1      	beq.n	80035bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fc1f 	bl	8002e20 <LL_RCC_HSI_SetCalibTrimming>
 80035e2:	e013      	b.n	800360c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e4:	f7ff fbfb 	bl	8002dde <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fa48 	bl	8001a7c <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fe fa44 	bl	8001a7c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1f4      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003602:	f7ff fbfb 	bl	8002dfc <LL_RCC_HSI_IsReady>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f1      	bne.n	80035f0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80a3 	beq.w	800376c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d076      	beq.n	800371c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d046      	beq.n	80036c8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800363a:	f7ff fc7e 	bl	8002f3a <LL_RCC_LSI1_IsReady>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d113      	bne.n	800366c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003644:	f7ff fc57 	bl	8002ef6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003648:	f7fe fa18 	bl	8001a7c <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003650:	f7fe fa14 	bl	8001a7c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1c4      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003662:	f7ff fc6a 	bl	8002f3a <LL_RCC_LSI1_IsReady>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f1      	beq.n	8003650 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800366c:	f7ff fc77 	bl	8002f5e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe fa04 	bl	8001a7c <HAL_GetTick>
 8003674:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003678:	f7fe fa00 	bl	8001a7c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b03      	cmp	r3, #3
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e1b0      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800368a:	f7ff fc8a 	bl	8002fa2 <LL_RCC_LSI2_IsReady>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f1      	beq.n	8003678 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fc94 	bl	8002fc6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800369e:	f7ff fc3b 	bl	8002f18 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe f9eb 	bl	8001a7c <HAL_GetTick>
 80036a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036aa:	f7fe f9e7 	bl	8001a7c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e197      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80036bc:	f7ff fc3d 	bl	8002f3a <LL_RCC_LSI1_IsReady>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f1      	bne.n	80036aa <HAL_RCC_OscConfig+0x31a>
 80036c6:	e051      	b.n	800376c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80036c8:	f7ff fc15 	bl	8002ef6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe f9d6 	bl	8001a7c <HAL_GetTick>
 80036d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80036d2:	e00c      	b.n	80036ee <HAL_RCC_OscConfig+0x35e>
 80036d4:	20000014 	.word	0x20000014
 80036d8:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036dc:	f7fe f9ce 	bl	8001a7c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e17e      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80036ee:	f7ff fc24 	bl	8002f3a <LL_RCC_LSI1_IsReady>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f1      	beq.n	80036dc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80036f8:	f7ff fc42 	bl	8002f80 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036fe:	f7fe f9bd 	bl	8001a7c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b03      	cmp	r3, #3
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e16d      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003710:	f7ff fc47 	bl	8002fa2 <LL_RCC_LSI2_IsReady>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f1      	bne.n	80036fe <HAL_RCC_OscConfig+0x36e>
 800371a:	e027      	b.n	800376c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800371c:	f7ff fc30 	bl	8002f80 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe f9ac 	bl	8001a7c <HAL_GetTick>
 8003724:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003728:	f7fe f9a8 	bl	8001a7c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b03      	cmp	r3, #3
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e158      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800373a:	f7ff fc32 	bl	8002fa2 <LL_RCC_LSI2_IsReady>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f1      	bne.n	8003728 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003744:	f7ff fbe8 	bl	8002f18 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe f998 	bl	8001a7c <HAL_GetTick>
 800374c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003750:	f7fe f994 	bl	8001a7c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e144      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003762:	f7ff fbea 	bl	8002f3a <LL_RCC_LSI1_IsReady>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f1      	bne.n	8003750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d05b      	beq.n	8003830 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003778:	4b9e      	ldr	r3, [pc, #632]	@ (80039f4 <HAL_RCC_OscConfig+0x664>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d114      	bne.n	80037ae <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003784:	f7ff fab4 	bl	8002cf0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003788:	f7fe f978 	bl	8001a7c <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003790:	f7fe f974 	bl	8001a7c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e124      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a2:	4b94      	ldr	r3, [pc, #592]	@ (80039f4 <HAL_RCC_OscConfig+0x664>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d102      	bne.n	80037bc <HAL_RCC_OscConfig+0x42c>
 80037b6:	f7ff fb48 	bl	8002e4a <LL_RCC_LSE_Enable>
 80037ba:	e00c      	b.n	80037d6 <HAL_RCC_OscConfig+0x446>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d104      	bne.n	80037ce <HAL_RCC_OscConfig+0x43e>
 80037c4:	f7ff fb63 	bl	8002e8e <LL_RCC_LSE_EnableBypass>
 80037c8:	f7ff fb3f 	bl	8002e4a <LL_RCC_LSE_Enable>
 80037cc:	e003      	b.n	80037d6 <HAL_RCC_OscConfig+0x446>
 80037ce:	f7ff fb4d 	bl	8002e6c <LL_RCC_LSE_Disable>
 80037d2:	f7ff fb6d 	bl	8002eb0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d014      	beq.n	8003808 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7fe f94d 	bl	8001a7c <HAL_GetTick>
 80037e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fe f949 	bl	8001a7c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0f7      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037fc:	f7ff fb69 	bl	8002ed2 <LL_RCC_LSE_IsReady>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0ef      	beq.n	80037e6 <HAL_RCC_OscConfig+0x456>
 8003806:	e013      	b.n	8003830 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7fe f938 	bl	8001a7c <HAL_GetTick>
 800380c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800380e:	e00a      	b.n	8003826 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7fe f934 	bl	8001a7c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0e2      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003826:	f7ff fb54 	bl	8002ed2 <LL_RCC_LSE_IsReady>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1ef      	bne.n	8003810 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80d8 	beq.w	80039ea <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383a:	f7ff fc5c 	bl	80030f6 <LL_RCC_GetSysClkSource>
 800383e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	2b02      	cmp	r3, #2
 800384e:	f040 80a6 	bne.w	800399e <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0203 	and.w	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	429a      	cmp	r2, r3
 800385e:	d123      	bne.n	80038a8 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d11c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d114      	bne.n	80038a8 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d10d      	bne.n	80038a8 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d106      	bne.n	80038a8 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d054      	beq.n	8003952 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d04f      	beq.n	800394e <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038ae:	f7ff fcc0 	bl	8003232 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b2:	f7fe f8e3 	bl	8001a7c <HAL_GetTick>
 80038b6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fe f8df 	bl	8001a7c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e08f      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ef      	bne.n	80038ba <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	4b45      	ldr	r3, [pc, #276]	@ (80039f8 <HAL_RCC_OscConfig+0x668>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038ec:	4311      	orrs	r1, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038f2:	0212      	lsls	r2, r2, #8
 80038f4:	4311      	orrs	r1, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038fa:	4311      	orrs	r1, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003900:	4311      	orrs	r1, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003906:	430a      	orrs	r2, r1
 8003908:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800390c:	4313      	orrs	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003910:	f7ff fc80 	bl	8003214 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003924:	f7fe f8aa 	bl	8001a7c <HAL_GetTick>
 8003928:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fe f8a6 	bl	8001a7c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e056      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ef      	beq.n	800392c <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394c:	e04d      	b.n	80039ea <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e04c      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d144      	bne.n	80039ea <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003960:	f7ff fc58 	bl	8003214 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003974:	f7fe f882 	bl	8001a7c <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe f87e 	bl	8001a7c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e02e      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCC_OscConfig+0x5ec>
 800399c:	e025      	b.n	80039ea <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b0c      	cmp	r3, #12
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a4:	f7ff fc45 	bl	8003232 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe f868 	bl	8001a7c <HAL_GetTick>
 80039ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fe f864 	bl	8001a7c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e014      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ef      	bne.n	80039b0 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80039d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	60d3      	str	r3, [r2, #12]
 80039e4:	e001      	b.n	80039ea <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3734      	adds	r7, #52	@ 0x34
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd90      	pop	{r4, r7, pc}
 80039f4:	58000400 	.word	0x58000400
 80039f8:	11c1808c 	.word	0x11c1808c

080039fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e12d      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a10:	4b98      	ldr	r3, [pc, #608]	@ (8003c74 <HAL_RCC_ClockConfig+0x278>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d91b      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b95      	ldr	r3, [pc, #596]	@ (8003c74 <HAL_RCC_ClockConfig+0x278>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 0207 	bic.w	r2, r3, #7
 8003a26:	4993      	ldr	r1, [pc, #588]	@ (8003c74 <HAL_RCC_ClockConfig+0x278>)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2e:	f7fe f825 	bl	8001a7c <HAL_GetTick>
 8003a32:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a36:	f7fe f821 	bl	8001a7c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e111      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a48:	4b8a      	ldr	r3, [pc, #552]	@ (8003c74 <HAL_RCC_ClockConfig+0x278>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d1ef      	bne.n	8003a36 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d016      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fb51 	bl	800310e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a6c:	f7fe f806 	bl	8001a7c <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a74:	f7fe f802 	bl	8001a7c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e0f2      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a86:	f7ff fc26 	bl	80032d6 <LL_RCC_IsActiveFlag_HPRE>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f1      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d016      	beq.n	8003aca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fb48 	bl	8003136 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aa6:	f7fd ffe9 	bl	8001a7c <HAL_GetTick>
 8003aaa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003aae:	f7fd ffe5 	bl	8001a7c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e0d5      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ac0:	f7ff fc1b 	bl	80032fa <LL_RCC_IsActiveFlag_C2HPRE>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f1      	beq.n	8003aae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d016      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fb41 	bl	8003162 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ae0:	f7fd ffcc 	bl	8001a7c <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ae8:	f7fd ffc8 	bl	8001a7c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0b8      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003afa:	f7ff fc11 	bl	8003320 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f1      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d016      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fb3b 	bl	8003190 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b1a:	f7fd ffaf 	bl	8001a7c <HAL_GetTick>
 8003b1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b22:	f7fd ffab 	bl	8001a7c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e09b      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b34:	f7ff fc07 	bl	8003346 <LL_RCC_IsActiveFlag_PPRE1>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f1      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d017      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fb31 	bl	80031b8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b56:	f7fd ff91 	bl	8001a7c <HAL_GetTick>
 8003b5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b5e:	f7fd ff8d 	bl	8001a7c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e07d      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b70:	f7ff fbfb 	bl	800336a <LL_RCC_IsActiveFlag_PPRE2>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f1      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d043      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d106      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003b8e:	f7ff f905 	bl	8002d9c <LL_RCC_HSE_IsReady>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11e      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e067      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003ba4:	f7ff fb54 	bl	8003250 <LL_RCC_PLL_IsReady>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d113      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e05c      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003bba:	f7ff fa39 	bl	8003030 <LL_RCC_MSI_IsReady>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d108      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e051      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003bc8:	f7ff f918 	bl	8002dfc <LL_RCC_HSI_IsReady>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e04a      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fa77 	bl	80030ce <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be0:	f7fd ff4c 	bl	8001a7c <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be8:	f7fd ff48 	bl	8001a7c <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e036      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfe:	f7ff fa7a 	bl	80030f6 <LL_RCC_GetSysClkSource>
 8003c02:	4602      	mov	r2, r0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d1ec      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c0e:	4b19      	ldr	r3, [pc, #100]	@ (8003c74 <HAL_RCC_ClockConfig+0x278>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d21b      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1c:	4b15      	ldr	r3, [pc, #84]	@ (8003c74 <HAL_RCC_ClockConfig+0x278>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 0207 	bic.w	r2, r3, #7
 8003c24:	4913      	ldr	r1, [pc, #76]	@ (8003c74 <HAL_RCC_ClockConfig+0x278>)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c2c:	f7fd ff26 	bl	8001a7c <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c34:	f7fd ff22 	bl	8001a7c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e012      	b.n	8003c6c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <HAL_RCC_ClockConfig+0x278>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1ef      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c54:	f000 f87e 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4a07      	ldr	r2, [pc, #28]	@ (8003c78 <HAL_RCC_ClockConfig+0x27c>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003c5e:	f7fd ff19 	bl	8001a94 <HAL_GetTickPrio>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fd febb 	bl	80019e0 <HAL_InitTick>
 8003c6a:	4603      	mov	r3, r0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	58004000 	.word	0x58004000
 8003c78:	20000014 	.word	0x20000014

08003c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c82:	f7ff fa38 	bl	80030f6 <LL_RCC_GetSysClkSource>
 8003c86:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c8e:	f7ff f9f4 	bl	800307a <LL_RCC_MSI_GetRange>
 8003c92:	4603      	mov	r3, r0
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e04b      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d102      	bne.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003caa:	4b28      	ldr	r3, [pc, #160]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e045      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d10a      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cb6:	f7ff f841 	bl	8002d3c <LL_RCC_HSE_IsEnabledDiv2>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003cc0:	4b22      	ldr	r3, [pc, #136]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e03a      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003cc6:	4b22      	ldr	r3, [pc, #136]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e037      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003ccc:	f7ff faf7 	bl	80032be <LL_RCC_PLL_GetMainSource>
 8003cd0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d003      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x64>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x6a>
 8003cde:	e00d      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ce2:	60bb      	str	r3, [r7, #8]
        break;
 8003ce4:	e015      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003ce6:	f7ff f829 	bl	8002d3c <LL_RCC_HSE_IsEnabledDiv2>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d102      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003cf0:	4b16      	ldr	r3, [pc, #88]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cf2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003cf4:	e00d      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003cf6:	4b16      	ldr	r3, [pc, #88]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cf8:	60bb      	str	r3, [r7, #8]
        break;
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003cfc:	f7ff f9bd 	bl	800307a <LL_RCC_MSI_GetRange>
 8003d00:	4603      	mov	r3, r0
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	4a0f      	ldr	r2, [pc, #60]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0e:	60bb      	str	r3, [r7, #8]
        break;
 8003d10:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003d12:	f7ff faaf 	bl	8003274 <LL_RCC_PLL_GetN>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	fb03 f402 	mul.w	r4, r3, r2
 8003d1e:	f7ff fac2 	bl	80032a6 <LL_RCC_PLL_GetDivider>
 8003d22:	4603      	mov	r3, r0
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	3301      	adds	r3, #1
 8003d28:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d2c:	f7ff faaf 	bl	800328e <LL_RCC_PLL_GetR>
 8003d30:	4603      	mov	r3, r0
 8003d32:	0f5b      	lsrs	r3, r3, #29
 8003d34:	3301      	adds	r3, #1
 8003d36:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d3a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd90      	pop	{r4, r7, pc}
 8003d46:	bf00      	nop
 8003d48:	08007cfc 	.word	0x08007cfc
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	01e84800 	.word	0x01e84800

08003d54 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d54:	b598      	push	{r3, r4, r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d58:	f7ff ff90 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	f7ff fa3f 	bl	80031e0 <LL_RCC_GetAHBPrescaler>
 8003d62:	4603      	mov	r3, r0
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	4a03      	ldr	r2, [pc, #12]	@ (8003d78 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d70:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd98      	pop	{r3, r4, r7, pc}
 8003d78:	08007cbc 	.word	0x08007cbc

08003d7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2bb0      	cmp	r3, #176	@ 0xb0
 8003d88:	d903      	bls.n	8003d92 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003d8a:	4b14      	ldr	r3, [pc, #80]	@ (8003ddc <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e007      	b.n	8003da2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	4a10      	ldr	r2, [pc, #64]	@ (8003ddc <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003da2:	f7ff fa29 	bl	80031f8 <LL_RCC_GetAHB4Prescaler>
 8003da6:	4603      	mov	r3, r0
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	4a0c      	ldr	r2, [pc, #48]	@ (8003de0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dba:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a09      	ldr	r2, [pc, #36]	@ (8003de4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	0c9b      	lsrs	r3, r3, #18
 8003dc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f80c 	bl	8003de8 <RCC_SetFlashLatency>
 8003dd0:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	08007cfc 	.word	0x08007cfc
 8003de0:	08007cbc 	.word	0x08007cbc
 8003de4:	431bde83 	.word	0x431bde83

08003de8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b08f      	sub	sp, #60	@ 0x3c
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003df2:	4b24      	ldr	r3, [pc, #144]	@ (8003e84 <RCC_SetFlashLatency+0x9c>)
 8003df4:	f107 041c 	add.w	r4, r7, #28
 8003df8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003dfe:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <RCC_SetFlashLatency+0xa0>)
 8003e00:	f107 040c 	add.w	r4, r7, #12
 8003e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e12:	e013      	b.n	8003e3c <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	3338      	adds	r3, #56	@ 0x38
 8003e1a:	443b      	add	r3, r7
 8003e1c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d807      	bhi.n	8003e36 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	3338      	adds	r3, #56	@ 0x38
 8003e2c:	443b      	add	r3, r7
 8003e2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8003e34:	e005      	b.n	8003e42 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e38:	3301      	adds	r3, #1
 8003e3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d9e8      	bls.n	8003e14 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003e42:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <RCC_SetFlashLatency+0xa4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 0207 	bic.w	r2, r3, #7
 8003e4a:	4910      	ldr	r1, [pc, #64]	@ (8003e8c <RCC_SetFlashLatency+0xa4>)
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e52:	f7fd fe13 	bl	8001a7c <HAL_GetTick>
 8003e56:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e58:	e008      	b.n	8003e6c <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e5a:	f7fd fe0f 	bl	8001a7c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e007      	b.n	8003e7c <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e6c:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <RCC_SetFlashLatency+0xa4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d1ef      	bne.n	8003e5a <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	373c      	adds	r7, #60	@ 0x3c
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd90      	pop	{r4, r7, pc}
 8003e84:	08007b24 	.word	0x08007b24
 8003e88:	08007b34 	.word	0x08007b34
 8003e8c:	58004000 	.word	0x58004000

08003e90 <LL_RCC_LSE_IsEnabled>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <LL_RCC_LSE_IsEnabled+0x18>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <LL_RCC_LSE_IsEnabled+0x1a>
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_RCC_LSE_IsReady>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d101      	bne.n	8003ecc <LL_RCC_LSE_IsReady+0x18>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <LL_RCC_LSE_IsReady+0x1a>
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_RCC_SetRFWKPClockSource>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ee8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_RCC_SetUSARTClockSource>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f14:	f023 0203 	bic.w	r2, r3, #3
 8003f18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_RCC_SetI2CClockSource>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <LL_RCC_SetLPTIMClockSource>:
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f76:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	43db      	mvns	r3, r3
 8003f82:	401a      	ands	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_SetRNGClockSource>:
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003fb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_RCC_SetCLK48ClockSource>:
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <LL_RCC_SetADCClockSource>:
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004006:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800400a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <LL_RCC_SetRTCClockSource>:
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800402a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <LL_RCC_GetRTCClockSource>:
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_RCC_ForceBackupDomainReset>:
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800406c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004074:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_RCC_ReleaseBackupDomainReset>:
{
 800408a:	b480      	push	{r7}
 800408c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004096:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800409a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80040b4:	2300      	movs	r3, #0
 80040b6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040b8:	2300      	movs	r3, #0
 80040ba:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d046      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80040c8:	f7ff ffc1 	bl	800404e <LL_RCC_GetRTCClockSource>
 80040cc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d03c      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040d8:	f7fe fe0a 	bl	8002cf0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff ff9b 	bl	8004022 <LL_RCC_SetRTCClockSource>
 80040ec:	e02e      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80040f8:	f7ff ffb6 	bl	8004068 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80040fc:	f7ff ffc5 	bl	800408a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800410e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004118:	f7ff feba 	bl	8003e90 <LL_RCC_LSE_IsEnabled>
 800411c:	4603      	mov	r3, r0
 800411e:	2b01      	cmp	r3, #1
 8004120:	d114      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004122:	f7fd fcab 	bl	8001a7c <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004128:	e00b      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412a:	f7fd fca7 	bl	8001a7c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004138:	4293      	cmp	r3, r2
 800413a:	d902      	bls.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	77fb      	strb	r3, [r7, #31]
              break;
 8004140:	e004      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004142:	f7ff feb7 	bl	8003eb4 <LL_RCC_LSE_IsReady>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d1ee      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800414c:	7ffb      	ldrb	r3, [r7, #31]
 800414e:	77bb      	strb	r3, [r7, #30]
 8004150:	e001      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	7ffb      	ldrb	r3, [r7, #31]
 8004154:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d004      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fecc 	bl	8003f04 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fef4 	bl	8003f6a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fee9 	bl	8003f6a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fec1 	bl	8003f30 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d02b      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c2:	d008      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041cc:	d003      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fedf 	bl	8003f9e <LL_RCC_SetRNGClockSource>
 80041e0:	e00a      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	2000      	movs	r0, #0
 80041ee:	f7ff fed6 	bl	8003f9e <LL_RCC_SetRNGClockSource>
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7ff fee9 	bl	8003fca <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004200:	d107      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800420c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004210:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421a:	2b00      	cmp	r3, #0
 800421c:	d011      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fee7 	bl	8003ff6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004230:	d107      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800423c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004240:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fe40 	bl	8003ed8 <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004258:	7fbb      	ldrb	r3, [r7, #30]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e09f      	b.n	80043b6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd fa80 	bl	8001790 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004298:	4b49      	ldr	r3, [pc, #292]	@ (80043c0 <HAL_RTC_Init+0x15c>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d07e      	beq.n	80043a2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	22ca      	movs	r2, #202	@ 0xca
 80042aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2253      	movs	r2, #83	@ 0x53
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f8ab 	bl	8004410 <RTC_EnterInitMode>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	22ff      	movs	r2, #255	@ 0xff
 80042c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2204      	movs	r2, #4
 80042cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	e067      	b.n	80043a6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80042e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042e8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6899      	ldr	r1, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68d2      	ldr	r2, [r2, #12]
 8004310:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6919      	ldr	r1, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	041a      	lsls	r2, r3, #16
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004334:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0202 	bic.w	r2, r2, #2
 8004344:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d113      	bne.n	8004394 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f829 	bl	80043c4 <HAL_RTC_WaitForSynchro>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	22ff      	movs	r2, #255	@ 0xff
 800437e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2204      	movs	r2, #4
 8004384:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e010      	b.n	80043b6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	22ff      	movs	r2, #255	@ 0xff
 800439a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]
 80043a0:	e001      	b.n	80043a6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d103      	bne.n	80043b4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40002800 	.word	0x40002800

080043c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80043dc:	f7fd fb4e 	bl	8001a7c <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043e2:	e009      	b.n	80043f8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043e4:	f7fd fb4a 	bl	8001a7c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043f2:	d901      	bls.n	80043f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e007      	b.n	8004408 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0ee      	beq.n	80043e4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d119      	bne.n	800445a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800442e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004430:	f7fd fb24 	bl	8001a7c <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004436:	e009      	b.n	800444c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004438:	f7fd fb20 	bl	8001a7c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004446:	d901      	bls.n	800444c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e007      	b.n	800445c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0ee      	beq.n	8004438 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800447a:	2302      	movs	r3, #2
 800447c:	e0a8      	b.n	80045d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	22ca      	movs	r2, #202	@ 0xca
 8004494:	625a      	str	r2, [r3, #36]	@ 0x24
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2253      	movs	r2, #83	@ 0x53
 800449c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80044ac:	f7fd fae6 	bl	8001a7c <HAL_GetTick>
 80044b0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80044b2:	e015      	b.n	80044e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044b4:	f7fd fae2 	bl	8001a7c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044c2:	d90d      	bls.n	80044e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	22ff      	movs	r2, #255	@ 0xff
 80044ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2203      	movs	r2, #3
 80044d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e077      	b.n	80045d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e2      	bne.n	80044b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800450e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004510:	f7fd fab4 	bl	8001a7c <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004516:	e015      	b.n	8004544 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004518:	f7fd fab0 	bl	8001a7c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004526:	d90d      	bls.n	8004544 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	22ff      	movs	r2, #255	@ 0xff
 800452e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2203      	movs	r2, #3
 8004534:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e045      	b.n	80045d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0e2      	beq.n	8004518 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0207 	bic.w	r2, r2, #7
 8004568:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6899      	ldr	r1, [r3, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	430a      	orrs	r2, r1
 8004578:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800457a:	4b17      	ldr	r3, [pc, #92]	@ (80045d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800457c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004580:	4a15      	ldr	r2, [pc, #84]	@ (80045d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004582:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004586:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800458a:	4b13      	ldr	r3, [pc, #76]	@ (80045d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a12      	ldr	r2, [pc, #72]	@ (80045d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004590:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004594:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045a4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045b4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	22ff      	movs	r2, #255	@ 0xff
 80045bc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	58000800 	.word	0x58000800

080045dc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80045e6:	f107 0308 	add.w	r3, r7, #8
 80045ea:	2218      	movs	r2, #24
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 f92d 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 80045f4:	233f      	movs	r3, #63	@ 0x3f
 80045f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80045f8:	2381      	movs	r3, #129	@ 0x81
 80045fa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004600:	2301      	movs	r3, #1
 8004602:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004604:	f107 0308 	add.w	r3, r7, #8
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f001 fba8 	bl	8005d60 <hci_send_req>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	da01      	bge.n	800461a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004616:	23ff      	movs	r3, #255	@ 0xff
 8004618:	e000      	b.n	800461c <aci_gap_set_non_discoverable+0x40>
  return status;
 800461a:	79fb      	ldrb	r3, [r7, #7]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8004624:	b5b0      	push	{r4, r5, r7, lr}
 8004626:	b0ce      	sub	sp, #312	@ 0x138
 8004628:	af00      	add	r7, sp, #0
 800462a:	4605      	mov	r5, r0
 800462c:	460c      	mov	r4, r1
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004636:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800463a:	462a      	mov	r2, r5
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004642:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004646:	4622      	mov	r2, r4
 8004648:	801a      	strh	r2, [r3, #0]
 800464a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800464e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8004652:	4602      	mov	r2, r0
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800465a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800465e:	460a      	mov	r2, r1
 8004660:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004662:	f107 0310 	add.w	r3, r7, #16
 8004666:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800466a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800466e:	3308      	adds	r3, #8
 8004670:	f107 0210 	add.w	r2, r7, #16
 8004674:	4413      	add	r3, r2
 8004676:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800467a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800467e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004682:	4413      	add	r3, r2
 8004684:	3309      	adds	r3, #9
 8004686:	f107 0210 	add.w	r2, r7, #16
 800468a:	4413      	add	r3, r2
 800468c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004690:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004694:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80046a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046a6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80046aa:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80046ae:	7812      	ldrb	r2, [r2, #0]
 80046b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80046b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80046b6:	3301      	adds	r3, #1
 80046b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80046bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046c0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80046c4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80046c8:	8812      	ldrh	r2, [r2, #0]
 80046ca:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80046ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80046d2:	3302      	adds	r3, #2
 80046d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80046d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046dc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80046e0:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80046e4:	8812      	ldrh	r2, [r2, #0]
 80046e6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80046ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80046ee:	3302      	adds	r3, #2
 80046f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80046f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80046fc:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004704:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004708:	3301      	adds	r3, #1
 800470a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800470e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004712:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8004716:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004718:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800471c:	3301      	adds	r3, #1
 800471e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8004722:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004726:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800472a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800472c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004730:	3301      	adds	r3, #1
 8004732:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8004736:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800473a:	3308      	adds	r3, #8
 800473c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004740:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8004744:	4618      	mov	r0, r3
 8004746:	f001 f872 	bl	800582e <Osal_MemCpy>
    index_input += Local_Name_Length;
 800474a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800474e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004752:	4413      	add	r3, r2
 8004754:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8004758:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800475c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8004760:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004762:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004766:	3301      	adds	r3, #1
 8004768:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800476c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004770:	3301      	adds	r3, #1
 8004772:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8004776:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800477a:	4618      	mov	r0, r3
 800477c:	f001 f857 	bl	800582e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004780:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004784:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004788:	4413      	add	r3, r2
 800478a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800478e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004792:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8004796:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004798:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800479c:	3302      	adds	r3, #2
 800479e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80047a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80047a6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80047aa:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80047ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80047b0:	3302      	adds	r3, #2
 80047b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80047b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047ba:	2218      	movs	r2, #24
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 f845 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 80047c4:	233f      	movs	r3, #63	@ 0x3f
 80047c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80047ca:	2383      	movs	r3, #131	@ 0x83
 80047cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80047d0:	f107 0310 	add.w	r3, r7, #16
 80047d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80047d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80047dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80047e0:	f107 030f 	add.w	r3, r7, #15
 80047e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80047ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 fab3 	bl	8005d60 <hci_send_req>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	da01      	bge.n	8004804 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8004800:	23ff      	movs	r3, #255	@ 0xff
 8004802:	e004      	b.n	800480e <aci_gap_set_discoverable+0x1ea>
  return status;
 8004804:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004808:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800480c:	781b      	ldrb	r3, [r3, #0]
}
 800480e:	4618      	mov	r0, r3
 8004810:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004814:	46bd      	mov	sp, r7
 8004816:	bdb0      	pop	{r4, r5, r7, pc}

08004818 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b0cc      	sub	sp, #304	@ 0x130
 800481c:	af00      	add	r7, sp, #0
 800481e:	4602      	mov	r2, r0
 8004820:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004824:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004828:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800482a:	f107 0310 	add.w	r3, r7, #16
 800482e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004832:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004836:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8004844:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004848:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800484c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004854:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004858:	3301      	adds	r3, #1
 800485a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800485e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004862:	2218      	movs	r2, #24
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fff1 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 800486c:	233f      	movs	r3, #63	@ 0x3f
 800486e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8004872:	2385      	movs	r3, #133	@ 0x85
 8004874:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004878:	f107 0310 	add.w	r3, r7, #16
 800487c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004880:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004884:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004888:	f107 030f 	add.w	r3, r7, #15
 800488c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004890:	2301      	movs	r3, #1
 8004892:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004896:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f001 fa5f 	bl	8005d60 <hci_send_req>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	da01      	bge.n	80048ac <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80048a8:	23ff      	movs	r3, #255	@ 0xff
 80048aa:	e004      	b.n	80048b6 <aci_gap_set_io_capability+0x9e>
  return status;
 80048ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80048b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80048b4:	781b      	ldrb	r3, [r3, #0]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80048c0:	b5b0      	push	{r4, r5, r7, lr}
 80048c2:	b0cc      	sub	sp, #304	@ 0x130
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4605      	mov	r5, r0
 80048c8:	460c      	mov	r4, r1
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80048d2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80048d6:	462a      	mov	r2, r5
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80048de:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80048e2:	4622      	mov	r2, r4
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80048ea:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80048ee:	4602      	mov	r2, r0
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80048f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80048fa:	460a      	mov	r2, r1
 80048fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80048fe:	f107 0310 	add.w	r3, r7, #16
 8004902:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004906:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800490a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8004918:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800491c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004920:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004928:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800492c:	3301      	adds	r3, #1
 800492e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8004932:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004936:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800493a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004942:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004946:	3301      	adds	r3, #1
 8004948:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800494c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004950:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004954:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800495c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004960:	3301      	adds	r3, #1
 8004962:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8004966:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800496a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800496e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004972:	7812      	ldrb	r2, [r2, #0]
 8004974:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8004976:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800497a:	3301      	adds	r3, #1
 800497c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8004980:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004984:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8004988:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800498a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800498e:	3301      	adds	r3, #1
 8004990:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8004994:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004998:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800499c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800499e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80049a2:	3301      	adds	r3, #1
 80049a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80049a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80049ac:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80049b0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80049b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80049b6:	3301      	adds	r3, #1
 80049b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80049bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80049c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80049c4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80049c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80049cc:	3304      	adds	r3, #4
 80049ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80049d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80049d6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80049da:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80049dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80049e0:	3301      	adds	r3, #1
 80049e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80049e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049ea:	2218      	movs	r2, #24
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 ff2d 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 80049f4:	233f      	movs	r3, #63	@ 0x3f
 80049f6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80049fa:	2386      	movs	r3, #134	@ 0x86
 80049fc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004a08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004a0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004a10:	f107 030f 	add.w	r3, r7, #15
 8004a14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 f99b 	bl	8005d60 <hci_send_req>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	da01      	bge.n	8004a34 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8004a30:	23ff      	movs	r3, #255	@ 0xff
 8004a32:	e004      	b.n	8004a3e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8004a34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004a38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004a3c:	781b      	ldrb	r3, [r3, #0]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bdb0      	pop	{r4, r5, r7, pc}

08004a48 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b0cc      	sub	sp, #304	@ 0x130
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4602      	mov	r2, r0
 8004a50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004a54:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004a58:	6019      	str	r1, [r3, #0]
 8004a5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004a5e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004a62:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8004a64:	f107 0310 	add.w	r3, r7, #16
 8004a68:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004a6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004a70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004a82:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004a86:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004a92:	3302      	adds	r3, #2
 8004a94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8004a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004a9c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004aa0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8004aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004aae:	3304      	adds	r3, #4
 8004ab0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004ab4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ab8:	2218      	movs	r2, #24
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fec6 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ac2:	233f      	movs	r3, #63	@ 0x3f
 8004ac4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8004ac8:	2388      	movs	r3, #136	@ 0x88
 8004aca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004ace:	f107 0310 	add.w	r3, r7, #16
 8004ad2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004ada:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004ade:	f107 030f 	add.w	r3, r7, #15
 8004ae2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004aec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f001 f934 	bl	8005d60 <hci_send_req>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	da01      	bge.n	8004b02 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8004afe:	23ff      	movs	r3, #255	@ 0xff
 8004b00:	e004      	b.n	8004b0c <aci_gap_pass_key_resp+0xc4>
  return status;
 8004b02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004b06:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004b0a:	781b      	ldrb	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004b16:	b590      	push	{r4, r7, lr}
 8004b18:	b0cd      	sub	sp, #308	@ 0x134
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	4608      	mov	r0, r1
 8004b20:	4611      	mov	r1, r2
 8004b22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004b26:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004b30:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004b34:	4622      	mov	r2, r4
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004b3c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004b40:	4602      	mov	r2, r0
 8004b42:	701a      	strb	r2, [r3, #0]
 8004b44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004b48:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8004b4c:	460a      	mov	r2, r1
 8004b4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004b50:	f107 0310 	add.w	r3, r7, #16
 8004b54:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004b58:	f107 0308 	add.w	r3, r7, #8
 8004b5c:	2207      	movs	r2, #7
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fe74 	bl	800584e <Osal_MemSet>
  int index_input = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8004b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b70:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004b74:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004b78:	7812      	ldrb	r2, [r2, #0]
 8004b7a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004b80:	3301      	adds	r3, #1
 8004b82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b8a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004b8e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004b92:	7812      	ldrb	r2, [r2, #0]
 8004b94:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004b96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004ba4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004ba8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8004bac:	7812      	ldrb	r2, [r2, #0]
 8004bae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004bba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004bbe:	2218      	movs	r2, #24
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fe43 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004bc8:	233f      	movs	r3, #63	@ 0x3f
 8004bca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8004bce:	238a      	movs	r3, #138	@ 0x8a
 8004bd0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004bd4:	f107 0310 	add.w	r3, r7, #16
 8004bd8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004bdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004be0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8004be4:	f107 0308 	add.w	r3, r7, #8
 8004be8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8004bec:	2307      	movs	r3, #7
 8004bee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004bf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 f8b1 	bl	8005d60 <hci_send_req>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	da01      	bge.n	8004c08 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004c04:	23ff      	movs	r3, #255	@ 0xff
 8004c06:	e02e      	b.n	8004c66 <aci_gap_init+0x150>
  if ( resp.Status )
 8004c08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c0c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <aci_gap_init+0x10c>
    return resp.Status;
 8004c16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c1a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	e021      	b.n	8004c66 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8004c22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004c2a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c34:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004c3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c40:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004c44:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004c4e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004c50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c54:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004c58:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c62:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd90      	pop	{r4, r7, pc}

08004c70 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b0cc      	sub	sp, #304	@ 0x130
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4602      	mov	r2, r0
 8004c78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c7c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004c80:	6019      	str	r1, [r3, #0]
 8004c82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c86:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004c8a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004c8c:	f107 0310 	add.w	r3, r7, #16
 8004c90:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004c94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c98:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004caa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004cae:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004cb2:	7812      	ldrb	r2, [r2, #0]
 8004cb4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004cb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004cc4:	1c58      	adds	r0, r3, #1
 8004cc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004cca:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004cce:	781a      	ldrb	r2, [r3, #0]
 8004cd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004cd4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004cd8:	6819      	ldr	r1, [r3, #0]
 8004cda:	f000 fda8 	bl	800582e <Osal_MemCpy>
  index_input += AdvDataLen;
 8004cde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ce2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004cec:	4413      	add	r3, r2
 8004cee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004cf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cf6:	2218      	movs	r2, #24
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fda7 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d00:	233f      	movs	r3, #63	@ 0x3f
 8004d02:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8004d06:	238e      	movs	r3, #142	@ 0x8e
 8004d08:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004d0c:	f107 0310 	add.w	r3, r7, #16
 8004d10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004d14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004d1c:	f107 030f 	add.w	r3, r7, #15
 8004d20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004d24:	2301      	movs	r3, #1
 8004d26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 f815 	bl	8005d60 <hci_send_req>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da01      	bge.n	8004d40 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004d3c:	23ff      	movs	r3, #255	@ 0xff
 8004d3e:	e004      	b.n	8004d4a <aci_gap_update_adv_data+0xda>
  return status;
 8004d40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004d44:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004d48:	781b      	ldrb	r3, [r3, #0]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	2218      	movs	r2, #24
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fd71 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d6c:	233f      	movs	r3, #63	@ 0x3f
 8004d6e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8004d70:	2392      	movs	r3, #146	@ 0x92
 8004d72:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004d74:	1dfb      	adds	r3, r7, #7
 8004d76:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d7c:	f107 0308 	add.w	r3, r7, #8
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 ffec 	bl	8005d60 <hci_send_req>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	da01      	bge.n	8004d92 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004d8e:	23ff      	movs	r3, #255	@ 0xff
 8004d90:	e000      	b.n	8004d94 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8004d92:	79fb      	ldrb	r3, [r7, #7]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b0cc      	sub	sp, #304	@ 0x130
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4602      	mov	r2, r0
 8004da4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004da8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004dac:	801a      	strh	r2, [r3, #0]
 8004dae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004db2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8004db6:	460a      	mov	r2, r1
 8004db8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8004dba:	f107 0310 	add.w	r3, r7, #16
 8004dbe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004dc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004dc6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004dd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004ddc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004de0:	8812      	ldrh	r2, [r2, #0]
 8004de2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004de8:	3302      	adds	r3, #2
 8004dea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8004dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004df2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004df6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004e02:	3301      	adds	r3, #1
 8004e04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004e08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e0c:	2218      	movs	r2, #24
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fd1c 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e16:	233f      	movs	r3, #63	@ 0x3f
 8004e18:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8004e1c:	23a5      	movs	r3, #165	@ 0xa5
 8004e1e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004e22:	f107 0310 	add.w	r3, r7, #16
 8004e26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004e2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004e32:	f107 030f 	add.w	r3, r7, #15
 8004e36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 ff8a 	bl	8005d60 <hci_send_req>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	da01      	bge.n	8004e56 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8004e52:	23ff      	movs	r3, #255	@ 0xff
 8004e54:	e004      	b.n	8004e60 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8004e56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004e5a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004e5e:	781b      	ldrb	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b088      	sub	sp, #32
 8004e6e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004e74:	f107 0308 	add.w	r3, r7, #8
 8004e78:	2218      	movs	r2, #24
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fce6 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e82:	233f      	movs	r3, #63	@ 0x3f
 8004e84:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004e86:	f240 1301 	movw	r3, #257	@ 0x101
 8004e8a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004e8c:	1dfb      	adds	r3, r7, #7
 8004e8e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004e90:	2301      	movs	r3, #1
 8004e92:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e94:	f107 0308 	add.w	r3, r7, #8
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 ff60 	bl	8005d60 <hci_send_req>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	da01      	bge.n	8004eaa <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004ea6:	23ff      	movs	r3, #255	@ 0xff
 8004ea8:	e000      	b.n	8004eac <aci_gatt_init+0x42>
  return status;
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b0cf      	sub	sp, #316	@ 0x13c
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8004ec0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8004ec4:	6001      	str	r1, [r0, #0]
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004ece:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004eda:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004ede:	4602      	mov	r2, r0
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004ee6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004eea:	460a      	mov	r2, r1
 8004eec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8004eee:	f107 0310 	add.w	r3, r7, #16
 8004ef2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004ef6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004efa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d00a      	beq.n	8004f1a <aci_gatt_add_service+0x66>
 8004f04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f08:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d101      	bne.n	8004f16 <aci_gatt_add_service+0x62>
 8004f12:	2311      	movs	r3, #17
 8004f14:	e002      	b.n	8004f1c <aci_gatt_add_service+0x68>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <aci_gatt_add_service+0x68>
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	f107 0210 	add.w	r2, r7, #16
 8004f20:	4413      	add	r3, r2
 8004f22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004f26:	f107 030c 	add.w	r3, r7, #12
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fc8d 	bl	800584e <Osal_MemSet>
  int index_input = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8004f3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004f3e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004f42:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004f4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004f4e:	3301      	adds	r3, #1
 8004f50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8004f54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f58:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d002      	beq.n	8004f68 <aci_gatt_add_service+0xb4>
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d004      	beq.n	8004f70 <aci_gatt_add_service+0xbc>
 8004f66:	e007      	b.n	8004f78 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8004f6e:	e005      	b.n	8004f7c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8004f76:	e001      	b.n	8004f7c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8004f78:	2397      	movs	r3, #151	@ 0x97
 8004f7a:	e06c      	b.n	8005056 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004f7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004f80:	1c58      	adds	r0, r3, #1
 8004f82:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8004f86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f8a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004f8e:	6819      	ldr	r1, [r3, #0]
 8004f90:	f000 fc4d 	bl	800582e <Osal_MemCpy>
    index_input += size;
 8004f94:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8004f98:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8004fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004fa6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004faa:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004fae:	7812      	ldrb	r2, [r2, #0]
 8004fb0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004fb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8004fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004fc0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004fc4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8004fc8:	7812      	ldrb	r2, [r2, #0]
 8004fca:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fda:	2218      	movs	r2, #24
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fc35 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004fe4:	233f      	movs	r3, #63	@ 0x3f
 8004fe6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8004fea:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004fee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004ff2:	f107 0310 	add.w	r3, r7, #16
 8004ff6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004ffa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004ffe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800500a:	2303      	movs	r3, #3
 800500c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005010:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fea2 	bl	8005d60 <hci_send_req>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	da01      	bge.n	8005026 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005022:	23ff      	movs	r3, #255	@ 0xff
 8005024:	e017      	b.n	8005056 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005026:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800502a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005034:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005038:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	e00a      	b.n	8005056 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005040:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005044:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005048:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800504c:	b29a      	uxth	r2, r3
 800504e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005052:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800505c:	46bd      	mov	sp, r7
 800505e:	bd90      	pop	{r4, r7, pc}

08005060 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005060:	b590      	push	{r4, r7, lr}
 8005062:	b0d1      	sub	sp, #324	@ 0x144
 8005064:	af00      	add	r7, sp, #0
 8005066:	4604      	mov	r4, r0
 8005068:	4608      	mov	r0, r1
 800506a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800506e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8005072:	600a      	str	r2, [r1, #0]
 8005074:	4619      	mov	r1, r3
 8005076:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800507a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800507e:	4622      	mov	r2, r4
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005086:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800508a:	4602      	mov	r2, r0
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005092:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8005096:	460a      	mov	r2, r1
 8005098:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800509a:	f107 0318 	add.w	r3, r7, #24
 800509e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80050a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80050a6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d00a      	beq.n	80050c6 <aci_gatt_add_char+0x66>
 80050b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80050b4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d101      	bne.n	80050c2 <aci_gatt_add_char+0x62>
 80050be:	2313      	movs	r3, #19
 80050c0:	e002      	b.n	80050c8 <aci_gatt_add_char+0x68>
 80050c2:	2303      	movs	r3, #3
 80050c4:	e000      	b.n	80050c8 <aci_gatt_add_char+0x68>
 80050c6:	2305      	movs	r3, #5
 80050c8:	f107 0218 	add.w	r2, r7, #24
 80050cc:	4413      	add	r3, r2
 80050ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80050d2:	f107 0314 	add.w	r3, r7, #20
 80050d6:	2203      	movs	r2, #3
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fbb7 	bl	800584e <Osal_MemSet>
  int index_input = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80050e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80050ea:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80050ee:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80050f2:	8812      	ldrh	r2, [r2, #0]
 80050f4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80050f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80050fa:	3302      	adds	r3, #2
 80050fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005100:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005104:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005108:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800510c:	7812      	ldrb	r2, [r2, #0]
 800510e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005110:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005114:	3301      	adds	r3, #1
 8005116:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800511a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800511e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d002      	beq.n	800512e <aci_gatt_add_char+0xce>
 8005128:	2b02      	cmp	r3, #2
 800512a:	d004      	beq.n	8005136 <aci_gatt_add_char+0xd6>
 800512c:	e007      	b.n	800513e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800512e:	2302      	movs	r3, #2
 8005130:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005134:	e005      	b.n	8005142 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005136:	2310      	movs	r3, #16
 8005138:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800513c:	e001      	b.n	8005142 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800513e:	2397      	movs	r3, #151	@ 0x97
 8005140:	e091      	b.n	8005266 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005142:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005146:	1cd8      	adds	r0, r3, #3
 8005148:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800514c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005150:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005154:	6819      	ldr	r1, [r3, #0]
 8005156:	f000 fb6a 	bl	800582e <Osal_MemCpy>
    index_input += size;
 800515a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800515e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005162:	4413      	add	r3, r2
 8005164:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005168:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800516c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005170:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005174:	8812      	ldrh	r2, [r2, #0]
 8005176:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005178:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800517c:	3302      	adds	r3, #2
 800517e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005182:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005186:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800518a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800518c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005190:	3301      	adds	r3, #1
 8005192:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005196:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800519a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800519e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80051a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80051a4:	3301      	adds	r3, #1
 80051a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80051aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80051ae:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80051b2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80051b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80051b8:	3301      	adds	r3, #1
 80051ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80051be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80051c2:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80051c6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80051c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80051cc:	3301      	adds	r3, #1
 80051ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80051d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80051d6:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80051da:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80051dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80051e0:	3301      	adds	r3, #1
 80051e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80051ea:	2218      	movs	r2, #24
 80051ec:	2100      	movs	r1, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fb2d 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 80051f4:	233f      	movs	r3, #63	@ 0x3f
 80051f6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80051fa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80051fe:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8005202:	f107 0318 	add.w	r3, r7, #24
 8005206:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800520a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800520e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8005212:	f107 0314 	add.w	r3, r7, #20
 8005216:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800521a:	2303      	movs	r3, #3
 800521c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005220:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005224:	2100      	movs	r1, #0
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fd9a 	bl	8005d60 <hci_send_req>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	da01      	bge.n	8005236 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8005232:	23ff      	movs	r3, #255	@ 0xff
 8005234:	e017      	b.n	8005266 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8005236:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800523a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8005244:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005248:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	e00a      	b.n	8005266 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8005250:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005254:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005258:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800525c:	b29a      	uxth	r2, r3
 800525e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005262:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800526c:	46bd      	mov	sp, r7
 800526e:	bd90      	pop	{r4, r7, pc}

08005270 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8005270:	b5b0      	push	{r4, r5, r7, lr}
 8005272:	b0cc      	sub	sp, #304	@ 0x130
 8005274:	af00      	add	r7, sp, #0
 8005276:	4605      	mov	r5, r0
 8005278:	460c      	mov	r4, r1
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005282:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005286:	462a      	mov	r2, r5
 8005288:	801a      	strh	r2, [r3, #0]
 800528a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800528e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005292:	4622      	mov	r2, r4
 8005294:	801a      	strh	r2, [r3, #0]
 8005296:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800529a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800529e:	4602      	mov	r2, r0
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80052a6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80052aa:	460a      	mov	r2, r1
 80052ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80052ae:	f107 0310 	add.w	r3, r7, #16
 80052b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80052b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80052ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80052c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80052cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80052d0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80052d4:	8812      	ldrh	r2, [r2, #0]
 80052d6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80052d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052dc:	3302      	adds	r3, #2
 80052de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80052e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80052e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80052ea:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80052ee:	8812      	ldrh	r2, [r2, #0]
 80052f0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80052f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052f6:	3302      	adds	r3, #2
 80052f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80052fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005300:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005304:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8005308:	7812      	ldrb	r2, [r2, #0]
 800530a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800530c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005310:	3301      	adds	r3, #1
 8005312:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005316:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800531a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800531e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8005322:	7812      	ldrb	r2, [r2, #0]
 8005324:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005326:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800532a:	3301      	adds	r3, #1
 800532c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8005330:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005334:	1d98      	adds	r0, r3, #6
 8005336:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800533a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005346:	f000 fa72 	bl	800582e <Osal_MemCpy>
  index_input += Char_Value_Length;
 800534a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800534e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005358:	4413      	add	r3, r2
 800535a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800535e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005362:	2218      	movs	r2, #24
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fa71 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 800536c:	233f      	movs	r3, #63	@ 0x3f
 800536e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8005372:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8005376:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800537a:	f107 0310 	add.w	r3, r7, #16
 800537e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005382:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005386:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800538a:	f107 030f 	add.w	r3, r7, #15
 800538e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005392:	2301      	movs	r3, #1
 8005394:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005398:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fcde 	bl	8005d60 <hci_send_req>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	da01      	bge.n	80053ae <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80053aa:	23ff      	movs	r3, #255	@ 0xff
 80053ac:	e004      	b.n	80053b8 <aci_gatt_update_char_value+0x148>
  return status;
 80053ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053b2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80053b6:	781b      	ldrb	r3, [r3, #0]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80053be:	46bd      	mov	sp, r7
 80053c0:	bdb0      	pop	{r4, r5, r7, pc}

080053c2 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b0cc      	sub	sp, #304	@ 0x130
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	4602      	mov	r2, r0
 80053ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053ce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80053d2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80053d4:	f107 0310 	add.w	r3, r7, #16
 80053d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80053dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80053ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80053f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80053f6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80053fa:	8812      	ldrh	r2, [r2, #0]
 80053fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80053fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005402:	3302      	adds	r3, #2
 8005404:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005408:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800540c:	2218      	movs	r2, #24
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fa1c 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 8005416:	233f      	movs	r3, #63	@ 0x3f
 8005418:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800541c:	f240 1325 	movw	r3, #293	@ 0x125
 8005420:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005424:	f107 0310 	add.w	r3, r7, #16
 8005428:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800542c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005430:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005434:	f107 030f 	add.w	r3, r7, #15
 8005438:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800543c:	2301      	movs	r3, #1
 800543e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005442:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fc89 	bl	8005d60 <hci_send_req>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	da01      	bge.n	8005458 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8005454:	23ff      	movs	r3, #255	@ 0xff
 8005456:	e004      	b.n	8005462 <aci_gatt_confirm_indication+0xa0>
  return status;
 8005458:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800545c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005460:	781b      	ldrb	r3, [r3, #0]
}
 8005462:	4618      	mov	r0, r3
 8005464:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b0cc      	sub	sp, #304	@ 0x130
 8005470:	af00      	add	r7, sp, #0
 8005472:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005476:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005480:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005484:	4602      	mov	r2, r0
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800548c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005490:	460a      	mov	r2, r1
 8005492:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8005494:	f107 0310 	add.w	r3, r7, #16
 8005498:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800549c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80054ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80054b6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80054ba:	7812      	ldrb	r2, [r2, #0]
 80054bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80054be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054c2:	3301      	adds	r3, #1
 80054c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80054c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80054d0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80054d4:	7812      	ldrb	r2, [r2, #0]
 80054d6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80054d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054dc:	3301      	adds	r3, #1
 80054de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80054e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054e6:	1c98      	adds	r0, r3, #2
 80054e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054ec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80054f0:	781a      	ldrb	r2, [r3, #0]
 80054f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80054fa:	6819      	ldr	r1, [r3, #0]
 80054fc:	f000 f997 	bl	800582e <Osal_MemCpy>
  index_input += Length;
 8005500:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005504:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800550e:	4413      	add	r3, r2
 8005510:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005514:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005518:	2218      	movs	r2, #24
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f996 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 8005522:	233f      	movs	r3, #63	@ 0x3f
 8005524:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8005528:	230c      	movs	r3, #12
 800552a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005536:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800553a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800553e:	f107 030f 	add.w	r3, r7, #15
 8005542:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005546:	2301      	movs	r3, #1
 8005548:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800554c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005550:	2100      	movs	r1, #0
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fc04 	bl	8005d60 <hci_send_req>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	da01      	bge.n	8005562 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800555e:	23ff      	movs	r3, #255	@ 0xff
 8005560:	e004      	b.n	800556c <aci_hal_write_config_data+0x100>
  return status;
 8005562:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005566:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800556a:	781b      	ldrb	r3, [r3, #0]
}
 800556c:	4618      	mov	r0, r3
 800556e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b0cc      	sub	sp, #304	@ 0x130
 800557a:	af00      	add	r7, sp, #0
 800557c:	4602      	mov	r2, r0
 800557e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005582:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800558c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005590:	460a      	mov	r2, r1
 8005592:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8005594:	f107 0310 	add.w	r3, r7, #16
 8005598:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800559c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80055ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80055b6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80055ba:	7812      	ldrb	r2, [r2, #0]
 80055bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80055be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055c2:	3301      	adds	r3, #1
 80055c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80055c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80055d0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80055d4:	7812      	ldrb	r2, [r2, #0]
 80055d6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80055d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055dc:	3301      	adds	r3, #1
 80055de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80055e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055e6:	2218      	movs	r2, #24
 80055e8:	2100      	movs	r1, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f92f 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 80055f0:	233f      	movs	r3, #63	@ 0x3f
 80055f2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80055f6:	230f      	movs	r3, #15
 80055f8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80055fc:	f107 0310 	add.w	r3, r7, #16
 8005600:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005604:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005608:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800560c:	f107 030f 	add.w	r3, r7, #15
 8005610:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005614:	2301      	movs	r3, #1
 8005616:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800561a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fb9d 	bl	8005d60 <hci_send_req>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	da01      	bge.n	8005630 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800562c:	23ff      	movs	r3, #255	@ 0xff
 800562e:	e004      	b.n	800563a <aci_hal_set_tx_power_level+0xc4>
  return status;
 8005630:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005634:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005638:	781b      	ldrb	r3, [r3, #0]
}
 800563a:	4618      	mov	r0, r3
 800563c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b0cc      	sub	sp, #304	@ 0x130
 8005648:	af00      	add	r7, sp, #0
 800564a:	4602      	mov	r2, r0
 800564c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005650:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005654:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8005656:	f107 0310 	add.w	r3, r7, #16
 800565a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800565e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005662:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8005670:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005674:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005678:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800567c:	8812      	ldrh	r2, [r2, #0]
 800567e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005680:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005684:	3302      	adds	r3, #2
 8005686:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800568a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800568e:	2218      	movs	r2, #24
 8005690:	2100      	movs	r1, #0
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f8db 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x3f;
 8005698:	233f      	movs	r3, #63	@ 0x3f
 800569a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800569e:	2318      	movs	r3, #24
 80056a0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80056a4:	f107 0310 	add.w	r3, r7, #16
 80056a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80056ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80056b4:	f107 030f 	add.w	r3, r7, #15
 80056b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80056bc:	2301      	movs	r3, #1
 80056be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80056c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fb49 	bl	8005d60 <hci_send_req>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da01      	bge.n	80056d8 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80056d4:	23ff      	movs	r3, #255	@ 0xff
 80056d6:	e004      	b.n	80056e2 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80056d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80056e0:	781b      	ldrb	r3, [r3, #0]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80056f6:	f107 0308 	add.w	r3, r7, #8
 80056fa:	2218      	movs	r2, #24
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f8a5 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x03;
 8005704:	2303      	movs	r3, #3
 8005706:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005708:	2303      	movs	r3, #3
 800570a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800570c:	1dfb      	adds	r3, r7, #7
 800570e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005710:	2301      	movs	r3, #1
 8005712:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005714:	f107 0308 	add.w	r3, r7, #8
 8005718:	2100      	movs	r1, #0
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fb20 	bl	8005d60 <hci_send_req>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	da01      	bge.n	800572a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005726:	23ff      	movs	r3, #255	@ 0xff
 8005728:	e000      	b.n	800572c <hci_reset+0x40>
  return status;
 800572a:	79fb      	ldrb	r3, [r7, #7]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8005734:	b590      	push	{r4, r7, lr}
 8005736:	b0cd      	sub	sp, #308	@ 0x134
 8005738:	af00      	add	r7, sp, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005744:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005748:	4622      	mov	r2, r4
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005750:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005754:	4602      	mov	r2, r0
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800575c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005760:	460a      	mov	r2, r1
 8005762:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8005764:	f107 0310 	add.w	r3, r7, #16
 8005768:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800576c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005770:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800577e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005782:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005786:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800578a:	7812      	ldrb	r2, [r2, #0]
 800578c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800578e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005792:	3301      	adds	r3, #1
 8005794:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8005798:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800579c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80057a0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80057a4:	7812      	ldrb	r2, [r2, #0]
 80057a6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80057a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057ac:	3301      	adds	r3, #1
 80057ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 80057b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80057b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80057ba:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80057be:	7812      	ldrb	r2, [r2, #0]
 80057c0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80057c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057c6:	3301      	adds	r3, #1
 80057c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057d0:	2218      	movs	r2, #24
 80057d2:	2100      	movs	r1, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 f83a 	bl	800584e <Osal_MemSet>
  rq.ogf = 0x08;
 80057da:	2308      	movs	r3, #8
 80057dc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80057e0:	2331      	movs	r3, #49	@ 0x31
 80057e2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80057e6:	f107 0310 	add.w	r3, r7, #16
 80057ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80057ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80057f6:	f107 030f 	add.w	r3, r7, #15
 80057fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80057fe:	2301      	movs	r3, #1
 8005800:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005804:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f000 faa8 	bl	8005d60 <hci_send_req>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	da01      	bge.n	800581a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8005816:	23ff      	movs	r3, #255	@ 0xff
 8005818:	e004      	b.n	8005824 <hci_le_set_default_phy+0xf0>
  return status;
 800581a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800581e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005822:	781b      	ldrb	r3, [r3, #0]
}
 8005824:	4618      	mov	r0, r3
 8005826:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800582a:	46bd      	mov	sp, r7
 800582c:	bd90      	pop	{r4, r7, pc}

0800582e <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f002 f948 	bl	8007ad4 <memcpy>
 8005844:	4603      	mov	r3, r0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f002 f90c 	bl	8007a7c <memset>
 8005864:	4603      	mov	r3, r0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0
  return;
 8005872:	bf00      	nop
}
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return;
 8005880:	bf00      	nop
}
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800588a:	b480      	push	{r7}
 800588c:	af00      	add	r7, sp, #0
  return;
 800588e:	bf00      	nop
}
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return;
 800589c:	bf00      	nop
}
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80058a6:	b480      	push	{r7}
 80058a8:	af00      	add	r7, sp, #0
  return;
 80058aa:	bf00      	nop
}
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  return;
 80058b8:	bf00      	nop
}
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80058c2:	b480      	push	{r7}
 80058c4:	af00      	add	r7, sp, #0
  return;
 80058c6:	bf00      	nop
}
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  return;
 80058d4:	bf00      	nop
}
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80058de:	b480      	push	{r7}
 80058e0:	af00      	add	r7, sp, #0
  return;
 80058e2:	bf00      	nop
}
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return;
 80058f0:	bf00      	nop
}
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80058fa:	b480      	push	{r7}
 80058fc:	af00      	add	r7, sp, #0
  return;
 80058fe:	bf00      	nop
}
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  return;
 800590c:	bf00      	nop
}
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0
  return;
 800591a:	bf00      	nop
}
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return;
 8005928:	bf00      	nop
}
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005932:	b480      	push	{r7}
 8005934:	af00      	add	r7, sp, #0
  return;
 8005936:	bf00      	nop
}
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  return;
 8005944:	bf00      	nop
}
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800594e:	b480      	push	{r7}
 8005950:	af00      	add	r7, sp, #0
  return;
 8005952:	bf00      	nop
}
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005960:	4b04      	ldr	r3, [pc, #16]	@ (8005974 <SVCCTL_Init+0x18>)
 8005962:	2200      	movs	r2, #0
 8005964:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005966:	4b04      	ldr	r3, [pc, #16]	@ (8005978 <SVCCTL_Init+0x1c>)
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800596c:	f000 f806 	bl	800597c <SVCCTL_SvcInit>

  return;
 8005970:	bf00      	nop
}
 8005972:	bd80      	pop	{r7, pc}
 8005974:	2000003c 	.word	0x2000003c
 8005978:	2000005c 	.word	0x2000005c

0800597c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  BAS_Init();
 8005980:	f7ff ff75 	bl	800586e <BAS_Init>

  BLS_Init();
 8005984:	f7ff ff7a 	bl	800587c <BLS_Init>

  CRS_STM_Init();
 8005988:	f7ff ff7f 	bl	800588a <CRS_STM_Init>

  DIS_Init();
 800598c:	f7ff ff84 	bl	8005898 <DIS_Init>

  EDS_STM_Init();
 8005990:	f7ff ff89 	bl	80058a6 <EDS_STM_Init>

  HIDS_Init();
 8005994:	f7ff ff8e 	bl	80058b4 <HIDS_Init>

  HRS_Init();
 8005998:	f7ff ff93 	bl	80058c2 <HRS_Init>

  HTS_Init();
 800599c:	f7ff ff98 	bl	80058d0 <HTS_Init>

  IAS_Init();
 80059a0:	f7ff ff9d 	bl	80058de <IAS_Init>

  LLS_Init();
 80059a4:	f7ff ffa2 	bl	80058ec <LLS_Init>

  TPS_Init();
 80059a8:	f7ff ffa7 	bl	80058fa <TPS_Init>

  MOTENV_STM_Init();
 80059ac:	f7ff ffac 	bl	8005908 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80059b0:	f7ff ffb1 	bl	8005916 <P2PS_STM_Init>

  ZDD_STM_Init();
 80059b4:	f7ff ffb6 	bl	8005924 <ZDD_STM_Init>

  OTAS_STM_Init();
 80059b8:	f7ff ffbb 	bl	8005932 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80059bc:	f7ff ffc7 	bl	800594e <BVOPUS_STM_Init>

  MESH_Init();
 80059c0:	f7ff ffbe 	bl	8005940 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80059c4:	f001 fafa 	bl	8006fbc <SVCCTL_InitCustomSvc>
  
  return;
 80059c8:	bf00      	nop
}
 80059ca:	bd80      	pop	{r7, pc}

080059cc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80059d4:	4b09      	ldr	r3, [pc, #36]	@ (80059fc <SVCCTL_RegisterSvcHandler+0x30>)
 80059d6:	7f1b      	ldrb	r3, [r3, #28]
 80059d8:	4619      	mov	r1, r3
 80059da:	4a08      	ldr	r2, [pc, #32]	@ (80059fc <SVCCTL_RegisterSvcHandler+0x30>)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80059e2:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <SVCCTL_RegisterSvcHandler+0x30>)
 80059e4:	7f1b      	ldrb	r3, [r3, #28]
 80059e6:	3301      	adds	r3, #1
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	4b04      	ldr	r3, [pc, #16]	@ (80059fc <SVCCTL_RegisterSvcHandler+0x30>)
 80059ec:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80059ee:	bf00      	nop
}
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	2000003c 	.word	0x2000003c

08005a00 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2bff      	cmp	r3, #255	@ 0xff
 8005a18:	d125      	bne.n	8005a66 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a2e:	d118      	bne.n	8005a62 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005a30:	2300      	movs	r3, #0
 8005a32:	757b      	strb	r3, [r7, #21]
 8005a34:	e00d      	b.n	8005a52 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005a36:	7d7b      	ldrb	r3, [r7, #21]
 8005a38:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa4 <SVCCTL_UserEvtRx+0xa4>)
 8005a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	4798      	blx	r3
 8005a42:	4603      	mov	r3, r0
 8005a44:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d108      	bne.n	8005a5e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005a4c:	7d7b      	ldrb	r3, [r7, #21]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	757b      	strb	r3, [r7, #21]
 8005a52:	4b14      	ldr	r3, [pc, #80]	@ (8005aa4 <SVCCTL_UserEvtRx+0xa4>)
 8005a54:	7f1b      	ldrb	r3, [r3, #28]
 8005a56:	7d7a      	ldrb	r2, [r7, #21]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d3ec      	bcc.n	8005a36 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005a5c:	e002      	b.n	8005a64 <SVCCTL_UserEvtRx+0x64>
              break;
 8005a5e:	bf00      	nop
          break;
 8005a60:	e000      	b.n	8005a64 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8005a62:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005a64:	e000      	b.n	8005a68 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8005a66:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d00f      	beq.n	8005a8e <SVCCTL_UserEvtRx+0x8e>
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	dc10      	bgt.n	8005a94 <SVCCTL_UserEvtRx+0x94>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <SVCCTL_UserEvtRx+0x7c>
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d006      	beq.n	8005a88 <SVCCTL_UserEvtRx+0x88>
 8005a7a:	e00b      	b.n	8005a94 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 ff85 	bl	800698c <SVCCTL_App_Notification>
 8005a82:	4603      	mov	r3, r0
 8005a84:	75bb      	strb	r3, [r7, #22]
      break;
 8005a86:	e008      	b.n	8005a9a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	75bb      	strb	r3, [r7, #22]
      break;
 8005a8c:	e005      	b.n	8005a9a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75bb      	strb	r3, [r7, #22]
      break;
 8005a92:	e002      	b.n	8005a9a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005a94:	2301      	movs	r3, #1
 8005a96:	75bb      	strb	r3, [r7, #22]
      break;
 8005a98:	bf00      	nop
  }

  return (return_status);
 8005a9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	2000003c 	.word	0x2000003c

08005aa8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005ab0:	f107 030c 	add.w	r3, r7, #12
 8005ab4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	212e      	movs	r1, #46	@ 0x2e
 8005ac0:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8005ac4:	f000 fae8 	bl	8006098 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	330b      	adds	r3, #11
 8005acc:	78db      	ldrb	r3, [r3, #3]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3720      	adds	r7, #32
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b088      	sub	sp, #32
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	210f      	movs	r1, #15
 8005aee:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8005af2:	f000 fad1 	bl	8006098 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	330b      	adds	r3, #11
 8005afa:	78db      	ldrb	r3, [r3, #3]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3720      	adds	r7, #32
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005b0c:	f107 030c 	add.w	r3, r7, #12
 8005b10:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	2110      	movs	r1, #16
 8005b18:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8005b1c:	f000 fabc 	bl	8006098 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	330b      	adds	r3, #11
 8005b24:	78db      	ldrb	r3, [r3, #3]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b08b      	sub	sp, #44	@ 0x2c
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005b58:	4b4a      	ldr	r3, [pc, #296]	@ (8005c84 <SHCI_GetWirelessFwInfo+0x154>)
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005b60:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005b6a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a44      	ldr	r2, [pc, #272]	@ (8005c88 <SHCI_GetWirelessFwInfo+0x158>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d10f      	bne.n	8005b9c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	e01a      	b.n	8005bd2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005ba4:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8005ba8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	0e1b      	lsrs	r3, r3, #24
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	0a1b      	lsrs	r3, r3, #8
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8005c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	0e1b      	lsrs	r3, r3, #24
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	0c1b      	lsrs	r3, r3, #16
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	0a1b      	lsrs	r3, r3, #8
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	0e1b      	lsrs	r3, r3, #24
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	0c1b      	lsrs	r3, r3, #16
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	0a1b      	lsrs	r3, r3, #8
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	0e1b      	lsrs	r3, r3, #24
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	0c1b      	lsrs	r3, r3, #16
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	372c      	adds	r7, #44	@ 0x2c
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	58004000 	.word	0x58004000
 8005c88:	a94656b9 	.word	0xa94656b9

08005c8c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4a08      	ldr	r2, [pc, #32]	@ (8005cbc <hci_init+0x30>)
 8005c9c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8005c9e:	4a08      	ldr	r2, [pc, #32]	@ (8005cc0 <hci_init+0x34>)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8005ca4:	4806      	ldr	r0, [pc, #24]	@ (8005cc0 <hci_init+0x34>)
 8005ca6:	f000 f979 	bl	8005f9c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 f8da 	bl	8005e68 <TlInit>

  return;
 8005cb4:	bf00      	nop
}
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20000424 	.word	0x20000424
 8005cc0:	200003fc 	.word	0x200003fc

08005cc4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005cca:	4822      	ldr	r0, [pc, #136]	@ (8005d54 <hci_user_evt_proc+0x90>)
 8005ccc:	f000 fd32 	bl	8006734 <LST_is_empty>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d12b      	bne.n	8005d2e <hci_user_evt_proc+0x6a>
 8005cd6:	4b20      	ldr	r3, [pc, #128]	@ (8005d58 <hci_user_evt_proc+0x94>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d027      	beq.n	8005d2e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005cde:	f107 030c 	add.w	r3, r7, #12
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	481b      	ldr	r0, [pc, #108]	@ (8005d54 <hci_user_evt_proc+0x90>)
 8005ce6:	f000 fdb4 	bl	8006852 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005cea:	4b1c      	ldr	r3, [pc, #112]	@ (8005d5c <hci_user_evt_proc+0x98>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00c      	beq.n	8005d0c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005cfa:	4b18      	ldr	r3, [pc, #96]	@ (8005d5c <hci_user_evt_proc+0x98>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	1d3a      	adds	r2, r7, #4
 8005d00:	4610      	mov	r0, r2
 8005d02:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005d04:	793a      	ldrb	r2, [r7, #4]
 8005d06:	4b14      	ldr	r3, [pc, #80]	@ (8005d58 <hci_user_evt_proc+0x94>)
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	e002      	b.n	8005d12 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005d0c:	4b12      	ldr	r3, [pc, #72]	@ (8005d58 <hci_user_evt_proc+0x94>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8005d12:	4b11      	ldr	r3, [pc, #68]	@ (8005d58 <hci_user_evt_proc+0x94>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fc0d 	bl	800653c <TL_MM_EvtDone>
 8005d22:	e004      	b.n	8005d2e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4619      	mov	r1, r3
 8005d28:	480a      	ldr	r0, [pc, #40]	@ (8005d54 <hci_user_evt_proc+0x90>)
 8005d2a:	f000 fd25 	bl	8006778 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005d2e:	4809      	ldr	r0, [pc, #36]	@ (8005d54 <hci_user_evt_proc+0x90>)
 8005d30:	f000 fd00 	bl	8006734 <LST_is_empty>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d107      	bne.n	8005d4a <hci_user_evt_proc+0x86>
 8005d3a:	4b07      	ldr	r3, [pc, #28]	@ (8005d58 <hci_user_evt_proc+0x94>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8005d42:	4804      	ldr	r0, [pc, #16]	@ (8005d54 <hci_user_evt_proc+0x90>)
 8005d44:	f001 f848 	bl	8006dd8 <hci_notify_asynch_evt>
  }


  return;
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
}
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000064 	.word	0x20000064
 8005d58:	20000070 	.word	0x20000070
 8005d5c:	200003fc 	.word	0x200003fc

08005d60 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f000 f8d1 	bl	8005f14 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8005d72:	2300      	movs	r3, #0
 8005d74:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	885b      	ldrh	r3, [r3, #2]
 8005d7a:	b21b      	sxth	r3, r3
 8005d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d80:	b21a      	sxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	029b      	lsls	r3, r3, #10
 8005d88:	b21b      	sxth	r3, r3
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	b21b      	sxth	r3, r3
 8005d8e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8005d90:	4b33      	ldr	r3, [pc, #204]	@ (8005e60 <hci_send_req+0x100>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	b2d9      	uxtb	r1, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	8bbb      	ldrh	r3, [r7, #28]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 f890 	bl	8005ec8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8005da8:	e04e      	b.n	8005e48 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8005daa:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8005dae:	f001 f82a 	bl	8006e06 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005db2:	e043      	b.n	8005e3c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8005db4:	f107 030c 	add.w	r3, r7, #12
 8005db8:	4619      	mov	r1, r3
 8005dba:	482a      	ldr	r0, [pc, #168]	@ (8005e64 <hci_send_req+0x104>)
 8005dbc:	f000 fd49 	bl	8006852 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	7a5b      	ldrb	r3, [r3, #9]
 8005dc4:	2b0f      	cmp	r3, #15
 8005dc6:	d114      	bne.n	8005df2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	330b      	adds	r3, #11
 8005dcc:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	885b      	ldrh	r3, [r3, #2]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	8bba      	ldrh	r2, [r7, #28]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d104      	bne.n	8005de4 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	7812      	ldrb	r2, [r2, #0]
 8005de2:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d027      	beq.n	8005e3c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005dec:	2301      	movs	r3, #1
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	e024      	b.n	8005e3c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	330b      	adds	r3, #11
 8005df6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	8bba      	ldrh	r2, [r7, #28]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d114      	bne.n	8005e30 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	7a9b      	ldrb	r3, [r3, #10]
 8005e0a:	3b03      	subs	r3, #3
 8005e0c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695a      	ldr	r2, [r3, #20]
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	bfa8      	it	ge
 8005e18:	461a      	movge	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6918      	ldr	r0, [r3, #16]
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	1cd9      	adds	r1, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f001 fe52 	bl	8007ad4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005e3c:	4809      	ldr	r0, [pc, #36]	@ (8005e64 <hci_send_req+0x104>)
 8005e3e:	f000 fc79 	bl	8006734 <LST_is_empty>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0b5      	beq.n	8005db4 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8005e48:	7ffb      	ldrb	r3, [r7, #31]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0ad      	beq.n	8005daa <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f000 f860 	bl	8005f14 <NotifyCmdStatus>

  return 0;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000428 	.word	0x20000428
 8005e64:	2000041c 	.word	0x2000041c

08005e68 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8005e70:	480f      	ldr	r0, [pc, #60]	@ (8005eb0 <TlInit+0x48>)
 8005e72:	f000 fc4f 	bl	8006714 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8005e76:	4a0f      	ldr	r2, [pc, #60]	@ (8005eb4 <TlInit+0x4c>)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8005e7c:	480e      	ldr	r0, [pc, #56]	@ (8005eb8 <TlInit+0x50>)
 8005e7e:	f000 fc49 	bl	8006714 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005e82:	4b0e      	ldr	r3, [pc, #56]	@ (8005ebc <TlInit+0x54>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8005e88:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec0 <TlInit+0x58>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005e94:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec4 <TlInit+0x5c>)
 8005e96:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8005e98:	4b09      	ldr	r3, [pc, #36]	@ (8005ec0 <TlInit+0x58>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f107 0208 	add.w	r2, r7, #8
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
  }

  return;
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
}
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	2000041c 	.word	0x2000041c
 8005eb4:	2000006c 	.word	0x2000006c
 8005eb8:	20000064 	.word	0x20000064
 8005ebc:	20000070 	.word	0x20000070
 8005ec0:	200003fc 	.word	0x200003fc
 8005ec4:	08005f55 	.word	0x08005f55

08005ec8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	603a      	str	r2, [r7, #0]
 8005ed2:	80fb      	strh	r3, [r7, #6]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f0c <SendCmd+0x44>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	88fa      	ldrh	r2, [r7, #6]
 8005ede:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8005ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8005f0c <SendCmd+0x44>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	797a      	ldrb	r2, [r7, #5]
 8005ee8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8005eea:	4b08      	ldr	r3, [pc, #32]	@ (8005f0c <SendCmd+0x44>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	330c      	adds	r3, #12
 8005ef0:	797a      	ldrb	r2, [r7, #5]
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 fded 	bl	8007ad4 <memcpy>

  hciContext.io.Send(0,0);
 8005efa:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <SendCmd+0x48>)
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2100      	movs	r1, #0
 8005f00:	2000      	movs	r0, #0
 8005f02:	4798      	blx	r3

  return;
 8005f04:	bf00      	nop
}
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	2000006c 	.word	0x2000006c
 8005f10:	200003fc 	.word	0x200003fc

08005f14 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d108      	bne.n	8005f36 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005f24:	4b0a      	ldr	r3, [pc, #40]	@ (8005f50 <NotifyCmdStatus+0x3c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00d      	beq.n	8005f48 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005f2c:	4b08      	ldr	r3, [pc, #32]	@ (8005f50 <NotifyCmdStatus+0x3c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2000      	movs	r0, #0
 8005f32:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005f34:	e008      	b.n	8005f48 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8005f36:	4b06      	ldr	r3, [pc, #24]	@ (8005f50 <NotifyCmdStatus+0x3c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005f3e:	4b04      	ldr	r3, [pc, #16]	@ (8005f50 <NotifyCmdStatus+0x3c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2001      	movs	r0, #1
 8005f44:	4798      	blx	r3
  return;
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
}
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000424 	.word	0x20000424

08005f54 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	7a5b      	ldrb	r3, [r3, #9]
 8005f60:	2b0f      	cmp	r3, #15
 8005f62:	d003      	beq.n	8005f6c <TlEvtReceived+0x18>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	7a5b      	ldrb	r3, [r3, #9]
 8005f68:	2b0e      	cmp	r3, #14
 8005f6a:	d107      	bne.n	8005f7c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4809      	ldr	r0, [pc, #36]	@ (8005f94 <TlEvtReceived+0x40>)
 8005f70:	f000 fc28 	bl	80067c4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005f74:	2000      	movs	r0, #0
 8005f76:	f000 ff3b 	bl	8006df0 <hci_cmd_resp_release>
 8005f7a:	e006      	b.n	8005f8a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4806      	ldr	r0, [pc, #24]	@ (8005f98 <TlEvtReceived+0x44>)
 8005f80:	f000 fc20 	bl	80067c4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005f84:	4804      	ldr	r0, [pc, #16]	@ (8005f98 <TlEvtReceived+0x44>)
 8005f86:	f000 ff27 	bl	8006dd8 <hci_notify_asynch_evt>
  }

  return;
 8005f8a:	bf00      	nop
}
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	2000041c 	.word	0x2000041c
 8005f98:	20000064 	.word	0x20000064

08005f9c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a05      	ldr	r2, [pc, #20]	@ (8005fbc <hci_register_io_bus+0x20>)
 8005fa8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a04      	ldr	r2, [pc, #16]	@ (8005fc0 <hci_register_io_bus+0x24>)
 8005fae:	611a      	str	r2, [r3, #16]

  return;
 8005fb0:	bf00      	nop
}
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	080062b5 	.word	0x080062b5
 8005fc0:	0800631d 	.word	0x0800631d

08005fc4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4a08      	ldr	r2, [pc, #32]	@ (8005ff4 <shci_init+0x30>)
 8005fd4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005fd6:	4a08      	ldr	r2, [pc, #32]	@ (8005ff8 <shci_init+0x34>)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005fdc:	4806      	ldr	r0, [pc, #24]	@ (8005ff8 <shci_init+0x34>)
 8005fde:	f000 f915 	bl	800620c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f898 	bl	800611c <TlInit>

  return;
 8005fec:	bf00      	nop
}
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	2000044c 	.word	0x2000044c
 8005ff8:	2000042c 	.word	0x2000042c

08005ffc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006002:	4822      	ldr	r0, [pc, #136]	@ (800608c <shci_user_evt_proc+0x90>)
 8006004:	f000 fb96 	bl	8006734 <LST_is_empty>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d12b      	bne.n	8006066 <shci_user_evt_proc+0x6a>
 800600e:	4b20      	ldr	r3, [pc, #128]	@ (8006090 <shci_user_evt_proc+0x94>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d027      	beq.n	8006066 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006016:	f107 030c 	add.w	r3, r7, #12
 800601a:	4619      	mov	r1, r3
 800601c:	481b      	ldr	r0, [pc, #108]	@ (800608c <shci_user_evt_proc+0x90>)
 800601e:	f000 fc18 	bl	8006852 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006022:	4b1c      	ldr	r3, [pc, #112]	@ (8006094 <shci_user_evt_proc+0x98>)
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800602e:	2301      	movs	r3, #1
 8006030:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006032:	4b18      	ldr	r3, [pc, #96]	@ (8006094 <shci_user_evt_proc+0x98>)
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	1d3a      	adds	r2, r7, #4
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800603c:	793a      	ldrb	r2, [r7, #4]
 800603e:	4b14      	ldr	r3, [pc, #80]	@ (8006090 <shci_user_evt_proc+0x94>)
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	e002      	b.n	800604a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006044:	4b12      	ldr	r3, [pc, #72]	@ (8006090 <shci_user_evt_proc+0x94>)
 8006046:	2201      	movs	r2, #1
 8006048:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800604a:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <shci_user_evt_proc+0x94>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fa71 	bl	800653c <TL_MM_EvtDone>
 800605a:	e004      	b.n	8006066 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4619      	mov	r1, r3
 8006060:	480a      	ldr	r0, [pc, #40]	@ (800608c <shci_user_evt_proc+0x90>)
 8006062:	f000 fb89 	bl	8006778 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006066:	4809      	ldr	r0, [pc, #36]	@ (800608c <shci_user_evt_proc+0x90>)
 8006068:	f000 fb64 	bl	8006734 <LST_is_empty>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d107      	bne.n	8006082 <shci_user_evt_proc+0x86>
 8006072:	4b07      	ldr	r3, [pc, #28]	@ (8006090 <shci_user_evt_proc+0x94>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800607a:	4804      	ldr	r0, [pc, #16]	@ (800608c <shci_user_evt_proc+0x90>)
 800607c:	f7fa faee 	bl	800065c <shci_notify_asynch_evt>
  }


  return;
 8006080:	bf00      	nop
 8006082:	bf00      	nop
}
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000074 	.word	0x20000074
 8006090:	20000084 	.word	0x20000084
 8006094:	2000042c 	.word	0x2000042c

08006098 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60ba      	str	r2, [r7, #8]
 80060a0:	607b      	str	r3, [r7, #4]
 80060a2:	4603      	mov	r3, r0
 80060a4:	81fb      	strh	r3, [r7, #14]
 80060a6:	460b      	mov	r3, r1
 80060a8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80060aa:	2000      	movs	r0, #0
 80060ac:	f000 f868 	bl	8006180 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80060b0:	4b17      	ldr	r3, [pc, #92]	@ (8006110 <shci_send+0x78>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	89fa      	ldrh	r2, [r7, #14]
 80060b6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80060ba:	4b15      	ldr	r3, [pc, #84]	@ (8006110 <shci_send+0x78>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	7b7a      	ldrb	r2, [r7, #13]
 80060c0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80060c2:	4b13      	ldr	r3, [pc, #76]	@ (8006110 <shci_send+0x78>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	330c      	adds	r3, #12
 80060c8:	7b7a      	ldrb	r2, [r7, #13]
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 fd01 	bl	8007ad4 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80060d2:	4b10      	ldr	r3, [pc, #64]	@ (8006114 <shci_send+0x7c>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80060d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006118 <shci_send+0x80>)
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2100      	movs	r1, #0
 80060de:	2000      	movs	r0, #0
 80060e0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80060e2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80060e6:	f7fa fad0 	bl	800068a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f103 0008 	add.w	r0, r3, #8
 80060f0:	4b07      	ldr	r3, [pc, #28]	@ (8006110 <shci_send+0x78>)
 80060f2:	6819      	ldr	r1, [r3, #0]
 80060f4:	4b06      	ldr	r3, [pc, #24]	@ (8006110 <shci_send+0x78>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	789b      	ldrb	r3, [r3, #2]
 80060fa:	3303      	adds	r3, #3
 80060fc:	461a      	mov	r2, r3
 80060fe:	f001 fce9 	bl	8007ad4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006102:	2001      	movs	r0, #1
 8006104:	f000 f83c 	bl	8006180 <Cmd_SetStatus>

  return;
 8006108:	bf00      	nop
}
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000080 	.word	0x20000080
 8006114:	20000450 	.word	0x20000450
 8006118:	2000042c 	.word	0x2000042c

0800611c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006124:	4a10      	ldr	r2, [pc, #64]	@ (8006168 <TlInit+0x4c>)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800612a:	4810      	ldr	r0, [pc, #64]	@ (800616c <TlInit+0x50>)
 800612c:	f000 faf2 	bl	8006714 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006130:	2001      	movs	r0, #1
 8006132:	f000 f825 	bl	8006180 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006136:	4b0e      	ldr	r3, [pc, #56]	@ (8006170 <TlInit+0x54>)
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800613c:	4b0d      	ldr	r3, [pc, #52]	@ (8006174 <TlInit+0x58>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00c      	beq.n	800615e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006148:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <TlInit+0x5c>)
 800614a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800614c:	4b0b      	ldr	r3, [pc, #44]	@ (800617c <TlInit+0x60>)
 800614e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006150:	4b08      	ldr	r3, [pc, #32]	@ (8006174 <TlInit+0x58>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f107 020c 	add.w	r2, r7, #12
 8006158:	4610      	mov	r0, r2
 800615a:	4798      	blx	r3
  }

  return;
 800615c:	bf00      	nop
 800615e:	bf00      	nop
}
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000080 	.word	0x20000080
 800616c:	20000074 	.word	0x20000074
 8006170:	20000084 	.word	0x20000084
 8006174:	2000042c 	.word	0x2000042c
 8006178:	080061d1 	.word	0x080061d1
 800617c:	080061e9 	.word	0x080061e9

08006180 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006190:	4b0d      	ldr	r3, [pc, #52]	@ (80061c8 <Cmd_SetStatus+0x48>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006198:	4b0b      	ldr	r3, [pc, #44]	@ (80061c8 <Cmd_SetStatus+0x48>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2000      	movs	r0, #0
 800619e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80061a0:	4b0a      	ldr	r3, [pc, #40]	@ (80061cc <Cmd_SetStatus+0x4c>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80061a6:	e00b      	b.n	80061c0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80061a8:	4b08      	ldr	r3, [pc, #32]	@ (80061cc <Cmd_SetStatus+0x4c>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80061ae:	4b06      	ldr	r3, [pc, #24]	@ (80061c8 <Cmd_SetStatus+0x48>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80061b6:	4b04      	ldr	r3, [pc, #16]	@ (80061c8 <Cmd_SetStatus+0x48>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2001      	movs	r0, #1
 80061bc:	4798      	blx	r3
  return;
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
}
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	2000044c 	.word	0x2000044c
 80061cc:	2000007c 	.word	0x2000007c

080061d0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80061d8:	2000      	movs	r0, #0
 80061da:	f7fa fa4b 	bl	8000674 <shci_cmd_resp_release>

  return;
 80061de:	bf00      	nop
}
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	4805      	ldr	r0, [pc, #20]	@ (8006208 <TlUserEvtReceived+0x20>)
 80061f4:	f000 fae6 	bl	80067c4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80061f8:	4803      	ldr	r0, [pc, #12]	@ (8006208 <TlUserEvtReceived+0x20>)
 80061fa:	f7fa fa2f 	bl	800065c <shci_notify_asynch_evt>

  return;
 80061fe:	bf00      	nop
}
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000074 	.word	0x20000074

0800620c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a05      	ldr	r2, [pc, #20]	@ (800622c <shci_register_io_bus+0x20>)
 8006218:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a04      	ldr	r2, [pc, #16]	@ (8006230 <shci_register_io_bus+0x24>)
 800621e:	611a      	str	r2, [r3, #16]

  return;
 8006220:	bf00      	nop
}
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	080063c9 	.word	0x080063c9
 8006230:	0800641d 	.word	0x0800641d

08006234 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006238:	f001 f8d2 	bl	80073e0 <HW_IPCC_Enable>

  return;
 800623c:	bf00      	nop
}
 800623e:	bd80      	pop	{r7, pc}

08006240 <TL_Init>:


void TL_Init( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006244:	4b10      	ldr	r3, [pc, #64]	@ (8006288 <TL_Init+0x48>)
 8006246:	4a11      	ldr	r2, [pc, #68]	@ (800628c <TL_Init+0x4c>)
 8006248:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800624a:	4b0f      	ldr	r3, [pc, #60]	@ (8006288 <TL_Init+0x48>)
 800624c:	4a10      	ldr	r2, [pc, #64]	@ (8006290 <TL_Init+0x50>)
 800624e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006250:	4b0d      	ldr	r3, [pc, #52]	@ (8006288 <TL_Init+0x48>)
 8006252:	4a10      	ldr	r2, [pc, #64]	@ (8006294 <TL_Init+0x54>)
 8006254:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006256:	4b0c      	ldr	r3, [pc, #48]	@ (8006288 <TL_Init+0x48>)
 8006258:	4a0f      	ldr	r2, [pc, #60]	@ (8006298 <TL_Init+0x58>)
 800625a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800625c:	4b0a      	ldr	r3, [pc, #40]	@ (8006288 <TL_Init+0x48>)
 800625e:	4a0f      	ldr	r2, [pc, #60]	@ (800629c <TL_Init+0x5c>)
 8006260:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006262:	4b09      	ldr	r3, [pc, #36]	@ (8006288 <TL_Init+0x48>)
 8006264:	4a0e      	ldr	r2, [pc, #56]	@ (80062a0 <TL_Init+0x60>)
 8006266:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006268:	4b07      	ldr	r3, [pc, #28]	@ (8006288 <TL_Init+0x48>)
 800626a:	4a0e      	ldr	r2, [pc, #56]	@ (80062a4 <TL_Init+0x64>)
 800626c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800626e:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <TL_Init+0x48>)
 8006270:	4a0d      	ldr	r2, [pc, #52]	@ (80062a8 <TL_Init+0x68>)
 8006272:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006274:	4b04      	ldr	r3, [pc, #16]	@ (8006288 <TL_Init+0x48>)
 8006276:	4a0d      	ldr	r2, [pc, #52]	@ (80062ac <TL_Init+0x6c>)
 8006278:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800627a:	4b03      	ldr	r3, [pc, #12]	@ (8006288 <TL_Init+0x48>)
 800627c:	4a0c      	ldr	r2, [pc, #48]	@ (80062b0 <TL_Init+0x70>)
 800627e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006280:	f001 f8c2 	bl	8007408 <HW_IPCC_Init>

  return;
 8006284:	bf00      	nop
}
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20030000 	.word	0x20030000
 800628c:	20030028 	.word	0x20030028
 8006290:	20030048 	.word	0x20030048
 8006294:	20030058 	.word	0x20030058
 8006298:	20030068 	.word	0x20030068
 800629c:	20030070 	.word	0x20030070
 80062a0:	20030078 	.word	0x20030078
 80062a4:	20030080 	.word	0x20030080
 80062a8:	2003009c 	.word	0x2003009c
 80062ac:	200300a0 	.word	0x200300a0
 80062b0:	200300ac 	.word	0x200300ac

080062b4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80062c0:	4811      	ldr	r0, [pc, #68]	@ (8006308 <TL_BLE_Init+0x54>)
 80062c2:	f000 fa27 	bl	8006714 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80062c6:	4b11      	ldr	r3, [pc, #68]	@ (800630c <TL_BLE_Init+0x58>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a0c      	ldr	r2, [pc, #48]	@ (8006310 <TL_BLE_Init+0x5c>)
 80062e0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a08      	ldr	r2, [pc, #32]	@ (8006308 <TL_BLE_Init+0x54>)
 80062e6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80062e8:	f001 f8a4 	bl	8007434 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a08      	ldr	r2, [pc, #32]	@ (8006314 <TL_BLE_Init+0x60>)
 80062f2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	4a07      	ldr	r2, [pc, #28]	@ (8006318 <TL_BLE_Init+0x64>)
 80062fa:	6013      	str	r3, [r2, #0]

  return 0;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200300c8 	.word	0x200300c8
 800630c:	20030000 	.word	0x20030000
 8006310:	20030a58 	.word	0x20030a58
 8006314:	2000045c 	.word	0x2000045c
 8006318:	20000460 	.word	0x20000460

0800631c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8006328:	4b09      	ldr	r3, [pc, #36]	@ (8006350 <TL_BLE_SendCmd+0x34>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2201      	movs	r2, #1
 8006330:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8006332:	4b07      	ldr	r3, [pc, #28]	@ (8006350 <TL_BLE_SendCmd+0x34>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4619      	mov	r1, r3
 800633a:	2001      	movs	r0, #1
 800633c:	f000 f96c 	bl	8006618 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8006340:	f001 f882 	bl	8007448 <HW_IPCC_BLE_SendCmd>

  return 0;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20030000 	.word	0x20030000

08006354 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800635a:	e01c      	b.n	8006396 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800635c:	1d3b      	adds	r3, r7, #4
 800635e:	4619      	mov	r1, r3
 8006360:	4812      	ldr	r0, [pc, #72]	@ (80063ac <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006362:	f000 fa76 	bl	8006852 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	7a5b      	ldrb	r3, [r3, #9]
 800636a:	2b0f      	cmp	r3, #15
 800636c:	d003      	beq.n	8006376 <HW_IPCC_BLE_RxEvtNot+0x22>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	7a5b      	ldrb	r3, [r3, #9]
 8006372:	2b0e      	cmp	r3, #14
 8006374:	d105      	bne.n	8006382 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4619      	mov	r1, r3
 800637a:	2002      	movs	r0, #2
 800637c:	f000 f94c 	bl	8006618 <OutputDbgTrace>
 8006380:	e004      	b.n	800638c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4619      	mov	r1, r3
 8006386:	2003      	movs	r0, #3
 8006388:	f000 f946 	bl	8006618 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800638c:	4b08      	ldr	r3, [pc, #32]	@ (80063b0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	4610      	mov	r0, r2
 8006394:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006396:	4805      	ldr	r0, [pc, #20]	@ (80063ac <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006398:	f000 f9cc 	bl	8006734 <LST_is_empty>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0dc      	beq.n	800635c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80063a2:	bf00      	nop
}
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200300c8 	.word	0x200300c8
 80063b0:	2000045c 	.word	0x2000045c

080063b4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80063b8:	4b02      	ldr	r3, [pc, #8]	@ (80063c4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4798      	blx	r3

  return;
 80063be:	bf00      	nop
}
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000460 	.word	0x20000460

080063c8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80063d4:	480d      	ldr	r0, [pc, #52]	@ (800640c <TL_SYS_Init+0x44>)
 80063d6:	f000 f99d 	bl	8006714 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80063da:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <TL_SYS_Init+0x48>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4a08      	ldr	r2, [pc, #32]	@ (800640c <TL_SYS_Init+0x44>)
 80063ec:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80063ee:	f001 f84d 	bl	800748c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a07      	ldr	r2, [pc, #28]	@ (8006414 <TL_SYS_Init+0x4c>)
 80063f8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4a06      	ldr	r2, [pc, #24]	@ (8006418 <TL_SYS_Init+0x50>)
 8006400:	6013      	str	r3, [r2, #0]

  return 0;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200300d0 	.word	0x200300d0
 8006410:	20030000 	.word	0x20030000
 8006414:	20000464 	.word	0x20000464
 8006418:	20000468 	.word	0x20000468

0800641c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8006428:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <TL_SYS_SendCmd+0x34>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2210      	movs	r2, #16
 8006430:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8006432:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <TL_SYS_SendCmd+0x34>)
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4619      	mov	r1, r3
 800643a:	2004      	movs	r0, #4
 800643c:	f000 f8ec 	bl	8006618 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8006440:	f001 f82e 	bl	80074a0 <HW_IPCC_SYS_SendCmd>

  return 0;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20030000 	.word	0x20030000

08006454 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006458:	4b07      	ldr	r3, [pc, #28]	@ (8006478 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4619      	mov	r1, r3
 8006460:	2005      	movs	r0, #5
 8006462:	f000 f8d9 	bl	8006618 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006466:	4b05      	ldr	r3, [pc, #20]	@ (800647c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a03      	ldr	r2, [pc, #12]	@ (8006478 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800646c:	68d2      	ldr	r2, [r2, #12]
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	4610      	mov	r0, r2
 8006472:	4798      	blx	r3

  return;
 8006474:	bf00      	nop
}
 8006476:	bd80      	pop	{r7, pc}
 8006478:	20030000 	.word	0x20030000
 800647c:	20000464 	.word	0x20000464

08006480 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006486:	e00e      	b.n	80064a6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8006488:	1d3b      	adds	r3, r7, #4
 800648a:	4619      	mov	r1, r3
 800648c:	480b      	ldr	r0, [pc, #44]	@ (80064bc <HW_IPCC_SYS_EvtNot+0x3c>)
 800648e:	f000 f9e0 	bl	8006852 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4619      	mov	r1, r3
 8006496:	2006      	movs	r0, #6
 8006498:	f000 f8be 	bl	8006618 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800649c:	4b08      	ldr	r3, [pc, #32]	@ (80064c0 <HW_IPCC_SYS_EvtNot+0x40>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	4610      	mov	r0, r2
 80064a4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80064a6:	4805      	ldr	r0, [pc, #20]	@ (80064bc <HW_IPCC_SYS_EvtNot+0x3c>)
 80064a8:	f000 f944 	bl	8006734 <LST_is_empty>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0ea      	beq.n	8006488 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80064b2:	bf00      	nop
}
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	200300d0 	.word	0x200300d0
 80064c0:	20000468 	.word	0x20000468

080064c4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80064cc:	4817      	ldr	r0, [pc, #92]	@ (800652c <TL_MM_Init+0x68>)
 80064ce:	f000 f921 	bl	8006714 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80064d2:	4817      	ldr	r0, [pc, #92]	@ (8006530 <TL_MM_Init+0x6c>)
 80064d4:	f000 f91e 	bl	8006714 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80064d8:	4b16      	ldr	r3, [pc, #88]	@ (8006534 <TL_MM_Init+0x70>)
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	4a16      	ldr	r2, [pc, #88]	@ (8006538 <TL_MM_Init+0x74>)
 80064de:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80064e0:	4b15      	ldr	r3, [pc, #84]	@ (8006538 <TL_MM_Init+0x74>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6892      	ldr	r2, [r2, #8]
 80064e8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80064ea:	4b13      	ldr	r3, [pc, #76]	@ (8006538 <TL_MM_Init+0x74>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	68d2      	ldr	r2, [r2, #12]
 80064f2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80064f4:	4b10      	ldr	r3, [pc, #64]	@ (8006538 <TL_MM_Init+0x74>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a0c      	ldr	r2, [pc, #48]	@ (800652c <TL_MM_Init+0x68>)
 80064fa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80064fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006538 <TL_MM_Init+0x74>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8006506:	4b0c      	ldr	r3, [pc, #48]	@ (8006538 <TL_MM_Init+0x74>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6852      	ldr	r2, [r2, #4]
 800650e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8006510:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <TL_MM_Init+0x74>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6912      	ldr	r2, [r2, #16]
 8006518:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800651a:	4b07      	ldr	r3, [pc, #28]	@ (8006538 <TL_MM_Init+0x74>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6952      	ldr	r2, [r2, #20]
 8006522:	619a      	str	r2, [r3, #24]

  return;
 8006524:	bf00      	nop
}
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	200300b8 	.word	0x200300b8
 8006530:	20000454 	.word	0x20000454
 8006534:	20030000 	.word	0x20030000
 8006538:	2000046c 	.word	0x2000046c

0800653c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4807      	ldr	r0, [pc, #28]	@ (8006564 <TL_MM_EvtDone+0x28>)
 8006548:	f000 f93c 	bl	80067c4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	2000      	movs	r0, #0
 8006550:	f000 f862 	bl	8006618 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8006554:	4804      	ldr	r0, [pc, #16]	@ (8006568 <TL_MM_EvtDone+0x2c>)
 8006556:	f000 ffc9 	bl	80074ec <HW_IPCC_MM_SendFreeBuf>

  return;
 800655a:	bf00      	nop
}
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000454 	.word	0x20000454
 8006568:	0800656d 	.word	0x0800656d

0800656c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006572:	e00c      	b.n	800658e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8006574:	1d3b      	adds	r3, r7, #4
 8006576:	4619      	mov	r1, r3
 8006578:	480a      	ldr	r0, [pc, #40]	@ (80065a4 <SendFreeBuf+0x38>)
 800657a:	f000 f96a 	bl	8006852 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800657e:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <SendFreeBuf+0x3c>)
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f000 f91b 	bl	80067c4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800658e:	4805      	ldr	r0, [pc, #20]	@ (80065a4 <SendFreeBuf+0x38>)
 8006590:	f000 f8d0 	bl	8006734 <LST_is_empty>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0ec      	beq.n	8006574 <SendFreeBuf+0x8>
  }

  return;
 800659a:	bf00      	nop
}
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000454 	.word	0x20000454
 80065a8:	20030000 	.word	0x20030000

080065ac <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80065b0:	4805      	ldr	r0, [pc, #20]	@ (80065c8 <TL_TRACES_Init+0x1c>)
 80065b2:	f000 f8af 	bl	8006714 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80065b6:	4b05      	ldr	r3, [pc, #20]	@ (80065cc <TL_TRACES_Init+0x20>)
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	4a03      	ldr	r2, [pc, #12]	@ (80065c8 <TL_TRACES_Init+0x1c>)
 80065bc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80065be:	f000 ffcb 	bl	8007558 <HW_IPCC_TRACES_Init>

  return;
 80065c2:	bf00      	nop
}
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200300c0 	.word	0x200300c0
 80065cc:	20030000 	.word	0x20030000

080065d0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80065d6:	e008      	b.n	80065ea <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80065d8:	1d3b      	adds	r3, r7, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	4808      	ldr	r0, [pc, #32]	@ (8006600 <HW_IPCC_TRACES_EvtNot+0x30>)
 80065de:	f000 f938 	bl	8006852 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 f80d 	bl	8006604 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80065ea:	4805      	ldr	r0, [pc, #20]	@ (8006600 <HW_IPCC_TRACES_EvtNot+0x30>)
 80065ec:	f000 f8a2 	bl	8006734 <LST_is_empty>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80065f6:	bf00      	nop
}
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200300c0 	.word	0x200300c0

08006604 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	6039      	str	r1, [r7, #0]
 8006622:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	2b06      	cmp	r3, #6
 8006628:	d845      	bhi.n	80066b6 <OutputDbgTrace+0x9e>
 800662a:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <OutputDbgTrace+0x18>)
 800662c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006630:	0800664d 	.word	0x0800664d
 8006634:	08006671 	.word	0x08006671
 8006638:	08006677 	.word	0x08006677
 800663c:	0800668b 	.word	0x0800668b
 8006640:	08006697 	.word	0x08006697
 8006644:	0800669d 	.word	0x0800669d
 8006648:	080066ab 	.word	0x080066ab
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	7a5b      	ldrb	r3, [r3, #9]
 8006654:	2bff      	cmp	r3, #255	@ 0xff
 8006656:	d005      	beq.n	8006664 <OutputDbgTrace+0x4c>
 8006658:	2bff      	cmp	r3, #255	@ 0xff
 800665a:	dc05      	bgt.n	8006668 <OutputDbgTrace+0x50>
 800665c:	2b0e      	cmp	r3, #14
 800665e:	d005      	beq.n	800666c <OutputDbgTrace+0x54>
 8006660:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8006662:	e001      	b.n	8006668 <OutputDbgTrace+0x50>
          break;
 8006664:	bf00      	nop
 8006666:	e027      	b.n	80066b8 <OutputDbgTrace+0xa0>
          break;
 8006668:	bf00      	nop
 800666a:	e025      	b.n	80066b8 <OutputDbgTrace+0xa0>
          break;
 800666c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800666e:	e023      	b.n	80066b8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006674:	e020      	b.n	80066b8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	7a5b      	ldrb	r3, [r3, #9]
 800667e:	2b0e      	cmp	r3, #14
 8006680:	d001      	beq.n	8006686 <OutputDbgTrace+0x6e>
 8006682:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8006684:	e000      	b.n	8006688 <OutputDbgTrace+0x70>
          break;
 8006686:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006688:	e016      	b.n	80066b8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	7a5b      	ldrb	r3, [r3, #9]
 8006692:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006694:	e010      	b.n	80066b8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800669a:	e00d      	b.n	80066b8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	7a5b      	ldrb	r3, [r3, #9]
 80066a4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80066a6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80066a8:	e006      	b.n	80066b8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	7a5b      	ldrb	r3, [r3, #9]
 80066b2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80066b4:	e000      	b.n	80066b8 <OutputDbgTrace+0xa0>

    default:
      break;
 80066b6:	bf00      	nop
  }

  return;
 80066b8:	bf00      	nop
}
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80066ce:	4b0f      	ldr	r3, [pc, #60]	@ (800670c <OTP_Read+0x48>)
 80066d0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80066d2:	e002      	b.n	80066da <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3b08      	subs	r3, #8
 80066d8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3307      	adds	r3, #7
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	79fa      	ldrb	r2, [r7, #7]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d003      	beq.n	80066ee <OTP_Read+0x2a>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4a09      	ldr	r2, [pc, #36]	@ (8006710 <OTP_Read+0x4c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d1f2      	bne.n	80066d4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3307      	adds	r3, #7
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	79fa      	ldrb	r2, [r7, #7]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d001      	beq.n	80066fe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80066fe:	68fb      	ldr	r3, [r7, #12]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	1fff73f8 	.word	0x1fff73f8
 8006710:	1fff7000 	.word	0x1fff7000

08006714 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	605a      	str	r2, [r3, #4]
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800673c:	f3ef 8310 	mrs	r3, PRIMASK
 8006740:	60fb      	str	r3, [r7, #12]
  return(result);
 8006742:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006744:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006746:	b672      	cpsid	i
}
 8006748:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d102      	bne.n	800675a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006754:	2301      	movs	r3, #1
 8006756:	75fb      	strb	r3, [r7, #23]
 8006758:	e001      	b.n	800675e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800675a:	2300      	movs	r3, #0
 800675c:	75fb      	strb	r3, [r7, #23]
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f383 8810 	msr	PRIMASK, r3
}
 8006768:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
}
 800676c:	4618      	mov	r0, r3
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006782:	f3ef 8310 	mrs	r3, PRIMASK
 8006786:	60fb      	str	r3, [r7, #12]
  return(result);
 8006788:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800678a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800678c:	b672      	cpsid	i
}
 800678e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	605a      	str	r2, [r3, #4]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f383 8810 	msr	PRIMASK, r3
}
 80067b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80067b8:	bf00      	nop
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ce:	f3ef 8310 	mrs	r3, PRIMASK
 80067d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80067d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80067d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80067d8:	b672      	cpsid	i
}
 80067da:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f383 8810 	msr	PRIMASK, r3
}
 8006802:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006818:	f3ef 8310 	mrs	r3, PRIMASK
 800681c:	60fb      	str	r3, [r7, #12]
  return(result);
 800681e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006820:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006822:	b672      	cpsid	i
}
 8006824:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6852      	ldr	r2, [r2, #4]
 8006838:	605a      	str	r2, [r3, #4]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f383 8810 	msr	PRIMASK, r3
}
 8006844:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b086      	sub	sp, #24
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800685c:	f3ef 8310 	mrs	r3, PRIMASK
 8006860:	60fb      	str	r3, [r7, #12]
  return(result);
 8006862:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006864:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006866:	b672      	cpsid	i
}
 8006868:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff ffca 	bl	8006810 <LST_remove_node>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f383 8810 	msr	PRIMASK, r3
}
 8006886:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006888:	bf00      	nop
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8006894:	4b03      	ldr	r3, [pc, #12]	@ (80068a4 <LL_FLASH_GetUDN+0x14>)
 8006896:	681b      	ldr	r3, [r3, #0]
}
 8006898:	4618      	mov	r0, r3
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	1fff7580 	.word	0x1fff7580

080068a8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80068ac:	4b03      	ldr	r3, [pc, #12]	@ (80068bc <LL_FLASH_GetDeviceID+0x14>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	b2db      	uxtb	r3, r3
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	1fff7584 	.word	0x1fff7584

080068c0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80068c4:	4b03      	ldr	r3, [pc, #12]	@ (80068d4 <LL_FLASH_GetSTCompanyID+0x14>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	0a1b      	lsrs	r3, r3, #8
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	1fff7584 	.word	0x1fff7584

080068d8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80068d8:	b5b0      	push	{r4, r5, r7, lr}
 80068da:	b090      	sub	sp, #64	@ 0x40
 80068dc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80068de:	2392      	movs	r3, #146	@ 0x92
 80068e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80068e4:	4b25      	ldr	r3, [pc, #148]	@ (800697c <APP_BLE_Init+0xa4>)
 80068e6:	1d3c      	adds	r4, r7, #4
 80068e8:	461d      	mov	r5, r3
 80068ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80068fa:	c403      	stmia	r4!, {r0, r1}
 80068fc:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80068fe:	f000 f913 	bl	8006b28 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8006902:	2101      	movs	r1, #1
 8006904:	2002      	movs	r0, #2
 8006906:	f000 fe4f 	bl	80075a8 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800690a:	4a1d      	ldr	r2, [pc, #116]	@ (8006980 <APP_BLE_Init+0xa8>)
 800690c:	2100      	movs	r1, #0
 800690e:	2002      	movs	r0, #2
 8006910:	f000 ff76 	bl	8007800 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8006914:	1d3b      	adds	r3, r7, #4
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff f8c6 	bl	8005aa8 <SHCI_C2_BLE_Init>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8006922:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800692a:	f7fa fe53 	bl	80015d4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800692e:	f000 f911 	bl	8006b54 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006932:	f7ff f813 	bl	800595c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006936:	4b13      	ldr	r3, [pc, #76]	@ (8006984 <APP_BLE_Init+0xac>)
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800693e:	4b11      	ldr	r3, [pc, #68]	@ (8006984 <APP_BLE_Init+0xac>)
 8006940:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006944:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8006946:	4a10      	ldr	r2, [pc, #64]	@ (8006988 <APP_BLE_Init+0xb0>)
 8006948:	2100      	movs	r1, #0
 800694a:	2001      	movs	r0, #1
 800694c:	f000 ff58 	bl	8007800 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8006950:	2006      	movs	r0, #6
 8006952:	f7fe fe77 	bl	8005644 <aci_hal_set_radio_activity_mask>
 8006956:	4603      	mov	r3, r0
 8006958:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800695c:	f000 fabd 	bl	8006eda <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8006960:	4b08      	ldr	r3, [pc, #32]	@ (8006984 <APP_BLE_Init+0xac>)
 8006962:	2200      	movs	r2, #0
 8006964:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8006966:	4b07      	ldr	r3, [pc, #28]	@ (8006984 <APP_BLE_Init+0xac>)
 8006968:	2200      	movs	r2, #0
 800696a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800696c:	2001      	movs	r0, #1
 800696e:	f000 f9a5 	bl	8006cbc <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8006972:	bf00      	nop
}
 8006974:	3740      	adds	r7, #64	@ 0x40
 8006976:	46bd      	mov	sp, r7
 8006978:	bdb0      	pop	{r4, r5, r7, pc}
 800697a:	bf00      	nop
 800697c:	08007b44 	.word	0x08007b44
 8006980:	08005cc5 	.word	0x08005cc5
 8006984:	20000478 	.word	0x20000478
 8006988:	08006da5 	.word	0x08006da5

0800698c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	@ 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8006994:	2392      	movs	r3, #146	@ 0x92
 8006996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3301      	adds	r3, #1
 800699e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2bff      	cmp	r3, #255	@ 0xff
 80069a6:	d053      	beq.n	8006a50 <SVCCTL_App_Notification+0xc4>
 80069a8:	2bff      	cmp	r3, #255	@ 0xff
 80069aa:	f300 80af 	bgt.w	8006b0c <SVCCTL_App_Notification+0x180>
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d002      	beq.n	80069b8 <SVCCTL_App_Notification+0x2c>
 80069b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80069b4:	d020      	beq.n	80069f8 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80069b6:	e0a9      	b.n	8006b0c <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	3302      	adds	r3, #2
 80069bc:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	4b55      	ldr	r3, [pc, #340]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 80069c8:	8adb      	ldrh	r3, [r3, #22]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d106      	bne.n	80069dc <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80069ce:	4b53      	ldr	r3, [pc, #332]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80069d4:	4b51      	ldr	r3, [pc, #324]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80069dc:	2001      	movs	r0, #1
 80069de:	f000 f96d 	bl	8006cbc <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80069e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006b20 <SVCCTL_App_Notification+0x194>)
 80069e4:	2201      	movs	r2, #1
 80069e6:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80069e8:	4b4c      	ldr	r3, [pc, #304]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 80069ea:	8ada      	ldrh	r2, [r3, #22]
 80069ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006b20 <SVCCTL_App_Notification+0x194>)
 80069ee:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80069f0:	484b      	ldr	r0, [pc, #300]	@ (8006b20 <SVCCTL_App_Notification+0x194>)
 80069f2:	f000 fa5e 	bl	8006eb2 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80069f6:	e08c      	b.n	8006b12 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	3302      	adds	r3, #2
 80069fc:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d001      	beq.n	8006a0a <SVCCTL_App_Notification+0x7e>
 8006a06:	2b03      	cmp	r3, #3
          break;
 8006a08:	e021      	b.n	8006a4e <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8006a10:	4b42      	ldr	r3, [pc, #264]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 8006a12:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d104      	bne.n	8006a24 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8006a1a:	4b40      	ldr	r3, [pc, #256]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 8006a1c:	2206      	movs	r2, #6
 8006a1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8006a22:	e003      	b.n	8006a2c <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8006a24:	4b3d      	ldr	r3, [pc, #244]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 8006a26:	2205      	movs	r2, #5
 8006a28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	4b39      	ldr	r3, [pc, #228]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 8006a36:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8006a38:	4b39      	ldr	r3, [pc, #228]	@ (8006b20 <SVCCTL_App_Notification+0x194>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006a3e:	4b37      	ldr	r3, [pc, #220]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 8006a40:	8ada      	ldrh	r2, [r3, #22]
 8006a42:	4b37      	ldr	r3, [pc, #220]	@ (8006b20 <SVCCTL_App_Notification+0x194>)
 8006a44:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8006a46:	4836      	ldr	r0, [pc, #216]	@ (8006b20 <SVCCTL_App_Notification+0x194>)
 8006a48:	f000 fa33 	bl	8006eb2 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8006a4c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8006a4e:	e060      	b.n	8006b12 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	3302      	adds	r3, #2
 8006a54:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d047      	beq.n	8006af4 <SVCCTL_App_Notification+0x168>
 8006a64:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	dc51      	bgt.n	8006b10 <SVCCTL_App_Notification+0x184>
 8006a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a70:	d046      	beq.n	8006b00 <SVCCTL_App_Notification+0x174>
 8006a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a76:	dc4b      	bgt.n	8006b10 <SVCCTL_App_Notification+0x184>
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d043      	beq.n	8006b04 <SVCCTL_App_Notification+0x178>
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	db47      	blt.n	8006b10 <SVCCTL_App_Notification+0x184>
 8006a80:	f240 420a 	movw	r2, #1034	@ 0x40a
 8006a84:	4293      	cmp	r3, r2
 8006a86:	dc43      	bgt.n	8006b10 <SVCCTL_App_Notification+0x184>
 8006a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8c:	dd40      	ble.n	8006b10 <SVCCTL_App_Notification+0x184>
 8006a8e:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8006a92:	2b09      	cmp	r3, #9
 8006a94:	d83c      	bhi.n	8006b10 <SVCCTL_App_Notification+0x184>
 8006a96:	a201      	add	r2, pc, #4	@ (adr r2, 8006a9c <SVCCTL_App_Notification+0x110>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006b11 	.word	0x08006b11
 8006aa8:	08006b11 	.word	0x08006b11
 8006aac:	08006b11 	.word	0x08006b11
 8006ab0:	08006b11 	.word	0x08006b11
 8006ab4:	08006b09 	.word	0x08006b09
 8006ab8:	08006b11 	.word	0x08006b11
 8006abc:	08006ad9 	.word	0x08006ad9
 8006ac0:	08006b09 	.word	0x08006b09
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8006ac4:	4b15      	ldr	r3, [pc, #84]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 8006ac6:	8adb      	ldrh	r3, [r3, #22]
 8006ac8:	4916      	ldr	r1, [pc, #88]	@ (8006b24 <SVCCTL_App_Notification+0x198>)
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fd ffbc 	bl	8004a48 <aci_gap_pass_key_resp>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8006ad6:	e018      	b.n	8006b0a <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8006ad8:	4b10      	ldr	r3, [pc, #64]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 8006ada:	8adb      	ldrh	r3, [r3, #22]
 8006adc:	2101      	movs	r1, #1
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe f95c 	bl	8004d9c <aci_gap_numeric_comparison_value_confirm_yesno>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8006aea:	e00e      	b.n	8006b0a <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	3302      	adds	r3, #2
 8006af0:	61bb      	str	r3, [r7, #24]
          break;
 8006af2:	e00a      	b.n	8006b0a <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8006af4:	4b09      	ldr	r3, [pc, #36]	@ (8006b1c <SVCCTL_App_Notification+0x190>)
 8006af6:	8adb      	ldrh	r3, [r3, #22]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fc62 	bl	80053c2 <aci_gatt_confirm_indication>
        break;
 8006afe:	e004      	b.n	8006b0a <SVCCTL_App_Notification+0x17e>
          break;
 8006b00:	bf00      	nop
 8006b02:	e005      	b.n	8006b10 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8006b04:	bf00      	nop
 8006b06:	e003      	b.n	8006b10 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8006b08:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006b0a:	e001      	b.n	8006b10 <SVCCTL_App_Notification+0x184>
      break;
 8006b0c:	bf00      	nop
 8006b0e:	e000      	b.n	8006b12 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006b10:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006b12:	2301      	movs	r3, #1
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3728      	adds	r7, #40	@ 0x28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000478 	.word	0x20000478
 8006b20:	200004fc 	.word	0x200004fc
 8006b24:	0001b207 	.word	0x0001b207

08006b28 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8006b2e:	4b06      	ldr	r3, [pc, #24]	@ (8006b48 <Ble_Tl_Init+0x20>)
 8006b30:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8006b32:	4b06      	ldr	r3, [pc, #24]	@ (8006b4c <Ble_Tl_Init+0x24>)
 8006b34:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8006b36:	463b      	mov	r3, r7
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4805      	ldr	r0, [pc, #20]	@ (8006b50 <Ble_Tl_Init+0x28>)
 8006b3c:	f7ff f8a6 	bl	8005c8c <hci_init>

  return;
 8006b40:	bf00      	nop
}
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	200300d8 	.word	0x200300d8
 8006b4c:	08006e55 	.word	0x08006e55
 8006b50:	08006e1d 	.word	0x08006e1d

08006b54 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8006b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b56:	b08d      	sub	sp, #52	@ 0x34
 8006b58:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006b5e:	2392      	movs	r3, #146	@ 0x92
 8006b60:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8006b62:	f7fe fdc3 	bl	80056ec <hci_reset>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8006b6a:	f000 f8d7 	bl	8006d1c <BleGetBdAddress>
 8006b6e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	2106      	movs	r1, #6
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7fe fc79 	bl	800546c <aci_hal_write_config_data>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8006b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8006ca8 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8006b80:	2110      	movs	r1, #16
 8006b82:	2018      	movs	r0, #24
 8006b84:	f7fe fc72 	bl	800546c <aci_hal_write_config_data>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8006b8c:	4a47      	ldr	r2, [pc, #284]	@ (8006cac <Ble_Hci_Gap_Gatt_Init+0x158>)
 8006b8e:	2110      	movs	r1, #16
 8006b90:	2008      	movs	r0, #8
 8006b92:	f7fe fc6b 	bl	800546c <aci_hal_write_config_data>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8006b9a:	2118      	movs	r1, #24
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	f7fe fcea 	bl	8005576 <aci_hal_set_tx_power_level>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8006ba6:	f7fe f960 	bl	8004e6a <aci_gatt_init>
 8006baa:	4603      	mov	r3, r0
 8006bac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01f      	beq.n	8006c00 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8006bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8006cb0 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8006bc2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8006bc4:	1dba      	adds	r2, r7, #6
 8006bc6:	7bf8      	ldrb	r0, [r7, #15]
 8006bc8:	1cbb      	adds	r3, r7, #2
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	1d3b      	adds	r3, r7, #4
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	f7fd ff9e 	bl	8004b16 <aci_gap_init>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8006bde:	88fc      	ldrh	r4, [r7, #6]
 8006be0:	88bd      	ldrh	r5, [r7, #4]
 8006be2:	68b8      	ldr	r0, [r7, #8]
 8006be4:	f7f9 faca 	bl	800017c <strlen>
 8006be8:	4603      	mov	r3, r0
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f7fe fb3a 	bl	8005270 <aci_gatt_update_char_value>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8006c00:	88f8      	ldrh	r0, [r7, #6]
 8006c02:	8879      	ldrh	r1, [r7, #2]
 8006c04:	463b      	mov	r3, r7
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	2302      	movs	r3, #2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f7fe fb30 	bl	8005270 <aci_gatt_update_char_value>
 8006c10:	4603      	mov	r3, r0
 8006c12:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8006c14:	2202      	movs	r2, #2
 8006c16:	2102      	movs	r1, #2
 8006c18:	2000      	movs	r0, #0
 8006c1a:	f7fe fd8b 	bl	8005734 <hci_le_set_default_phy>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8006c22:	4b24      	ldr	r3, [pc, #144]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c24:	2201      	movs	r2, #1
 8006c26:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8006c28:	4b22      	ldr	r3, [pc, #136]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fd fdf3 	bl	8004818 <aci_gap_set_io_capability>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8006c36:	4b1f      	ldr	r3, [pc, #124]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c3e:	2208      	movs	r2, #8
 8006c40:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8006c42:	4b1c      	ldr	r3, [pc, #112]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c44:	2210      	movs	r2, #16
 8006c46:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8006c48:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8006c4e:	4b19      	ldr	r3, [pc, #100]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c50:	4a19      	ldr	r2, [pc, #100]	@ (8006cb8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8006c52:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8006c54:	4b17      	ldr	r3, [pc, #92]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8006c5a:	4b16      	ldr	r3, [pc, #88]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c5c:	789c      	ldrb	r4, [r3, #2]
 8006c5e:	4b15      	ldr	r3, [pc, #84]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c60:	785d      	ldrb	r5, [r3, #1]
 8006c62:	4b14      	ldr	r3, [pc, #80]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c64:	791b      	ldrb	r3, [r3, #4]
 8006c66:	4a13      	ldr	r2, [pc, #76]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c68:	7952      	ldrb	r2, [r2, #5]
 8006c6a:	4912      	ldr	r1, [pc, #72]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c6c:	78c9      	ldrb	r1, [r1, #3]
 8006c6e:	4811      	ldr	r0, [pc, #68]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c70:	6880      	ldr	r0, [r0, #8]
 8006c72:	2600      	movs	r6, #0
 8006c74:	9604      	str	r6, [sp, #16]
 8006c76:	9003      	str	r0, [sp, #12]
 8006c78:	9102      	str	r1, [sp, #8]
 8006c7a:	9201      	str	r2, [sp, #4]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2201      	movs	r2, #1
 8006c82:	4629      	mov	r1, r5
 8006c84:	4620      	mov	r0, r4
 8006c86:	f7fd fe1b 	bl	80048c0 <aci_gap_set_authentication_requirement>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8006c8e:	4b09      	ldr	r3, [pc, #36]	@ (8006cb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006c90:	789b      	ldrb	r3, [r3, #2]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8006c96:	f7fe f85d 	bl	8004d54 <aci_gap_configure_filter_accept_list>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	08007d44 	.word	0x08007d44
 8006cac:	08007d54 	.word	0x08007d54
 8006cb0:	08007b80 	.word	0x08007b80
 8006cb4:	20000478 	.word	0x20000478
 8006cb8:	0001b207 	.word	0x0001b207

08006cbc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08c      	sub	sp, #48	@ 0x30
 8006cc0:	af08      	add	r7, sp, #32
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006cc6:	2392      	movs	r3, #146	@ 0x92
 8006cc8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8006cca:	4a12      	ldr	r2, [pc, #72]	@ (8006d14 <Adv_Request+0x58>)
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	9306      	str	r3, [sp, #24]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9305      	str	r3, [sp, #20]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9304      	str	r3, [sp, #16]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9303      	str	r3, [sp, #12]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9302      	str	r3, [sp, #8]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	2300      	movs	r3, #0
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	22a0      	movs	r2, #160	@ 0xa0
 8006cf2:	2180      	movs	r1, #128	@ 0x80
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f7fd fc95 	bl	8004624 <aci_gap_set_discoverable>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8006cfe:	4906      	ldr	r1, [pc, #24]	@ (8006d18 <Adv_Request+0x5c>)
 8006d00:	2010      	movs	r0, #16
 8006d02:	f7fd ffb5 	bl	8004c70 <aci_gap_update_adv_data>
 8006d06:	4603      	mov	r3, r0
 8006d08:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8006d0a:	bf00      	nop
}
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000478 	.word	0x20000478
 8006d18:	20000020 	.word	0x20000020

08006d1c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8006d22:	f7ff fdb5 	bl	8006890 <LL_FLASH_GetUDN>
 8006d26:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d2e:	d023      	beq.n	8006d78 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006d30:	f7ff fdc6 	bl	80068c0 <LL_FLASH_GetSTCompanyID>
 8006d34:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8006d36:	f7ff fdb7 	bl	80068a8 <LL_FLASH_GetDeviceID>
 8006d3a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	4b16      	ldr	r3, [pc, #88]	@ (8006d9c <BleGetBdAddress+0x80>)
 8006d42:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	0a1b      	lsrs	r3, r3, #8
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	4b14      	ldr	r3, [pc, #80]	@ (8006d9c <BleGetBdAddress+0x80>)
 8006d4c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	4b12      	ldr	r3, [pc, #72]	@ (8006d9c <BleGetBdAddress+0x80>)
 8006d54:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	4b10      	ldr	r3, [pc, #64]	@ (8006d9c <BleGetBdAddress+0x80>)
 8006d5c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	0a1b      	lsrs	r3, r3, #8
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	4b0d      	ldr	r3, [pc, #52]	@ (8006d9c <BleGetBdAddress+0x80>)
 8006d66:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d9c <BleGetBdAddress+0x80>)
 8006d70:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8006d72:	4b0a      	ldr	r3, [pc, #40]	@ (8006d9c <BleGetBdAddress+0x80>)
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	e00b      	b.n	8006d90 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8006d78:	2000      	movs	r0, #0
 8006d7a:	f7ff fca3 	bl	80066c4 <OTP_Read>
 8006d7e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e001      	b.n	8006d90 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8006d8c:	4b04      	ldr	r3, [pc, #16]	@ (8006da0 <BleGetBdAddress+0x84>)
 8006d8e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8006d90:	697b      	ldr	r3, [r7, #20]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000470 	.word	0x20000470
 8006da0:	08007d3c 	.word	0x08007d3c

08006da4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8006daa:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd4 <Adv_Cancel+0x30>)
 8006dac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006db0:	2b05      	cmp	r3, #5
 8006db2:	d00a      	beq.n	8006dca <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006db4:	2392      	movs	r3, #146	@ 0x92
 8006db6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8006db8:	f7fd fc10 	bl	80045dc <aci_gap_set_non_discoverable>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006dc0:	4b04      	ldr	r3, [pc, #16]	@ (8006dd4 <Adv_Cancel+0x30>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
}
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000478 	.word	0x20000478

08006dd8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8006de0:	2100      	movs	r1, #0
 8006de2:	2002      	movs	r0, #2
 8006de4:	f000 fd2e 	bl	8007844 <UTIL_SEQ_SetTask>

  return;
 8006de8:	bf00      	nop
}
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006df8:	2001      	movs	r0, #1
 8006dfa:	f000 fd8f 	bl	800791c <UTIL_SEQ_SetEvt>

  return;
 8006dfe:	bf00      	nop
}
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006e0e:	2001      	movs	r0, #1
 8006e10:	f000 fda4 	bl	800795c <UTIL_SEQ_WaitEvt>

  return;
 8006e14:	bf00      	nop
}
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fde6 	bl	8005a00 <SVCCTL_UserEvtRx>
 8006e34:	4603      	mov	r3, r0
 8006e36:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8006e44:	e003      	b.n	8006e4e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	701a      	strb	r2, [r3, #0]
  return;
 8006e4c:	bf00      	nop
}
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <BLE_StatusNot+0x16>
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d006      	beq.n	8006e76 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8006e68:	e00b      	b.n	8006e82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fd14 	bl	800789c <UTIL_SEQ_PauseTask>
      break;
 8006e74:	e005      	b.n	8006e82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006e76:	2303      	movs	r3, #3
 8006e78:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 fd2e 	bl	80078dc <UTIL_SEQ_ResumeTask>
      break;
 8006e80:	bf00      	nop
  }

  return;
 8006e82:	bf00      	nop
}
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <Custom_STM_App_Notification+0x16>
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d002      	beq.n	8006ea4 <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8006e9e:	e002      	b.n	8006ea6 <Custom_STM_App_Notification+0x1c>
      break;
 8006ea0:	bf00      	nop
 8006ea2:	e000      	b.n	8006ea6 <Custom_STM_App_Notification+0x1c>
      break;
 8006ea4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8006ea6:	bf00      	nop
}
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <Custom_APP_Notification+0x16>
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d002      	beq.n	8006ecc <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8006ec6:	e002      	b.n	8006ece <Custom_APP_Notification+0x1c>
      break;
 8006ec8:	bf00      	nop
 8006eca:	e000      	b.n	8006ece <Custom_APP_Notification+0x1c>
      break;
 8006ecc:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8006ece:	bf00      	nop
}
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8006eda:	b480      	push	{r7}
 8006edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8006ede:	bf00      	nop
}
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	@ 0x30
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8006efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2bff      	cmp	r3, #255	@ 0xff
 8006f02:	d154      	bne.n	8006fae <Custom_STM_Event_Handler+0xc6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8006f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f06:	3302      	adds	r3, #2
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8006f14:	2b1a      	cmp	r3, #26
 8006f16:	d848      	bhi.n	8006faa <Custom_STM_Event_Handler+0xc2>
 8006f18:	a201      	add	r2, pc, #4	@ (adr r2, 8006f20 <Custom_STM_Event_Handler+0x38>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006fab 	.word	0x08006fab
 8006f24:	08006fab 	.word	0x08006fab
 8006f28:	08006fab 	.word	0x08006fab
 8006f2c:	08006fab 	.word	0x08006fab
 8006f30:	08006fab 	.word	0x08006fab
 8006f34:	08006fab 	.word	0x08006fab
 8006f38:	08006fab 	.word	0x08006fab
 8006f3c:	08006fab 	.word	0x08006fab
 8006f40:	08006fab 	.word	0x08006fab
 8006f44:	08006fab 	.word	0x08006fab
 8006f48:	08006fab 	.word	0x08006fab
 8006f4c:	08006fab 	.word	0x08006fab
 8006f50:	08006fab 	.word	0x08006fab
 8006f54:	08006fab 	.word	0x08006fab
 8006f58:	08006fab 	.word	0x08006fab
 8006f5c:	08006fab 	.word	0x08006fab
 8006f60:	08006fab 	.word	0x08006fab
 8006f64:	08006fab 	.word	0x08006fab
 8006f68:	08006fab 	.word	0x08006fab
 8006f6c:	08006fab 	.word	0x08006fab
 8006f70:	08006fab 	.word	0x08006fab
 8006f74:	08006fab 	.word	0x08006fab
 8006f78:	08006fab 	.word	0x08006fab
 8006f7c:	08006fab 	.word	0x08006fab
 8006f80:	08006fab 	.word	0x08006fab
 8006f84:	08006fab 	.word	0x08006fab
 8006f88:	08006f8d 	.word	0x08006f8d
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	3302      	adds	r3, #2
 8006f90:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8006f92:	2301      	movs	r3, #1
 8006f94:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8006f9e:	f107 030c 	add.w	r3, r7, #12
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff ff71 	bl	8006e8a <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8006fa8:	e000      	b.n	8006fac <Custom_STM_Event_Handler+0xc4>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8006faa:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006fac:	e000      	b.n	8006fb0 <Custom_STM_Event_Handler+0xc8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8006fae:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8006fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3730      	adds	r7, #48	@ 0x30
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08c      	sub	sp, #48	@ 0x30
 8006fc0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006fc2:	2392      	movs	r3, #146	@ 0x92
 8006fc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8006fc6:	4834      	ldr	r0, [pc, #208]	@ (8007098 <SVCCTL_InitCustomSvc+0xdc>)
 8006fc8:	f7fe fd00 	bl	80059cc <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_PRESSCOUNTER_UUID(uuid.Char_UUID_128);
 8006fd0:	238f      	movs	r3, #143	@ 0x8f
 8006fd2:	713b      	strb	r3, [r7, #4]
 8006fd4:	23e5      	movs	r3, #229	@ 0xe5
 8006fd6:	717b      	strb	r3, [r7, #5]
 8006fd8:	23b3      	movs	r3, #179	@ 0xb3
 8006fda:	71bb      	strb	r3, [r7, #6]
 8006fdc:	23d5      	movs	r3, #213	@ 0xd5
 8006fde:	71fb      	strb	r3, [r7, #7]
 8006fe0:	232e      	movs	r3, #46	@ 0x2e
 8006fe2:	723b      	strb	r3, [r7, #8]
 8006fe4:	237f      	movs	r3, #127	@ 0x7f
 8006fe6:	727b      	strb	r3, [r7, #9]
 8006fe8:	234a      	movs	r3, #74	@ 0x4a
 8006fea:	72bb      	strb	r3, [r7, #10]
 8006fec:	2398      	movs	r3, #152	@ 0x98
 8006fee:	72fb      	strb	r3, [r7, #11]
 8006ff0:	232a      	movs	r3, #42	@ 0x2a
 8006ff2:	733b      	strb	r3, [r7, #12]
 8006ff4:	2348      	movs	r3, #72	@ 0x48
 8006ff6:	737b      	strb	r3, [r7, #13]
 8006ff8:	237a      	movs	r3, #122	@ 0x7a
 8006ffa:	73bb      	strb	r3, [r7, #14]
 8006ffc:	23cc      	movs	r3, #204	@ 0xcc
 8006ffe:	73fb      	strb	r3, [r7, #15]
 8007000:	2301      	movs	r3, #1
 8007002:	743b      	strb	r3, [r7, #16]
 8007004:	2318      	movs	r3, #24
 8007006:	747b      	strb	r3, [r7, #17]
 8007008:	2300      	movs	r3, #0
 800700a:	74bb      	strb	r3, [r7, #18]
 800700c:	2300      	movs	r3, #0
 800700e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8007010:	7dbb      	ldrb	r3, [r7, #22]
 8007012:	1d39      	adds	r1, r7, #4
 8007014:	4a21      	ldr	r2, [pc, #132]	@ (800709c <SVCCTL_InitCustomSvc+0xe0>)
 8007016:	9200      	str	r2, [sp, #0]
 8007018:	2201      	movs	r2, #1
 800701a:	2002      	movs	r0, #2
 800701c:	f7fd ff4a 	bl	8004eb4 <aci_gatt_add_service>
 8007020:	4603      	mov	r3, r0
 8007022:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  information
   */
  COPY_INFORMATION_UUID(uuid.Char_UUID_128);
 8007024:	2319      	movs	r3, #25
 8007026:	713b      	strb	r3, [r7, #4]
 8007028:	23ed      	movs	r3, #237	@ 0xed
 800702a:	717b      	strb	r3, [r7, #5]
 800702c:	2382      	movs	r3, #130	@ 0x82
 800702e:	71bb      	strb	r3, [r7, #6]
 8007030:	23ae      	movs	r3, #174	@ 0xae
 8007032:	71fb      	strb	r3, [r7, #7]
 8007034:	23ed      	movs	r3, #237	@ 0xed
 8007036:	723b      	strb	r3, [r7, #8]
 8007038:	2321      	movs	r3, #33	@ 0x21
 800703a:	727b      	strb	r3, [r7, #9]
 800703c:	234c      	movs	r3, #76	@ 0x4c
 800703e:	72bb      	strb	r3, [r7, #10]
 8007040:	239d      	movs	r3, #157	@ 0x9d
 8007042:	72fb      	strb	r3, [r7, #11]
 8007044:	2341      	movs	r3, #65	@ 0x41
 8007046:	733b      	strb	r3, [r7, #12]
 8007048:	2345      	movs	r3, #69	@ 0x45
 800704a:	737b      	strb	r3, [r7, #13]
 800704c:	2322      	movs	r3, #34	@ 0x22
 800704e:	73bb      	strb	r3, [r7, #14]
 8007050:	238e      	movs	r3, #142	@ 0x8e
 8007052:	73fb      	strb	r3, [r7, #15]
 8007054:	2300      	movs	r3, #0
 8007056:	743b      	strb	r3, [r7, #16]
 8007058:	2300      	movs	r3, #0
 800705a:	747b      	strb	r3, [r7, #17]
 800705c:	2300      	movs	r3, #0
 800705e:	74bb      	strb	r3, [r7, #18]
 8007060:	2300      	movs	r3, #0
 8007062:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomPressctrHdle,
 8007064:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <SVCCTL_InitCustomSvc+0xe0>)
 8007066:	8818      	ldrh	r0, [r3, #0]
 8007068:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <SVCCTL_InitCustomSvc+0xe4>)
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	1d3a      	adds	r2, r7, #4
 800706e:	490d      	ldr	r1, [pc, #52]	@ (80070a4 <SVCCTL_InitCustomSvc+0xe8>)
 8007070:	9105      	str	r1, [sp, #20]
 8007072:	2100      	movs	r1, #0
 8007074:	9104      	str	r1, [sp, #16]
 8007076:	2110      	movs	r1, #16
 8007078:	9103      	str	r1, [sp, #12]
 800707a:	2100      	movs	r1, #0
 800707c:	9102      	str	r1, [sp, #8]
 800707e:	2100      	movs	r1, #0
 8007080:	9101      	str	r1, [sp, #4]
 8007082:	2102      	movs	r1, #2
 8007084:	9100      	str	r1, [sp, #0]
 8007086:	2102      	movs	r1, #2
 8007088:	f7fd ffea 	bl	8005060 <aci_gatt_add_char>
 800708c:	4603      	mov	r3, r0
 800708e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8007090:	bf00      	nop
}
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	08006ee9 	.word	0x08006ee9
 800709c:	20000500 	.word	0x20000500
 80070a0:	20000030 	.word	0x20000030
 80070a4:	20000502 	.word	0x20000502

080070a8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	4603      	mov	r3, r0
 80070b0:	6039      	str	r1, [r7, #0]
 80070b2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80070b4:	2392      	movs	r3, #146	@ 0x92
 80070b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10f      	bne.n	80070de <Custom_STM_App_Update_Char+0x36>
  {

    case CUSTOM_STM_INFO_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomPressctrHdle,
 80070be:	4b0b      	ldr	r3, [pc, #44]	@ (80070ec <Custom_STM_App_Update_Char+0x44>)
 80070c0:	8818      	ldrh	r0, [r3, #0]
 80070c2:	4b0a      	ldr	r3, [pc, #40]	@ (80070ec <Custom_STM_App_Update_Char+0x44>)
 80070c4:	8859      	ldrh	r1, [r3, #2]
 80070c6:	4b0a      	ldr	r3, [pc, #40]	@ (80070f0 <Custom_STM_App_Update_Char+0x48>)
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	f7fe f8cc 	bl	8005270 <aci_gatt_update_char_value>
 80070d8:	4603      	mov	r3, r0
 80070da:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value INFO_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 80070dc:	e000      	b.n	80070e0 <Custom_STM_App_Update_Char+0x38>

    default:
      break;
 80070de:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000500 	.word	0x20000500
 80070f0:	20000030 	.word	0x20000030

080070f4 <LL_PWR_EnableBootC2>:
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <LL_PWR_EnableBootC2+0x1c>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	4a04      	ldr	r2, [pc, #16]	@ (8007110 <LL_PWR_EnableBootC2+0x1c>)
 80070fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007102:	60d3      	str	r3, [r2, #12]
}
 8007104:	bf00      	nop
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	58000400 	.word	0x58000400

08007114 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800711c:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800711e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007122:	4905      	ldr	r1, [pc, #20]	@ (8007138 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	58000800 	.word	0x58000800

0800713c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007144:	4b05      	ldr	r3, [pc, #20]	@ (800715c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007146:	6a1a      	ldr	r2, [r3, #32]
 8007148:	4904      	ldr	r1, [pc, #16]	@ (800715c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4313      	orrs	r3, r2
 800714e:	620b      	str	r3, [r1, #32]
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	58000800 	.word	0x58000800

08007160 <LL_AHB3_GRP1_EnableClock>:
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800716c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800716e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4313      	orrs	r3, r2
 8007176:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800717c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4013      	ands	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007184:	68fb      	ldr	r3, [r7, #12]
}
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007192:	b480      	push	{r7}
 8007194:	b085      	sub	sp, #20
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800719a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800719e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80071a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80071ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071b2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4013      	ands	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80071bc:	68fb      	ldr	r3, [r7, #12]
}
 80071be:	bf00      	nop
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	601a      	str	r2, [r3, #0]
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f043 0201 	orr.w	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	041b      	lsls	r3, r3, #16
 800721c:	43db      	mvns	r3, r3
 800721e:	401a      	ands	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	605a      	str	r2, [r3, #4]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	041b      	lsls	r3, r3, #16
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	605a      	str	r2, [r3, #4]
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	43db      	mvns	r3, r3
 8007266:	401a      	ands	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	605a      	str	r2, [r3, #4]
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	609a      	str	r2, [r3, #8]
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	041a      	lsls	r2, r3, #16
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	609a      	str	r2, [r3, #8]
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	4013      	ands	r3, r2
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d101      	bne.n	80072ce <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69da      	ldr	r2, [r3, #28]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	4013      	ands	r3, r2
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d101      	bne.n	80072f8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800730c:	2102      	movs	r1, #2
 800730e:	4818      	ldr	r0, [pc, #96]	@ (8007370 <HW_IPCC_Rx_Handler+0x68>)
 8007310:	f7ff ffe4 	bl	80072dc <LL_C2_IPCC_IsActiveFlag_CHx>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <HW_IPCC_Rx_Handler+0x24>
 800731a:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <HW_IPCC_Rx_Handler+0x68>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8007326:	f000 f8d5 	bl	80074d4 <HW_IPCC_SYS_EvtHandler>
 800732a:	e01e      	b.n	800736a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800732c:	2101      	movs	r1, #1
 800732e:	4810      	ldr	r0, [pc, #64]	@ (8007370 <HW_IPCC_Rx_Handler+0x68>)
 8007330:	f7ff ffd4 	bl	80072dc <LL_C2_IPCC_IsActiveFlag_CHx>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d008      	beq.n	800734c <HW_IPCC_Rx_Handler+0x44>
 800733a:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <HW_IPCC_Rx_Handler+0x68>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d102      	bne.n	800734c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8007346:	f000 f889 	bl	800745c <HW_IPCC_BLE_EvtHandler>
 800734a:	e00e      	b.n	800736a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800734c:	2108      	movs	r1, #8
 800734e:	4808      	ldr	r0, [pc, #32]	@ (8007370 <HW_IPCC_Rx_Handler+0x68>)
 8007350:	f7ff ffc4 	bl	80072dc <LL_C2_IPCC_IsActiveFlag_CHx>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d008      	beq.n	800736c <HW_IPCC_Rx_Handler+0x64>
 800735a:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <HW_IPCC_Rx_Handler+0x68>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8007366:	f000 f901 	bl	800756c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800736a:	bf00      	nop
 800736c:	bf00      	nop
}
 800736e:	bd80      	pop	{r7, pc}
 8007370:	58000c00 	.word	0x58000c00

08007374 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007378:	2102      	movs	r1, #2
 800737a:	4818      	ldr	r0, [pc, #96]	@ (80073dc <HW_IPCC_Tx_Handler+0x68>)
 800737c:	f7ff ff99 	bl	80072b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d108      	bne.n	8007398 <HW_IPCC_Tx_Handler+0x24>
 8007386:	4b15      	ldr	r3, [pc, #84]	@ (80073dc <HW_IPCC_Tx_Handler+0x68>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007392:	f000 f893 	bl	80074bc <HW_IPCC_SYS_CmdEvtHandler>
 8007396:	e01e      	b.n	80073d6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007398:	2108      	movs	r1, #8
 800739a:	4810      	ldr	r0, [pc, #64]	@ (80073dc <HW_IPCC_Tx_Handler+0x68>)
 800739c:	f7ff ff89 	bl	80072b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d108      	bne.n	80073b8 <HW_IPCC_Tx_Handler+0x44>
 80073a6:	4b0d      	ldr	r3, [pc, #52]	@ (80073dc <HW_IPCC_Tx_Handler+0x68>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80073b2:	f000 f8bd 	bl	8007530 <HW_IPCC_MM_FreeBufHandler>
 80073b6:	e00e      	b.n	80073d6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80073b8:	2120      	movs	r1, #32
 80073ba:	4808      	ldr	r0, [pc, #32]	@ (80073dc <HW_IPCC_Tx_Handler+0x68>)
 80073bc:	f7ff ff79 	bl	80072b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d108      	bne.n	80073d8 <HW_IPCC_Tx_Handler+0x64>
 80073c6:	4b05      	ldr	r3, [pc, #20]	@ (80073dc <HW_IPCC_Tx_Handler+0x68>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80073d2:	f000 f84f 	bl	8007474 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
}
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58000c00 	.word	0x58000c00

080073e0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80073e4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80073e8:	f7ff fed3 	bl	8007192 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80073ec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80073f0:	f7ff fea4 	bl	800713c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80073f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80073f8:	f7ff fe8c 	bl	8007114 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80073fc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80073fe:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007400:	f7ff fe78 	bl	80070f4 <LL_PWR_EnableBootC2>

  return;
 8007404:	bf00      	nop
}
 8007406:	bd80      	pop	{r7, pc}

08007408 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800740c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007410:	f7ff fea6 	bl	8007160 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8007414:	4806      	ldr	r0, [pc, #24]	@ (8007430 <HW_IPCC_Init+0x28>)
 8007416:	f7ff fee8 	bl	80071ea <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800741a:	4805      	ldr	r0, [pc, #20]	@ (8007430 <HW_IPCC_Init+0x28>)
 800741c:	f7ff fed5 	bl	80071ca <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007420:	202c      	movs	r0, #44	@ 0x2c
 8007422:	f7fa fca4 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8007426:	202d      	movs	r0, #45	@ 0x2d
 8007428:	f7fa fca1 	bl	8001d6e <HAL_NVIC_EnableIRQ>

  return;
 800742c:	bf00      	nop
}
 800742e:	bd80      	pop	{r7, pc}
 8007430:	58000c00 	.word	0x58000c00

08007434 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007438:	2101      	movs	r1, #1
 800743a:	4802      	ldr	r0, [pc, #8]	@ (8007444 <HW_IPCC_BLE_Init+0x10>)
 800743c:	f7ff ff0a 	bl	8007254 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007440:	bf00      	nop
}
 8007442:	bd80      	pop	{r7, pc}
 8007444:	58000c00 	.word	0x58000c00

08007448 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 800744c:	2101      	movs	r1, #1
 800744e:	4802      	ldr	r0, [pc, #8]	@ (8007458 <HW_IPCC_BLE_SendCmd+0x10>)
 8007450:	f7ff ff20 	bl	8007294 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007454:	bf00      	nop
}
 8007456:	bd80      	pop	{r7, pc}
 8007458:	58000c00 	.word	0x58000c00

0800745c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007460:	f7fe ff78 	bl	8006354 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007464:	2101      	movs	r1, #1
 8007466:	4802      	ldr	r0, [pc, #8]	@ (8007470 <HW_IPCC_BLE_EvtHandler+0x14>)
 8007468:	f7ff ff06 	bl	8007278 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800746c:	bf00      	nop
}
 800746e:	bd80      	pop	{r7, pc}
 8007470:	58000c00 	.word	0x58000c00

08007474 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007478:	2120      	movs	r1, #32
 800747a:	4803      	ldr	r0, [pc, #12]	@ (8007488 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800747c:	f7ff fed8 	bl	8007230 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007480:	f7fe ff98 	bl	80063b4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007484:	bf00      	nop
}
 8007486:	bd80      	pop	{r7, pc}
 8007488:	58000c00 	.word	0x58000c00

0800748c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007490:	2102      	movs	r1, #2
 8007492:	4802      	ldr	r0, [pc, #8]	@ (800749c <HW_IPCC_SYS_Init+0x10>)
 8007494:	f7ff fede 	bl	8007254 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007498:	bf00      	nop
}
 800749a:	bd80      	pop	{r7, pc}
 800749c:	58000c00 	.word	0x58000c00

080074a0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80074a4:	2102      	movs	r1, #2
 80074a6:	4804      	ldr	r0, [pc, #16]	@ (80074b8 <HW_IPCC_SYS_SendCmd+0x18>)
 80074a8:	f7ff fef4 	bl	8007294 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80074ac:	2102      	movs	r1, #2
 80074ae:	4802      	ldr	r0, [pc, #8]	@ (80074b8 <HW_IPCC_SYS_SendCmd+0x18>)
 80074b0:	f7ff feab 	bl	800720a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80074b4:	bf00      	nop
}
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	58000c00 	.word	0x58000c00

080074bc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80074c0:	2102      	movs	r1, #2
 80074c2:	4803      	ldr	r0, [pc, #12]	@ (80074d0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80074c4:	f7ff feb4 	bl	8007230 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80074c8:	f7fe ffc4 	bl	8006454 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80074cc:	bf00      	nop
}
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	58000c00 	.word	0x58000c00

080074d4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80074d8:	f7fe ffd2 	bl	8006480 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80074dc:	2102      	movs	r1, #2
 80074de:	4802      	ldr	r0, [pc, #8]	@ (80074e8 <HW_IPCC_SYS_EvtHandler+0x14>)
 80074e0:	f7ff feca 	bl	8007278 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80074e4:	bf00      	nop
}
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	58000c00 	.word	0x58000c00

080074ec <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80074f4:	2108      	movs	r1, #8
 80074f6:	480c      	ldr	r0, [pc, #48]	@ (8007528 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80074f8:	f7ff fedb 	bl	80072b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8007502:	4a0a      	ldr	r2, [pc, #40]	@ (800752c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007508:	2108      	movs	r1, #8
 800750a:	4807      	ldr	r0, [pc, #28]	@ (8007528 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800750c:	f7ff fe7d 	bl	800720a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8007510:	e006      	b.n	8007520 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007516:	2108      	movs	r1, #8
 8007518:	4803      	ldr	r0, [pc, #12]	@ (8007528 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800751a:	f7ff febb 	bl	8007294 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800751e:	bf00      	nop
}
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	58000c00 	.word	0x58000c00
 800752c:	20000504 	.word	0x20000504

08007530 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007534:	2108      	movs	r1, #8
 8007536:	4806      	ldr	r0, [pc, #24]	@ (8007550 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007538:	f7ff fe7a 	bl	8007230 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800753c:	4b05      	ldr	r3, [pc, #20]	@ (8007554 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007542:	2108      	movs	r1, #8
 8007544:	4802      	ldr	r0, [pc, #8]	@ (8007550 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007546:	f7ff fea5 	bl	8007294 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800754a:	bf00      	nop
}
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	58000c00 	.word	0x58000c00
 8007554:	20000504 	.word	0x20000504

08007558 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800755c:	2108      	movs	r1, #8
 800755e:	4802      	ldr	r0, [pc, #8]	@ (8007568 <HW_IPCC_TRACES_Init+0x10>)
 8007560:	f7ff fe78 	bl	8007254 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007564:	bf00      	nop
}
 8007566:	bd80      	pop	{r7, pc}
 8007568:	58000c00 	.word	0x58000c00

0800756c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007570:	f7ff f82e 	bl	80065d0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007574:	2108      	movs	r1, #8
 8007576:	4802      	ldr	r0, [pc, #8]	@ (8007580 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007578:	f7ff fe7e 	bl	8007278 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800757c:	bf00      	nop
}
 800757e:	bd80      	pop	{r7, pc}
 8007580:	58000c00 	.word	0x58000c00

08007584 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007588:	4b05      	ldr	r3, [pc, #20]	@ (80075a0 <UTIL_LPM_Init+0x1c>)
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800758e:	4b05      	ldr	r3, [pc, #20]	@ (80075a4 <UTIL_LPM_Init+0x20>)
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007594:	bf00      	nop
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	20000508 	.word	0x20000508
 80075a4:	2000050c 	.word	0x2000050c

080075a8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075b4:	f3ef 8310 	mrs	r3, PRIMASK
 80075b8:	613b      	str	r3, [r7, #16]
  return(result);
 80075ba:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80075bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80075be:	b672      	cpsid	i
}
 80075c0:	bf00      	nop
  
  switch(state)
 80075c2:	78fb      	ldrb	r3, [r7, #3]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <UTIL_LPM_SetOffMode+0x32>
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d10e      	bne.n	80075ea <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80075cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007604 <UTIL_LPM_SetOffMode+0x5c>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	4a0b      	ldr	r2, [pc, #44]	@ (8007604 <UTIL_LPM_SetOffMode+0x5c>)
 80075d6:	6013      	str	r3, [r2, #0]
      break;
 80075d8:	e008      	b.n	80075ec <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	43da      	mvns	r2, r3
 80075de:	4b09      	ldr	r3, [pc, #36]	@ (8007604 <UTIL_LPM_SetOffMode+0x5c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4013      	ands	r3, r2
 80075e4:	4a07      	ldr	r2, [pc, #28]	@ (8007604 <UTIL_LPM_SetOffMode+0x5c>)
 80075e6:	6013      	str	r3, [r2, #0]
      break;
 80075e8:	e000      	b.n	80075ec <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80075ea:	bf00      	nop
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f383 8810 	msr	PRIMASK, r3
}
 80075f6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80075f8:	bf00      	nop
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	2000050c 	.word	0x2000050c

08007608 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b090      	sub	sp, #64	@ 0x40
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8007610:	4b73      	ldr	r3, [pc, #460]	@ (80077e0 <UTIL_SEQ_Run+0x1d8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8007616:	4b72      	ldr	r3, [pc, #456]	@ (80077e0 <UTIL_SEQ_Run+0x1d8>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4013      	ands	r3, r2
 800761e:	4a70      	ldr	r2, [pc, #448]	@ (80077e0 <UTIL_SEQ_Run+0x1d8>)
 8007620:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8007622:	4b70      	ldr	r3, [pc, #448]	@ (80077e4 <UTIL_SEQ_Run+0x1dc>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8007628:	4b6f      	ldr	r3, [pc, #444]	@ (80077e8 <UTIL_SEQ_Run+0x1e0>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800762e:	4b6f      	ldr	r3, [pc, #444]	@ (80077ec <UTIL_SEQ_Run+0x1e4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8007634:	4b6e      	ldr	r3, [pc, #440]	@ (80077f0 <UTIL_SEQ_Run+0x1e8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800763a:	e08d      	b.n	8007758 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007640:	e002      	b.n	8007648 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8007642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007644:	3301      	adds	r3, #1
 8007646:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007648:	4a6a      	ldr	r2, [pc, #424]	@ (80077f4 <UTIL_SEQ_Run+0x1ec>)
 800764a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800764c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	401a      	ands	r2, r3
 8007654:	4b62      	ldr	r3, [pc, #392]	@ (80077e0 <UTIL_SEQ_Run+0x1d8>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4013      	ands	r3, r2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d0f1      	beq.n	8007642 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800765e:	4a65      	ldr	r2, [pc, #404]	@ (80077f4 <UTIL_SEQ_Run+0x1ec>)
 8007660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007662:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	401a      	ands	r2, r3
 800766a:	4b5d      	ldr	r3, [pc, #372]	@ (80077e0 <UTIL_SEQ_Run+0x1d8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4013      	ands	r3, r2
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007672:	4a60      	ldr	r2, [pc, #384]	@ (80077f4 <UTIL_SEQ_Run+0x1ec>)
 8007674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	4413      	add	r3, r2
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	4013      	ands	r3, r2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d106      	bne.n	8007692 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007684:	4a5b      	ldr	r2, [pc, #364]	@ (80077f4 <UTIL_SEQ_Run+0x1ec>)
 8007686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	4413      	add	r3, r2
 800768c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007690:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007692:	4a58      	ldr	r2, [pc, #352]	@ (80077f4 <UTIL_SEQ_Run+0x1ec>)
 8007694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	4413      	add	r3, r2
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	4013      	ands	r3, r2
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 f9b3 	bl	8007a0c <SEQ_BitPosition>
 80076a6:	4603      	mov	r3, r0
 80076a8:	461a      	mov	r2, r3
 80076aa:	4b53      	ldr	r3, [pc, #332]	@ (80077f8 <UTIL_SEQ_Run+0x1f0>)
 80076ac:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80076ae:	4a51      	ldr	r2, [pc, #324]	@ (80077f4 <UTIL_SEQ_Run+0x1ec>)
 80076b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	4413      	add	r3, r2
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	4b4f      	ldr	r3, [pc, #316]	@ (80077f8 <UTIL_SEQ_Run+0x1f0>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2101      	movs	r1, #1
 80076be:	fa01 f303 	lsl.w	r3, r1, r3
 80076c2:	43db      	mvns	r3, r3
 80076c4:	401a      	ands	r2, r3
 80076c6:	494b      	ldr	r1, [pc, #300]	@ (80077f4 <UTIL_SEQ_Run+0x1ec>)
 80076c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	440b      	add	r3, r1
 80076ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d0:	f3ef 8310 	mrs	r3, PRIMASK
 80076d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80076d6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80076d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80076da:	b672      	cpsid	i
}
 80076dc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80076de:	4b46      	ldr	r3, [pc, #280]	@ (80077f8 <UTIL_SEQ_Run+0x1f0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2201      	movs	r2, #1
 80076e4:	fa02 f303 	lsl.w	r3, r2, r3
 80076e8:	43da      	mvns	r2, r3
 80076ea:	4b3e      	ldr	r3, [pc, #248]	@ (80077e4 <UTIL_SEQ_Run+0x1dc>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4013      	ands	r3, r2
 80076f0:	4a3c      	ldr	r2, [pc, #240]	@ (80077e4 <UTIL_SEQ_Run+0x1dc>)
 80076f2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80076f4:	2302      	movs	r3, #2
 80076f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076f8:	e013      	b.n	8007722 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80076fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076fc:	3b01      	subs	r3, #1
 80076fe:	4a3d      	ldr	r2, [pc, #244]	@ (80077f4 <UTIL_SEQ_Run+0x1ec>)
 8007700:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007704:	4b3c      	ldr	r3, [pc, #240]	@ (80077f8 <UTIL_SEQ_Run+0x1f0>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2201      	movs	r2, #1
 800770a:	fa02 f303 	lsl.w	r3, r2, r3
 800770e:	43da      	mvns	r2, r3
 8007710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007712:	3b01      	subs	r3, #1
 8007714:	400a      	ands	r2, r1
 8007716:	4937      	ldr	r1, [pc, #220]	@ (80077f4 <UTIL_SEQ_Run+0x1ec>)
 8007718:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800771c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771e:	3b01      	subs	r3, #1
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e8      	bne.n	80076fa <UTIL_SEQ_Run+0xf2>
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f383 8810 	msr	PRIMASK, r3
}
 8007732:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8007734:	4b30      	ldr	r3, [pc, #192]	@ (80077f8 <UTIL_SEQ_Run+0x1f0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a30      	ldr	r2, [pc, #192]	@ (80077fc <UTIL_SEQ_Run+0x1f4>)
 800773a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773e:	4798      	blx	r3

    local_taskset = TaskSet;
 8007740:	4b28      	ldr	r3, [pc, #160]	@ (80077e4 <UTIL_SEQ_Run+0x1dc>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8007746:	4b28      	ldr	r3, [pc, #160]	@ (80077e8 <UTIL_SEQ_Run+0x1e0>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800774c:	4b27      	ldr	r3, [pc, #156]	@ (80077ec <UTIL_SEQ_Run+0x1e4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8007752:	4b27      	ldr	r3, [pc, #156]	@ (80077f0 <UTIL_SEQ_Run+0x1e8>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007758:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	401a      	ands	r2, r3
 800775e:	4b20      	ldr	r3, [pc, #128]	@ (80077e0 <UTIL_SEQ_Run+0x1d8>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4013      	ands	r3, r2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <UTIL_SEQ_Run+0x16c>
 8007768:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800776a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776c:	4013      	ands	r3, r2
 800776e:	2b00      	cmp	r3, #0
 8007770:	f43f af64 	beq.w	800763c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007774:	4b20      	ldr	r3, [pc, #128]	@ (80077f8 <UTIL_SEQ_Run+0x1f0>)
 8007776:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800777a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800777c:	f000 f938 	bl	80079f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007780:	f3ef 8310 	mrs	r3, PRIMASK
 8007784:	613b      	str	r3, [r7, #16]
  return(result);
 8007786:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8007788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800778a:	b672      	cpsid	i
}
 800778c:	bf00      	nop
  local_taskset = TaskSet;
 800778e:	4b15      	ldr	r3, [pc, #84]	@ (80077e4 <UTIL_SEQ_Run+0x1dc>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8007794:	4b14      	ldr	r3, [pc, #80]	@ (80077e8 <UTIL_SEQ_Run+0x1e0>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800779a:	4b14      	ldr	r3, [pc, #80]	@ (80077ec <UTIL_SEQ_Run+0x1e4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80077a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	401a      	ands	r2, r3
 80077a6:	4b0e      	ldr	r3, [pc, #56]	@ (80077e0 <UTIL_SEQ_Run+0x1d8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4013      	ands	r3, r2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d107      	bne.n	80077c0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80077b0:	4b0f      	ldr	r3, [pc, #60]	@ (80077f0 <UTIL_SEQ_Run+0x1e8>)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b6:	4013      	ands	r3, r2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80077bc:	f7f8 ff3a 	bl	8000634 <UTIL_SEQ_Idle>
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f383 8810 	msr	PRIMASK, r3
}
 80077ca:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80077cc:	f000 f917 	bl	80079fe <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80077d0:	4a03      	ldr	r2, [pc, #12]	@ (80077e0 <UTIL_SEQ_Run+0x1d8>)
 80077d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d4:	6013      	str	r3, [r2, #0]

  return;
 80077d6:	bf00      	nop
}
 80077d8:	3740      	adds	r7, #64	@ 0x40
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000038 	.word	0x20000038
 80077e4:	20000510 	.word	0x20000510
 80077e8:	20000514 	.word	0x20000514
 80077ec:	20000034 	.word	0x20000034
 80077f0:	20000518 	.word	0x20000518
 80077f4:	200005a0 	.word	0x200005a0
 80077f8:	2000051c 	.word	0x2000051c
 80077fc:	20000520 	.word	0x20000520

08007800 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800780c:	f3ef 8310 	mrs	r3, PRIMASK
 8007810:	617b      	str	r3, [r7, #20]
  return(result);
 8007812:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8007814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007816:	b672      	cpsid	i
}
 8007818:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f8f6 	bl	8007a0c <SEQ_BitPosition>
 8007820:	4603      	mov	r3, r0
 8007822:	4619      	mov	r1, r3
 8007824:	4a06      	ldr	r2, [pc, #24]	@ (8007840 <UTIL_SEQ_RegTask+0x40>)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f383 8810 	msr	PRIMASK, r3
}
 8007836:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8007838:	bf00      	nop
}
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000520 	.word	0x20000520

08007844 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800784e:	f3ef 8310 	mrs	r3, PRIMASK
 8007852:	60fb      	str	r3, [r7, #12]
  return(result);
 8007854:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007856:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007858:	b672      	cpsid	i
}
 800785a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800785c:	4b0d      	ldr	r3, [pc, #52]	@ (8007894 <UTIL_SEQ_SetTask+0x50>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4313      	orrs	r3, r2
 8007864:	4a0b      	ldr	r2, [pc, #44]	@ (8007894 <UTIL_SEQ_SetTask+0x50>)
 8007866:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007868:	4a0b      	ldr	r2, [pc, #44]	@ (8007898 <UTIL_SEQ_SetTask+0x54>)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	431a      	orrs	r2, r3
 8007874:	4908      	ldr	r1, [pc, #32]	@ (8007898 <UTIL_SEQ_SetTask+0x54>)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f383 8810 	msr	PRIMASK, r3
}
 8007886:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007888:	bf00      	nop
}
 800788a:	371c      	adds	r7, #28
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	20000510 	.word	0x20000510
 8007898:	200005a0 	.word	0x200005a0

0800789c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078a4:	f3ef 8310 	mrs	r3, PRIMASK
 80078a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80078aa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80078ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80078ae:	b672      	cpsid	i
}
 80078b0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	43da      	mvns	r2, r3
 80078b6:	4b08      	ldr	r3, [pc, #32]	@ (80078d8 <UTIL_SEQ_PauseTask+0x3c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4013      	ands	r3, r2
 80078bc:	4a06      	ldr	r2, [pc, #24]	@ (80078d8 <UTIL_SEQ_PauseTask+0x3c>)
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f383 8810 	msr	PRIMASK, r3
}
 80078ca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80078cc:	bf00      	nop
}
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	20000034 	.word	0x20000034

080078dc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e4:	f3ef 8310 	mrs	r3, PRIMASK
 80078e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80078ea:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80078ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80078ee:	b672      	cpsid	i
}
 80078f0:	bf00      	nop

  TaskMask |= TaskId_bm;
 80078f2:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <UTIL_SEQ_ResumeTask+0x3c>)
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	4a07      	ldr	r2, [pc, #28]	@ (8007918 <UTIL_SEQ_ResumeTask+0x3c>)
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f383 8810 	msr	PRIMASK, r3
}
 8007908:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800790a:	bf00      	nop
}
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	20000034 	.word	0x20000034

0800791c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007924:	f3ef 8310 	mrs	r3, PRIMASK
 8007928:	60fb      	str	r3, [r7, #12]
  return(result);
 800792a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800792c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800792e:	b672      	cpsid	i
}
 8007930:	bf00      	nop

  EvtSet |= EvtId_bm;
 8007932:	4b09      	ldr	r3, [pc, #36]	@ (8007958 <UTIL_SEQ_SetEvt+0x3c>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4313      	orrs	r3, r2
 800793a:	4a07      	ldr	r2, [pc, #28]	@ (8007958 <UTIL_SEQ_SetEvt+0x3c>)
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f383 8810 	msr	PRIMASK, r3
}
 8007948:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800794a:	bf00      	nop
}
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	20000514 	.word	0x20000514

0800795c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007964:	4b1f      	ldr	r3, [pc, #124]	@ (80079e4 <UTIL_SEQ_WaitEvt+0x88>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800796a:	4b1e      	ldr	r3, [pc, #120]	@ (80079e4 <UTIL_SEQ_WaitEvt+0x88>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007972:	d102      	bne.n	800797a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8007974:	2300      	movs	r3, #0
 8007976:	61fb      	str	r3, [r7, #28]
 8007978:	e005      	b.n	8007986 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800797a:	4b1a      	ldr	r3, [pc, #104]	@ (80079e4 <UTIL_SEQ_WaitEvt+0x88>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2201      	movs	r2, #1
 8007980:	fa02 f303 	lsl.w	r3, r2, r3
 8007984:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8007986:	4b18      	ldr	r3, [pc, #96]	@ (80079e8 <UTIL_SEQ_WaitEvt+0x8c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800798c:	4a16      	ldr	r2, [pc, #88]	@ (80079e8 <UTIL_SEQ_WaitEvt+0x8c>)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8007992:	e003      	b.n	800799c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	69f8      	ldr	r0, [r7, #28]
 8007998:	f7f8 fe53 	bl	8000642 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800799c:	4b13      	ldr	r3, [pc, #76]	@ (80079ec <UTIL_SEQ_WaitEvt+0x90>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4013      	ands	r3, r2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0f5      	beq.n	8007994 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80079a8:	4a0e      	ldr	r2, [pc, #56]	@ (80079e4 <UTIL_SEQ_WaitEvt+0x88>)
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ae:	f3ef 8310 	mrs	r3, PRIMASK
 80079b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80079b4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80079b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80079b8:	b672      	cpsid	i
}
 80079ba:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	43da      	mvns	r2, r3
 80079c0:	4b0a      	ldr	r3, [pc, #40]	@ (80079ec <UTIL_SEQ_WaitEvt+0x90>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4013      	ands	r3, r2
 80079c6:	4a09      	ldr	r2, [pc, #36]	@ (80079ec <UTIL_SEQ_WaitEvt+0x90>)
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f383 8810 	msr	PRIMASK, r3
}
 80079d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80079d6:	4a04      	ldr	r2, [pc, #16]	@ (80079e8 <UTIL_SEQ_WaitEvt+0x8c>)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	6013      	str	r3, [r2, #0]
  return;
 80079dc:	bf00      	nop
}
 80079de:	3720      	adds	r7, #32
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	2000051c 	.word	0x2000051c
 80079e8:	20000518 	.word	0x20000518
 80079ec:	20000514 	.word	0x20000514

080079f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80079f4:	bf00      	nop
}
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80079fe:	b480      	push	{r7}
 8007a00:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007a02:	bf00      	nop
}
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a22:	d204      	bcs.n	8007a2e <SEQ_BitPosition+0x22>
 8007a24:	2310      	movs	r3, #16
 8007a26:	73fb      	strb	r3, [r7, #15]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	041b      	lsls	r3, r3, #16
 8007a2c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a34:	d205      	bcs.n	8007a42 <SEQ_BitPosition+0x36>
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	73fb      	strb	r3, [r7, #15]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	021b      	lsls	r3, r3, #8
 8007a40:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a48:	d205      	bcs.n	8007a56 <SEQ_BitPosition+0x4a>
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	73fb      	strb	r3, [r7, #15]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	0f1b      	lsrs	r3, r3, #28
 8007a5a:	4a07      	ldr	r2, [pc, #28]	@ (8007a78 <SEQ_BitPosition+0x6c>)
 8007a5c:	5cd2      	ldrb	r2, [r2, r3]
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	4413      	add	r3, r2
 8007a62:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	f1c3 031f 	rsb	r3, r3, #31
 8007a6a:	b2db      	uxtb	r3, r3
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	08007d64 	.word	0x08007d64

08007a7c <memset>:
 8007a7c:	4402      	add	r2, r0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d100      	bne.n	8007a86 <memset+0xa>
 8007a84:	4770      	bx	lr
 8007a86:	f803 1b01 	strb.w	r1, [r3], #1
 8007a8a:	e7f9      	b.n	8007a80 <memset+0x4>

08007a8c <__libc_init_array>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8007ac4 <__libc_init_array+0x38>)
 8007a90:	4c0d      	ldr	r4, [pc, #52]	@ (8007ac8 <__libc_init_array+0x3c>)
 8007a92:	1b64      	subs	r4, r4, r5
 8007a94:	10a4      	asrs	r4, r4, #2
 8007a96:	2600      	movs	r6, #0
 8007a98:	42a6      	cmp	r6, r4
 8007a9a:	d109      	bne.n	8007ab0 <__libc_init_array+0x24>
 8007a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8007acc <__libc_init_array+0x40>)
 8007a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ad0 <__libc_init_array+0x44>)
 8007aa0:	f000 f826 	bl	8007af0 <_init>
 8007aa4:	1b64      	subs	r4, r4, r5
 8007aa6:	10a4      	asrs	r4, r4, #2
 8007aa8:	2600      	movs	r6, #0
 8007aaa:	42a6      	cmp	r6, r4
 8007aac:	d105      	bne.n	8007aba <__libc_init_array+0x2e>
 8007aae:	bd70      	pop	{r4, r5, r6, pc}
 8007ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab4:	4798      	blx	r3
 8007ab6:	3601      	adds	r6, #1
 8007ab8:	e7ee      	b.n	8007a98 <__libc_init_array+0xc>
 8007aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007abe:	4798      	blx	r3
 8007ac0:	3601      	adds	r6, #1
 8007ac2:	e7f2      	b.n	8007aaa <__libc_init_array+0x1e>
 8007ac4:	08007d7c 	.word	0x08007d7c
 8007ac8:	08007d7c 	.word	0x08007d7c
 8007acc:	08007d7c 	.word	0x08007d7c
 8007ad0:	08007d80 	.word	0x08007d80

08007ad4 <memcpy>:
 8007ad4:	440a      	add	r2, r1
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007adc:	d100      	bne.n	8007ae0 <memcpy+0xc>
 8007ade:	4770      	bx	lr
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aea:	4291      	cmp	r1, r2
 8007aec:	d1f9      	bne.n	8007ae2 <memcpy+0xe>
 8007aee:	bd10      	pop	{r4, pc}

08007af0 <_init>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	bf00      	nop
 8007af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af6:	bc08      	pop	{r3}
 8007af8:	469e      	mov	lr, r3
 8007afa:	4770      	bx	lr

08007afc <_fini>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	bf00      	nop
 8007b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b02:	bc08      	pop	{r3}
 8007b04:	469e      	mov	lr, r3
 8007b06:	4770      	bx	lr
