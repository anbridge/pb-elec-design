
ble_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bca0  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b74  0800bde0  0800bde0  0000cde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f954  0800f954  00010954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f95c  0800f95c  0001095c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f960  0800f960  00010960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000008  0800f964  00011008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000a0  0800f9fc  000110a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000d8  0800fa31  000110d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  200000f0  0800fa42  000110f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800fa42  000117c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00012000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00012000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800fa42  000111e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002b17e  00000000  00000000  00011a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e83  00000000  00000000  0003cc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000024b8  00000000  00000000  00042a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001c1b  00000000  00000000  00044f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026577  00000000  00000000  00046b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002867e  00000000  00000000  0006d0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d1748  00000000  00000000  00095760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00166ea8  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009c80  00000000  00000000  00166eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000083  00000000  00000000  00170b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000f0 	.word	0x200000f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800bdc8 	.word	0x0800bdc8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f4 	.word	0x200000f4
 800017c:	0800bdc8 	.word	0x0800bdc8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_uldivmod>:
 8000a68:	b953      	cbnz	r3, 8000a80 <__aeabi_uldivmod+0x18>
 8000a6a:	b94a      	cbnz	r2, 8000a80 <__aeabi_uldivmod+0x18>
 8000a6c:	2900      	cmp	r1, #0
 8000a6e:	bf08      	it	eq
 8000a70:	2800      	cmpeq	r0, #0
 8000a72:	bf1c      	itt	ne
 8000a74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a7c:	f000 b96a 	b.w	8000d54 <__aeabi_idiv0>
 8000a80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a88:	f000 f806 	bl	8000a98 <__udivmoddi4>
 8000a8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a94:	b004      	add	sp, #16
 8000a96:	4770      	bx	lr

08000a98 <__udivmoddi4>:
 8000a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a9c:	9d08      	ldr	r5, [sp, #32]
 8000a9e:	460c      	mov	r4, r1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d14e      	bne.n	8000b42 <__udivmoddi4+0xaa>
 8000aa4:	4694      	mov	ip, r2
 8000aa6:	458c      	cmp	ip, r1
 8000aa8:	4686      	mov	lr, r0
 8000aaa:	fab2 f282 	clz	r2, r2
 8000aae:	d962      	bls.n	8000b76 <__udivmoddi4+0xde>
 8000ab0:	b14a      	cbz	r2, 8000ac6 <__udivmoddi4+0x2e>
 8000ab2:	f1c2 0320 	rsb	r3, r2, #32
 8000ab6:	4091      	lsls	r1, r2
 8000ab8:	fa20 f303 	lsr.w	r3, r0, r3
 8000abc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac0:	4319      	orrs	r1, r3
 8000ac2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ac6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aca:	fa1f f68c 	uxth.w	r6, ip
 8000ace:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ad6:	fb07 1114 	mls	r1, r7, r4, r1
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb04 f106 	mul.w	r1, r4, r6
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d90a      	bls.n	8000afc <__udivmoddi4+0x64>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000aee:	f080 8112 	bcs.w	8000d16 <__udivmoddi4+0x27e>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 810f 	bls.w	8000d16 <__udivmoddi4+0x27e>
 8000af8:	3c02      	subs	r4, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	1a59      	subs	r1, r3, r1
 8000afe:	fa1f f38e 	uxth.w	r3, lr
 8000b02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b06:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb00 f606 	mul.w	r6, r0, r6
 8000b12:	429e      	cmp	r6, r3
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x94>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b1e:	f080 80fc 	bcs.w	8000d1a <__udivmoddi4+0x282>
 8000b22:	429e      	cmp	r6, r3
 8000b24:	f240 80f9 	bls.w	8000d1a <__udivmoddi4+0x282>
 8000b28:	4463      	add	r3, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa6>
 8000b36:	40d3      	lsrs	r3, r2
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xba>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb4>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa6>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x150>
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xcc>
 8000b5e:	4290      	cmp	r0, r2
 8000b60:	f0c0 80f0 	bcc.w	8000d44 <__udivmoddi4+0x2ac>
 8000b64:	1a86      	subs	r6, r0, r2
 8000b66:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	2d00      	cmp	r5, #0
 8000b6e:	d0e6      	beq.n	8000b3e <__udivmoddi4+0xa6>
 8000b70:	e9c5 6300 	strd	r6, r3, [r5]
 8000b74:	e7e3      	b.n	8000b3e <__udivmoddi4+0xa6>
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x204>
 8000b7c:	eba1 040c 	sub.w	r4, r1, ip
 8000b80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b84:	fa1f f78c 	uxth.w	r7, ip
 8000b88:	2101      	movs	r1, #1
 8000b8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b92:	fb08 4416 	mls	r4, r8, r6, r4
 8000b96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9a:	fb07 f006 	mul.w	r0, r7, r6
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d908      	bls.n	8000bb4 <__udivmoddi4+0x11c>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000baa:	d202      	bcs.n	8000bb2 <__udivmoddi4+0x11a>
 8000bac:	4298      	cmp	r0, r3
 8000bae:	f200 80cd 	bhi.w	8000d4c <__udivmoddi4+0x2b4>
 8000bb2:	4626      	mov	r6, r4
 8000bb4:	1a1c      	subs	r4, r3, r0
 8000bb6:	fa1f f38e 	uxth.w	r3, lr
 8000bba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb00 f707 	mul.w	r7, r0, r7
 8000bca:	429f      	cmp	r7, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x148>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x146>
 8000bd8:	429f      	cmp	r7, r3
 8000bda:	f200 80b0 	bhi.w	8000d3e <__udivmoddi4+0x2a6>
 8000bde:	4620      	mov	r0, r4
 8000be0:	1bdb      	subs	r3, r3, r7
 8000be2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x9c>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bf8:	fa04 f301 	lsl.w	r3, r4, r1
 8000bfc:	ea43 030c 	orr.w	r3, r3, ip
 8000c00:	40f4      	lsrs	r4, r6
 8000c02:	fa00 f801 	lsl.w	r8, r0, r1
 8000c06:	0c38      	lsrs	r0, r7, #16
 8000c08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000c10:	fa1f fc87 	uxth.w	ip, r7
 8000c14:	fb00 441e 	mls	r4, r0, lr, r4
 8000c18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000c20:	45a1      	cmp	r9, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x1a6>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c2e:	f080 8084 	bcs.w	8000d3a <__udivmoddi4+0x2a2>
 8000c32:	45a1      	cmp	r9, r4
 8000c34:	f240 8081 	bls.w	8000d3a <__udivmoddi4+0x2a2>
 8000c38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3c:	443c      	add	r4, r7
 8000c3e:	eba4 0409 	sub.w	r4, r4, r9
 8000c42:	fa1f f983 	uxth.w	r9, r3
 8000c46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d907      	bls.n	8000c6a <__udivmoddi4+0x1d2>
 8000c5a:	193c      	adds	r4, r7, r4
 8000c5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c60:	d267      	bcs.n	8000d32 <__udivmoddi4+0x29a>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d965      	bls.n	8000d32 <__udivmoddi4+0x29a>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000c72:	eba4 040c 	sub.w	r4, r4, ip
 8000c76:	429c      	cmp	r4, r3
 8000c78:	46ce      	mov	lr, r9
 8000c7a:	469c      	mov	ip, r3
 8000c7c:	d351      	bcc.n	8000d22 <__udivmoddi4+0x28a>
 8000c7e:	d04e      	beq.n	8000d1e <__udivmoddi4+0x286>
 8000c80:	b155      	cbz	r5, 8000c98 <__udivmoddi4+0x200>
 8000c82:	ebb8 030e 	subs.w	r3, r8, lr
 8000c86:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	40cb      	lsrs	r3, r1
 8000c90:	431e      	orrs	r6, r3
 8000c92:	40cc      	lsrs	r4, r1
 8000c94:	e9c5 6400 	strd	r6, r4, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e750      	b.n	8000b3e <__udivmoddi4+0xa6>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa24 f303 	lsr.w	r3, r4, r3
 8000cac:	4094      	lsls	r4, r2
 8000cae:	430c      	orrs	r4, r1
 8000cb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb8:	fa1f f78c 	uxth.w	r7, ip
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb00 f107 	mul.w	r1, r0, r7
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x24c>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cda:	d22c      	bcs.n	8000d36 <__udivmoddi4+0x29e>
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	d92a      	bls.n	8000d36 <__udivmoddi4+0x29e>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1a5b      	subs	r3, r3, r1
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cec:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf4:	fb01 f307 	mul.w	r3, r1, r7
 8000cf8:	42a3      	cmp	r3, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x276>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d04:	d213      	bcs.n	8000d2e <__udivmoddi4+0x296>
 8000d06:	42a3      	cmp	r3, r4
 8000d08:	d911      	bls.n	8000d2e <__udivmoddi4+0x296>
 8000d0a:	3902      	subs	r1, #2
 8000d0c:	4464      	add	r4, ip
 8000d0e:	1ae4      	subs	r4, r4, r3
 8000d10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d14:	e739      	b.n	8000b8a <__udivmoddi4+0xf2>
 8000d16:	4604      	mov	r4, r0
 8000d18:	e6f0      	b.n	8000afc <__udivmoddi4+0x64>
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e706      	b.n	8000b2c <__udivmoddi4+0x94>
 8000d1e:	45c8      	cmp	r8, r9
 8000d20:	d2ae      	bcs.n	8000c80 <__udivmoddi4+0x1e8>
 8000d22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2a:	3801      	subs	r0, #1
 8000d2c:	e7a8      	b.n	8000c80 <__udivmoddi4+0x1e8>
 8000d2e:	4631      	mov	r1, r6
 8000d30:	e7ed      	b.n	8000d0e <__udivmoddi4+0x276>
 8000d32:	4603      	mov	r3, r0
 8000d34:	e799      	b.n	8000c6a <__udivmoddi4+0x1d2>
 8000d36:	4630      	mov	r0, r6
 8000d38:	e7d4      	b.n	8000ce4 <__udivmoddi4+0x24c>
 8000d3a:	46d6      	mov	lr, sl
 8000d3c:	e77f      	b.n	8000c3e <__udivmoddi4+0x1a6>
 8000d3e:	4463      	add	r3, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e74d      	b.n	8000be0 <__udivmoddi4+0x148>
 8000d44:	4606      	mov	r6, r0
 8000d46:	4623      	mov	r3, r4
 8000d48:	4608      	mov	r0, r1
 8000d4a:	e70f      	b.n	8000b6c <__udivmoddi4+0xd4>
 8000d4c:	3e02      	subs	r6, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	e730      	b.n	8000bb4 <__udivmoddi4+0x11c>
 8000d52:	bf00      	nop

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <icm20948_set_user_bank>:

I2C_HandleTypeDef i2c_bus;

// select user bank 
ICM_20948_Status_e icm20948_set_user_bank(uint8_t bank)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af04      	add	r7, sp, #16
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
    bank = (bank << 4) & 0x30; // bits 1:0 of bank -> 5:4 of icm bank select register
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	71fb      	strb	r3, [r7, #7]
    if(HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, REG_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &bank, 1, 1000))
 8000d70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	2301      	movs	r3, #1
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	227f      	movs	r2, #127	@ 0x7f
 8000d82:	21d0      	movs	r1, #208	@ 0xd0
 8000d84:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <icm20948_set_user_bank+0x48>)
 8000d86:	f005 f9f5 	bl	8006174 <HAL_I2C_Mem_Write>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <icm20948_set_user_bank+0x3c>
    	return ICM_20948_Stat_Err;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <icm20948_set_user_bank+0x3e>
    return ICM_20948_Stat_Ok;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000010c 	.word	0x2000010c

08000da4 <sensor_type_2_android_sensor>:
    {
        1, 0};


int8_t sensor_type_2_android_sensor(enum inv_icm20948_sensor sensor)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  switch (sensor)
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b13      	cmp	r3, #19
 8000db2:	d853      	bhi.n	8000e5c <sensor_type_2_android_sensor+0xb8>
 8000db4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dbc <sensor_type_2_android_sensor+0x18>)
 8000db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dba:	bf00      	nop
 8000dbc:	08000e0d 	.word	0x08000e0d
 8000dc0:	08000e11 	.word	0x08000e11
 8000dc4:	08000e15 	.word	0x08000e15
 8000dc8:	08000e19 	.word	0x08000e19
 8000dcc:	08000e1d 	.word	0x08000e1d
 8000dd0:	08000e21 	.word	0x08000e21
 8000dd4:	08000e25 	.word	0x08000e25
 8000dd8:	08000e29 	.word	0x08000e29
 8000ddc:	08000e2d 	.word	0x08000e2d
 8000de0:	08000e31 	.word	0x08000e31
 8000de4:	08000e35 	.word	0x08000e35
 8000de8:	08000e39 	.word	0x08000e39
 8000dec:	08000e3d 	.word	0x08000e3d
 8000df0:	08000e41 	.word	0x08000e41
 8000df4:	08000e45 	.word	0x08000e45
 8000df8:	08000e49 	.word	0x08000e49
 8000dfc:	08000e4d 	.word	0x08000e4d
 8000e00:	08000e51 	.word	0x08000e51
 8000e04:	08000e55 	.word	0x08000e55
 8000e08:	08000e59 	.word	0x08000e59
  {
  case INV_ICM20948_SENSOR_ACCELEROMETER:
    return ANDROID_SENSOR_ACCELEROMETER; // 1
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e026      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GYROSCOPE:
    return ANDROID_SENSOR_GYROSCOPE; // 4
 8000e10:	2304      	movs	r3, #4
 8000e12:	e024      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_RAW_ACCELEROMETER:
    return ANDROID_SENSOR_RAW_ACCELEROMETER; // 42
 8000e14:	232a      	movs	r3, #42	@ 0x2a
 8000e16:	e022      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_RAW_GYROSCOPE:
    return ANDROID_SENSOR_RAW_GYROSCOPE; // 43
 8000e18:	232b      	movs	r3, #43	@ 0x2b
 8000e1a:	e020      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED:
    return ANDROID_SENSOR_MAGNETIC_FIELD_UNCALIBRATED; // 14
 8000e1c:	230e      	movs	r3, #14
 8000e1e:	e01e      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED:
    return ANDROID_SENSOR_GYROSCOPE_UNCALIBRATED; // 16
 8000e20:	2310      	movs	r3, #16
 8000e22:	e01c      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_ACTIVITY_CLASSIFICATON:
    return ANDROID_SENSOR_ACTIVITY_CLASSIFICATON; // 47
 8000e24:	232f      	movs	r3, #47	@ 0x2f
 8000e26:	e01a      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_STEP_DETECTOR:
    return ANDROID_SENSOR_STEP_DETECTOR; // 18
 8000e28:	2312      	movs	r3, #18
 8000e2a:	e018      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_STEP_COUNTER:
    return ANDROID_SENSOR_STEP_COUNTER; // 19
 8000e2c:	2313      	movs	r3, #19
 8000e2e:	e016      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GAME_ROTATION_VECTOR:
    return ANDROID_SENSOR_GAME_ROTATION_VECTOR; // 15
 8000e30:	230f      	movs	r3, #15
 8000e32:	e014      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_ROTATION_VECTOR:
    return ANDROID_SENSOR_ROTATION_VECTOR; // 11
 8000e34:	230b      	movs	r3, #11
 8000e36:	e012      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GEOMAGNETIC_ROTATION_VECTOR:
    return ANDROID_SENSOR_GEOMAGNETIC_ROTATION_VECTOR; // 20
 8000e38:	2314      	movs	r3, #20
 8000e3a:	e010      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD:
    return ANDROID_SENSOR_GEOMAGNETIC_FIELD; // 2
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e00e      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_WAKEUP_SIGNIFICANT_MOTION:
    return ANDROID_SENSOR_WAKEUP_SIGNIFICANT_MOTION; // 17
 8000e40:	2311      	movs	r3, #17
 8000e42:	e00c      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_FLIP_PICKUP:
    return ANDROID_SENSOR_FLIP_PICKUP; // 46
 8000e44:	232e      	movs	r3, #46	@ 0x2e
 8000e46:	e00a      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_WAKEUP_TILT_DETECTOR:
    return ANDROID_SENSOR_WAKEUP_TILT_DETECTOR; // 41
 8000e48:	2329      	movs	r3, #41	@ 0x29
 8000e4a:	e008      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GRAVITY:
    return ANDROID_SENSOR_GRAVITY; // 9
 8000e4c:	2309      	movs	r3, #9
 8000e4e:	e006      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_LINEAR_ACCELERATION:
    return ANDROID_SENSOR_LINEAR_ACCELERATION; // 10
 8000e50:	230a      	movs	r3, #10
 8000e52:	e004      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_ORIENTATION:
    return ANDROID_SENSOR_ORIENTATION; // 3
 8000e54:	2303      	movs	r3, #3
 8000e56:	e002      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_B2S:
    return ANDROID_SENSOR_B2S; // 45
 8000e58:	232d      	movs	r3, #45	@ 0x2d
 8000e5a:	e000      	b.n	8000e5e <sensor_type_2_android_sensor+0xba>
  default:
    return ANDROID_SENSOR_NUM_MAX;
 8000e5c:	232c      	movs	r3, #44	@ 0x2c
  }
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <icm20948_i2c_controller_configure_peripheral>:
        0x4048, // 43 Raw Gyr
};


int8_t icm20948_i2c_controller_configure_peripheral(uint8_t peripheral, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap, uint8_t dataOut)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b08d      	sub	sp, #52	@ 0x34
 8000e70:	af04      	add	r7, sp, #16
 8000e72:	4604      	mov	r4, r0
 8000e74:	4608      	mov	r0, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4623      	mov	r3, r4
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71bb      	strb	r3, [r7, #6]
 8000e82:	460b      	mov	r3, r1
 8000e84:	717b      	strb	r3, [r7, #5]
 8000e86:	4613      	mov	r3, r2
 8000e88:	713b      	strb	r3, [r7, #4]
  uint8_t periph_addr_reg;
  uint8_t periph_reg_reg;
  uint8_t periph_ctrl_reg;
  uint8_t periph_do_reg;

  switch (peripheral)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d82f      	bhi.n	8000ef0 <icm20948_i2c_controller_configure_peripheral+0x84>
 8000e90:	a201      	add	r2, pc, #4	@ (adr r2, 8000e98 <icm20948_i2c_controller_configure_peripheral+0x2c>)
 8000e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e96:	bf00      	nop
 8000e98:	08000ea9 	.word	0x08000ea9
 8000e9c:	08000ebb 	.word	0x08000ebb
 8000ea0:	08000ecd 	.word	0x08000ecd
 8000ea4:	08000edf 	.word	0x08000edf
  {
  case 0:
    periph_addr_reg = AGB3_REG_I2C_PERIPH0_ADDR;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH0_REG;
 8000eac:	2304      	movs	r3, #4
 8000eae:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH0_CTRL;
 8000eb0:	2305      	movs	r3, #5
 8000eb2:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH0_DO;
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	773b      	strb	r3, [r7, #28]
    break;
 8000eb8:	e01d      	b.n	8000ef6 <icm20948_i2c_controller_configure_peripheral+0x8a>
  case 1:
    periph_addr_reg = AGB3_REG_I2C_PERIPH1_ADDR;
 8000eba:	2307      	movs	r3, #7
 8000ebc:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH1_REG;
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH1_CTRL;
 8000ec2:	2309      	movs	r3, #9
 8000ec4:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH1_DO;
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	773b      	strb	r3, [r7, #28]
    break;
 8000eca:	e014      	b.n	8000ef6 <icm20948_i2c_controller_configure_peripheral+0x8a>
  case 2:
    periph_addr_reg = AGB3_REG_I2C_PERIPH2_ADDR;
 8000ecc:	230b      	movs	r3, #11
 8000ece:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH2_REG;
 8000ed0:	230c      	movs	r3, #12
 8000ed2:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH2_CTRL;
 8000ed4:	230d      	movs	r3, #13
 8000ed6:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH2_DO;
 8000ed8:	230e      	movs	r3, #14
 8000eda:	773b      	strb	r3, [r7, #28]
    break;
 8000edc:	e00b      	b.n	8000ef6 <icm20948_i2c_controller_configure_peripheral+0x8a>
  case 3:
    periph_addr_reg = AGB3_REG_I2C_PERIPH3_ADDR;
 8000ede:	230f      	movs	r3, #15
 8000ee0:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH3_REG;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH3_CTRL;
 8000ee6:	2311      	movs	r3, #17
 8000ee8:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH3_DO;
 8000eea:	2312      	movs	r3, #18
 8000eec:	773b      	strb	r3, [r7, #28]
    break;
 8000eee:	e002      	b.n	8000ef6 <icm20948_i2c_controller_configure_peripheral+0x8a>
  default:
    return -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ef4:	e080      	b.n	8000ff8 <icm20948_i2c_controller_configure_peripheral+0x18c>
  }

  icm20948_set_user_bank(3);
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f7ff ff2e 	bl	8000d58 <icm20948_set_user_bank>


  // Set the peripheral address and the Rw flag
  ICM_20948_I2C_PERIPHX_ADDR_t address;
  address.ID = addr;
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	7e3b      	ldrb	r3, [r7, #24]
 8000f06:	f362 0306 	bfi	r3, r2, #0, #7
 8000f0a:	763b      	strb	r3, [r7, #24]
  if (Rw)
 8000f0c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <icm20948_i2c_controller_configure_peripheral+0xb2>
  {
    address.RNW = 1;
 8000f14:	7e3b      	ldrb	r3, [r7, #24]
 8000f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f1a:	763b      	strb	r3, [r7, #24]
 8000f1c:	e003      	b.n	8000f26 <icm20948_i2c_controller_configure_peripheral+0xba>
  }
  else
  {
    address.RNW = 0; // Make sure bit is clear (just in case there is any garbage in that RAM location)
 8000f1e:	7e3b      	ldrb	r3, [r7, #24]
 8000f20:	f36f 13c7 	bfc	r3, #7, #1
 8000f24:	763b      	strb	r3, [r7, #24]
  }
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_addr_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&address, sizeof(ICM_20948_I2C_PERIPHX_ADDR_t), 1000);
 8000f26:	7ffb      	ldrb	r3, [r7, #31]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	2301      	movs	r3, #1
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	21d0      	movs	r1, #208	@ 0xd0
 8000f3e:	4830      	ldr	r0, [pc, #192]	@ (8001000 <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000f40:	f005 f918 	bl	8006174 <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, periph_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_PERIPHX_ADDR_t));


  // If we are setting up a write, configure the Data Out register too
  if (!Rw)
 8000f44:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f48:	f083 0301 	eor.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d011      	beq.n	8000f76 <icm20948_i2c_controller_configure_peripheral+0x10a>
  {
    ICM_20948_I2C_PERIPHX_DO_t dataOutByte;
    dataOutByte.DO = dataOut;
 8000f52:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000f56:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_do_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dataOutByte, sizeof(ICM_20948_I2C_PERIPHX_DO_t), 1000);
 8000f58:	7f3b      	ldrb	r3, [r7, #28]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2301      	movs	r3, #1
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	21d0      	movs	r1, #208	@ 0xd0
 8000f70:	4823      	ldr	r0, [pc, #140]	@ (8001000 <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000f72:	f005 f8ff 	bl	8006174 <HAL_I2C_Mem_Write>

  }

  // Set the peripheral sub-address (register address)
  ICM_20948_I2C_PERIPHX_REG_t subaddress;
  subaddress.REG = reg;
 8000f76:	797b      	ldrb	r3, [r7, #5]
 8000f78:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_reg_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_PERIPHX_REG_t), 1000);
 8000f7a:	7fbb      	ldrb	r3, [r7, #30]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	21d0      	movs	r1, #208	@ 0xd0
 8000f92:	481b      	ldr	r0, [pc, #108]	@ (8001000 <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000f94:	f005 f8ee 	bl	8006174 <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, periph_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_PERIPHX_REG_t));


  // Set up the control info
  ICM_20948_I2C_PERIPHX_CTRL_t ctrl;
  ctrl.LENG = len;
 8000f98:	793b      	ldrb	r3, [r7, #4]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	7c3b      	ldrb	r3, [r7, #16]
 8000fa2:	f362 0303 	bfi	r3, r2, #0, #4
 8000fa6:	743b      	strb	r3, [r7, #16]
  ctrl.EN = enable;
 8000fa8:	7c3b      	ldrb	r3, [r7, #16]
 8000faa:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8000fae:	f362 13c7 	bfi	r3, r2, #7, #1
 8000fb2:	743b      	strb	r3, [r7, #16]
  ctrl.REG_DIS = data_only;
 8000fb4:	7c3b      	ldrb	r3, [r7, #16]
 8000fb6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000fba:	f362 1345 	bfi	r3, r2, #5, #1
 8000fbe:	743b      	strb	r3, [r7, #16]
  ctrl.GRP = grp;
 8000fc0:	7c3b      	ldrb	r3, [r7, #16]
 8000fc2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8000fc6:	f362 1304 	bfi	r3, r2, #4, #1
 8000fca:	743b      	strb	r3, [r7, #16]
  ctrl.BYTE_SW = swap;
 8000fcc:	7c3b      	ldrb	r3, [r7, #16]
 8000fce:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8000fd2:	f362 1386 	bfi	r3, r2, #6, #1
 8000fd6:	743b      	strb	r3, [r7, #16]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_ctrl_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_PERIPHX_CTRL_t), 1000);
 8000fd8:	7f7b      	ldrb	r3, [r7, #29]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	21d0      	movs	r1, #208	@ 0xd0
 8000ff0:	4803      	ldr	r0, [pc, #12]	@ (8001000 <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000ff2:	f005 f8bf 	bl	8006174 <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, periph_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_PERIPHX_CTRL_t));

  return 0;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3724      	adds	r7, #36	@ 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	2000010c 	.word	0x2000010c

08001004 <icm20948_set_clock_source>:


int8_t icm20948_set_clock_source(ICM_20948_PWR_MGMT_1_CLKSEL_e source)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af04      	add	r7, sp, #16
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  ICM_20948_PWR_MGMT_1_t reg;
  icm20948_set_user_bank(0); // Must be in the right bank
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fea2 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 8001014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2301      	movs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	2206      	movs	r2, #6
 8001028:	21d0      	movs	r1, #208	@ 0xd0
 800102a:	480f      	ldr	r0, [pc, #60]	@ (8001068 <icm20948_set_clock_source+0x64>)
 800102c:	f005 f9b6 	bl	800639c <HAL_I2C_Mem_Read>

  reg.CLKSEL = source;
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	b2da      	uxtb	r2, r3
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	f362 0302 	bfi	r3, r2, #0, #3
 800103e:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 8001040:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2206      	movs	r2, #6
 8001054:	21d0      	movs	r1, #208	@ 0xd0
 8001056:	4804      	ldr	r0, [pc, #16]	@ (8001068 <icm20948_set_clock_source+0x64>)
 8001058:	f005 f88c 	bl	8006174 <HAL_I2C_Mem_Write>

  return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000010c 	.word	0x2000010c

0800106c <icm20948_set_sample_mode>:


int8_t icm20948_set_sample_mode(ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
  /*if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
  {
    return -1;
  }*/

  icm20948_set_user_bank(0); // Must be in the right bank
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff fe6b 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_LP_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t), 1000);
 8001082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	2301      	movs	r3, #1
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	2205      	movs	r2, #5
 8001096:	21d0      	movs	r1, #208	@ 0xd0
 8001098:	481e      	ldr	r0, [pc, #120]	@ (8001114 <icm20948_set_sample_mode+0xa8>)
 800109a:	f005 f97f 	bl	800639c <HAL_I2C_Mem_Read>


  if (sensors & ICM_20948_Internal_Acc)
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d007      	beq.n	80010b8 <icm20948_set_sample_mode+0x4c>
  {
    reg.ACCEL_CYCLE = mode;
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	7b3b      	ldrb	r3, [r7, #12]
 80010b2:	f362 1345 	bfi	r3, r2, #5, #1
 80010b6:	733b      	strb	r3, [r7, #12]
  } // Set all desired sensors to this setting
  if (sensors & ICM_20948_Internal_Gyr)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <icm20948_set_sample_mode+0x66>
  {
    reg.GYRO_CYCLE = mode;
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	7b3b      	ldrb	r3, [r7, #12]
 80010cc:	f362 1304 	bfi	r3, r2, #4, #1
 80010d0:	733b      	strb	r3, [r7, #12]
  }
  if (sensors & ICM_20948_Internal_Mst)
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <icm20948_set_sample_mode+0x80>
  {
    reg.I2C_MST_CYCLE = mode;
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	f362 1386 	bfi	r3, r2, #6, #1
 80010ea:	733b      	strb	r3, [r7, #12]
  }

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_LP_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t), 1000);
 80010ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	2301      	movs	r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	2205      	movs	r2, #5
 8001100:	21d0      	movs	r1, #208	@ 0xd0
 8001102:	4804      	ldr	r0, [pc, #16]	@ (8001114 <icm20948_set_sample_mode+0xa8>)
 8001104:	f005 f836 	bl	8006174 <HAL_I2C_Mem_Write>

  // Check the data was written correctly
  //HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_LP_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t), 1000);
  return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000010c 	.word	0x2000010c

08001118 <icm20948_enable_FIFO>:


int8_t icm20948_enable_FIFO(bool enable)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af04      	add	r7, sp, #16
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  ICM_20948_USER_CTRL_t ctrl;
  icm20948_set_user_bank(0);
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff fe18 	bl	8000d58 <icm20948_set_user_bank>


  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_USER_CTRL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 8001128:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	21d0      	movs	r1, #208	@ 0xd0
 800113e:	4811      	ldr	r0, [pc, #68]	@ (8001184 <icm20948_enable_FIFO+0x6c>)
 8001140:	f005 f92c 	bl	800639c <HAL_I2C_Mem_Read>

  if (enable)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <icm20948_enable_FIFO+0x3c>
    ctrl.FIFO_EN = 1;
 800114a:	7b3b      	ldrb	r3, [r7, #12]
 800114c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001150:	733b      	strb	r3, [r7, #12]
 8001152:	e003      	b.n	800115c <icm20948_enable_FIFO+0x44>
  else
    ctrl.FIFO_EN = 0;
 8001154:	7b3b      	ldrb	r3, [r7, #12]
 8001156:	f36f 1386 	bfc	r3, #6, #1
 800115a:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_USER_CTRL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 800115c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	2301      	movs	r3, #1
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	21d0      	movs	r1, #208	@ 0xd0
 8001172:	4804      	ldr	r0, [pc, #16]	@ (8001184 <icm20948_enable_FIFO+0x6c>)
 8001174:	f004 fffe 	bl	8006174 <HAL_I2C_Mem_Write>

  return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000010c 	.word	0x2000010c

08001188 <icm20948_reset_FIFO>:


int8_t icm20948_reset_FIFO()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af04      	add	r7, sp, #16
  ICM_20948_FIFO_RST_t ctrl;
  icm20948_set_user_bank(0);
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fde2 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_RST, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_FIFO_RST_t), 1000);
 8001194:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	2268      	movs	r2, #104	@ 0x68
 80011a6:	21d0      	movs	r1, #208	@ 0xd0
 80011a8:	4815      	ldr	r0, [pc, #84]	@ (8001200 <icm20948_reset_FIFO+0x78>)
 80011aa:	f005 f8f7 	bl	800639c <HAL_I2C_Mem_Read>

  ctrl.FIFO_RESET = 0x1F; // Datasheet says "FIFO_RESET[4:0]"
 80011ae:	793b      	ldrb	r3, [r7, #4]
 80011b0:	f043 031f 	orr.w	r3, r3, #31
 80011b4:	713b      	strb	r3, [r7, #4]

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_RST, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_FIFO_RST_t), 1000);
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	2268      	movs	r2, #104	@ 0x68
 80011c8:	21d0      	movs	r1, #208	@ 0xd0
 80011ca:	480d      	ldr	r0, [pc, #52]	@ (8001200 <icm20948_reset_FIFO+0x78>)
 80011cc:	f004 ffd2 	bl	8006174 <HAL_I2C_Mem_Write>

  //delay ???

  ctrl.FIFO_RESET = 0x1E; // The InvenSense Nucleo examples write 0x1F followed by 0x1E
 80011d0:	793b      	ldrb	r3, [r7, #4]
 80011d2:	221e      	movs	r2, #30
 80011d4:	f362 0304 	bfi	r3, r2, #0, #5
 80011d8:	713b      	strb	r3, [r7, #4]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_RST, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_FIFO_RST_t), 1000);
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	2268      	movs	r2, #104	@ 0x68
 80011ec:	21d0      	movs	r1, #208	@ 0xd0
 80011ee:	4804      	ldr	r0, [pc, #16]	@ (8001200 <icm20948_reset_FIFO+0x78>)
 80011f0:	f004 ffc0 	bl	8006174 <HAL_I2C_Mem_Write>

  return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000010c 	.word	0x2000010c

08001204 <icm20948_enable_DMP>:


int8_t icm20948_enable_DMP(bool enable)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  ICM_20948_USER_CTRL_t ctrl;
  
  icm20948_set_user_bank(0);
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fda2 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_USER_CTRL,  I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 8001214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	2301      	movs	r3, #1
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	21d0      	movs	r1, #208	@ 0xd0
 800122a:	4811      	ldr	r0, [pc, #68]	@ (8001270 <icm20948_enable_DMP+0x6c>)
 800122c:	f005 f8b6 	bl	800639c <HAL_I2C_Mem_Read>


  if (enable)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <icm20948_enable_DMP+0x3c>
    ctrl.DMP_EN = 1;
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800123c:	733b      	strb	r3, [r7, #12]
 800123e:	e003      	b.n	8001248 <icm20948_enable_DMP+0x44>
  else
    ctrl.DMP_EN = 0;
 8001240:	7b3b      	ldrb	r3, [r7, #12]
 8001242:	f36f 13c7 	bfc	r3, #7, #1
 8001246:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_USER_CTRL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 8001248:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2301      	movs	r3, #1
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	21d0      	movs	r1, #208	@ 0xd0
 800125e:	4804      	ldr	r0, [pc, #16]	@ (8001270 <icm20948_enable_DMP+0x6c>)
 8001260:	f004 ff88 	bl	8006174 <HAL_I2C_Mem_Write>
  
  return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000010c 	.word	0x2000010c

08001274 <icm20948_reset_DMP>:


int8_t icm20948_reset_DMP()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af04      	add	r7, sp, #16
  ICM_20948_USER_CTRL_t ctrl;
  icm20948_set_user_bank(0);
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fd6c 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR,  AGB0_REG_USER_CTRL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 8001280:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	21d0      	movs	r1, #208	@ 0xd0
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <icm20948_reset_DMP+0x54>)
 8001296:	f005 f881 	bl	800639c <HAL_I2C_Mem_Read>

  ctrl.DMP_RST = 1;
 800129a:	793b      	ldrb	r3, [r7, #4]
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	713b      	strb	r3, [r7, #4]

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_USER_CTRL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t), 1000);
 80012a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	21d0      	movs	r1, #208	@ 0xd0
 80012b6:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <icm20948_reset_DMP+0x54>)
 80012b8:	f004 ff5c 	bl	8006174 <HAL_I2C_Mem_Write>

  return 0;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000010c 	.word	0x2000010c

080012cc <icm20948_set_full_scale>:


int8_t icm20948_set_full_scale(ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	4603      	mov	r3, r0
 80012d4:	7139      	strb	r1, [r7, #4]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <icm20948_set_full_scale+0x1c>
  {
    return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e6:	e074      	b.n	80013d2 <icm20948_set_full_scale+0x106>
  }

  if (sensors & ICM_20948_Internal_Acc)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d034      	beq.n	800135c <icm20948_set_full_scale+0x90>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 80012f2:	2002      	movs	r0, #2
 80012f4:	f7ff fd30 	bl	8000d58 <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 80012f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2301      	movs	r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	2214      	movs	r2, #20
 800130c:	21d0      	movs	r1, #208	@ 0xd0
 800130e:	4833      	ldr	r0, [pc, #204]	@ (80013dc <icm20948_set_full_scale+0x110>)
 8001310:	f005 f844 	bl	800639c <HAL_I2C_Mem_Read>
    reg.ACCEL_FS_SEL = fss.a;
 8001314:	793b      	ldrb	r3, [r7, #4]
 8001316:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800131a:	b2da      	uxtb	r2, r3
 800131c:	7b3b      	ldrb	r3, [r7, #12]
 800131e:	f362 0342 	bfi	r3, r2, #1, #2
 8001322:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8001324:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	2214      	movs	r2, #20
 8001338:	21d0      	movs	r1, #208	@ 0xd0
 800133a:	4828      	ldr	r0, [pc, #160]	@ (80013dc <icm20948_set_full_scale+0x110>)
 800133c:	f004 ff1a 	bl	8006174 <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8001340:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2301      	movs	r3, #1
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2301      	movs	r3, #1
 8001352:	2214      	movs	r2, #20
 8001354:	21d0      	movs	r1, #208	@ 0xd0
 8001356:	4821      	ldr	r0, [pc, #132]	@ (80013dc <icm20948_set_full_scale+0x110>)
 8001358:	f005 f820 	bl	800639c <HAL_I2C_Mem_Read>
    
  }
  if (sensors & ICM_20948_Internal_Gyr)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d034      	beq.n	80013d0 <icm20948_set_full_scale+0x104>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 8001366:	2002      	movs	r0, #2
 8001368:	f7ff fcf6 	bl	8000d58 <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR,AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 800136c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	2201      	movs	r2, #1
 8001380:	21d0      	movs	r1, #208	@ 0xd0
 8001382:	4816      	ldr	r0, [pc, #88]	@ (80013dc <icm20948_set_full_scale+0x110>)
 8001384:	f005 f80a 	bl	800639c <HAL_I2C_Mem_Read>
    reg.GYRO_FS_SEL = fss.g;
 8001388:	793b      	ldrb	r3, [r7, #4]
 800138a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	7a3b      	ldrb	r3, [r7, #8]
 8001392:	f362 0342 	bfi	r3, r2, #1, #2
 8001396:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 8001398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	2201      	movs	r2, #1
 80013ac:	21d0      	movs	r1, #208	@ 0xd0
 80013ae:	480b      	ldr	r0, [pc, #44]	@ (80013dc <icm20948_set_full_scale+0x110>)
 80013b0:	f004 fee0 	bl	8006174 <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 80013b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	2301      	movs	r3, #1
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	2201      	movs	r2, #1
 80013c8:	21d0      	movs	r1, #208	@ 0xd0
 80013ca:	4804      	ldr	r0, [pc, #16]	@ (80013dc <icm20948_set_full_scale+0x110>)
 80013cc:	f004 ffe6 	bl	800639c <HAL_I2C_Mem_Read>
  }
  return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000010c 	.word	0x2000010c

080013e0 <icm20948_enable_dlpf>:


int8_t icm20948_enable_dlpf(ICM_20948_InternalSensorID_bm sensors, bool enable)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	4603      	mov	r3, r0
 80013e8:	460a      	mov	r2, r1
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	4613      	mov	r3, r2
 80013ee:	71bb      	strb	r3, [r7, #6]
  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <icm20948_enable_dlpf+0x20>
  {
    return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013fe:	e07c      	b.n	80014fa <icm20948_enable_dlpf+0x11a>
  }

  if (sensors & ICM_20948_Internal_Acc)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d038      	beq.n	800147c <icm20948_enable_dlpf+0x9c>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff fca4 	bl	8000d58 <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8001410:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	2214      	movs	r2, #20
 8001424:	21d0      	movs	r1, #208	@ 0xd0
 8001426:	4837      	ldr	r0, [pc, #220]	@ (8001504 <icm20948_enable_dlpf+0x124>)
 8001428:	f004 ffb8 	bl	800639c <HAL_I2C_Mem_Read>
    if (enable)
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <icm20948_enable_dlpf+0x5c>
    {
      reg.ACCEL_FCHOICE = 1;
 8001432:	7b3b      	ldrb	r3, [r7, #12]
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	733b      	strb	r3, [r7, #12]
 800143a:	e003      	b.n	8001444 <icm20948_enable_dlpf+0x64>
    }
    else
    {
      reg.ACCEL_FCHOICE = 0;
 800143c:	7b3b      	ldrb	r3, [r7, #12]
 800143e:	f36f 0300 	bfc	r3, #0, #1
 8001442:	733b      	strb	r3, [r7, #12]
    }
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8001444:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	2301      	movs	r3, #1
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	2214      	movs	r2, #20
 8001458:	21d0      	movs	r1, #208	@ 0xd0
 800145a:	482a      	ldr	r0, [pc, #168]	@ (8001504 <icm20948_enable_dlpf+0x124>)
 800145c:	f004 fe8a 	bl	8006174 <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8001460:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	2301      	movs	r3, #1
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2301      	movs	r3, #1
 8001472:	2214      	movs	r2, #20
 8001474:	21d0      	movs	r1, #208	@ 0xd0
 8001476:	4823      	ldr	r0, [pc, #140]	@ (8001504 <icm20948_enable_dlpf+0x124>)
 8001478:	f004 ff90 	bl	800639c <HAL_I2C_Mem_Read>

  }
  if (sensors & ICM_20948_Internal_Gyr)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d038      	beq.n	80014f8 <icm20948_enable_dlpf+0x118>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 8001486:	2002      	movs	r0, #2
 8001488:	f7ff fc66 	bl	8000d58 <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 800148c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	2301      	movs	r3, #1
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	2201      	movs	r2, #1
 80014a0:	21d0      	movs	r1, #208	@ 0xd0
 80014a2:	4818      	ldr	r0, [pc, #96]	@ (8001504 <icm20948_enable_dlpf+0x124>)
 80014a4:	f004 ff7a 	bl	800639c <HAL_I2C_Mem_Read>
    if (enable)
 80014a8:	79bb      	ldrb	r3, [r7, #6]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <icm20948_enable_dlpf+0xd8>
    {
      reg.GYRO_FCHOICE = 1;
 80014ae:	7a3b      	ldrb	r3, [r7, #8]
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	723b      	strb	r3, [r7, #8]
 80014b6:	e003      	b.n	80014c0 <icm20948_enable_dlpf+0xe0>
    }
    else
    {
      reg.GYRO_FCHOICE = 0;
 80014b8:	7a3b      	ldrb	r3, [r7, #8]
 80014ba:	f36f 0300 	bfc	r3, #0, #1
 80014be:	723b      	strb	r3, [r7, #8]
    }
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 80014c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c4:	9302      	str	r3, [sp, #8]
 80014c6:	2301      	movs	r3, #1
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	2201      	movs	r2, #1
 80014d4:	21d0      	movs	r1, #208	@ 0xd0
 80014d6:	480b      	ldr	r0, [pc, #44]	@ (8001504 <icm20948_enable_dlpf+0x124>)
 80014d8:	f004 fe4c 	bl	8006174 <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 80014dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	2301      	movs	r3, #1
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2301      	movs	r3, #1
 80014ee:	2201      	movs	r2, #1
 80014f0:	21d0      	movs	r1, #208	@ 0xd0
 80014f2:	4804      	ldr	r0, [pc, #16]	@ (8001504 <icm20948_enable_dlpf+0x124>)
 80014f4:	f004 ff52 	bl	800639c <HAL_I2C_Mem_Read>
  }
  return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000010c 	.word	0x2000010c

08001508 <icm20948_set_dlpf_cfg>:


ICM_20948_Status_e icm20948_set_dlpf_cfg(ICM_20948_InternalSensorID_bm sensors, ICM_20948_dlpcfg_t cfg)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	8039      	strh	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <icm20948_set_dlpf_cfg+0x1e>
  {
    return ICM_20948_Stat_SensorNotSupported;
 8001522:	2307      	movs	r3, #7
 8001524:	e08a      	b.n	800163c <icm20948_set_dlpf_cfg+0x134>
  }

  if (sensors & ICM_20948_Internal_Acc)
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d03f      	beq.n	80015b0 <icm20948_set_dlpf_cfg+0xa8>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    retval |= icm20948_set_user_bank(2); // Must be in the right bank
 8001530:	2002      	movs	r0, #2
 8001532:	f7ff fc11 	bl	8000d58 <icm20948_set_user_bank>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	4313      	orrs	r3, r2
 800153e:	73fb      	strb	r3, [r7, #15]
    retval |= icm20948_execute_r(AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2201      	movs	r2, #1
 8001546:	4619      	mov	r1, r3
 8001548:	2014      	movs	r0, #20
 800154a:	f001 fee9 	bl	8003320 <icm20948_execute_r>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	4313      	orrs	r3, r2
 8001556:	73fb      	strb	r3, [r7, #15]
    reg.ACCEL_DLPFCFG = cfg.a;
 8001558:	783b      	ldrb	r3, [r7, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	b2da      	uxtb	r2, r3
 8001560:	7b3b      	ldrb	r3, [r7, #12]
 8001562:	f362 03c5 	bfi	r3, r2, #3, #3
 8001566:	733b      	strb	r3, [r7, #12]
    retval |= icm20948_execute_w(AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2201      	movs	r2, #1
 800156e:	4619      	mov	r1, r3
 8001570:	2014      	movs	r0, #20
 8001572:	f001 fef7 	bl	8003364 <icm20948_execute_w>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	4313      	orrs	r3, r2
 800157e:	73fb      	strb	r3, [r7, #15]
    // Check the data was written correctly
    retval |= icm20948_execute_r(AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2201      	movs	r2, #1
 8001586:	4619      	mov	r1, r3
 8001588:	2014      	movs	r0, #20
 800158a:	f001 fec9 	bl	8003320 <icm20948_execute_r>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	4313      	orrs	r3, r2
 8001596:	73fb      	strb	r3, [r7, #15]
    if (reg.ACCEL_DLPFCFG != cfg.a) retval |= ICM_20948_Stat_Err;
 8001598:	7b3b      	ldrb	r3, [r7, #12]
 800159a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	783b      	ldrb	r3, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d003      	beq.n	80015b0 <icm20948_set_dlpf_cfg+0xa8>
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
  }
  if (sensors & ICM_20948_Internal_Gyr)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d03f      	beq.n	800163a <icm20948_set_dlpf_cfg+0x132>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    retval |= icm20948_set_user_bank(2); // Must be in the right bank
 80015ba:	2002      	movs	r0, #2
 80015bc:	f7ff fbcc 	bl	8000d58 <icm20948_set_user_bank>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	73fb      	strb	r3, [r7, #15]
    retval |= icm20948_execute_r(AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	2201      	movs	r2, #1
 80015d0:	4619      	mov	r1, r3
 80015d2:	2001      	movs	r0, #1
 80015d4:	f001 fea4 	bl	8003320 <icm20948_execute_r>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	4313      	orrs	r3, r2
 80015e0:	73fb      	strb	r3, [r7, #15]
    reg.GYRO_DLPFCFG = cfg.g;
 80015e2:	787b      	ldrb	r3, [r7, #1]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	7a3b      	ldrb	r3, [r7, #8]
 80015ec:	f362 03c5 	bfi	r3, r2, #3, #3
 80015f0:	723b      	strb	r3, [r7, #8]
    retval |= icm20948_execute_w(AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	2201      	movs	r2, #1
 80015f8:	4619      	mov	r1, r3
 80015fa:	2001      	movs	r0, #1
 80015fc:	f001 feb2 	bl	8003364 <icm20948_execute_w>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	4313      	orrs	r3, r2
 8001608:	73fb      	strb	r3, [r7, #15]
    // Check the data was written correctly
    retval |= icm20948_execute_r(AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2201      	movs	r2, #1
 8001610:	4619      	mov	r1, r3
 8001612:	2001      	movs	r0, #1
 8001614:	f001 fe84 	bl	8003320 <icm20948_execute_r>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	4313      	orrs	r3, r2
 8001620:	73fb      	strb	r3, [r7, #15]
    if (reg.GYRO_DLPFCFG != cfg.g) retval |= ICM_20948_Stat_Err;
 8001622:	7a3b      	ldrb	r3, [r7, #8]
 8001624:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	429a      	cmp	r2, r3
 8001630:	d003      	beq.n	800163a <icm20948_set_dlpf_cfg+0x132>
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
  }
  return retval;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <icm20948_set_sample_rate>:


int8_t icm20948_set_sample_rate(ICM_20948_InternalSensorID_bm sensors, ICM_20948_smplrt_t smplrt)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af04      	add	r7, sp, #16
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <icm20948_set_sample_rate+0x1c>
  {
    return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800165e:	e044      	b.n	80016ea <icm20948_set_sample_rate+0xa6>
  }

  if (sensors & ICM_20948_Internal_Acc)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d026      	beq.n	80016b8 <icm20948_set_sample_rate+0x74>
  {
    icm20948_set_user_bank(2); // Must be in the right bank
 800166a:	2002      	movs	r0, #2
 800166c:	f7ff fb74 	bl	8000d58 <icm20948_set_user_bank>
    uint8_t div1 = (smplrt.a >> 8); // Thank you @yanivamichy #109
 8001670:	883b      	ldrh	r3, [r7, #0]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b29b      	uxth	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	73fb      	strb	r3, [r7, #15]
    uint8_t div2 = (smplrt.a & 0xFF);
 800167a:	883b      	ldrh	r3, [r7, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_ACCEL_SMPLRT_DIV_1, I2C_MEMADD_SIZE_8BIT, &div1, 1, 1000);
 8001680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	2301      	movs	r3, #1
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	f107 030f 	add.w	r3, r7, #15
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	2210      	movs	r2, #16
 8001694:	21d0      	movs	r1, #208	@ 0xd0
 8001696:	4817      	ldr	r0, [pc, #92]	@ (80016f4 <icm20948_set_sample_rate+0xb0>)
 8001698:	f004 fd6c 	bl	8006174 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_ACCEL_SMPLRT_DIV_2, I2C_MEMADD_SIZE_8BIT, &div2, 1, 1000);
 800169c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2301      	movs	r3, #1
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	f107 030e 	add.w	r3, r7, #14
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	2211      	movs	r2, #17
 80016b0:	21d0      	movs	r1, #208	@ 0xd0
 80016b2:	4810      	ldr	r0, [pc, #64]	@ (80016f4 <icm20948_set_sample_rate+0xb0>)
 80016b4:	f004 fd5e 	bl	8006174 <HAL_I2C_Mem_Write>
  }
  if (sensors & ICM_20948_Internal_Gyr)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d012      	beq.n	80016e8 <icm20948_set_sample_rate+0xa4>
  {
    icm20948_set_user_bank(2); // Must be in the right bank
 80016c2:	2002      	movs	r0, #2
 80016c4:	f7ff fb48 	bl	8000d58 <icm20948_set_user_bank>
    uint8_t div = (smplrt.g);
 80016c8:	78bb      	ldrb	r3, [r7, #2]
 80016ca:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_GYRO_SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &div, 1, 1000);
 80016cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	2301      	movs	r3, #1
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	f107 030d 	add.w	r3, r7, #13
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2301      	movs	r3, #1
 80016de:	2200      	movs	r2, #0
 80016e0:	21d0      	movs	r1, #208	@ 0xd0
 80016e2:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <icm20948_set_sample_rate+0xb0>)
 80016e4:	f004 fd46 	bl	8006174 <HAL_I2C_Mem_Write>
  }
  return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000010c 	.word	0x2000010c

080016f8 <icm20948_int_enable>:


int8_t icm20948_int_enable(ICM_20948_INT_enable_t *write, ICM_20948_INT_enable_t *read)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af04      	add	r7, sp, #16
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  ICM_20948_INT_ENABLE_t en_0;
  ICM_20948_INT_ENABLE_1_t en_1;
  ICM_20948_INT_ENABLE_2_t en_2;
  ICM_20948_INT_ENABLE_3_t en_3;

  icm20948_set_user_bank(0); // Must be in the right bank
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff fb28 	bl	8000d58 <icm20948_set_user_bank>

  if (write != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80d8 	beq.w	80018c0 <icm20948_int_enable+0x1c8>
  { // If the write pointer is not NULL then write to the registers BEFORE reading
    en_0.I2C_MST_INT_EN = write->I2C_MST_INT_EN;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001718:	b2da      	uxtb	r2, r3
 800171a:	7d3b      	ldrb	r3, [r7, #20]
 800171c:	f362 0300 	bfi	r3, r2, #0, #1
 8001720:	753b      	strb	r3, [r7, #20]
    en_0.DMP_INT1_EN = write->DMP_INT1_EN;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	7d3b      	ldrb	r3, [r7, #20]
 800172e:	f362 0341 	bfi	r3, r2, #1, #1
 8001732:	753b      	strb	r3, [r7, #20]
    en_0.PLL_READY_EN = write->PLL_RDY_EN;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	7d3b      	ldrb	r3, [r7, #20]
 8001740:	f362 0382 	bfi	r3, r2, #2, #1
 8001744:	753b      	strb	r3, [r7, #20]
    en_0.WOM_INT_EN = write->WOM_INT_EN;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800174e:	b2da      	uxtb	r2, r3
 8001750:	7d3b      	ldrb	r3, [r7, #20]
 8001752:	f362 03c3 	bfi	r3, r2, #3, #1
 8001756:	753b      	strb	r3, [r7, #20]
    en_0.reserved_0 = 0; // Clear RAM garbage
 8001758:	7d3b      	ldrb	r3, [r7, #20]
 800175a:	f36f 1306 	bfc	r3, #4, #3
 800175e:	753b      	strb	r3, [r7, #20]
    en_0.REG_WOF_EN = write->REG_WOF_EN;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	7d3b      	ldrb	r3, [r7, #20]
 800176c:	f362 13c7 	bfi	r3, r2, #7, #1
 8001770:	753b      	strb	r3, [r7, #20]
    en_1.RAW_DATA_0_RDY_EN = write->RAW_DATA_0_RDY_EN;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	7c3b      	ldrb	r3, [r7, #16]
 800177e:	f362 0300 	bfi	r3, r2, #0, #1
 8001782:	743b      	strb	r3, [r7, #16]
    en_1.reserved_0 = 0; // Clear RAM garbage
 8001784:	7c3b      	ldrb	r3, [r7, #16]
 8001786:	f36f 0347 	bfc	r3, #1, #7
 800178a:	743b      	strb	r3, [r7, #16]
    en_2.individual.FIFO_OVERFLOW_EN_4 = write->FIFO_OVERFLOW_EN_4;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	7b3b      	ldrb	r3, [r7, #12]
 8001798:	f362 1304 	bfi	r3, r2, #4, #1
 800179c:	733b      	strb	r3, [r7, #12]
    en_2.individual.FIFO_OVERFLOW_EN_3 = write->FIFO_OVERFLOW_EN_3;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	7b3b      	ldrb	r3, [r7, #12]
 80017aa:	f362 03c3 	bfi	r3, r2, #3, #1
 80017ae:	733b      	strb	r3, [r7, #12]
    en_2.individual.FIFO_OVERFLOW_EN_2 = write->FIFO_OVERFLOW_EN_2;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	785b      	ldrb	r3, [r3, #1]
 80017b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	7b3b      	ldrb	r3, [r7, #12]
 80017bc:	f362 0382 	bfi	r3, r2, #2, #1
 80017c0:	733b      	strb	r3, [r7, #12]
    en_2.individual.FIFO_OVERFLOW_EN_1 = write->FIFO_OVERFLOW_EN_1;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	785b      	ldrb	r3, [r3, #1]
 80017c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	7b3b      	ldrb	r3, [r7, #12]
 80017ce:	f362 0341 	bfi	r3, r2, #1, #1
 80017d2:	733b      	strb	r3, [r7, #12]
    en_2.individual.FIFO_OVERFLOW_EN_0 = write->FIFO_OVERFLOW_EN_0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	7b3b      	ldrb	r3, [r7, #12]
 80017e0:	f362 0300 	bfi	r3, r2, #0, #1
 80017e4:	733b      	strb	r3, [r7, #12]
    en_2.individual.reserved_0 = 0; // Clear RAM garbage
 80017e6:	7b3b      	ldrb	r3, [r7, #12]
 80017e8:	f36f 1347 	bfc	r3, #5, #3
 80017ec:	733b      	strb	r3, [r7, #12]
    en_3.individual.FIFO_WM_EN_4 = write->FIFO_WM_EN_4;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	785b      	ldrb	r3, [r3, #1]
 80017f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	7a3b      	ldrb	r3, [r7, #8]
 80017fa:	f362 1304 	bfi	r3, r2, #4, #1
 80017fe:	723b      	strb	r3, [r7, #8]
    en_3.individual.FIFO_WM_EN_3 = write->FIFO_WM_EN_3;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	7a3b      	ldrb	r3, [r7, #8]
 800180c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001810:	723b      	strb	r3, [r7, #8]
    en_3.individual.FIFO_WM_EN_2 = write->FIFO_WM_EN_2;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	785b      	ldrb	r3, [r3, #1]
 8001816:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	7a3b      	ldrb	r3, [r7, #8]
 800181e:	f362 0382 	bfi	r3, r2, #2, #1
 8001822:	723b      	strb	r3, [r7, #8]
    en_3.individual.FIFO_WM_EN_1 = write->FIFO_WM_EN_1;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	7a3b      	ldrb	r3, [r7, #8]
 8001830:	f362 0341 	bfi	r3, r2, #1, #1
 8001834:	723b      	strb	r3, [r7, #8]
    en_3.individual.FIFO_WM_EN_0 = write->FIFO_WM_EN_0;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800183e:	b2da      	uxtb	r2, r3
 8001840:	7a3b      	ldrb	r3, [r7, #8]
 8001842:	f362 0300 	bfi	r3, r2, #0, #1
 8001846:	723b      	strb	r3, [r7, #8]
    en_3.individual.reserved_0 = 0; // Clear RAM garbage
 8001848:	7a3b      	ldrb	r3, [r7, #8]
 800184a:	f36f 1347 	bfc	r3, #5, #3
 800184e:	723b      	strb	r3, [r7, #8]

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_0, sizeof(ICM_20948_INT_ENABLE_t), 1000);
 8001850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2301      	movs	r3, #1
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2301      	movs	r3, #1
 8001862:	2210      	movs	r2, #16
 8001864:	21d0      	movs	r1, #208	@ 0xd0
 8001866:	487f      	ldr	r0, [pc, #508]	@ (8001a64 <icm20948_int_enable+0x36c>)
 8001868:	f004 fc84 	bl	8006174 <HAL_I2C_Mem_Write>

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_1, sizeof(ICM_20948_INT_ENABLE_1_t), 1000);
 800186c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	2301      	movs	r3, #1
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2301      	movs	r3, #1
 800187e:	2211      	movs	r2, #17
 8001880:	21d0      	movs	r1, #208	@ 0xd0
 8001882:	4878      	ldr	r0, [pc, #480]	@ (8001a64 <icm20948_int_enable+0x36c>)
 8001884:	f004 fc76 	bl	8006174 <HAL_I2C_Mem_Write>

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_2, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_2, sizeof(ICM_20948_INT_ENABLE_2_t), 1000);
 8001888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	2301      	movs	r3, #1
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2301      	movs	r3, #1
 800189a:	2212      	movs	r2, #18
 800189c:	21d0      	movs	r1, #208	@ 0xd0
 800189e:	4871      	ldr	r0, [pc, #452]	@ (8001a64 <icm20948_int_enable+0x36c>)
 80018a0:	f004 fc68 	bl	8006174 <HAL_I2C_Mem_Write>

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_3, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_3, sizeof(ICM_20948_INT_ENABLE_3_t), 1000);
 80018a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2301      	movs	r3, #1
 80018b6:	2213      	movs	r2, #19
 80018b8:	21d0      	movs	r1, #208	@ 0xd0
 80018ba:	486a      	ldr	r0, [pc, #424]	@ (8001a64 <icm20948_int_enable+0x36c>)
 80018bc:	f004 fc5a 	bl	8006174 <HAL_I2C_Mem_Write>

  }

  if (read != NULL)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80c8 	beq.w	8001a58 <icm20948_int_enable+0x360>
  { // If read pointer is not NULL then read the registers (if write is not NULL then this should read back the results of write into read)
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_0, sizeof(ICM_20948_INT_ENABLE_t), 1000);
 80018c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	2301      	movs	r3, #1
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2301      	movs	r3, #1
 80018da:	2210      	movs	r2, #16
 80018dc:	21d0      	movs	r1, #208	@ 0xd0
 80018de:	4861      	ldr	r0, [pc, #388]	@ (8001a64 <icm20948_int_enable+0x36c>)
 80018e0:	f004 fd5c 	bl	800639c <HAL_I2C_Mem_Read>

    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_1, sizeof(ICM_20948_INT_ENABLE_1_t), 1000);
 80018e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2301      	movs	r3, #1
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2301      	movs	r3, #1
 80018f6:	2211      	movs	r2, #17
 80018f8:	21d0      	movs	r1, #208	@ 0xd0
 80018fa:	485a      	ldr	r0, [pc, #360]	@ (8001a64 <icm20948_int_enable+0x36c>)
 80018fc:	f004 fd4e 	bl	800639c <HAL_I2C_Mem_Read>

    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_2, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_2, sizeof(ICM_20948_INT_ENABLE_2_t), 1000);
 8001900:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	2301      	movs	r3, #1
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	2212      	movs	r2, #18
 8001914:	21d0      	movs	r1, #208	@ 0xd0
 8001916:	4853      	ldr	r0, [pc, #332]	@ (8001a64 <icm20948_int_enable+0x36c>)
 8001918:	f004 fd40 	bl	800639c <HAL_I2C_Mem_Read>

    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_INT_ENABLE_3, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&en_3, sizeof(ICM_20948_INT_ENABLE_3_t), 1000);
 800191c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	2301      	movs	r3, #1
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	2213      	movs	r2, #19
 8001930:	21d0      	movs	r1, #208	@ 0xd0
 8001932:	484c      	ldr	r0, [pc, #304]	@ (8001a64 <icm20948_int_enable+0x36c>)
 8001934:	f004 fd32 	bl	800639c <HAL_I2C_Mem_Read>


    read->I2C_MST_INT_EN = en_0.I2C_MST_INT_EN;
 8001938:	7d3b      	ldrb	r3, [r7, #20]
 800193a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800193e:	b2d9      	uxtb	r1, r3
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	7813      	ldrb	r3, [r2, #0]
 8001944:	f361 0300 	bfi	r3, r1, #0, #1
 8001948:	7013      	strb	r3, [r2, #0]
    read->DMP_INT1_EN = en_0.DMP_INT1_EN;
 800194a:	7d3b      	ldrb	r3, [r7, #20]
 800194c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001950:	b2d9      	uxtb	r1, r3
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	7813      	ldrb	r3, [r2, #0]
 8001956:	f361 0341 	bfi	r3, r1, #1, #1
 800195a:	7013      	strb	r3, [r2, #0]
    read->PLL_RDY_EN = en_0.PLL_READY_EN;
 800195c:	7d3b      	ldrb	r3, [r7, #20]
 800195e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001962:	b2d9      	uxtb	r1, r3
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	7813      	ldrb	r3, [r2, #0]
 8001968:	f361 0382 	bfi	r3, r1, #2, #1
 800196c:	7013      	strb	r3, [r2, #0]
    read->WOM_INT_EN = en_0.WOM_INT_EN;
 800196e:	7d3b      	ldrb	r3, [r7, #20]
 8001970:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001974:	b2d9      	uxtb	r1, r3
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	7813      	ldrb	r3, [r2, #0]
 800197a:	f361 03c3 	bfi	r3, r1, #3, #1
 800197e:	7013      	strb	r3, [r2, #0]
    read->REG_WOF_EN = en_0.REG_WOF_EN;
 8001980:	7d3b      	ldrb	r3, [r7, #20]
 8001982:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001986:	b2d9      	uxtb	r1, r3
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	7813      	ldrb	r3, [r2, #0]
 800198c:	f361 1304 	bfi	r3, r1, #4, #1
 8001990:	7013      	strb	r3, [r2, #0]
    read->RAW_DATA_0_RDY_EN = en_1.RAW_DATA_0_RDY_EN;
 8001992:	7c3b      	ldrb	r3, [r7, #16]
 8001994:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001998:	b2d9      	uxtb	r1, r3
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	7813      	ldrb	r3, [r2, #0]
 800199e:	f361 1345 	bfi	r3, r1, #5, #1
 80019a2:	7013      	strb	r3, [r2, #0]
    read->FIFO_OVERFLOW_EN_4 = en_2.individual.FIFO_OVERFLOW_EN_4;
 80019a4:	7b3b      	ldrb	r3, [r7, #12]
 80019a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80019aa:	b2d9      	uxtb	r1, r3
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	7813      	ldrb	r3, [r2, #0]
 80019b0:	f361 1386 	bfi	r3, r1, #6, #1
 80019b4:	7013      	strb	r3, [r2, #0]
    read->FIFO_OVERFLOW_EN_3 = en_2.individual.FIFO_OVERFLOW_EN_3;
 80019b6:	7b3b      	ldrb	r3, [r7, #12]
 80019b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80019bc:	b2d9      	uxtb	r1, r3
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	7813      	ldrb	r3, [r2, #0]
 80019c2:	f361 13c7 	bfi	r3, r1, #7, #1
 80019c6:	7013      	strb	r3, [r2, #0]
    read->FIFO_OVERFLOW_EN_2 = en_2.individual.FIFO_OVERFLOW_EN_2;
 80019c8:	7b3b      	ldrb	r3, [r7, #12]
 80019ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80019ce:	b2d9      	uxtb	r1, r3
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	7853      	ldrb	r3, [r2, #1]
 80019d4:	f361 0300 	bfi	r3, r1, #0, #1
 80019d8:	7053      	strb	r3, [r2, #1]
    read->FIFO_OVERFLOW_EN_1 = en_2.individual.FIFO_OVERFLOW_EN_1;
 80019da:	7b3b      	ldrb	r3, [r7, #12]
 80019dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80019e0:	b2d9      	uxtb	r1, r3
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	7853      	ldrb	r3, [r2, #1]
 80019e6:	f361 0341 	bfi	r3, r1, #1, #1
 80019ea:	7053      	strb	r3, [r2, #1]
    read->FIFO_OVERFLOW_EN_0 = en_2.individual.FIFO_OVERFLOW_EN_0;
 80019ec:	7b3b      	ldrb	r3, [r7, #12]
 80019ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019f2:	b2d9      	uxtb	r1, r3
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	7853      	ldrb	r3, [r2, #1]
 80019f8:	f361 0382 	bfi	r3, r1, #2, #1
 80019fc:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_4 = en_3.individual.FIFO_WM_EN_4;
 80019fe:	7a3b      	ldrb	r3, [r7, #8]
 8001a00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a04:	b2d9      	uxtb	r1, r3
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	7853      	ldrb	r3, [r2, #1]
 8001a0a:	f361 03c3 	bfi	r3, r1, #3, #1
 8001a0e:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_3 = en_3.individual.FIFO_WM_EN_3;
 8001a10:	7a3b      	ldrb	r3, [r7, #8]
 8001a12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a16:	b2d9      	uxtb	r1, r3
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	7853      	ldrb	r3, [r2, #1]
 8001a1c:	f361 1304 	bfi	r3, r1, #4, #1
 8001a20:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_2 = en_3.individual.FIFO_WM_EN_2;
 8001a22:	7a3b      	ldrb	r3, [r7, #8]
 8001a24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a28:	b2d9      	uxtb	r1, r3
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	7853      	ldrb	r3, [r2, #1]
 8001a2e:	f361 1345 	bfi	r3, r1, #5, #1
 8001a32:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_1 = en_3.individual.FIFO_WM_EN_1;
 8001a34:	7a3b      	ldrb	r3, [r7, #8]
 8001a36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a3a:	b2d9      	uxtb	r1, r3
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	7853      	ldrb	r3, [r2, #1]
 8001a40:	f361 1386 	bfi	r3, r1, #6, #1
 8001a44:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_0 = en_3.individual.FIFO_WM_EN_0;
 8001a46:	7a3b      	ldrb	r3, [r7, #8]
 8001a48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a4c:	b2d9      	uxtb	r1, r3
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	7853      	ldrb	r3, [r2, #1]
 8001a52:	f361 13c7 	bfi	r3, r1, #7, #1
 8001a56:	7053      	strb	r3, [r2, #1]
  }

  return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000010c 	.word	0x2000010c

08001a68 <icm20948_int_enable_raw_data_ready>:


int8_t icm20948_int_enable_raw_data_ready(bool enable)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  ICM_20948_INT_enable_t en;                          // storage
  icm20948_int_enable(NULL, &en); // read phase
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	4619      	mov	r1, r3
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fe3d 	bl	80016f8 <icm20948_int_enable>
  en.RAW_DATA_0_RDY_EN = enable;                     // change the setting
 8001a7e:	7b3b      	ldrb	r3, [r7, #12]
 8001a80:	79fa      	ldrb	r2, [r7, #7]
 8001a82:	f362 1345 	bfi	r3, r2, #5, #1
 8001a86:	733b      	strb	r3, [r7, #12]
  icm20948_int_enable(&en, &en); // write phase w/ readback
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fe30 	bl	80016f8 <icm20948_int_enable>

  return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <icm20948_set_DMP_start_address>:


int8_t icm20948_set_DMP_start_address(unsigned short address)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af04      	add	r7, sp, #16
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
  unsigned char start_address[2];

  start_address[0] = (unsigned char)(address >> 8);
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	733b      	strb	r3, [r7, #12]
  start_address[1] = (unsigned char)(address & 0xff);
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	737b      	strb	r3, [r7, #13]

  icm20948_set_user_bank(2); // Set bank 2
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f7ff f94a 	bl	8000d58 <icm20948_set_user_bank>

  // Write the sensor control bits into memory address AGB2_REG_PRGM_START_ADDRH
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_PRGM_START_ADDRH, I2C_MEMADD_SIZE_8BIT, (uint8_t *)start_address, 2, 1000);
 8001ac4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	2302      	movs	r3, #2
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	2250      	movs	r2, #80	@ 0x50
 8001ad8:	21d0      	movs	r1, #208	@ 0xd0
 8001ada:	4804      	ldr	r0, [pc, #16]	@ (8001aec <icm20948_set_DMP_start_address+0x48>)
 8001adc:	f004 fb4a 	bl	8006174 <HAL_I2C_Mem_Write>

  return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000010c 	.word	0x2000010c

08001af0 <icm20948_write_mem>:


int8_t icm20948_write_mem(unsigned short reg, unsigned int length, const unsigned char *data)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	@ 0x30
 8001af4:	af04      	add	r7, sp, #16
 8001af6:	4603      	mov	r3, r0
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	81fb      	strh	r3, [r7, #14]
  unsigned int bytesWritten = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  unsigned int thisLen;
  unsigned char lBankSelected;
  unsigned char lStartAddrSelected;

  if (!data)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <icm20948_write_mem+0x1c>
  {
    return 1; // nodata
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e051      	b.n	8001bb0 <icm20948_write_mem+0xc0>
  }

  icm20948_set_user_bank(0); // set user bank (0 through 3) to 0
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff f923 	bl	8000d58 <icm20948_set_user_bank>

    //set mem bank
  lBankSelected = (reg >> 8);
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	75fb      	strb	r3, [r7, #23]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &lBankSelected, 1, 1000);
 8001b1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	2301      	movs	r3, #1
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	f107 0317 	add.w	r3, r7, #23
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	227e      	movs	r2, #126	@ 0x7e
 8001b30:	21d0      	movs	r1, #208	@ 0xd0
 8001b32:	4821      	ldr	r0, [pc, #132]	@ (8001bb8 <icm20948_write_mem+0xc8>)
 8001b34:	f004 fb1e 	bl	8006174 <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, AGB0_REG_MEM_BANK_SEL, &lBankSelected, 1);

  while (bytesWritten < length)
 8001b38:	e035      	b.n	8001ba6 <icm20948_write_mem+0xb6>
  {
    lStartAddrSelected = (reg & 0xff);
 8001b3a:	89fb      	ldrh	r3, [r7, #14]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	75bb      	strb	r3, [r7, #22]
    /* Sets the starting read or write address for the selected memory, inside of the selected page (see MEM_SEL Register).
           Contents are changed after read or write of the selected memory.
           This register must be written prior to each access to initialize the register to the proper starting address.
           The address will auto increment during burst transactions.  Two consecutive bursts without re-initializing the start address would skip one address. */

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_START_ADDR, I2C_MEMADD_SIZE_8BIT, &lStartAddrSelected, 1, 1000);
 8001b40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	2301      	movs	r3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	f107 0316 	add.w	r3, r7, #22
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2301      	movs	r3, #1
 8001b52:	227c      	movs	r2, #124	@ 0x7c
 8001b54:	21d0      	movs	r1, #208	@ 0xd0
 8001b56:	4818      	ldr	r0, [pc, #96]	@ (8001bb8 <icm20948_write_mem+0xc8>)
 8001b58:	f004 fb0c 	bl	8006174 <HAL_I2C_Mem_Write>
    //ICM_20948_execute_w(pdev, AGB0_REG_MEM_START_ADDR, &lStartAddrSelected, 1);


    if (length - bytesWritten <= MAX_SERIAL_R_W)
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d804      	bhi.n	8001b70 <icm20948_write_mem+0x80>
      thisLen = length - bytesWritten;
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	e001      	b.n	8001b74 <icm20948_write_mem+0x84>
    else
      thisLen = MAX_SERIAL_R_W;
 8001b70:	2310      	movs	r3, #16
 8001b72:	61bb      	str	r3, [r7, #24]

    /* Write data */

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_R_W, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&data[bytesWritten], thisLen, 1000);
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	4413      	add	r3, r2
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	b292      	uxth	r2, r2
 8001b7e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b82:	9102      	str	r1, [sp, #8]
 8001b84:	9201      	str	r2, [sp, #4]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	227d      	movs	r2, #125	@ 0x7d
 8001b8c:	21d0      	movs	r1, #208	@ 0xd0
 8001b8e:	480a      	ldr	r0, [pc, #40]	@ (8001bb8 <icm20948_write_mem+0xc8>)
 8001b90:	f004 faf0 	bl	8006174 <HAL_I2C_Mem_Write>
    //ICM_20948_execute_w(pdev, AGB0_REG_MEM_R_W, (uint8_t *)&data[bytesWritten], thisLen);

    bytesWritten += thisLen;
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4413      	add	r3, r2
 8001b9a:	61fb      	str	r3, [r7, #28]
    reg += thisLen;
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	89fb      	ldrh	r3, [r7, #14]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	81fb      	strh	r3, [r7, #14]
  while (bytesWritten < length)
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d3c5      	bcc.n	8001b3a <icm20948_write_mem+0x4a>
  }

  return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000010c 	.word	0x2000010c

08001bbc <icm20948_read_mem>:


int8_t icm20948_read_mem(unsigned short reg, unsigned int length, unsigned char *data)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	@ 0x30
 8001bc0:	af04      	add	r7, sp, #16
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	81fb      	strh	r3, [r7, #14]
  unsigned int bytesRead = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  unsigned int thisLen;
  unsigned char lBankSelected;
  unsigned char lStartAddrSelected;

  icm20948_set_user_bank(0); // set user bank (0 through 3) to 0
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff f8c2 	bl	8000d58 <icm20948_set_user_bank>

    //set mem bank
  lBankSelected = (reg >> 8);
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	75fb      	strb	r3, [r7, #23]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &lBankSelected, 1, 1000);
 8001bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	2301      	movs	r3, #1
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	f107 0317 	add.w	r3, r7, #23
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	227e      	movs	r2, #126	@ 0x7e
 8001bf2:	21d0      	movs	r1, #208	@ 0xd0
 8001bf4:	4821      	ldr	r0, [pc, #132]	@ (8001c7c <icm20948_read_mem+0xc0>)
 8001bf6:	f004 fabd 	bl	8006174 <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, AGB0_REG_MEM_BANK_SEL, &lBankSelected, 1);


  while (bytesRead < length)
 8001bfa:	e035      	b.n	8001c68 <icm20948_read_mem+0xac>
  {
    lStartAddrSelected = (reg & 0xff);
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	75bb      	strb	r3, [r7, #22]
    /* Sets the starting read or write address for the selected memory, inside of the selected page (see MEM_SEL Register).
           Contents are changed after read or write of the selected memory.
           This register must be written prior to each access to initialize the register to the proper starting address.
           The address will auto increment during burst transactions.  Two consecutive bursts without re-initializing the start address would skip one address. */

    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_START_ADDR, I2C_MEMADD_SIZE_8BIT, &lStartAddrSelected, 1, 1000);
 8001c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	f107 0316 	add.w	r3, r7, #22
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	227c      	movs	r2, #124	@ 0x7c
 8001c16:	21d0      	movs	r1, #208	@ 0xd0
 8001c18:	4818      	ldr	r0, [pc, #96]	@ (8001c7c <icm20948_read_mem+0xc0>)
 8001c1a:	f004 faab 	bl	8006174 <HAL_I2C_Mem_Write>
    //ICM_20948_execute_w(pdev, AGB0_REG_MEM_START_ADDR, &lStartAddrSelected, 1);

    if (length - bytesRead <= MAX_SERIAL_R_W)
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b10      	cmp	r3, #16
 8001c26:	d804      	bhi.n	8001c32 <icm20948_read_mem+0x76>
      thisLen = length - bytesRead;
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	e001      	b.n	8001c36 <icm20948_read_mem+0x7a>
    else
      thisLen = MAX_SERIAL_R_W;
 8001c32:	2310      	movs	r3, #16
 8001c34:	61bb      	str	r3, [r7, #24]

    /* Read data */
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_MEM_R_W, I2C_MEMADD_SIZE_8BIT, &data[bytesRead], thisLen, 1000);
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	b292      	uxth	r2, r2
 8001c40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c44:	9102      	str	r1, [sp, #8]
 8001c46:	9201      	str	r2, [sp, #4]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	227d      	movs	r2, #125	@ 0x7d
 8001c4e:	21d0      	movs	r1, #208	@ 0xd0
 8001c50:	480a      	ldr	r0, [pc, #40]	@ (8001c7c <icm20948_read_mem+0xc0>)
 8001c52:	f004 fba3 	bl	800639c <HAL_I2C_Mem_Read>
    
    bytesRead += thisLen;
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	61fb      	str	r3, [r7, #28]
    reg += thisLen;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	89fb      	ldrh	r3, [r7, #14]
 8001c64:	4413      	add	r3, r2
 8001c66:	81fb      	strh	r3, [r7, #14]
  while (bytesRead < length)
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d3c5      	bcc.n	8001bfc <icm20948_read_mem+0x40>
  }

  return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000010c 	.word	0x2000010c

08001c80 <icm20948_set_gyro_sf>:


int8_t icm20948_set_gyro_sf(unsigned char div, int gyro_level)
{
 8001c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c84:	b09b      	sub	sp, #108	@ 0x6c
 8001c86:	af04      	add	r7, sp, #16
 8001c88:	4603      	mov	r3, r0
 8001c8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  // gyro_level should be set to 4 regardless of fullscale, due to the addition of API dmp_icm20648_set_gyro_fsr()
  gyro_level = 4;
 8001c90:	2304      	movs	r3, #4
 8001c92:	62bb      	str	r3, [r7, #40]	@ 0x28

  // First read the TIMEBASE_CORRECTION_PLL register from Bank 1
  int8_t pll; // Signed. Typical value is 0x18
  icm20948_set_user_bank(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7ff f85f 	bl	8000d58 <icm20948_set_user_bank>
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB1_REG_TIMEBASE_CORRECTION_PLL, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&pll, 1, 1000);
 8001c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2301      	movs	r3, #1
 8001cac:	2228      	movs	r2, #40	@ 0x28
 8001cae:	21d0      	movs	r1, #208	@ 0xd0
 8001cb0:	4865      	ldr	r0, [pc, #404]	@ (8001e48 <icm20948_set_gyro_sf+0x1c8>)
 8001cb2:	f004 fa5f 	bl	8006174 <HAL_I2C_Mem_Write>


  // Now calculate the Gyro SF using code taken from the InvenSense example (inv_icm20948_set_gyro_sf)
  long gyro_sf;

  unsigned long long const MagicConstant = 264446880937391LL;
 8001cb6:	a362      	add	r3, pc, #392	@ (adr r3, 8001e40 <icm20948_set_gyro_sf+0x1c0>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  unsigned long long const MagicConstantScale = 100000LL;
 8001cc0:	4a62      	ldr	r2, [pc, #392]	@ (8001e4c <icm20948_set_gyro_sf+0x1cc>)
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long long ResultLL;

  if (pll & 0x80)
 8001cca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da48      	bge.n	8001d64 <icm20948_set_gyro_sf+0xe4>
  {
    ResultLL = (MagicConstant * (long long)(1ULL << gyro_level) * (1 + div) / (1270 - (pll & 0x7F)) / MagicConstantScale);
 8001cd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cd8:	f1a1 0420 	sub.w	r4, r1, #32
 8001cdc:	f1c1 0020 	rsb	r0, r1, #32
 8001ce0:	fa03 fb01 	lsl.w	fp, r3, r1
 8001ce4:	fa02 f404 	lsl.w	r4, r2, r4
 8001ce8:	ea4b 0b04 	orr.w	fp, fp, r4
 8001cec:	fa22 f000 	lsr.w	r0, r2, r0
 8001cf0:	ea4b 0b00 	orr.w	fp, fp, r0
 8001cf4:	fa02 fa01 	lsl.w	sl, r2, r1
 8001cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	17da      	asrs	r2, r3, #31
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	61fa      	str	r2, [r7, #28]
 8001d04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d08:	4603      	mov	r3, r0
 8001d0a:	fb03 f20b 	mul.w	r2, r3, fp
 8001d0e:	460b      	mov	r3, r1
 8001d10:	fb0a f303 	mul.w	r3, sl, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	4602      	mov	r2, r0
 8001d18:	fbaa 1202 	umull	r1, r2, sl, r2
 8001d1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d1e:	460a      	mov	r2, r1
 8001d20:	623a      	str	r2, [r7, #32]
 8001d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d24:	4413      	add	r3, r2
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d28:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d32:	f5c3 639e 	rsb	r3, r3, #1264	@ 0x4f0
 8001d36:	3306      	adds	r3, #6
 8001d38:	17da      	asrs	r2, r3, #31
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	617a      	str	r2, [r7, #20]
 8001d3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d46:	f7fe fe8f 	bl	8000a68 <__aeabi_uldivmod>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d56:	f7fe fe87 	bl	8000a68 <__aeabi_uldivmod>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001d62:	e03f      	b.n	8001de4 <icm20948_set_gyro_sf+0x164>
  }
  else
  {
    ResultLL = (MagicConstant * (long long)(1ULL << gyro_level) * (1 + div) / (1270 + pll) / MagicConstantScale);
 8001d64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d6a:	f1a1 0420 	sub.w	r4, r1, #32
 8001d6e:	f1c1 0020 	rsb	r0, r1, #32
 8001d72:	fa03 f901 	lsl.w	r9, r3, r1
 8001d76:	fa02 f404 	lsl.w	r4, r2, r4
 8001d7a:	ea49 0904 	orr.w	r9, r9, r4
 8001d7e:	fa22 f000 	lsr.w	r0, r2, r0
 8001d82:	ea49 0900 	orr.w	r9, r9, r0
 8001d86:	fa02 f801 	lsl.w	r8, r2, r1
 8001d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d8e:	3301      	adds	r3, #1
 8001d90:	17da      	asrs	r2, r3, #31
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	60fa      	str	r2, [r7, #12]
 8001d96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	fb03 f209 	mul.w	r2, r3, r9
 8001da0:	460b      	mov	r3, r1
 8001da2:	fb08 f303 	mul.w	r3, r8, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	4602      	mov	r2, r0
 8001daa:	fba8 5602 	umull	r5, r6, r8, r2
 8001dae:	4433      	add	r3, r6
 8001db0:	461e      	mov	r6, r3
 8001db2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001db6:	f203 43f6 	addw	r3, r3, #1270	@ 0x4f6
 8001dba:	17da      	asrs	r2, r3, #31
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	4631      	mov	r1, r6
 8001dc8:	f7fe fe4e 	bl	8000a68 <__aeabi_uldivmod>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001dd8:	f7fe fe46 	bl	8000a68 <__aeabi_uldivmod>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  /*
	    In above deprecated FP version, worst case arguments can produce a result that overflows a signed long.
	    Here, for such cases, we emulate the FP behavior of setting the result to the maximum positive value, as
	    the compiler's conversion of a u64 to an s32 is simple truncation of the u64's high half, sadly....
	*/
  if (ResultLL > 0x7FFFFFFF)
 8001de4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001de8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001dec:	f173 0300 	sbcs.w	r3, r3, #0
 8001df0:	d303      	bcc.n	8001dfa <icm20948_set_gyro_sf+0x17a>
    gyro_sf = 0x7FFFFFFF;
 8001df2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001df6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001df8:	e001      	b.n	8001dfe <icm20948_set_gyro_sf+0x17e>
  else
    gyro_sf = (long)ResultLL;
 8001dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dfc:	657b      	str	r3, [r7, #84]	@ 0x54

  // Finally, write the value to the DMP GYRO_SF register
  unsigned char gyro_sf_reg[4];
  gyro_sf_reg[0] = (unsigned char)(gyro_sf >> 24);
 8001dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e00:	161b      	asrs	r3, r3, #24
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  gyro_sf_reg[1] = (unsigned char)(gyro_sf >> 16);
 8001e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0a:	141b      	asrs	r3, r3, #16
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  gyro_sf_reg[2] = (unsigned char)(gyro_sf >> 8);
 8001e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e14:	121b      	asrs	r3, r3, #8
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  gyro_sf_reg[3] = (unsigned char)(gyro_sf & 0xff);
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  icm20948_write_mem(GYRO_SF, 4, (const unsigned char*)&gyro_sf_reg);
 8001e24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	f44f 7098 	mov.w	r0, #304	@ 0x130
 8001e30:	f7ff fe5e 	bl	8001af0 <icm20948_write_mem>

  return 0;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	375c      	adds	r7, #92	@ 0x5c
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e40:	566675af 	.word	0x566675af
 8001e44:	0000f083 	.word	0x0000f083
 8001e48:	2000010c 	.word	0x2000010c
 8001e4c:	000186a0 	.word	0x000186a0

08001e50 <icm20948_enable_DMP_sensor>:


int8_t icm20948_enable_DMP_sensor(enum inv_icm20948_sensor sensor, int state)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  uint32_t _enabled_Android_0 = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t _enabled_Android_1 = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  uint16_t inv_event_control = 0; // Use this to store the value for MOTION_EVENT_CTL
 8001e64:	2300      	movs	r3, #0
 8001e66:	83fb      	strh	r3, [r7, #30]
  uint16_t data_rdy_status = 0;   // Use this to store the value for DATA_RDY_STATUS
 8001e68:	2300      	movs	r3, #0
 8001e6a:	83bb      	strh	r3, [r7, #28]

  uint8_t androidSensor = sensor_type_2_android_sensor(sensor); // Convert sensor from enum inv_icm20948_sensor to Android numbering
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff98 	bl	8000da4 <sensor_type_2_android_sensor>
 8001e74:	4603      	mov	r3, r0
 8001e76:	747b      	strb	r3, [r7, #17]

  if (androidSensor >= ANDROID_SENSOR_NUM_MAX)
 8001e78:	7c7b      	ldrb	r3, [r7, #17]
 8001e7a:	2b2b      	cmp	r3, #43	@ 0x2b
 8001e7c:	d902      	bls.n	8001e84 <icm20948_enable_DMP_sensor+0x34>
    return -1; // Bail if the sensor is not supported (TO DO: Support B2S etc)
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e82:	e136      	b.n	80020f2 <icm20948_enable_DMP_sensor+0x2a2>

  // Convert the Android sensor into a bit mask for DATA_OUT_CTL1
  uint16_t delta = inv_androidSensor_to_control_bits[androidSensor];
 8001e84:	7c7b      	ldrb	r3, [r7, #17]
 8001e86:	4a9d      	ldr	r2, [pc, #628]	@ (80020fc <icm20948_enable_DMP_sensor+0x2ac>)
 8001e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e8c:	837b      	strh	r3, [r7, #26]
  if (delta == 0xFFFF)
 8001e8e:	8b7b      	ldrh	r3, [r7, #26]
 8001e90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d102      	bne.n	8001e9e <icm20948_enable_DMP_sensor+0x4e>
    return -1; // Bail if the sensor is not supported
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e9c:	e129      	b.n	80020f2 <icm20948_enable_DMP_sensor+0x2a2>

  // Convert the Android sensor number into a bitmask and set or clear that bit in _enabled_Android_0 / _enabled_Android_1
  unsigned long androidSensorAsBitMask;
  if (androidSensor < 32) // Sensors 0-31
 8001e9e:	7c7b      	ldrb	r3, [r7, #17]
 8001ea0:	2b1f      	cmp	r3, #31
 8001ea2:	d812      	bhi.n	8001eca <icm20948_enable_DMP_sensor+0x7a>
  {
    androidSensorAsBitMask = 1L << androidSensor;
 8001ea4:	7c7b      	ldrb	r3, [r7, #17]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	60fb      	str	r3, [r7, #12]
    if (state == 0) // Should we disable the sensor?
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <icm20948_enable_DMP_sensor+0x70>
    {
      _enabled_Android_0 &= ~androidSensorAsBitMask; // Clear the bit to disable the sensor
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eba:	4013      	ands	r3, r2
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ebe:	e017      	b.n	8001ef0 <icm20948_enable_DMP_sensor+0xa0>
    }
    else
    {
      _enabled_Android_0 |= androidSensorAsBitMask; // Set the bit to enable the sensor
 8001ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec8:	e012      	b.n	8001ef0 <icm20948_enable_DMP_sensor+0xa0>
    }
  }
  else // Sensors 32-
  {
    androidSensorAsBitMask = 1L << (androidSensor - 32);
 8001eca:	7c7b      	ldrb	r3, [r7, #17]
 8001ecc:	3b20      	subs	r3, #32
 8001ece:	2201      	movs	r2, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	60fb      	str	r3, [r7, #12]
    if (state == 0) // Should we disable the sensor?
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <icm20948_enable_DMP_sensor+0x98>
    {
      _enabled_Android_1 &= ~androidSensorAsBitMask; // Clear the bit to disable the sensor
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	6a3a      	ldr	r2, [r7, #32]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	e003      	b.n	8001ef0 <icm20948_enable_DMP_sensor+0xa0>
    }
    else
    {
      _enabled_Android_1 |= androidSensorAsBitMask; // Set the bit to enable the sensor
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	623b      	str	r3, [r7, #32]
    }
  }

  // Now we know androidSensor is valid, reconstruct the value for DATA_OUT_CTL1 from _enabled_Android_0 and _enabled_Android_0
  delta = 0; // Clear delta
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	837b      	strh	r3, [r7, #26]
  for (int i = 0; i < 32; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e057      	b.n	8001faa <icm20948_enable_DMP_sensor+0x15a>
  {
    androidSensorAsBitMask = 1L << i;
 8001efa:	2201      	movs	r2, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	60fb      	str	r3, [r7, #12]
    if ((_enabled_Android_0 & androidSensorAsBitMask) > 0) // Check if the Android sensor (0-31) is enabled
 8001f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <icm20948_enable_DMP_sensor+0xcc>
    {
      delta |= inv_androidSensor_to_control_bits[i]; // If it is, or the required bits into delta
 8001f0e:	4a7b      	ldr	r2, [pc, #492]	@ (80020fc <icm20948_enable_DMP_sensor+0x2ac>)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f16:	8b7b      	ldrh	r3, [r7, #26]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	837b      	strh	r3, [r7, #26]
    }
    if ((_enabled_Android_1 & androidSensorAsBitMask) > 0) // Check if the Android sensor (32-) is enabled
 8001f1c:	6a3a      	ldr	r2, [r7, #32]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <icm20948_enable_DMP_sensor+0xe6>
    {
      delta |= inv_androidSensor_to_control_bits[i + 32]; // If it is, or the required bits into delta
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3320      	adds	r3, #32
 8001f2a:	4a74      	ldr	r2, [pc, #464]	@ (80020fc <icm20948_enable_DMP_sensor+0x2ac>)
 8001f2c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f30:	8b7b      	ldrh	r3, [r7, #26]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	837b      	strh	r3, [r7, #26]
    }
    // Also check which bits need to be set in the Data Ready Status and Motion Event Control registers
    // Compare to INV_NEEDS_ACCEL_MASK, INV_NEEDS_GYRO_MASK and INV_NEEDS_COMPASS_MASK
    if (((androidSensorAsBitMask & INV_NEEDS_ACCEL_MASK) > 0) || ((androidSensorAsBitMask & INV_NEEDS_ACCEL_MASK1) > 0))
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4b71      	ldr	r3, [pc, #452]	@ (8002100 <icm20948_enable_DMP_sensor+0x2b0>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d104      	bne.n	8001f4a <icm20948_enable_DMP_sensor+0xfa>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 63dd 	and.w	r3, r3, #1768	@ 0x6e8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <icm20948_enable_DMP_sensor+0x10a>
    {
      data_rdy_status |= DMP_Data_ready_Accel;
 8001f4a:	8bbb      	ldrh	r3, [r7, #28]
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	83bb      	strh	r3, [r7, #28]
      inv_event_control |= DMP_Motion_Event_Control_Accel_Calibr;
 8001f52:	8bfb      	ldrh	r3, [r7, #30]
 8001f54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f58:	83fb      	strh	r3, [r7, #30]
    }
    if (((androidSensorAsBitMask & INV_NEEDS_GYRO_MASK) > 0) || ((androidSensorAsBitMask & INV_NEEDS_GYRO_MASK1) > 0))
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4b69      	ldr	r3, [pc, #420]	@ (8002104 <icm20948_enable_DMP_sensor+0x2b4>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <icm20948_enable_DMP_sensor+0x120>
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	f640 0318 	movw	r3, #2072	@ 0x818
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <icm20948_enable_DMP_sensor+0x130>
    {
      data_rdy_status |= DMP_Data_ready_Gyro;
 8001f70:	8bbb      	ldrh	r3, [r7, #28]
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	83bb      	strh	r3, [r7, #28]
      inv_event_control |= DMP_Motion_Event_Control_Gyro_Calibr;
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7e:	83fb      	strh	r3, [r7, #30]
    }
    if (((androidSensorAsBitMask & INV_NEEDS_COMPASS_MASK) > 0) || ((androidSensorAsBitMask & INV_NEEDS_COMPASS_MASK1) > 0))
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4b61      	ldr	r3, [pc, #388]	@ (8002108 <icm20948_enable_DMP_sensor+0x2b8>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d104      	bne.n	8001f94 <icm20948_enable_DMP_sensor+0x144>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0384 	and.w	r3, r3, #132	@ 0x84
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <icm20948_enable_DMP_sensor+0x154>
    {
      data_rdy_status |= DMP_Data_ready_Secondary_Compass;
 8001f94:	8bbb      	ldrh	r3, [r7, #28]
 8001f96:	f043 0308 	orr.w	r3, r3, #8
 8001f9a:	83bb      	strh	r3, [r7, #28]
      inv_event_control |= DMP_Motion_Event_Control_Compass_Calibr;
 8001f9c:	8bfb      	ldrh	r3, [r7, #30]
 8001f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa2:	83fb      	strh	r3, [r7, #30]
  for (int i = 0; i < 32; i++)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b1f      	cmp	r3, #31
 8001fae:	dda4      	ble.n	8001efa <icm20948_enable_DMP_sensor+0xaa>
    }
  }


  icm20948_sleep(false); // Make sure chip is awake
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f000 fe93 	bl	8002cdc <icm20948_sleep>
  /*if (result != ICM_20948_Stat_Ok)
  {
    return result;
  }*/

  icm20948_low_power(false); // Make sure chip is not in low power state
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 feca 	bl	8002d50 <icm20948_low_power>
  {
    return result;
  }*/

  // Check if Accel, Gyro/Gyro_Calibr or Compass_Calibr/Quat9/GeoMag/Compass are to be enabled. If they are then we need to request the accuracy data via header2.
  uint16_t delta2 = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	827b      	strh	r3, [r7, #18]
  if ((delta & DMP_Data_Output_Control_1_Accel) > 0)
 8001fc0:	8b7b      	ldrh	r3, [r7, #26]
 8001fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	dd03      	ble.n	8001fd2 <icm20948_enable_DMP_sensor+0x182>
  {
    delta2 |= DMP_Data_Output_Control_2_Accel_Accuracy;
 8001fca:	8a7b      	ldrh	r3, [r7, #18]
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd0:	827b      	strh	r3, [r7, #18]
  }
  if (((delta & DMP_Data_Output_Control_1_Gyro_Calibr) > 0) || ((delta & DMP_Data_Output_Control_1_Gyro) > 0))
 8001fd2:	8b7b      	ldrh	r3, [r7, #26]
 8001fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	dc04      	bgt.n	8001fe6 <icm20948_enable_DMP_sensor+0x196>
 8001fdc:	8b7b      	ldrh	r3, [r7, #26]
 8001fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	dd03      	ble.n	8001fee <icm20948_enable_DMP_sensor+0x19e>
  {
    delta2 |= DMP_Data_Output_Control_2_Gyro_Accuracy;
 8001fe6:	8a7b      	ldrh	r3, [r7, #18]
 8001fe8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fec:	827b      	strh	r3, [r7, #18]
  }
  if (((delta & DMP_Data_Output_Control_1_Compass_Calibr) > 0) || ((delta & DMP_Data_Output_Control_1_Compass) > 0) || ((delta & DMP_Data_Output_Control_1_Quat9) > 0) || ((delta & DMP_Data_Output_Control_1_Geomag) > 0))
 8001fee:	8b7b      	ldrh	r3, [r7, #26]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	dc0e      	bgt.n	8002016 <icm20948_enable_DMP_sensor+0x1c6>
 8001ff8:	8b7b      	ldrh	r3, [r7, #26]
 8001ffa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dc09      	bgt.n	8002016 <icm20948_enable_DMP_sensor+0x1c6>
 8002002:	8b7b      	ldrh	r3, [r7, #26]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	dc04      	bgt.n	8002016 <icm20948_enable_DMP_sensor+0x1c6>
 800200c:	8b7b      	ldrh	r3, [r7, #26]
 800200e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	dd03      	ble.n	800201e <icm20948_enable_DMP_sensor+0x1ce>
  {
    delta2 |= DMP_Data_Output_Control_2_Compass_Accuracy;
 8002016:	8a7b      	ldrh	r3, [r7, #18]
 8002018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800201c:	827b      	strh	r3, [r7, #18]
  }
  // TO DO: Add DMP_Data_Output_Control_2_Pickup etc. if required

  // Write the sensor control bits into memory address DATA_OUT_CTL1
  unsigned char data_output_control_reg[2];
  data_output_control_reg[0] = (unsigned char)(delta >> 8);
 800201e:	8b7b      	ldrh	r3, [r7, #26]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b29b      	uxth	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	723b      	strb	r3, [r7, #8]
  data_output_control_reg[1] = (unsigned char)(delta & 0xff);
 8002028:	8b7b      	ldrh	r3, [r7, #26]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	727b      	strb	r3, [r7, #9]
  
  icm20948_write_mem(DATA_OUT_CTL1, 2, (const unsigned char *)&data_output_control_reg);
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	461a      	mov	r2, r3
 8002034:	2102      	movs	r1, #2
 8002036:	2040      	movs	r0, #64	@ 0x40
 8002038:	f7ff fd5a 	bl	8001af0 <icm20948_write_mem>


  // Write the 'header2' sensor control bits into memory address DATA_OUT_CTL2
  data_output_control_reg[0] = (unsigned char)(delta2 >> 8);
 800203c:	8a7b      	ldrh	r3, [r7, #18]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	b29b      	uxth	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	723b      	strb	r3, [r7, #8]
  data_output_control_reg[1] = (unsigned char)(delta2 & 0xff);
 8002046:	8a7b      	ldrh	r3, [r7, #18]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	727b      	strb	r3, [r7, #9]
  
  icm20948_write_mem(DATA_OUT_CTL2, 2, (const unsigned char *)&data_output_control_reg);
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	461a      	mov	r2, r3
 8002052:	2102      	movs	r1, #2
 8002054:	2042      	movs	r0, #66	@ 0x42
 8002056:	f7ff fd4b 	bl	8001af0 <icm20948_write_mem>


  // Set the DATA_RDY_STATUS register
  data_output_control_reg[0] = (unsigned char)(data_rdy_status >> 8);
 800205a:	8bbb      	ldrh	r3, [r7, #28]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	b29b      	uxth	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	723b      	strb	r3, [r7, #8]
  data_output_control_reg[1] = (unsigned char)(data_rdy_status & 0xff);
 8002064:	8bbb      	ldrh	r3, [r7, #28]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	727b      	strb	r3, [r7, #9]
  
  icm20948_write_mem(DATA_RDY_STATUS, 2, (const unsigned char *)&data_output_control_reg);
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	461a      	mov	r2, r3
 8002070:	2102      	movs	r1, #2
 8002072:	208a      	movs	r0, #138	@ 0x8a
 8002074:	f7ff fd3c 	bl	8001af0 <icm20948_write_mem>


  // Check which extra bits need to be set in the Motion Event Control register
  if ((delta & DMP_Data_Output_Control_1_Quat9) > 0)
 8002078:	8b7b      	ldrh	r3, [r7, #26]
 800207a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207e:	2b00      	cmp	r3, #0
 8002080:	dd03      	ble.n	800208a <icm20948_enable_DMP_sensor+0x23a>
  {
    inv_event_control |= DMP_Motion_Event_Control_9axis;
 8002082:	8bfb      	ldrh	r3, [r7, #30]
 8002084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002088:	83fb      	strh	r3, [r7, #30]
  }
  if (((delta & DMP_Data_Output_Control_1_Step_Detector) > 0) || ((delta & DMP_Data_Output_Control_1_Step_Ind_0) > 0) || ((delta & DMP_Data_Output_Control_1_Step_Ind_1) > 0) || ((delta & DMP_Data_Output_Control_1_Step_Ind_2) > 0))
 800208a:	8b7b      	ldrh	r3, [r7, #26]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	dc0e      	bgt.n	80020b2 <icm20948_enable_DMP_sensor+0x262>
 8002094:	8b7b      	ldrh	r3, [r7, #26]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	dc09      	bgt.n	80020b2 <icm20948_enable_DMP_sensor+0x262>
 800209e:	8b7b      	ldrh	r3, [r7, #26]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	dc04      	bgt.n	80020b2 <icm20948_enable_DMP_sensor+0x262>
 80020a8:	8b7b      	ldrh	r3, [r7, #26]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	dd03      	ble.n	80020ba <icm20948_enable_DMP_sensor+0x26a>
  {
    inv_event_control |= DMP_Motion_Event_Control_Pedometer_Interrupt;
 80020b2:	8bfb      	ldrh	r3, [r7, #30]
 80020b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020b8:	83fb      	strh	r3, [r7, #30]
  }
  if ((delta & DMP_Data_Output_Control_1_Geomag) > 0)
 80020ba:	8b7b      	ldrh	r3, [r7, #26]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	dd03      	ble.n	80020cc <icm20948_enable_DMP_sensor+0x27c>
  {
    inv_event_control |= DMP_Motion_Event_Control_Geomag;
 80020c4:	8bfb      	ldrh	r3, [r7, #30]
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	83fb      	strh	r3, [r7, #30]
  }

  // Set the MOTION_EVENT_CTL register
  data_output_control_reg[0] = (unsigned char)(inv_event_control >> 8);
 80020cc:	8bfb      	ldrh	r3, [r7, #30]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	723b      	strb	r3, [r7, #8]
  data_output_control_reg[1] = (unsigned char)(inv_event_control & 0xff);
 80020d6:	8bfb      	ldrh	r3, [r7, #30]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	727b      	strb	r3, [r7, #9]
  
  icm20948_write_mem(MOTION_EVENT_CTL, 2, (const unsigned char *)&data_output_control_reg);
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	461a      	mov	r2, r3
 80020e2:	2102      	movs	r1, #2
 80020e4:	204e      	movs	r0, #78	@ 0x4e
 80020e6:	f7ff fd03 	bl	8001af0 <icm20948_write_mem>
  /*if (result != ICM_20948_Stat_Ok)
  {
    return result;
  }*/

  icm20948_low_power(true); // Put chip into low power state
 80020ea:	2001      	movs	r0, #1
 80020ec:	f000 fe30 	bl	8002d50 <icm20948_low_power>



  return 0;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3728      	adds	r7, #40	@ 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0800f714 	.word	0x0800f714
 8002100:	e29e8e0a 	.word	0xe29e8e0a
 8002104:	e6018e18 	.word	0xe6018e18
 8002108:	8310480c 	.word	0x8310480c

0800210c <icm20948_set_DMP_sensor_period>:


int8_t icm20948_set_DMP_sensor_period(enum DMP_ODR_Registers odr_reg, uint16_t interval)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	460a      	mov	r2, r1
 8002116:	71fb      	strb	r3, [r7, #7]
 8002118:	4613      	mov	r3, r2
 800211a:	80bb      	strh	r3, [r7, #4]

  // During run-time, if an ODR is changed, the corresponding rate counter must be reset.
  // To reset, write 2-byte {0,0} to DMP using keys below for a particular sensor:

  unsigned char odr_reg_val[2];
  odr_reg_val[0] = (unsigned char)(interval >> 8);
 800211c:	88bb      	ldrh	r3, [r7, #4]
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	b29b      	uxth	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	733b      	strb	r3, [r7, #12]
  odr_reg_val[1] = (unsigned char)(interval & 0xff);
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	737b      	strb	r3, [r7, #13]

  unsigned char odr_count_zero[2] = {0x00, 0x00};
 800212c:	2300      	movs	r3, #0
 800212e:	813b      	strh	r3, [r7, #8]

  icm20948_sleep(false); // Make sure chip is awake
 8002130:	2000      	movs	r0, #0
 8002132:	f000 fdd3 	bl	8002cdc <icm20948_sleep>

  icm20948_low_power(false); // Make sure chip is not in low power state
 8002136:	2000      	movs	r0, #0
 8002138:	f000 fe0a 	bl	8002d50 <icm20948_low_power>


  switch (odr_reg)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	3ba0      	subs	r3, #160	@ 0xa0
 8002140:	2b1e      	cmp	r3, #30
 8002142:	f200 80e6 	bhi.w	8002312 <icm20948_set_DMP_sensor_period+0x206>
 8002146:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <icm20948_set_DMP_sensor_period+0x40>)
 8002148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214c:	08002223 	.word	0x08002223
 8002150:	08002313 	.word	0x08002313
 8002154:	08002313 	.word	0x08002313
 8002158:	08002313 	.word	0x08002313
 800215c:	08002241 	.word	0x08002241
 8002160:	08002313 	.word	0x08002313
 8002164:	08002313 	.word	0x08002313
 8002168:	08002313 	.word	0x08002313
 800216c:	0800225f 	.word	0x0800225f
 8002170:	08002313 	.word	0x08002313
 8002174:	08002313 	.word	0x08002313
 8002178:	08002313 	.word	0x08002313
 800217c:	0800227d 	.word	0x0800227d
 8002180:	08002313 	.word	0x08002313
 8002184:	08002313 	.word	0x08002313
 8002188:	08002313 	.word	0x08002313
 800218c:	08002313 	.word	0x08002313
 8002190:	08002313 	.word	0x08002313
 8002194:	0800229b 	.word	0x0800229b
 8002198:	08002313 	.word	0x08002313
 800219c:	080021c9 	.word	0x080021c9
 80021a0:	08002313 	.word	0x08002313
 80021a4:	080022b9 	.word	0x080022b9
 80021a8:	08002313 	.word	0x08002313
 80021ac:	080021e7 	.word	0x080021e7
 80021b0:	08002313 	.word	0x08002313
 80021b4:	080022d7 	.word	0x080022d7
 80021b8:	08002313 	.word	0x08002313
 80021bc:	08002205 	.word	0x08002205
 80021c0:	08002313 	.word	0x08002313
 80021c4:	080022f5 	.word	0x080022f5
  {
  case DMP_ODR_Reg_Cpass_Calibr:
  {
    icm20948_write_mem(ODR_CPASS_CALIBR, 2, (const unsigned char *)&odr_reg_val);
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	461a      	mov	r2, r3
 80021ce:	2102      	movs	r1, #2
 80021d0:	20b4      	movs	r0, #180	@ 0xb4
 80021d2:	f7ff fc8d 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_CPASS_CALIBR, 2, (const unsigned char *)&odr_count_zero);
 80021d6:	f107 0308 	add.w	r3, r7, #8
 80021da:	461a      	mov	r2, r3
 80021dc:	2102      	movs	r1, #2
 80021de:	2094      	movs	r0, #148	@ 0x94
 80021e0:	f7ff fc86 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 80021e4:	e096      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  case DMP_ODR_Reg_Gyro_Calibr:
  {
    icm20948_write_mem(ODR_GYRO_CALIBR, 2, (const unsigned char *)&odr_reg_val);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	461a      	mov	r2, r3
 80021ec:	2102      	movs	r1, #2
 80021ee:	20b8      	movs	r0, #184	@ 0xb8
 80021f0:	f7ff fc7e 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_GYRO_CALIBR, 2, (const unsigned char *)&odr_count_zero);
 80021f4:	f107 0308 	add.w	r3, r7, #8
 80021f8:	461a      	mov	r2, r3
 80021fa:	2102      	movs	r1, #2
 80021fc:	2098      	movs	r0, #152	@ 0x98
 80021fe:	f7ff fc77 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 8002202:	e087      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  case DMP_ODR_Reg_Pressure:
  {
    icm20948_write_mem(ODR_PRESSURE, 2, (const unsigned char *)&odr_reg_val);
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	461a      	mov	r2, r3
 800220a:	2102      	movs	r1, #2
 800220c:	20bc      	movs	r0, #188	@ 0xbc
 800220e:	f7ff fc6f 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_PRESSURE, 2, (const unsigned char *)&odr_count_zero);
 8002212:	f107 0308 	add.w	r3, r7, #8
 8002216:	461a      	mov	r2, r3
 8002218:	2102      	movs	r1, #2
 800221a:	209c      	movs	r0, #156	@ 0x9c
 800221c:	f7ff fc68 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 8002220:	e078      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  case DMP_ODR_Reg_Geomag:
  {
    icm20948_write_mem(ODR_GEOMAG, 2, (const unsigned char *)&odr_reg_val);
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	461a      	mov	r2, r3
 8002228:	2102      	movs	r1, #2
 800222a:	20a0      	movs	r0, #160	@ 0xa0
 800222c:	f7ff fc60 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_GEOMAG, 2, (const unsigned char *)&odr_count_zero);
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	461a      	mov	r2, r3
 8002236:	2102      	movs	r1, #2
 8002238:	2080      	movs	r0, #128	@ 0x80
 800223a:	f7ff fc59 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 800223e:	e069      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  case DMP_ODR_Reg_PQuat6:
  {
    icm20948_write_mem(ODR_PQUAT6, 2, (const unsigned char *)&odr_reg_val);
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	461a      	mov	r2, r3
 8002246:	2102      	movs	r1, #2
 8002248:	20a4      	movs	r0, #164	@ 0xa4
 800224a:	f7ff fc51 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_PQUAT6, 2, (const unsigned char *)&odr_count_zero);
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	461a      	mov	r2, r3
 8002254:	2102      	movs	r1, #2
 8002256:	2084      	movs	r0, #132	@ 0x84
 8002258:	f7ff fc4a 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 800225c:	e05a      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  case DMP_ODR_Reg_Quat9:
  {
    icm20948_write_mem(ODR_QUAT9, 2, (const unsigned char *)&odr_reg_val);
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	461a      	mov	r2, r3
 8002264:	2102      	movs	r1, #2
 8002266:	20a8      	movs	r0, #168	@ 0xa8
 8002268:	f7ff fc42 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_QUAT9, 2, (const unsigned char *)&odr_count_zero);
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	461a      	mov	r2, r3
 8002272:	2102      	movs	r1, #2
 8002274:	2088      	movs	r0, #136	@ 0x88
 8002276:	f7ff fc3b 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 800227a:	e04b      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  case DMP_ODR_Reg_Quat6:
  {
    icm20948_write_mem(ODR_QUAT6, 2, (const unsigned char *)&odr_reg_val);
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	461a      	mov	r2, r3
 8002282:	2102      	movs	r1, #2
 8002284:	20ac      	movs	r0, #172	@ 0xac
 8002286:	f7ff fc33 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_QUAT6, 2, (const unsigned char *)&odr_count_zero);
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	461a      	mov	r2, r3
 8002290:	2102      	movs	r1, #2
 8002292:	208c      	movs	r0, #140	@ 0x8c
 8002294:	f7ff fc2c 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 8002298:	e03c      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  case DMP_ODR_Reg_ALS:
  {
    icm20948_write_mem(ODR_ALS, 2, (const unsigned char *)&odr_reg_val);
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	461a      	mov	r2, r3
 80022a0:	2102      	movs	r1, #2
 80022a2:	20b2      	movs	r0, #178	@ 0xb2
 80022a4:	f7ff fc24 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_ALS, 2, (const unsigned char *)&odr_count_zero);
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	461a      	mov	r2, r3
 80022ae:	2102      	movs	r1, #2
 80022b0:	2092      	movs	r0, #146	@ 0x92
 80022b2:	f7ff fc1d 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 80022b6:	e02d      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  case DMP_ODR_Reg_Cpass:
  {
    icm20948_write_mem(ODR_CPASS, 2, (const unsigned char *)&odr_reg_val);
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	461a      	mov	r2, r3
 80022be:	2102      	movs	r1, #2
 80022c0:	20b6      	movs	r0, #182	@ 0xb6
 80022c2:	f7ff fc15 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_CPASS, 2, (const unsigned char *)&odr_count_zero);
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	461a      	mov	r2, r3
 80022cc:	2102      	movs	r1, #2
 80022ce:	2096      	movs	r0, #150	@ 0x96
 80022d0:	f7ff fc0e 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 80022d4:	e01e      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  case DMP_ODR_Reg_Gyro:
  {
    icm20948_write_mem(ODR_GYRO, 2, (const unsigned char *)&odr_reg_val);
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	461a      	mov	r2, r3
 80022dc:	2102      	movs	r1, #2
 80022de:	20ba      	movs	r0, #186	@ 0xba
 80022e0:	f7ff fc06 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_GYRO, 2, (const unsigned char *)&odr_count_zero);
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	461a      	mov	r2, r3
 80022ea:	2102      	movs	r1, #2
 80022ec:	209a      	movs	r0, #154	@ 0x9a
 80022ee:	f7ff fbff 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 80022f2:	e00f      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  case DMP_ODR_Reg_Accel:
  {
    icm20948_write_mem(ODR_ACCEL, 2, (const unsigned char *)&odr_reg_val);
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	461a      	mov	r2, r3
 80022fa:	2102      	movs	r1, #2
 80022fc:	20be      	movs	r0, #190	@ 0xbe
 80022fe:	f7ff fbf7 	bl	8001af0 <icm20948_write_mem>
    icm20948_write_mem(ODR_CNTR_ACCEL, 2, (const unsigned char *)&odr_count_zero);
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	461a      	mov	r2, r3
 8002308:	2102      	movs	r1, #2
 800230a:	209e      	movs	r0, #158	@ 0x9e
 800230c:	f7ff fbf0 	bl	8001af0 <icm20948_write_mem>
  }
  break;
 8002310:	e000      	b.n	8002314 <icm20948_set_DMP_sensor_period+0x208>
  default:
    ICM_20948_Stat_InvalDMPRegister;
    break;
 8002312:	bf00      	nop
  }

  icm20948_low_power(true); // Put chip into low power state
 8002314:	2001      	movs	r0, #1
 8002316:	f000 fd1b 	bl	8002d50 <icm20948_low_power>

  return 0;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <icm20948_get_FIFO_count>:


int8_t icm20948_get_FIFO_count(uint16_t *count)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af04      	add	r7, sp, #16
 800232a:	6078      	str	r0, [r7, #4]
  ICM_20948_FIFO_COUNTH_t ctrlh;
  ICM_20948_FIFO_COUNTL_t ctrll;
  
  icm20948_set_user_bank(0);
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fd13 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_COUNT_H, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrlh, sizeof(ICM_20948_FIFO_COUNTH_t), 1000);
 8002332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	2301      	movs	r3, #1
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2301      	movs	r3, #1
 8002344:	2270      	movs	r2, #112	@ 0x70
 8002346:	21d0      	movs	r1, #208	@ 0xd0
 8002348:	4812      	ldr	r0, [pc, #72]	@ (8002394 <icm20948_get_FIFO_count+0x70>)
 800234a:	f004 f827 	bl	800639c <HAL_I2C_Mem_Read>
  ctrlh.FIFO_COUNTH &= 0x1F; // Datasheet says "FIFO_CNT[12:8]"
 800234e:	7b3b      	ldrb	r3, [r7, #12]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	b2db      	uxtb	r3, r3
 8002356:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_COUNT_L, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrll, sizeof(ICM_20948_FIFO_COUNTL_t), 1000);
 8002358:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235c:	9302      	str	r3, [sp, #8]
 800235e:	2301      	movs	r3, #1
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	2271      	movs	r2, #113	@ 0x71
 800236c:	21d0      	movs	r1, #208	@ 0xd0
 800236e:	4809      	ldr	r0, [pc, #36]	@ (8002394 <icm20948_get_FIFO_count+0x70>)
 8002370:	f004 f814 	bl	800639c <HAL_I2C_Mem_Read>


  *count = (((uint16_t)ctrlh.FIFO_COUNTH) << 8) | (uint16_t)ctrll.FIFO_COUNTL;
 8002374:	7b3b      	ldrb	r3, [r7, #12]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	b21a      	sxth	r2, r3
 800237a:	7a3b      	ldrb	r3, [r7, #8]
 800237c:	b21b      	sxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b21b      	sxth	r3, r3
 8002382:	b29a      	uxth	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	801a      	strh	r2, [r3, #0]

  return 0;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000010c 	.word	0x2000010c

08002398 <icm20948_read_FIFO>:


int8_t icm20948_read_FIFO(uint8_t *data, uint8_t len)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af04      	add	r7, sp, #16
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
  icm20948_set_user_bank(0);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7fe fcd7 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_R_W, I2C_MEMADD_SIZE_8BIT, data, len, 1000);
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023b2:	9202      	str	r2, [sp, #8]
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2301      	movs	r3, #1
 80023bc:	2272      	movs	r2, #114	@ 0x72
 80023be:	21d0      	movs	r1, #208	@ 0xd0
 80023c0:	4803      	ldr	r0, [pc, #12]	@ (80023d0 <icm20948_read_FIFO+0x38>)
 80023c2:	f003 ffeb 	bl	800639c <HAL_I2C_Mem_Read>

  return 0;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	2000010c 	.word	0x2000010c

080023d4 <icm20948_read_DMP_data>:


int8_t icm20948_read_DMP_data(icm_20948_DMP_data_t *data)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b09e      	sub	sp, #120	@ 0x78
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  data->header = 0; // Clear the existing header
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	801a      	strh	r2, [r3, #0]

  uint8_t fifoBytes[icm_20948_DMP_Maximum_Bytes]; // Interim storage for the FIFO data

  // Check how much data is in the FIFO
  uint16_t fifo_count;
  icm20948_get_FIFO_count(&fifo_count);
 80023e2:	f107 030e 	add.w	r3, r7, #14
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ff9c 	bl	8002324 <icm20948_get_FIFO_count>




  if (fifo_count < icm_20948_DMP_Header_Bytes) // Has a 2-byte header arrived?
 80023ec:	89fb      	ldrh	r3, [r7, #14]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d803      	bhi.n	80023fa <icm20948_read_DMP_data+0x26>
    return -1;     // Bail if no header is available
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023f6:	f000 bc68 	b.w	8002cca <icm20948_read_DMP_data+0x8f6>

  // Read the header (2 bytes)
  uint16_t aShort = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Header_Bytes);
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	2102      	movs	r1, #2
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ffc6 	bl	8002398 <icm20948_read_FIFO>

  for (int i = 0; i < icm_20948_DMP_Header_Bytes; i++)
 800240c:	2300      	movs	r3, #0
 800240e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002410:	e015      	b.n	800243e <icm20948_read_DMP_data+0x6a>
  {
    aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8)); // MSB first
 8002412:	f107 0210 	add.w	r2, r7, #16
 8002416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002418:	4413      	add	r3, r2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002420:	f1c3 0301 	rsb	r3, r3, #1
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	b21a      	sxth	r2, r3
 800242c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8002430:	4313      	orrs	r3, r2
 8002432:	b21b      	sxth	r3, r3
 8002434:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  for (int i = 0; i < icm_20948_DMP_Header_Bytes; i++)
 8002438:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800243a:	3301      	adds	r3, #1
 800243c:	673b      	str	r3, [r7, #112]	@ 0x70
 800243e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002440:	2b01      	cmp	r3, #1
 8002442:	dde6      	ble.n	8002412 <icm20948_read_DMP_data+0x3e>
  }
  data->header = aShort;                    // Store the header in data->header
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800244a:	801a      	strh	r2, [r3, #0]
  fifo_count -= icm_20948_DMP_Header_Bytes; // Decrement the count
 800244c:	89fb      	ldrh	r3, [r7, #14]
 800244e:	3b02      	subs	r3, #2
 8002450:	b29b      	uxth	r3, r3
 8002452:	81fb      	strh	r3, [r7, #14]

  // If the header indicates a header2 is present then read that now
  data->header2 = 0;                                  // Clear the existing header2
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	805a      	strh	r2, [r3, #2]
  if ((data->header & DMP_header_bitmap_Header2) > 0) // If the header2 bit is set
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	dd3b      	ble.n	80024de <icm20948_read_DMP_data+0x10a>
  {
    if (fifo_count < icm_20948_DMP_Header2_Bytes) // Check if we need to read the FIFO count again
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d804      	bhi.n	8002476 <icm20948_read_DMP_data+0xa2>
      icm20948_get_FIFO_count(&fifo_count);
 800246c:	f107 030e 	add.w	r3, r7, #14
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff57 	bl	8002324 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Header2_Bytes)
 8002476:	89fb      	ldrh	r3, [r7, #14]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d803      	bhi.n	8002484 <icm20948_read_DMP_data+0xb0>
      return -1; // Bail if no header2 is available
 800247c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002480:	f000 bc23 	b.w	8002cca <icm20948_read_DMP_data+0x8f6>
    // Read the header (2 bytes)
    aShort = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Header2_Bytes);
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff81 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Header2_Bytes; i++)
 8002496:	2300      	movs	r3, #0
 8002498:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800249a:	e015      	b.n	80024c8 <icm20948_read_DMP_data+0xf4>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 800249c:	f107 0210 	add.w	r2, r7, #16
 80024a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024aa:	f1c3 0301 	rsb	r3, r3, #1
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80024ba:	4313      	orrs	r3, r2
 80024bc:	b21b      	sxth	r3, r3
 80024be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    for (int i = 0; i < icm_20948_DMP_Header2_Bytes; i++)
 80024c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024c4:	3301      	adds	r3, #1
 80024c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	dde6      	ble.n	800249c <icm20948_read_DMP_data+0xc8>
    }
    data->header2 = aShort;                    // Store the header2 in data->header2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80024d4:	805a      	strh	r2, [r3, #2]
    fifo_count -= icm_20948_DMP_Header2_Bytes; // Decrement the count
 80024d6:	89fb      	ldrh	r3, [r7, #14]
 80024d8:	3b02      	subs	r3, #2
 80024da:	b29b      	uxth	r3, r3
 80024dc:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Accel) > 0) // case DMP_header_bitmap_Accel:
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	dd2c      	ble.n	8002544 <icm20948_read_DMP_data+0x170>
  {
    if (fifo_count < icm_20948_DMP_Raw_Accel_Bytes) // Check if we need to read the FIFO count again
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d804      	bhi.n	80024fa <icm20948_read_DMP_data+0x126>
      icm20948_get_FIFO_count(&fifo_count);
 80024f0:	f107 030e 	add.w	r3, r7, #14
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff15 	bl	8002324 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Raw_Accel_Bytes)
 80024fa:	89fb      	ldrh	r3, [r7, #14]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d801      	bhi.n	8002504 <icm20948_read_DMP_data+0x130>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002500:	230b      	movs	r3, #11
 8002502:	e3e2      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Raw_Accel_Bytes);
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	2106      	movs	r1, #6
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff44 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Raw_Accel_Bytes; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002514:	e00f      	b.n	8002536 <icm20948_read_DMP_data+0x162>
    {
      data->Raw_Accel.Bytes[DMP_PQuat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8002516:	4a99      	ldr	r2, [pc, #612]	@ (800277c <icm20948_read_DMP_data+0x3a8>)
 8002518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251e:	f107 0110 	add.w	r1, r7, #16
 8002522:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002524:	440a      	add	r2, r1
 8002526:	7811      	ldrb	r1, [r2, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	460a      	mov	r2, r1
 800252e:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < icm_20948_DMP_Raw_Accel_Bytes; i++)
 8002530:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002532:	3301      	adds	r3, #1
 8002534:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002536:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002538:	2b05      	cmp	r3, #5
 800253a:	ddec      	ble.n	8002516 <icm20948_read_DMP_data+0x142>
    }
    fifo_count -= icm_20948_DMP_Raw_Accel_Bytes; // Decrement the count
 800253c:	89fb      	ldrh	r3, [r7, #14]
 800253e:	3b06      	subs	r3, #6
 8002540:	b29b      	uxth	r3, r3
 8002542:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Gyro) > 0) // case DMP_header_bitmap_Gyro:
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254c:	2b00      	cmp	r3, #0
 800254e:	dd2c      	ble.n	80025aa <icm20948_read_DMP_data+0x1d6>
  {
    if (fifo_count < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes)) // Check if we need to read the FIFO count again
 8002550:	89fb      	ldrh	r3, [r7, #14]
 8002552:	2b0b      	cmp	r3, #11
 8002554:	d804      	bhi.n	8002560 <icm20948_read_DMP_data+0x18c>
      icm20948_get_FIFO_count(&fifo_count);
 8002556:	f107 030e 	add.w	r3, r7, #14
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fee2 	bl	8002324 <icm20948_get_FIFO_count>

    if (fifo_count < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes))
 8002560:	89fb      	ldrh	r3, [r7, #14]
 8002562:	2b0b      	cmp	r3, #11
 8002564:	d801      	bhi.n	800256a <icm20948_read_DMP_data+0x196>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002566:	230b      	movs	r3, #11
 8002568:	e3af      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes));
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	210c      	movs	r1, #12
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff11 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes); i++)
 8002576:	2300      	movs	r3, #0
 8002578:	667b      	str	r3, [r7, #100]	@ 0x64
 800257a:	e00f      	b.n	800259c <icm20948_read_DMP_data+0x1c8>
    {
      data->Raw_Gyro.Bytes[DMP_Raw_Gyro_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 800257c:	4a80      	ldr	r2, [pc, #512]	@ (8002780 <icm20948_read_DMP_data+0x3ac>)
 800257e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002584:	f107 0110 	add.w	r1, r7, #16
 8002588:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800258a:	440a      	add	r2, r1
 800258c:	7811      	ldrb	r1, [r2, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	460a      	mov	r2, r1
 8002594:	729a      	strb	r2, [r3, #10]
    for (int i = 0; i < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes); i++)
 8002596:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002598:	3301      	adds	r3, #1
 800259a:	667b      	str	r3, [r7, #100]	@ 0x64
 800259c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800259e:	2b0b      	cmp	r3, #11
 80025a0:	ddec      	ble.n	800257c <icm20948_read_DMP_data+0x1a8>
    }
    fifo_count -= (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes); // Decrement the count
 80025a2:	89fb      	ldrh	r3, [r7, #14]
 80025a4:	3b0c      	subs	r3, #12
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Compass) > 0) // case DMP_header_bitmap_Compass:
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	dd2c      	ble.n	8002610 <icm20948_read_DMP_data+0x23c>
  {
    if (fifo_count < icm_20948_DMP_Compass_Bytes) // Check if we need to read the FIFO count again
 80025b6:	89fb      	ldrh	r3, [r7, #14]
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d804      	bhi.n	80025c6 <icm20948_read_DMP_data+0x1f2>
      icm20948_get_FIFO_count(&fifo_count);
 80025bc:	f107 030e 	add.w	r3, r7, #14
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff feaf 	bl	8002324 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Compass_Bytes)
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d801      	bhi.n	80025d0 <icm20948_read_DMP_data+0x1fc>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80025cc:	230b      	movs	r3, #11
 80025ce:	e37c      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Compass_Bytes);
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	2106      	movs	r1, #6
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fede 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Compass_Bytes; i++)
 80025dc:	2300      	movs	r3, #0
 80025de:	663b      	str	r3, [r7, #96]	@ 0x60
 80025e0:	e00f      	b.n	8002602 <icm20948_read_DMP_data+0x22e>
    {
      data->Compass.Bytes[DMP_PQuat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 80025e2:	4a66      	ldr	r2, [pc, #408]	@ (800277c <icm20948_read_DMP_data+0x3a8>)
 80025e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	f107 0110 	add.w	r1, r7, #16
 80025ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025f0:	440a      	add	r2, r1
 80025f2:	7811      	ldrb	r1, [r2, #0]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	460a      	mov	r2, r1
 80025fa:	759a      	strb	r2, [r3, #22]
    for (int i = 0; i < icm_20948_DMP_Compass_Bytes; i++)
 80025fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025fe:	3301      	adds	r3, #1
 8002600:	663b      	str	r3, [r7, #96]	@ 0x60
 8002602:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002604:	2b05      	cmp	r3, #5
 8002606:	ddec      	ble.n	80025e2 <icm20948_read_DMP_data+0x20e>
    }
    fifo_count -= icm_20948_DMP_Compass_Bytes; // Decrement the count
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	3b06      	subs	r3, #6
 800260c:	b29b      	uxth	r3, r3
 800260e:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_ALS) > 0) // case DMP_header_bitmap_ALS:
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002618:	2b00      	cmp	r3, #0
 800261a:	dd2a      	ble.n	8002672 <icm20948_read_DMP_data+0x29e>
  {
    if (fifo_count < icm_20948_DMP_ALS_Bytes) // Check if we need to read the FIFO count again
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	2b07      	cmp	r3, #7
 8002620:	d804      	bhi.n	800262c <icm20948_read_DMP_data+0x258>
      icm20948_get_FIFO_count(&fifo_count);
 8002622:	f107 030e 	add.w	r3, r7, #14
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fe7c 	bl	8002324 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_ALS_Bytes)
 800262c:	89fb      	ldrh	r3, [r7, #14]
 800262e:	2b07      	cmp	r3, #7
 8002630:	d801      	bhi.n	8002636 <icm20948_read_DMP_data+0x262>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002632:	230b      	movs	r3, #11
 8002634:	e349      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_ALS_Bytes);
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	2108      	movs	r1, #8
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff feab 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_ALS_Bytes; i++)
 8002642:	2300      	movs	r3, #0
 8002644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002646:	e00d      	b.n	8002664 <icm20948_read_DMP_data+0x290>
    {
      data->ALS[i] = fifoBytes[i];
 8002648:	f107 0210 	add.w	r2, r7, #16
 800264c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800264e:	4413      	add	r3, r2
 8002650:	7819      	ldrb	r1, [r3, #0]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002656:	4413      	add	r3, r2
 8002658:	331c      	adds	r3, #28
 800265a:	460a      	mov	r2, r1
 800265c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < icm_20948_DMP_ALS_Bytes; i++)
 800265e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002660:	3301      	adds	r3, #1
 8002662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002664:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002666:	2b07      	cmp	r3, #7
 8002668:	ddee      	ble.n	8002648 <icm20948_read_DMP_data+0x274>
    }
    fifo_count -= icm_20948_DMP_ALS_Bytes; // Decrement the count
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	3b08      	subs	r3, #8
 800266e:	b29b      	uxth	r3, r3
 8002670:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Quat6) > 0) // case DMP_header_bitmap_Quat6:
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800267a:	2b00      	cmp	r3, #0
 800267c:	dd2d      	ble.n	80026da <icm20948_read_DMP_data+0x306>
  {
    if (fifo_count < icm_20948_DMP_Quat6_Bytes) // Check if we need to read the FIFO count again
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	2b0b      	cmp	r3, #11
 8002682:	d804      	bhi.n	800268e <icm20948_read_DMP_data+0x2ba>
      icm20948_get_FIFO_count(&fifo_count);
 8002684:	f107 030e 	add.w	r3, r7, #14
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fe4b 	bl	8002324 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Quat6_Bytes)
 800268e:	89fb      	ldrh	r3, [r7, #14]
 8002690:	2b0b      	cmp	r3, #11
 8002692:	d801      	bhi.n	8002698 <icm20948_read_DMP_data+0x2c4>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002694:	230b      	movs	r3, #11
 8002696:	e318      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Quat6_Bytes);
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	210c      	movs	r1, #12
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fe7a 	bl	8002398 <icm20948_read_FIFO>
    for (int i = 0; i < icm_20948_DMP_Quat6_Bytes; i++)
 80026a4:	2300      	movs	r3, #0
 80026a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026a8:	e010      	b.n	80026cc <icm20948_read_DMP_data+0x2f8>
    {
      data->Quat6.Bytes[DMP_Quat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 80026aa:	4a36      	ldr	r2, [pc, #216]	@ (8002784 <icm20948_read_DMP_data+0x3b0>)
 80026ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b2:	f107 0110 	add.w	r1, r7, #16
 80026b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026b8:	440a      	add	r2, r1
 80026ba:	7811      	ldrb	r1, [r2, #0]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	460a      	mov	r2, r1
 80026c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    for (int i = 0; i < icm_20948_DMP_Quat6_Bytes; i++)
 80026c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c8:	3301      	adds	r3, #1
 80026ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ce:	2b0b      	cmp	r3, #11
 80026d0:	ddeb      	ble.n	80026aa <icm20948_read_DMP_data+0x2d6>
    }
    fifo_count -= icm_20948_DMP_Quat6_Bytes; // Decrement the count
 80026d2:	89fb      	ldrh	r3, [r7, #14]
 80026d4:	3b0c      	subs	r3, #12
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Quat9) > 0) // case DMP_header_bitmap_Quat9:
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	dd2d      	ble.n	8002742 <icm20948_read_DMP_data+0x36e>
  {
    if (fifo_count < icm_20948_DMP_Quat9_Bytes) // Check if we need to read the FIFO count again
 80026e6:	89fb      	ldrh	r3, [r7, #14]
 80026e8:	2b0d      	cmp	r3, #13
 80026ea:	d804      	bhi.n	80026f6 <icm20948_read_DMP_data+0x322>
      icm20948_get_FIFO_count(&fifo_count);
 80026ec:	f107 030e 	add.w	r3, r7, #14
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fe17 	bl	8002324 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Quat9_Bytes)
 80026f6:	89fb      	ldrh	r3, [r7, #14]
 80026f8:	2b0d      	cmp	r3, #13
 80026fa:	d801      	bhi.n	8002700 <icm20948_read_DMP_data+0x32c>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80026fc:	230b      	movs	r3, #11
 80026fe:	e2e4      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Quat9_Bytes);
 8002700:	f107 0310 	add.w	r3, r7, #16
 8002704:	210e      	movs	r1, #14
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fe46 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Quat9_Bytes; i++)
 800270c:	2300      	movs	r3, #0
 800270e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002710:	e010      	b.n	8002734 <icm20948_read_DMP_data+0x360>
    {
      data->Quat9.Bytes[DMP_Quat9_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8002712:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <icm20948_read_DMP_data+0x3b4>)
 8002714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	f107 0110 	add.w	r1, r7, #16
 800271e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002720:	440a      	add	r2, r1
 8002722:	7811      	ldrb	r1, [r2, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	460a      	mov	r2, r1
 800272a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    for (int i = 0; i < icm_20948_DMP_Quat9_Bytes; i++)
 800272e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002730:	3301      	adds	r3, #1
 8002732:	657b      	str	r3, [r7, #84]	@ 0x54
 8002734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002736:	2b0d      	cmp	r3, #13
 8002738:	ddeb      	ble.n	8002712 <icm20948_read_DMP_data+0x33e>
    }
    fifo_count -= icm_20948_DMP_Quat9_Bytes; // Decrement the count
 800273a:	89fb      	ldrh	r3, [r7, #14]
 800273c:	3b0e      	subs	r3, #14
 800273e:	b29b      	uxth	r3, r3
 8002740:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_PQuat6) > 0) // case DMP_header_bitmap_PQuat6:
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800274a:	2b00      	cmp	r3, #0
 800274c:	dd36      	ble.n	80027bc <icm20948_read_DMP_data+0x3e8>
  {
    if (fifo_count < icm_20948_DMP_PQuat6_Bytes) // Check if we need to read the FIFO count again
 800274e:	89fb      	ldrh	r3, [r7, #14]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d804      	bhi.n	800275e <icm20948_read_DMP_data+0x38a>
      icm20948_get_FIFO_count(&fifo_count);
 8002754:	f107 030e 	add.w	r3, r7, #14
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fde3 	bl	8002324 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_PQuat6_Bytes)
 800275e:	89fb      	ldrh	r3, [r7, #14]
 8002760:	2b05      	cmp	r3, #5
 8002762:	d801      	bhi.n	8002768 <icm20948_read_DMP_data+0x394>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002764:	230b      	movs	r3, #11
 8002766:	e2b0      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_PQuat6_Bytes);
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	2106      	movs	r1, #6
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fe12 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_PQuat6_Bytes; i++)
 8002774:	2300      	movs	r3, #0
 8002776:	653b      	str	r3, [r7, #80]	@ 0x50
 8002778:	e019      	b.n	80027ae <icm20948_read_DMP_data+0x3da>
 800277a:	bf00      	nop
 800277c:	0800f6ac 	.word	0x0800f6ac
 8002780:	0800f6c4 	.word	0x0800f6c4
 8002784:	0800f67c 	.word	0x0800f67c
 8002788:	0800f644 	.word	0x0800f644
    {
      data->PQuat6.Bytes[DMP_PQuat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 800278c:	4aa5      	ldr	r2, [pc, #660]	@ (8002a24 <icm20948_read_DMP_data+0x650>)
 800278e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002794:	f107 0110 	add.w	r1, r7, #16
 8002798:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800279a:	440a      	add	r2, r1
 800279c:	7811      	ldrb	r1, [r2, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	460a      	mov	r2, r1
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    for (int i = 0; i < icm_20948_DMP_PQuat6_Bytes; i++)
 80027a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027aa:	3301      	adds	r3, #1
 80027ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80027ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	ddeb      	ble.n	800278c <icm20948_read_DMP_data+0x3b8>
    }
    fifo_count -= icm_20948_DMP_PQuat6_Bytes; // Decrement the count
 80027b4:	89fb      	ldrh	r3, [r7, #14]
 80027b6:	3b06      	subs	r3, #6
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Geomag) > 0) // case DMP_header_bitmap_Geomag:
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	dd2d      	ble.n	8002824 <icm20948_read_DMP_data+0x450>
  {
    if (fifo_count < icm_20948_DMP_Geomag_Bytes) // Check if we need to read the FIFO count again
 80027c8:	89fb      	ldrh	r3, [r7, #14]
 80027ca:	2b0d      	cmp	r3, #13
 80027cc:	d804      	bhi.n	80027d8 <icm20948_read_DMP_data+0x404>
      icm20948_get_FIFO_count(&fifo_count);
 80027ce:	f107 030e 	add.w	r3, r7, #14
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fda6 	bl	8002324 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Geomag_Bytes)
 80027d8:	89fb      	ldrh	r3, [r7, #14]
 80027da:	2b0d      	cmp	r3, #13
 80027dc:	d801      	bhi.n	80027e2 <icm20948_read_DMP_data+0x40e>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80027de:	230b      	movs	r3, #11
 80027e0:	e273      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Geomag_Bytes);
 80027e2:	f107 0310 	add.w	r3, r7, #16
 80027e6:	210e      	movs	r1, #14
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fdd5 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Geomag_Bytes; i++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027f2:	e010      	b.n	8002816 <icm20948_read_DMP_data+0x442>
    {
      data->Geomag.Bytes[DMP_Quat9_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 80027f4:	4a8c      	ldr	r2, [pc, #560]	@ (8002a28 <icm20948_read_DMP_data+0x654>)
 80027f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fc:	f107 0110 	add.w	r1, r7, #16
 8002800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002802:	440a      	add	r2, r1
 8002804:	7811      	ldrb	r1, [r2, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	460a      	mov	r2, r1
 800280c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    for (int i = 0; i < icm_20948_DMP_Geomag_Bytes; i++)
 8002810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002812:	3301      	adds	r3, #1
 8002814:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002818:	2b0d      	cmp	r3, #13
 800281a:	ddeb      	ble.n	80027f4 <icm20948_read_DMP_data+0x420>
    }
    fifo_count -= icm_20948_DMP_Geomag_Bytes; // Decrement the count
 800281c:	89fb      	ldrh	r3, [r7, #14]
 800281e:	3b0e      	subs	r3, #14
 8002820:	b29b      	uxth	r3, r3
 8002822:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Pressure) > 0) // case DMP_header_bitmap_Pressure:
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	dd2a      	ble.n	8002886 <icm20948_read_DMP_data+0x4b2>
  {
    if (fifo_count < icm_20948_DMP_Pressure_Bytes) // Check if we need to read the FIFO count again
 8002830:	89fb      	ldrh	r3, [r7, #14]
 8002832:	2b05      	cmp	r3, #5
 8002834:	d804      	bhi.n	8002840 <icm20948_read_DMP_data+0x46c>
      icm20948_get_FIFO_count(&fifo_count);
 8002836:	f107 030e 	add.w	r3, r7, #14
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fd72 	bl	8002324 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Pressure_Bytes)
 8002840:	89fb      	ldrh	r3, [r7, #14]
 8002842:	2b05      	cmp	r3, #5
 8002844:	d801      	bhi.n	800284a <icm20948_read_DMP_data+0x476>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002846:	230b      	movs	r3, #11
 8002848:	e23f      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Pressure_Bytes);
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	2106      	movs	r1, #6
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fda1 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Pressure_Bytes; i++)
 8002856:	2300      	movs	r3, #0
 8002858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800285a:	e00d      	b.n	8002878 <icm20948_read_DMP_data+0x4a4>
    {
      data->Pressure[i] = fifoBytes[i];
 800285c:	f107 0210 	add.w	r2, r7, #16
 8002860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002862:	4413      	add	r3, r2
 8002864:	7819      	ldrb	r1, [r3, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800286a:	4413      	add	r3, r2
 800286c:	3358      	adds	r3, #88	@ 0x58
 800286e:	460a      	mov	r2, r1
 8002870:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < icm_20948_DMP_Pressure_Bytes; i++)
 8002872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002874:	3301      	adds	r3, #1
 8002876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800287a:	2b05      	cmp	r3, #5
 800287c:	ddee      	ble.n	800285c <icm20948_read_DMP_data+0x488>
    }
    fifo_count -= icm_20948_DMP_Pressure_Bytes; // Decrement the count
 800287e:	89fb      	ldrh	r3, [r7, #14]
 8002880:	3b06      	subs	r3, #6
 8002882:	b29b      	uxth	r3, r3
 8002884:	81fb      	strh	r3, [r7, #14]
			}
			fifo_count -= icm_20948_DMP_Gyro_Calibr_Bytes; // Decrement the count
			*/
  }

  if ((data->header & DMP_header_bitmap_Compass_Calibr) > 0) // case DMP_header_bitmap_Compass_Calibr:
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	dd2d      	ble.n	80028ee <icm20948_read_DMP_data+0x51a>
  {
    if (fifo_count < icm_20948_DMP_Compass_Calibr_Bytes) // Check if we need to read the FIFO count again
 8002892:	89fb      	ldrh	r3, [r7, #14]
 8002894:	2b0b      	cmp	r3, #11
 8002896:	d804      	bhi.n	80028a2 <icm20948_read_DMP_data+0x4ce>
      icm20948_get_FIFO_count(&fifo_count);
 8002898:	f107 030e 	add.w	r3, r7, #14
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fd41 	bl	8002324 <icm20948_get_FIFO_count>
    
    if (fifo_count < icm_20948_DMP_Compass_Calibr_Bytes)
 80028a2:	89fb      	ldrh	r3, [r7, #14]
 80028a4:	2b0b      	cmp	r3, #11
 80028a6:	d801      	bhi.n	80028ac <icm20948_read_DMP_data+0x4d8>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80028a8:	230b      	movs	r3, #11
 80028aa:	e20e      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Compass_Calibr_Bytes);
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	210c      	movs	r1, #12
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fd70 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Compass_Calibr_Bytes; i++)
 80028b8:	2300      	movs	r3, #0
 80028ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80028bc:	e010      	b.n	80028e0 <icm20948_read_DMP_data+0x50c>
    {
      data->Compass_Calibr.Bytes[DMP_Quat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 80028be:	4a5b      	ldr	r2, [pc, #364]	@ (8002a2c <icm20948_read_DMP_data+0x658>)
 80028c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	f107 0110 	add.w	r1, r7, #16
 80028ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028cc:	440a      	add	r2, r1
 80028ce:	7811      	ldrb	r1, [r2, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	460a      	mov	r2, r1
 80028d6:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
    for (int i = 0; i < icm_20948_DMP_Compass_Calibr_Bytes; i++)
 80028da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028dc:	3301      	adds	r3, #1
 80028de:	647b      	str	r3, [r7, #68]	@ 0x44
 80028e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028e2:	2b0b      	cmp	r3, #11
 80028e4:	ddeb      	ble.n	80028be <icm20948_read_DMP_data+0x4ea>
    }
    fifo_count -= icm_20948_DMP_Compass_Calibr_Bytes; // Decrement the count
 80028e6:	89fb      	ldrh	r3, [r7, #14]
 80028e8:	3b0c      	subs	r3, #12
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Step_Detector) > 0) // case DMP_header_bitmap_Step_Detector:
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	dd33      	ble.n	8002962 <icm20948_read_DMP_data+0x58e>
  {
    if (fifo_count < icm_20948_DMP_Step_Detector_Bytes) // Check if we need to read the FIFO count again
 80028fa:	89fb      	ldrh	r3, [r7, #14]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d804      	bhi.n	800290a <icm20948_read_DMP_data+0x536>
      icm20948_get_FIFO_count(&fifo_count);
 8002900:	f107 030e 	add.w	r3, r7, #14
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fd0d 	bl	8002324 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Step_Detector_Bytes)
 800290a:	89fb      	ldrh	r3, [r7, #14]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d801      	bhi.n	8002914 <icm20948_read_DMP_data+0x540>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002910:	230b      	movs	r3, #11
 8002912:	e1da      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Step_Detector_Bytes);
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	2104      	movs	r1, #4
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fd3c 	bl	8002398 <icm20948_read_FIFO>

    uint32_t aWord = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < icm_20948_DMP_Step_Detector_Bytes; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002928:	e011      	b.n	800294e <icm20948_read_DMP_data+0x57a>
    {
      aWord |= ((uint32_t)fifoBytes[i]) << (24 - (i * 8)); // MSB first
 800292a:	f107 0210 	add.w	r2, r7, #16
 800292e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002938:	f1c3 0303 	rsb	r3, r3, #3
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002944:	4313      	orrs	r3, r2
 8002946:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < icm_20948_DMP_Step_Detector_Bytes; i++)
 8002948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800294a:	3301      	adds	r3, #1
 800294c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800294e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002950:	2b03      	cmp	r3, #3
 8002952:	ddea      	ble.n	800292a <icm20948_read_DMP_data+0x556>
    }
    data->Pedometer_Timestamp = aWord;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002958:	679a      	str	r2, [r3, #120]	@ 0x78
    fifo_count -= icm_20948_DMP_Step_Detector_Bytes; // Decrement the count
 800295a:	89fb      	ldrh	r3, [r7, #14]
 800295c:	3b04      	subs	r3, #4
 800295e:	b29b      	uxth	r3, r3
 8002960:	81fb      	strh	r3, [r7, #14]
  }

  // Now check for header2 features

  if ((data->header2 & DMP_header2_bitmap_Accel_Accuracy) > 0) // case DMP_header2_bitmap_Accel_Accuracy:
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	885b      	ldrh	r3, [r3, #2]
 8002966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800296a:	2b00      	cmp	r3, #0
 800296c:	dd3a      	ble.n	80029e4 <icm20948_read_DMP_data+0x610>
  {
    if (fifo_count < icm_20948_DMP_Accel_Accuracy_Bytes) // Check if we need to read the FIFO count again
 800296e:	89fb      	ldrh	r3, [r7, #14]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d804      	bhi.n	800297e <icm20948_read_DMP_data+0x5aa>
      icm20948_get_FIFO_count(&fifo_count);
 8002974:	f107 030e 	add.w	r3, r7, #14
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fcd3 	bl	8002324 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Accel_Accuracy_Bytes)
 800297e:	89fb      	ldrh	r3, [r7, #14]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d801      	bhi.n	8002988 <icm20948_read_DMP_data+0x5b4>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002984:	230b      	movs	r3, #11
 8002986:	e1a0      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    aShort = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Accel_Accuracy_Bytes);
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	2102      	movs	r1, #2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fcff 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Accel_Accuracy_Bytes; i++)
 800299a:	2300      	movs	r3, #0
 800299c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800299e:	e015      	b.n	80029cc <icm20948_read_DMP_data+0x5f8>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 80029a0:	f107 0210 	add.w	r2, r7, #16
 80029a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a6:	4413      	add	r3, r2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ae:	f1c3 0301 	rsb	r3, r3, #1
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	b21a      	sxth	r2, r3
 80029ba:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80029be:	4313      	orrs	r3, r2
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    for (int i = 0; i < icm_20948_DMP_Accel_Accuracy_Bytes; i++)
 80029c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c8:	3301      	adds	r3, #1
 80029ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	dde6      	ble.n	80029a0 <icm20948_read_DMP_data+0x5cc>
    }
    data->Accel_Accuracy = aShort;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80029d8:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    fifo_count -= icm_20948_DMP_Accel_Accuracy_Bytes; // Decrement the count
 80029dc:	89fb      	ldrh	r3, [r7, #14]
 80029de:	3b02      	subs	r3, #2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Gyro_Accuracy) > 0) // case DMP_header2_bitmap_Gyro_Accuracy:
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	885b      	ldrh	r3, [r3, #2]
 80029e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	dd41      	ble.n	8002a74 <icm20948_read_DMP_data+0x6a0>
  {
    if (fifo_count < icm_20948_DMP_Gyro_Accuracy_Bytes) // Check if we need to read the FIFO count again
 80029f0:	89fb      	ldrh	r3, [r7, #14]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d804      	bhi.n	8002a00 <icm20948_read_DMP_data+0x62c>
      icm20948_get_FIFO_count(&fifo_count);
 80029f6:	f107 030e 	add.w	r3, r7, #14
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fc92 	bl	8002324 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Gyro_Accuracy_Bytes)
 8002a00:	89fb      	ldrh	r3, [r7, #14]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d801      	bhi.n	8002a0a <icm20948_read_DMP_data+0x636>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002a06:	230b      	movs	r3, #11
 8002a08:	e15f      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    aShort = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Gyro_Accuracy_Bytes);
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	2102      	movs	r1, #2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fcbe 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Gyro_Accuracy_Bytes; i++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a20:	e01c      	b.n	8002a5c <icm20948_read_DMP_data+0x688>
 8002a22:	bf00      	nop
 8002a24:	0800f6ac 	.word	0x0800f6ac
 8002a28:	0800f644 	.word	0x0800f644
 8002a2c:	0800f67c 	.word	0x0800f67c
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 8002a30:	f107 0210 	add.w	r2, r7, #16
 8002a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a36:	4413      	add	r3, r2
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3e:	f1c3 0301 	rsb	r3, r3, #1
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	b21a      	sxth	r2, r3
 8002a4a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    for (int i = 0; i < icm_20948_DMP_Gyro_Accuracy_Bytes; i++)
 8002a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a58:	3301      	adds	r3, #1
 8002a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	dde6      	ble.n	8002a30 <icm20948_read_DMP_data+0x65c>
    }
    data->Gyro_Accuracy = aShort;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8002a68:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    fifo_count -= icm_20948_DMP_Gyro_Accuracy_Bytes; // Decrement the count
 8002a6c:	89fb      	ldrh	r3, [r7, #14]
 8002a6e:	3b02      	subs	r3, #2
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Compass_Accuracy) > 0) // case DMP_header2_bitmap_Compass_Accuracy:
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	885b      	ldrh	r3, [r3, #2]
 8002a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	dd3a      	ble.n	8002af6 <icm20948_read_DMP_data+0x722>
  {
    if (fifo_count < icm_20948_DMP_Compass_Accuracy_Bytes) // Check if we need to read the FIFO count again
 8002a80:	89fb      	ldrh	r3, [r7, #14]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d804      	bhi.n	8002a90 <icm20948_read_DMP_data+0x6bc>
      icm20948_get_FIFO_count(&fifo_count);
 8002a86:	f107 030e 	add.w	r3, r7, #14
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fc4a 	bl	8002324 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Compass_Accuracy_Bytes)
 8002a90:	89fb      	ldrh	r3, [r7, #14]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d801      	bhi.n	8002a9a <icm20948_read_DMP_data+0x6c6>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002a96:	230b      	movs	r3, #11
 8002a98:	e117      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    aShort = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Compass_Accuracy_Bytes);
 8002aa0:	f107 0310 	add.w	r3, r7, #16
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fc76 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Compass_Accuracy_Bytes; i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ab0:	e015      	b.n	8002ade <icm20948_read_DMP_data+0x70a>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 8002ab2:	f107 0210 	add.w	r2, r7, #16
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab8:	4413      	add	r3, r2
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac0:	f1c3 0301 	rsb	r3, r3, #1
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b21b      	sxth	r3, r3
 8002ad4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    for (int i = 0; i < icm_20948_DMP_Compass_Accuracy_Bytes; i++)
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ada:	3301      	adds	r3, #1
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	dde6      	ble.n	8002ab2 <icm20948_read_DMP_data+0x6de>
    }
    data->Compass_Accuracy = aShort;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8002aea:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    fifo_count -= icm_20948_DMP_Compass_Accuracy_Bytes; // Decrement the count
 8002aee:	89fb      	ldrh	r3, [r7, #14]
 8002af0:	3b02      	subs	r3, #2
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	81fb      	strh	r3, [r7, #14]
			data->Fsync_Delay_Time = aShort;
			fifo_count -= icm_20948_DMP_Fsync_Detection_Bytes; // Decrement the count
			*/
  }

  if ((data->header2 & DMP_header2_bitmap_Pickup) > 0) // case DMP_header2_bitmap_Pickup:
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	885b      	ldrh	r3, [r3, #2]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	dd3a      	ble.n	8002b78 <icm20948_read_DMP_data+0x7a4>
  {
    if (fifo_count < icm_20948_DMP_Pickup_Bytes) // Check if we need to read the FIFO count again
 8002b02:	89fb      	ldrh	r3, [r7, #14]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d804      	bhi.n	8002b12 <icm20948_read_DMP_data+0x73e>
      icm20948_get_FIFO_count(&fifo_count);
 8002b08:	f107 030e 	add.w	r3, r7, #14
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fc09 	bl	8002324 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Pickup_Bytes)
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d801      	bhi.n	8002b1c <icm20948_read_DMP_data+0x748>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002b18:	230b      	movs	r3, #11
 8002b1a:	e0d6      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    aShort = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Pickup_Bytes);
 8002b22:	f107 0310 	add.w	r3, r7, #16
 8002b26:	2102      	movs	r1, #2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fc35 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Pickup_Bytes; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b32:	e015      	b.n	8002b60 <icm20948_read_DMP_data+0x78c>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 8002b34:	f107 0210 	add.w	r2, r7, #16
 8002b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b42:	f1c3 0301 	rsb	r3, r3, #1
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	b21a      	sxth	r2, r3
 8002b4e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8002b52:	4313      	orrs	r3, r2
 8002b54:	b21b      	sxth	r3, r3
 8002b56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    for (int i = 0; i < icm_20948_DMP_Pickup_Bytes; i++)
 8002b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	dde6      	ble.n	8002b34 <icm20948_read_DMP_data+0x760>
    }
    data->Pickup = aShort;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8002b6c:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
    fifo_count -= icm_20948_DMP_Pickup_Bytes; // Decrement the count
 8002b70:	89fb      	ldrh	r3, [r7, #14]
 8002b72:	3b02      	subs	r3, #2
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Activity_Recog) > 0) // case DMP_header2_bitmap_Activity_Recog:
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	885b      	ldrh	r3, [r3, #2]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	dd2d      	ble.n	8002be0 <icm20948_read_DMP_data+0x80c>
  {
    if (fifo_count < icm_20948_DMP_Activity_Recognition_Bytes) // Check if we need to read the FIFO count again
 8002b84:	89fb      	ldrh	r3, [r7, #14]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d804      	bhi.n	8002b94 <icm20948_read_DMP_data+0x7c0>
      icm20948_get_FIFO_count(&fifo_count);
 8002b8a:	f107 030e 	add.w	r3, r7, #14
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fbc8 	bl	8002324 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Activity_Recognition_Bytes)
 8002b94:	89fb      	ldrh	r3, [r7, #14]
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d801      	bhi.n	8002b9e <icm20948_read_DMP_data+0x7ca>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002b9a:	230b      	movs	r3, #11
 8002b9c:	e095      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Activity_Recognition_Bytes);
 8002b9e:	f107 0310 	add.w	r3, r7, #16
 8002ba2:	2106      	movs	r1, #6
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fbf7 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Activity_Recognition_Bytes; i++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bae:	e010      	b.n	8002bd2 <icm20948_read_DMP_data+0x7fe>
    {
      data->Activity_Recognition.Bytes[DMP_Activity_Recognition_Byte_Ordering[i]] = fifoBytes[i];
 8002bb0:	4a48      	ldr	r2, [pc, #288]	@ (8002cd4 <icm20948_read_DMP_data+0x900>)
 8002bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	f107 0110 	add.w	r1, r7, #16
 8002bbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bbe:	440a      	add	r2, r1
 8002bc0:	7811      	ldrb	r1, [r2, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	460a      	mov	r2, r1
 8002bc8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    for (int i = 0; i < icm_20948_DMP_Activity_Recognition_Bytes; i++)
 8002bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bce:	3301      	adds	r3, #1
 8002bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	ddeb      	ble.n	8002bb0 <icm20948_read_DMP_data+0x7dc>
    }
    fifo_count -= icm_20948_DMP_Activity_Recognition_Bytes; // Decrement the count
 8002bd8:	89fb      	ldrh	r3, [r7, #14]
 8002bda:	3b06      	subs	r3, #6
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Secondary_On_Off) > 0) // case DMP_header2_bitmap_Secondary_On_Off:
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	885b      	ldrh	r3, [r3, #2]
 8002be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	dd2d      	ble.n	8002c48 <icm20948_read_DMP_data+0x874>
  {
    if (fifo_count < icm_20948_DMP_Secondary_On_Off_Bytes) // Check if we need to read the FIFO count again
 8002bec:	89fb      	ldrh	r3, [r7, #14]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d804      	bhi.n	8002bfc <icm20948_read_DMP_data+0x828>
      icm20948_get_FIFO_count(&fifo_count);
 8002bf2:	f107 030e 	add.w	r3, r7, #14
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fb94 	bl	8002324 <icm20948_get_FIFO_count>

    if (fifo_count < icm_20948_DMP_Secondary_On_Off_Bytes)
 8002bfc:	89fb      	ldrh	r3, [r7, #14]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d801      	bhi.n	8002c06 <icm20948_read_DMP_data+0x832>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002c02:	230b      	movs	r3, #11
 8002c04:	e061      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
    icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Secondary_On_Off_Bytes);
 8002c06:	f107 0310 	add.w	r3, r7, #16
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fbc3 	bl	8002398 <icm20948_read_FIFO>

    for (int i = 0; i < icm_20948_DMP_Secondary_On_Off_Bytes; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c16:	e010      	b.n	8002c3a <icm20948_read_DMP_data+0x866>
    {
      data->Secondary_On_Off.Bytes[DMP_Secondary_On_Off_Byte_Ordering[i]] = fifoBytes[i];
 8002c18:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd8 <icm20948_read_DMP_data+0x904>)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	f107 0110 	add.w	r1, r7, #16
 8002c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c26:	440a      	add	r2, r1
 8002c28:	7811      	ldrb	r1, [r2, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	460a      	mov	r2, r1
 8002c30:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    for (int i = 0; i < icm_20948_DMP_Secondary_On_Off_Bytes; i++)
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	3301      	adds	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	ddeb      	ble.n	8002c18 <icm20948_read_DMP_data+0x844>
    }
    fifo_count -= icm_20948_DMP_Secondary_On_Off_Bytes; // Decrement the count
 8002c40:	89fb      	ldrh	r3, [r7, #14]
 8002c42:	3b02      	subs	r3, #2
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	81fb      	strh	r3, [r7, #14]
  }

  // Finally, extract the footer (gyro count)
  if (fifo_count < icm_20948_DMP_Footer_Bytes) // Check if we need to read the FIFO count again
 8002c48:	89fb      	ldrh	r3, [r7, #14]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d804      	bhi.n	8002c58 <icm20948_read_DMP_data+0x884>
    icm20948_get_FIFO_count(&fifo_count);
 8002c4e:	f107 030e 	add.w	r3, r7, #14
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fb66 	bl	8002324 <icm20948_get_FIFO_count>

  if (fifo_count < icm_20948_DMP_Footer_Bytes)
 8002c58:	89fb      	ldrh	r3, [r7, #14]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d801      	bhi.n	8002c62 <icm20948_read_DMP_data+0x88e>
    return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8002c5e:	230b      	movs	r3, #11
 8002c60:	e033      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>
  aShort = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  icm20948_read_FIFO(&fifoBytes[0], icm_20948_DMP_Footer_Bytes);
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fb92 	bl	8002398 <icm20948_read_FIFO>

  for (int i = 0; i < icm_20948_DMP_Footer_Bytes; i++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	e015      	b.n	8002ca6 <icm20948_read_DMP_data+0x8d2>
  {
    aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 8002c7a:	f107 0210 	add.w	r2, r7, #16
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	4413      	add	r3, r2
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f1c3 0301 	rsb	r3, r3, #1
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	b21a      	sxth	r2, r3
 8002c94:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  for (int i = 0; i < icm_20948_DMP_Footer_Bytes; i++)
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	dde6      	ble.n	8002c7a <icm20948_read_DMP_data+0x8a6>
  }
  data->Footer = aShort;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8002cb2:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  fifo_count -= icm_20948_DMP_Footer_Bytes; // Decrement the count
 8002cb6:	89fb      	ldrh	r3, [r7, #14]
 8002cb8:	3b02      	subs	r3, #2
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	81fb      	strh	r3, [r7, #14]

  if (fifo_count > 0) // Check if there is still data waiting to be read
 8002cbe:	89fb      	ldrh	r3, [r7, #14]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <icm20948_read_DMP_data+0x8f4>
    return ICM_20948_Stat_FIFOMoreDataAvail;
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	e000      	b.n	8002cca <icm20948_read_DMP_data+0x8f6>

  return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3778      	adds	r7, #120	@ 0x78
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	0800f6f4 	.word	0x0800f6f4
 8002cd8:	0800f70c 	.word	0x0800f70c

08002cdc <icm20948_sleep>:

ICM_20948_Status_e icm20948_sleep(bool on)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af04      	add	r7, sp, #16
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
  ICM_20948_PWR_MGMT_1_t reg;

  icm20948_set_user_bank(0); // Must be in the right bank
 8002cea:	2000      	movs	r0, #0
 8002cec:	f7fe f834 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 8002cf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cf4:	9302      	str	r3, [sp, #8]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2301      	movs	r3, #1
 8002d02:	2206      	movs	r2, #6
 8002d04:	21d0      	movs	r1, #208	@ 0xd0
 8002d06:	4811      	ldr	r0, [pc, #68]	@ (8002d4c <icm20948_sleep+0x70>)
 8002d08:	f003 fb48 	bl	800639c <HAL_I2C_Mem_Read>


  if (on)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <icm20948_sleep+0x40>
  {
    reg.SLEEP = 1;
 8002d12:	7b3b      	ldrb	r3, [r7, #12]
 8002d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d18:	733b      	strb	r3, [r7, #12]
 8002d1a:	e003      	b.n	8002d24 <icm20948_sleep+0x48>
  }
  else
  {
    reg.SLEEP = 0;
 8002d1c:	7b3b      	ldrb	r3, [r7, #12]
 8002d1e:	f36f 1386 	bfc	r3, #6, #1
 8002d22:	733b      	strb	r3, [r7, #12]
  }

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT,  (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 8002d24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d28:	9302      	str	r3, [sp, #8]
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	f107 030c 	add.w	r3, r7, #12
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2301      	movs	r3, #1
 8002d36:	2206      	movs	r2, #6
 8002d38:	21d0      	movs	r1, #208	@ 0xd0
 8002d3a:	4804      	ldr	r0, [pc, #16]	@ (8002d4c <icm20948_sleep+0x70>)
 8002d3c:	f003 fa1a 	bl	8006174 <HAL_I2C_Mem_Write>

  return retval;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	2000010c 	.word	0x2000010c

08002d50 <icm20948_low_power>:


ICM_20948_Status_e icm20948_low_power(bool on)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af04      	add	r7, sp, #16
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  ICM_20948_PWR_MGMT_1_t reg;

  icm20948_set_user_bank(0); // Must be in the right bank
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fd fffa 	bl	8000d58 <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR,  AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 8002d64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d68:	9302      	str	r3, [sp, #8]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	f107 030c 	add.w	r3, r7, #12
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2301      	movs	r3, #1
 8002d76:	2206      	movs	r2, #6
 8002d78:	21d0      	movs	r1, #208	@ 0xd0
 8002d7a:	4816      	ldr	r0, [pc, #88]	@ (8002dd4 <icm20948_low_power+0x84>)
 8002d7c:	f003 fb0e 	bl	800639c <HAL_I2C_Mem_Read>
  if (retval != ICM_20948_Stat_Ok)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <icm20948_low_power+0x3a>
  {
    return retval;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	e01f      	b.n	8002dca <icm20948_low_power+0x7a>
  }

  if (on)
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <icm20948_low_power+0x4a>
  {
    reg.LP_EN = 1;
 8002d90:	7b3b      	ldrb	r3, [r7, #12]
 8002d92:	f043 0320 	orr.w	r3, r3, #32
 8002d96:	733b      	strb	r3, [r7, #12]
 8002d98:	e003      	b.n	8002da2 <icm20948_low_power+0x52>
  }
  else
  {
    reg.LP_EN = 0;
 8002d9a:	7b3b      	ldrb	r3, [r7, #12]
 8002d9c:	f36f 1345 	bfc	r3, #5, #1
 8002da0:	733b      	strb	r3, [r7, #12]
  }

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 8002da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	2301      	movs	r3, #1
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2301      	movs	r3, #1
 8002db4:	2206      	movs	r2, #6
 8002db6:	21d0      	movs	r1, #208	@ 0xd0
 8002db8:	4806      	ldr	r0, [pc, #24]	@ (8002dd4 <icm20948_low_power+0x84>)
 8002dba:	f003 f9db 	bl	8006174 <HAL_I2C_Mem_Write>
  if (retval != ICM_20948_Stat_Ok)
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <icm20948_low_power+0x78>
  {
    return retval;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	e000      	b.n	8002dca <icm20948_low_power+0x7a>
  }
  return retval;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000010c 	.word	0x2000010c

08002dd8 <icm20948_sw_reset>:


ICM_20948_Status_e icm20948_sw_reset(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8002dde:	2300      	movs	r3, #0
 8002de0:	71fb      	strb	r3, [r7, #7]
  ICM_20948_PWR_MGMT_1_t reg;

  icm20948_set_user_bank(0); // Must be in the right bank
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7fd ffb8 	bl	8000d58 <icm20948_set_user_bank>

  retval = icm20948_execute_r(AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	2201      	movs	r2, #1
 8002dec:	4619      	mov	r1, r3
 8002dee:	2006      	movs	r0, #6
 8002df0:	f000 fa96 	bl	8003320 <icm20948_execute_r>
 8002df4:	4603      	mov	r3, r0
 8002df6:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <icm20948_sw_reset+0x2a>
  {
    return retval;
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	e011      	b.n	8002e26 <icm20948_sw_reset+0x4e>
  }

  reg.DEVICE_RESET = 1;
 8002e02:	793b      	ldrb	r3, [r7, #4]
 8002e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e08:	713b      	strb	r3, [r7, #4]

  retval = icm20948_execute_w(AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4619      	mov	r1, r3
 8002e10:	2006      	movs	r0, #6
 8002e12:	f000 faa7 	bl	8003364 <icm20948_execute_w>
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <icm20948_sw_reset+0x4c>
  {
    return retval;
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	e000      	b.n	8002e26 <icm20948_sw_reset+0x4e>
  }
  return retval;
 8002e24:	79fb      	ldrb	r3, [r7, #7]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <icm20948_load_firmware>:


int8_t icm20948_load_firmware(const unsigned char *data_start, unsigned short size_start, unsigned short load_addr)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b08a      	sub	sp, #40	@ 0x28
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	807b      	strh	r3, [r7, #2]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	803b      	strh	r3, [r7, #0]
  unsigned short size;
  unsigned char data_cmp[MAX_SERIAL_R_W];
  //int flag = 0;

 //STATUS CHECKS
  icm20948_sleep(false); // Make sure chip is awake
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f7ff ff4c 	bl	8002cdc <icm20948_sleep>
  /*if (result != ICM_20948_Stat_Ok)
  {
    return result;
  }*/

  icm20948_low_power(false); // Make sure chip is not in low power state
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff ff83 	bl	8002d50 <icm20948_low_power>



  // Write DMP memory

  data = data_start;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	61fb      	str	r3, [r7, #28]
  size = size_start;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	837b      	strh	r3, [r7, #26]
  memaddr = load_addr;
 8002e52:	883b      	ldrh	r3, [r7, #0]
 8002e54:	847b      	strh	r3, [r7, #34]	@ 0x22

  while (size > 0)
 8002e56:	e029      	b.n	8002eac <icm20948_load_firmware+0x7e>
  {
    if (size <= MAX_SERIAL_R_W) // Break into maximally sized chunks
 8002e58:	8b7b      	ldrh	r3, [r7, #26]
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d802      	bhi.n	8002e64 <icm20948_load_firmware+0x36>
      write_size = size;
 8002e5e:	8b7b      	ldrh	r3, [r7, #26]
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e62:	e001      	b.n	8002e68 <icm20948_load_firmware+0x3a>
    else
      write_size = MAX_SERIAL_R_W;
 8002e64:	2310      	movs	r3, #16
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24

    // Chunk moves across a bank
    if ((memaddr & 0xff) + write_size > 0x100)
 8002e68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	4413      	add	r3, r2
 8002e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e74:	dd06      	ble.n	8002e84 <icm20948_load_firmware+0x56>
    {
      // this sets the packet size to the remainder...
      write_size = (memaddr & 0xff) + write_size - 0x100;
 8002e76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
      //...should it be instead set to the rest of the chunk?
      //write_size = 0x100 - (memaddr & 0xff);
    }
    icm20948_write_mem(memaddr, write_size, (unsigned char *)data);
 8002e84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fe30 	bl	8001af0 <icm20948_write_mem>

    data += write_size;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	61fb      	str	r3, [r7, #28]
    size -= write_size;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8b7a      	ldrh	r2, [r7, #26]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	837b      	strh	r3, [r7, #26]
    memaddr += write_size;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ea8:	4413      	add	r3, r2
 8002eaa:	847b      	strh	r3, [r7, #34]	@ 0x22
  while (size > 0)
 8002eac:	8b7b      	ldrh	r3, [r7, #26]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1d2      	bne.n	8002e58 <icm20948_load_firmware+0x2a>
  }

  // Verify DMP memory

  data = data_start;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	61fb      	str	r3, [r7, #28]
  size = size_start;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	837b      	strh	r3, [r7, #26]
  memaddr = load_addr;
 8002eba:	883b      	ldrh	r3, [r7, #0]
 8002ebc:	847b      	strh	r3, [r7, #34]	@ 0x22
  while (size > 0)
 8002ebe:	e037      	b.n	8002f30 <icm20948_load_firmware+0x102>
  {
    if (size <= MAX_SERIAL_R_W) // Read in chunks of INV_MAX_SERIAL_READ
 8002ec0:	8b7b      	ldrh	r3, [r7, #26]
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d802      	bhi.n	8002ecc <icm20948_load_firmware+0x9e>
      write_size = size;
 8002ec6:	8b7b      	ldrh	r3, [r7, #26]
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eca:	e001      	b.n	8002ed0 <icm20948_load_firmware+0xa2>
    else
      write_size = MAX_SERIAL_R_W;
 8002ecc:	2310      	movs	r3, #16
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((memaddr & 0xff) + write_size > 0x100)
 8002ed0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002edc:	dd06      	ble.n	8002eec <icm20948_load_firmware+0xbe>
    {
      // this sets the packet size to the remainder...
      write_size = (memaddr & 0xff) + write_size - 0x100;
 8002ede:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
      //...should it be instead set to the rest of the chunk?
      //write_size = 0x100 - (memaddr & 0xff);
    }
    icm20948_read_mem(memaddr, write_size, data_cmp);
 8002eec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eee:	f107 0208 	add.w	r2, r7, #8
 8002ef2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fe61 	bl	8001bbc <icm20948_read_mem>
    //if (result != ICM_20948_Stat_Ok)
    //  flag++;                               // Error, DMP not written correctly

    if (memcmp(data_cmp, data, write_size)) // Compare the data
 8002efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	69f9      	ldr	r1, [r7, #28]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f008 fe0a 	bl	800bb1c <memcmp>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <icm20948_load_firmware+0xe6>
      return -1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f12:	e014      	b.n	8002f3e <icm20948_load_firmware+0x110>
    data += write_size;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	61fb      	str	r3, [r7, #28]
    size -= write_size;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	8b7a      	ldrh	r2, [r7, #26]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	837b      	strh	r3, [r7, #26]
    memaddr += write_size;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002f2c:	4413      	add	r3, r2
 8002f2e:	847b      	strh	r3, [r7, #34]	@ 0x22
  while (size > 0)
 8002f30:	8b7b      	ldrh	r3, [r7, #26]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1c4      	bne.n	8002ec0 <icm20948_load_firmware+0x92>
  }

  //Enable LP_EN since we disabled it at begining of this function.
  icm20948_low_power(true); // Put chip into low power state
 8002f36:	2001      	movs	r0, #1
 8002f38:	f7ff ff0a 	bl	8002d50 <icm20948_low_power>
  //if (result != ICM_20948_Stat_Ok)
  //  return result;

  return 0;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3728      	adds	r7, #40	@ 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <icm20948_set_i2c_bus>:

void icm20948_set_i2c_bus(I2C_HandleTypeDef *bus)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	i2c_bus = *bus;
 8002f50:	4a05      	ldr	r2, [pc, #20]	@ (8002f68 <icm20948_set_i2c_bus+0x20>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	2354      	movs	r3, #84	@ 0x54
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f008 fe20 	bl	800bba0 <memcpy>
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	2000010c 	.word	0x2000010c

08002f6c <icm20948_initialize_DMP>:

int8_t icm20948_initialize_DMP(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b098      	sub	sp, #96	@ 0x60
 8002f70:	af06      	add	r7, sp, #24
  // true: set the I2C_SLV0_RNW ReadNotWrite bit so we read the 10 bytes (not write them)
  // true: set the I2C_SLV0_CTRL I2C_SLV0_EN bit to enable reading from the peripheral at the sample rate
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_REG_DIS (we want to write the register value)
  // true: set the I2C_SLV0_CTRL I2C_SLV0_GRP bit to show the register pairing starts at byte 1+2 (copied from inv_icm20948_resume_akm)
  // true: set the I2C_SLV0_CTRL I2C_SLV0_BYTE_SW to byte-swap the data from the mag (copied from inv_icm20948_resume_akm)
  icm20948_i2c_controller_configure_peripheral(0, MAG_AK09916_I2C_ADDR, AK09916_REG_RSV2, 10, true, true, false, true, true, 0);
 8002f72:	2300      	movs	r3, #0
 8002f74:	9305      	str	r3, [sp, #20]
 8002f76:	2301      	movs	r3, #1
 8002f78:	9304      	str	r3, [sp, #16]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	9303      	str	r3, [sp, #12]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	9302      	str	r3, [sp, #8]
 8002f82:	2301      	movs	r3, #1
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	2301      	movs	r3, #1
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	230a      	movs	r3, #10
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	210c      	movs	r1, #12
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fd ff6b 	bl	8000e6c <icm20948_i2c_controller_configure_peripheral>
  // true: set the I2C_SLV0_CTRL I2C_SLV0_EN bit. Not sure why, but the write does not happen if this is clear
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_REG_DIS (we want to write the register value)
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_GRP bit
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_BYTE_SW bit
  // AK09916_mode_single: tell I2C_SLV1 to write the Single Measurement command each sample
  icm20948_i2c_controller_configure_peripheral(1, MAG_AK09916_I2C_ADDR, AK09916_REG_CNTL2, 1, false, true, false, false, false, AK09916_mode_single);
 8002f96:	2301      	movs	r3, #1
 8002f98:	9305      	str	r3, [sp, #20]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9304      	str	r3, [sp, #16]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9303      	str	r3, [sp, #12]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9302      	str	r3, [sp, #8]
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	2300      	movs	r3, #0
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2301      	movs	r3, #1
 8002fb0:	2231      	movs	r2, #49	@ 0x31
 8002fb2:	210c      	movs	r1, #12
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7fd ff59 	bl	8000e6c <icm20948_i2c_controller_configure_peripheral>
  //  ODR is computed as follows: 1.1 kHz/(2^((odr_config[3:0])) )
  //  When gyroscope is enabled, all sensors (including I2C_MASTER) use the gyroscope ODR.
  //  If gyroscope is disabled, then all sensors (including I2C_MASTER) use the accelerometer ODR."
  // Since both gyro and accel are running, setting this register should have no effect. But it does. Maybe because the Gyro and Accel are placed in Low Power Mode (cycled)?
  // You can see by monitoring the Aux I2C pins that the next three lines reduce the bus traffic (magnetometer reads) from 1125Hz to the chosen rate: 68.75Hz in this case.
  icm20948_set_user_bank(3);
 8002fba:	2003      	movs	r0, #3
 8002fbc:	f7fd fecc 	bl	8000d58 <icm20948_set_user_bank>
  uint8_t mstODRconfig = 0x04; // Set the ODR configuration to 1100/2^4 = 68.75Hz
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB3_REG_I2C_MST_ODR_CONFIG, I2C_MEMADD_SIZE_8BIT,  &mstODRconfig, 1, 1000);
 8002fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fca:	9302      	str	r3, [sp, #8]
 8002fcc:	2301      	movs	r3, #1
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	2200      	movs	r2, #0
 8002fda:	21d0      	movs	r1, #208	@ 0xd0
 8002fdc:	48c9      	ldr	r0, [pc, #804]	@ (8003304 <icm20948_initialize_DMP+0x398>)
 8002fde:	f003 f8c9 	bl	8006174 <HAL_I2C_Mem_Write>

  // Configure clock source through PWR_MGMT_1
  // ICM_20948_Clock_Auto selects the best available clock source – PLL if ready, else use the Internal oscillator
  icm20948_set_clock_source(ICM_20948_Clock_Auto);
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f7fe f80e 	bl	8001004 <icm20948_set_clock_source>

  // Enable accel and gyro sensors through PWR_MGMT_2
  // Enable Accelerometer (all axes) and Gyroscope (all axes) by writing zero to PWR_MGMT_2
  icm20948_set_user_bank(0); // Select Bank 0
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd feb5 	bl	8000d58 <icm20948_set_user_bank>
  uint8_t pwrMgmt2 = 0x40;                                                          // Set the reserved bit 6 (pressure sensor disable?)
 8002fee:	2340      	movs	r3, #64	@ 0x40
 8002ff0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_PWR_MGMT_2, I2C_MEMADD_SIZE_8BIT, &pwrMgmt2, 1, 1000);
 8002ff4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ff8:	9302      	str	r3, [sp, #8]
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2301      	movs	r3, #1
 8003006:	2207      	movs	r2, #7
 8003008:	21d0      	movs	r1, #208	@ 0xd0
 800300a:	48be      	ldr	r0, [pc, #760]	@ (8003304 <icm20948_initialize_DMP+0x398>)
 800300c:	f003 f8b2 	bl	8006174 <HAL_I2C_Mem_Write>

  // Place _only_ I2C_Master in Low Power Mode (cycled) via LP_CONFIG
  // The InvenSense Nucleo example initially puts the accel and gyro into low power mode too, but then later updates LP_CONFIG so only the I2C_Master is in Low Power Mode
  icm20948_set_sample_mode(ICM_20948_Internal_Mst, ICM_20948_Sample_Mode_Cycled);
 8003010:	2101      	movs	r1, #1
 8003012:	2010      	movs	r0, #16
 8003014:	f7fe f82a 	bl	800106c <icm20948_set_sample_mode>

  // Disable the FIFO
  icm20948_enable_FIFO(false);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fe f87d 	bl	8001118 <icm20948_enable_FIFO>

  // Disable the DMP
  icm20948_enable_DMP(false);
 800301e:	2000      	movs	r0, #0
 8003020:	f7fe f8f0 	bl	8001204 <icm20948_enable_DMP>

  // Set Gyro FSR (Full scale range) to 2000dps through GYRO_CONFIG_1
  // Set Accel FSR (Full scale range) to 4g through ACCEL_CONFIG
  ICM_20948_fss_t myFSS; // This uses a "Full Scale Settings" structure that can contain values for all configurable sensors
  myFSS.a = gpm4;        // (ICM_20948_ACCEL_CONFIG_FS_SEL_e)
 8003024:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003028:	2201      	movs	r2, #1
 800302a:	f362 0301 	bfi	r3, r2, #0, #2
 800302e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                         // gpm2
                         // gpm4
                         // gpm8
                         // gpm16
  myFSS.g = dps2000;     // (ICM_20948_GYRO_CONFIG_1_FS_SEL_e)
 8003032:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003036:	f043 030c 	orr.w	r3, r3, #12
 800303a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                         // dps250
                         // dps500
                         // dps1000
                         // dps2000
  icm20948_set_full_scale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), myFSS);
 800303e:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8003042:	2003      	movs	r0, #3
 8003044:	f7fe f942 	bl	80012cc <icm20948_set_full_scale>

  // The InvenSense Nucleo code also enables the gyro DLPF (but leaves GYRO_DLPFCFG set to zero = 196.6Hz (3dB))
  // We found this by going through the SPI data generated by ZaneL's Teensy-ICM-20948 library byte by byte...
  // The gyro DLPF is enabled by default (GYRO_CONFIG_1 = 0x01) so the following line should have no effect, but we'll include it anyway
  icm20948_enable_dlpf(ICM_20948_Internal_Gyr, true);
 8003048:	2101      	movs	r1, #1
 800304a:	2002      	movs	r0, #2
 800304c:	f7fe f9c8 	bl	80013e0 <icm20948_enable_dlpf>
  // If we see this interrupt, we'll need to reset the FIFO
  //intEnableOverflowFIFO( 0x1F ); // Enable the interrupt on all FIFOs

  // Turn off what goes into the FIFO through FIFO_EN_1, FIFO_EN_2
  // Stop the peripheral data from being written to the FIFO by writing zero to FIFO_EN_1
  icm20948_set_user_bank(0); // Select Bank 0
 8003050:	2000      	movs	r0, #0
 8003052:	f7fd fe81 	bl	8000d58 <icm20948_set_user_bank>
  uint8_t zero = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_EN_1, I2C_MEMADD_SIZE_8BIT, &zero, 1, 1000);
 800305c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003060:	9302      	str	r3, [sp, #8]
 8003062:	2301      	movs	r3, #1
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2301      	movs	r3, #1
 800306e:	2266      	movs	r2, #102	@ 0x66
 8003070:	21d0      	movs	r1, #208	@ 0xd0
 8003072:	48a4      	ldr	r0, [pc, #656]	@ (8003304 <icm20948_initialize_DMP+0x398>)
 8003074:	f003 f87e 	bl	8006174 <HAL_I2C_Mem_Write>
  // Stop the accelerometer, gyro and temperature data from being written to the FIFO by writing zero to FIFO_EN_2
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_FIFO_EN_2, I2C_MEMADD_SIZE_8BIT, &zero, 1, 1000);
 8003078:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800307c:	9302      	str	r3, [sp, #8]
 800307e:	2301      	movs	r3, #1
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2301      	movs	r3, #1
 800308a:	2267      	movs	r2, #103	@ 0x67
 800308c:	21d0      	movs	r1, #208	@ 0xd0
 800308e:	489d      	ldr	r0, [pc, #628]	@ (8003304 <icm20948_initialize_DMP+0x398>)
 8003090:	f003 f870 	bl	8006174 <HAL_I2C_Mem_Write>

  // Turn off data ready interrupt through INT_ENABLE_1
  icm20948_int_enable_raw_data_ready(false);
 8003094:	2000      	movs	r0, #0
 8003096:	f7fe fce7 	bl	8001a68 <icm20948_int_enable_raw_data_ready>

  // Reset FIFO through FIFO_RST
  icm20948_reset_FIFO();
 800309a:	f7fe f875 	bl	8001188 <icm20948_reset_FIFO>

  // Set gyro sample rate divider with GYRO_SMPLRT_DIV
  // Set accel sample rate divider with ACCEL_SMPLRT_DIV_2
  ICM_20948_smplrt_t mySmplrt;
  mySmplrt.g = 19; // ODR is computed as follows: 1.1 kHz/(1+GYRO_SMPLRT_DIV[7:0]). 19 = 55Hz. InvenSense Nucleo example uses 19 (0x13).
 800309e:	2313      	movs	r3, #19
 80030a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  mySmplrt.a = 19; // ODR is computed as follows: 1.125 kHz/(1+ACCEL_SMPLRT_DIV[11:0]). 19 = 56.25Hz. InvenSense Nucleo example uses 19 (0x13).
 80030a4:	2313      	movs	r3, #19
 80030a6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  //mySmplrt.g = 4; // 225Hz
  //mySmplrt.a = 4; // 225Hz
  //mySmplrt.g = 8; // 112Hz
  //mySmplrt.a = 8; // 112Hz
  icm20948_set_sample_rate((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), mySmplrt);
 80030a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030aa:	2003      	movs	r0, #3
 80030ac:	f7fe faca 	bl	8001644 <icm20948_set_sample_rate>

  // Setup DMP start address through PRGM_STRT_ADDRH/PRGM_STRT_ADDRL
  icm20948_set_DMP_start_address(DMP_START_ADDRESS);
 80030b0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80030b4:	f7fe fcf6 	bl	8001aa4 <icm20948_set_DMP_start_address>

  // Now load the DMP firmware
  icm20948_load_firmware(dmp3_image, sizeof(dmp3_image), DMP_LOAD_START);
 80030b8:	2290      	movs	r2, #144	@ 0x90
 80030ba:	f243 71dd 	movw	r1, #14301	@ 0x37dd
 80030be:	4892      	ldr	r0, [pc, #584]	@ (8003308 <icm20948_initialize_DMP+0x39c>)
 80030c0:	f7ff feb5 	bl	8002e2e <icm20948_load_firmware>

  // Write the 2 byte Firmware Start Value to ICM PRGM_STRT_ADDRH/PRGM_STRT_ADDRL
  icm20948_set_DMP_start_address(DMP_START_ADDRESS);
 80030c4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80030c8:	f7fe fcec 	bl	8001aa4 <icm20948_set_DMP_start_address>

  // Set the Hardware Fix Disable register to 0x48
  icm20948_set_user_bank(0);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f7fd fe43 	bl	8000d58 <icm20948_set_user_bank>
  uint8_t fix = 0x48;
 80030d2:	2348      	movs	r3, #72	@ 0x48
 80030d4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_HW_FIX_DISABLE, I2C_MEMADD_SIZE_8BIT, &fix, 1, 1000);
 80030d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030dc:	9302      	str	r3, [sp, #8]
 80030de:	2301      	movs	r3, #1
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	f107 033b 	add.w	r3, r7, #59	@ 0x3b
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2301      	movs	r3, #1
 80030ea:	2275      	movs	r2, #117	@ 0x75
 80030ec:	21d0      	movs	r1, #208	@ 0xd0
 80030ee:	4885      	ldr	r0, [pc, #532]	@ (8003304 <icm20948_initialize_DMP+0x398>)
 80030f0:	f003 f840 	bl	8006174 <HAL_I2C_Mem_Write>

  // Set the Single FIFO Priority Select register to 0xE4
  icm20948_set_user_bank(0);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fd fe2f 	bl	8000d58 <icm20948_set_user_bank>
  uint8_t fifoPrio = 0xE4;
 80030fa:	23e4      	movs	r3, #228	@ 0xe4
 80030fc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_SINGLE_FIFO_PRIORITY_SEL, I2C_MEMADD_SIZE_8BIT, &fifoPrio, 1, 1000);
 8003100:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003104:	9302      	str	r3, [sp, #8]
 8003106:	2301      	movs	r3, #1
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2301      	movs	r3, #1
 8003112:	2226      	movs	r2, #38	@ 0x26
 8003114:	21d0      	movs	r1, #208	@ 0xd0
 8003116:	487b      	ldr	r0, [pc, #492]	@ (8003304 <icm20948_initialize_DMP+0x398>)
 8003118:	f003 f82c 	bl	8006174 <HAL_I2C_Mem_Write>

  // Configure Accel scaling to DMP
  // The DMP scales accel raw data internally to align 1g as 2^25
  // In order to align internal accel raw data 2^25 = 1g write 0x04000000 when FSR is 4g
  const unsigned char accScale[4] = {0x04, 0x00, 0x00, 0x00};
 800311c:	2304      	movs	r3, #4
 800311e:	637b      	str	r3, [r7, #52]	@ 0x34
  icm20948_write_mem(ACC_SCALE, 4, &accScale[0]);
 8003120:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003124:	461a      	mov	r2, r3
 8003126:	2104      	movs	r1, #4
 8003128:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800312c:	f7fe fce0 	bl	8001af0 <icm20948_write_mem>
  // In order to output hardware unit data as configured FSR write 0x00040000 when FSR is 4g
  const unsigned char accScale2[4] = {0x00, 0x04, 0x00, 0x00};
 8003130:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003134:	633b      	str	r3, [r7, #48]	@ 0x30
  icm20948_write_mem(ACC_SCALE2, 4, &accScale2[0]);
 8003136:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800313a:	461a      	mov	r2, r3
 800313c:	2104      	movs	r1, #4
 800313e:	f240 40f4 	movw	r0, #1268	@ 0x4f4
 8003142:	f7fe fcd5 	bl	8001af0 <icm20948_write_mem>
  // X = raw_x * CPASS_MTX_00 + raw_y * CPASS_MTX_01 + raw_z * CPASS_MTX_02
  // Y = raw_x * CPASS_MTX_10 + raw_y * CPASS_MTX_11 + raw_z * CPASS_MTX_12
  // Z = raw_x * CPASS_MTX_20 + raw_y * CPASS_MTX_21 + raw_z * CPASS_MTX_22
  // The AK09916 produces a 16-bit signed output in the range +/-32752 corresponding to +/-4912uT. 1uT = 6.66 ADU.
  // 2^30 / 6.66666 = 161061273 = 0x9999999
  const unsigned char mountMultiplierZero[4] = {0x00, 0x00, 0x00, 0x00};
 8003146:	2300      	movs	r3, #0
 8003148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const unsigned char mountMultiplierPlus[4] = {0x09, 0x99, 0x99, 0x99};  // Value taken from InvenSense Nucleo example
 800314a:	4b70      	ldr	r3, [pc, #448]	@ (800330c <icm20948_initialize_DMP+0x3a0>)
 800314c:	62bb      	str	r3, [r7, #40]	@ 0x28
  const unsigned char mountMultiplierMinus[4] = {0xF6, 0x66, 0x66, 0x67}; // Value taken from InvenSense Nucleo example
 800314e:	4b70      	ldr	r3, [pc, #448]	@ (8003310 <icm20948_initialize_DMP+0x3a4>)
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
  icm20948_write_mem(CPASS_MTX_00, 4, &mountMultiplierPlus[0]);
 8003152:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003156:	461a      	mov	r2, r3
 8003158:	2104      	movs	r1, #4
 800315a:	f44f 70b8 	mov.w	r0, #368	@ 0x170
 800315e:	f7fe fcc7 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_01, 4, &mountMultiplierZero[0]);
 8003162:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003166:	461a      	mov	r2, r3
 8003168:	2104      	movs	r1, #4
 800316a:	f44f 70ba 	mov.w	r0, #372	@ 0x174
 800316e:	f7fe fcbf 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_02, 4, &mountMultiplierZero[0]);
 8003172:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003176:	461a      	mov	r2, r3
 8003178:	2104      	movs	r1, #4
 800317a:	f44f 70bc 	mov.w	r0, #376	@ 0x178
 800317e:	f7fe fcb7 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_10, 4, &mountMultiplierZero[0]);
 8003182:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003186:	461a      	mov	r2, r3
 8003188:	2104      	movs	r1, #4
 800318a:	f44f 70be 	mov.w	r0, #380	@ 0x17c
 800318e:	f7fe fcaf 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_11, 4, &mountMultiplierMinus[0]);
 8003192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003196:	461a      	mov	r2, r3
 8003198:	2104      	movs	r1, #4
 800319a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800319e:	f7fe fca7 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_12, 4, &mountMultiplierZero[0]);
 80031a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031a6:	461a      	mov	r2, r3
 80031a8:	2104      	movs	r1, #4
 80031aa:	f44f 70c2 	mov.w	r0, #388	@ 0x184
 80031ae:	f7fe fc9f 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_20, 4, &mountMultiplierZero[0]);
 80031b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031b6:	461a      	mov	r2, r3
 80031b8:	2104      	movs	r1, #4
 80031ba:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 80031be:	f7fe fc97 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_21, 4, &mountMultiplierZero[0]);
 80031c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031c6:	461a      	mov	r2, r3
 80031c8:	2104      	movs	r1, #4
 80031ca:	f44f 70c6 	mov.w	r0, #396	@ 0x18c
 80031ce:	f7fe fc8f 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(CPASS_MTX_22, 4, &mountMultiplierMinus[0]);
 80031d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031d6:	461a      	mov	r2, r3
 80031d8:	2104      	movs	r1, #4
 80031da:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80031de:	f7fe fc87 	bl	8001af0 <icm20948_write_mem>

  // Configure the B2S Mounting Matrix
  const unsigned char b2sMountMultiplierZero[4] = {0x00, 0x00, 0x00, 0x00};
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
  const unsigned char b2sMountMultiplierPlus[4] = {0x40, 0x00, 0x00, 0x00}; // Value taken from InvenSense Nucleo example
 80031e6:	2340      	movs	r3, #64	@ 0x40
 80031e8:	61fb      	str	r3, [r7, #28]
  icm20948_write_mem(B2S_MTX_00, 4, &b2sMountMultiplierPlus[0]);
 80031ea:	f107 031c 	add.w	r3, r7, #28
 80031ee:	461a      	mov	r2, r3
 80031f0:	2104      	movs	r1, #4
 80031f2:	f44f 6050 	mov.w	r0, #3328	@ 0xd00
 80031f6:	f7fe fc7b 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_01, 4, &b2sMountMultiplierZero[0]);
 80031fa:	f107 0320 	add.w	r3, r7, #32
 80031fe:	461a      	mov	r2, r3
 8003200:	2104      	movs	r1, #4
 8003202:	f640 5004 	movw	r0, #3332	@ 0xd04
 8003206:	f7fe fc73 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_02, 4, &b2sMountMultiplierZero[0]);
 800320a:	f107 0320 	add.w	r3, r7, #32
 800320e:	461a      	mov	r2, r3
 8003210:	2104      	movs	r1, #4
 8003212:	f640 5008 	movw	r0, #3336	@ 0xd08
 8003216:	f7fe fc6b 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_10, 4, &b2sMountMultiplierZero[0]);
 800321a:	f107 0320 	add.w	r3, r7, #32
 800321e:	461a      	mov	r2, r3
 8003220:	2104      	movs	r1, #4
 8003222:	f640 500c 	movw	r0, #3340	@ 0xd0c
 8003226:	f7fe fc63 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_11, 4, &b2sMountMultiplierPlus[0]);
 800322a:	f107 031c 	add.w	r3, r7, #28
 800322e:	461a      	mov	r2, r3
 8003230:	2104      	movs	r1, #4
 8003232:	f44f 6051 	mov.w	r0, #3344	@ 0xd10
 8003236:	f7fe fc5b 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_12, 4, &b2sMountMultiplierZero[0]);
 800323a:	f107 0320 	add.w	r3, r7, #32
 800323e:	461a      	mov	r2, r3
 8003240:	2104      	movs	r1, #4
 8003242:	f640 5014 	movw	r0, #3348	@ 0xd14
 8003246:	f7fe fc53 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_20, 4, &b2sMountMultiplierZero[0]);
 800324a:	f107 0320 	add.w	r3, r7, #32
 800324e:	461a      	mov	r2, r3
 8003250:	2104      	movs	r1, #4
 8003252:	f640 5018 	movw	r0, #3352	@ 0xd18
 8003256:	f7fe fc4b 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_21, 4, &b2sMountMultiplierZero[0]);
 800325a:	f107 0320 	add.w	r3, r7, #32
 800325e:	461a      	mov	r2, r3
 8003260:	2104      	movs	r1, #4
 8003262:	f640 501c 	movw	r0, #3356	@ 0xd1c
 8003266:	f7fe fc43 	bl	8001af0 <icm20948_write_mem>
  icm20948_write_mem(B2S_MTX_22, 4, &b2sMountMultiplierPlus[0]);
 800326a:	f107 031c 	add.w	r3, r7, #28
 800326e:	461a      	mov	r2, r3
 8003270:	2104      	movs	r1, #4
 8003272:	f44f 6052 	mov.w	r0, #3360	@ 0xd20
 8003276:	f7fe fc3b 	bl	8001af0 <icm20948_write_mem>
  // Configure the DMP Gyro Scaling Factor
  // @param[in] gyro_div Value written to GYRO_SMPLRT_DIV register, where
  //            0=1125Hz sample rate, 1=562.5Hz sample rate, ... 4=225Hz sample rate, ...
  //            10=102.2727Hz sample rate, ... etc.
  // @param[in] gyro_level 0=250 dps, 1=500 dps, 2=1000 dps, 3=2000 dps
  icm20948_set_gyro_sf(19, 3); // 19 = 55Hz (see above), 3 = 2000dps (see above)
 800327a:	2103      	movs	r1, #3
 800327c:	2013      	movs	r0, #19
 800327e:	f7fe fcff 	bl	8001c80 <icm20948_set_gyro_sf>
  // Configure the Gyro full scale
  // 2000dps : 2^28
  // 1000dps : 2^27
  //  500dps : 2^26
  //  250dps : 2^25
  const unsigned char gyroFullScale[4] = {0x10, 0x00, 0x00, 0x00}; // 2000dps : 2^28
 8003282:	2310      	movs	r3, #16
 8003284:	61bb      	str	r3, [r7, #24]
  icm20948_write_mem(GYRO_FULLSCALE, 4, &gyroFullScale[0]);
 8003286:	f107 0318 	add.w	r3, r7, #24
 800328a:	461a      	mov	r2, r3
 800328c:	2104      	movs	r1, #4
 800328e:	f240 408c 	movw	r0, #1164	@ 0x48c
 8003292:	f7fe fc2d 	bl	8001af0 <icm20948_write_mem>

  // Configure the Accel Only Gain: 15252014 (225Hz) 30504029 (112Hz) 61117001 (56Hz)
  const unsigned char accelOnlyGain[4] = {0x03, 0xA4, 0x92, 0x49}; // 56Hz
 8003296:	4b1f      	ldr	r3, [pc, #124]	@ (8003314 <icm20948_initialize_DMP+0x3a8>)
 8003298:	617b      	str	r3, [r7, #20]
  //const unsigned char accelOnlyGain[4] = {0x00, 0xE8, 0xBA, 0x2E}; // 225Hz
  //const unsigned char accelOnlyGain[4] = {0x01, 0xD1, 0x74, 0x5D}; // 112Hz
  icm20948_write_mem(ACCEL_ONLY_GAIN, 4, &accelOnlyGain[0]);
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	461a      	mov	r2, r3
 80032a0:	2104      	movs	r1, #4
 80032a2:	f44f 7086 	mov.w	r0, #268	@ 0x10c
 80032a6:	f7fe fc23 	bl	8001af0 <icm20948_write_mem>

  // Configure the Accel Alpha Var: 1026019965 (225Hz) 977872018 (112Hz) 882002213 (56Hz)
  const unsigned char accelAlphaVar[4] = {0x34, 0x92, 0x49, 0x25}; // 56Hz
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <icm20948_initialize_DMP+0x3ac>)
 80032ac:	613b      	str	r3, [r7, #16]
  //const unsigned char accelAlphaVar[4] = {0x3D, 0x27, 0xD2, 0x7D}; // 225Hz
  //const unsigned char accelAlphaVar[4] = {0x3A, 0x49, 0x24, 0x92}; // 112Hz
  icm20948_write_mem(ACCEL_ALPHA_VAR, 4, &accelAlphaVar[0]);
 80032ae:	f107 0310 	add.w	r3, r7, #16
 80032b2:	461a      	mov	r2, r3
 80032b4:	2104      	movs	r1, #4
 80032b6:	f44f 60b6 	mov.w	r0, #1456	@ 0x5b0
 80032ba:	f7fe fc19 	bl	8001af0 <icm20948_write_mem>

  // Configure the Accel A Var: 47721859 (225Hz) 95869806 (112Hz) 191739611 (56Hz)
  const unsigned char accelAVar[4] = {0x0B, 0x6D, 0xB6, 0xDB}; // 56Hz
 80032be:	4b17      	ldr	r3, [pc, #92]	@ (800331c <icm20948_initialize_DMP+0x3b0>)
 80032c0:	60fb      	str	r3, [r7, #12]
  //const unsigned char accelAVar[4] = {0x02, 0xD8, 0x2D, 0x83}; // 225Hz
  //const unsigned char accelAVar[4] = {0x05, 0xB6, 0xDB, 0x6E}; // 112Hz
  icm20948_write_mem(ACCEL_A_VAR, 4, &accelAVar[0]);
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	461a      	mov	r2, r3
 80032c8:	2104      	movs	r1, #4
 80032ca:	f44f 60b8 	mov.w	r0, #1472	@ 0x5c0
 80032ce:	f7fe fc0f 	bl	8001af0 <icm20948_write_mem>

  // Configure the Accel Cal Rate
  const unsigned char accelCalRate[4] = {0x00, 0x00}; // Value taken from InvenSense Nucleo example
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
  icm20948_write_mem(ACCEL_CAL_RATE, 2, &accelCalRate[0]);
 80032d6:	f107 0308 	add.w	r3, r7, #8
 80032da:	461a      	mov	r2, r3
 80032dc:	2102      	movs	r1, #2
 80032de:	f240 50e4 	movw	r0, #1508	@ 0x5e4
 80032e2:	f7fe fc05 	bl	8001af0 <icm20948_write_mem>

  // Configure the Compass Time Buffer. The I2C Master ODR Configuration (see above) sets the magnetometer read rate to 68.75Hz.
  // Let's set the Compass Time Buffer to 69 (Hz).
  const unsigned char compassRate[2] = {0x00, 0x45}; // 69Hz
 80032e6:	f44f 438a 	mov.w	r3, #17664	@ 0x4500
 80032ea:	80bb      	strh	r3, [r7, #4]
  icm20948_write_mem(CPASS_TIME_BUFFER, 2, &compassRate[0]);
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	461a      	mov	r2, r3
 80032f0:	2102      	movs	r1, #2
 80032f2:	f240 700e 	movw	r0, #1806	@ 0x70e
 80032f6:	f7fe fbfb 	bl	8001af0 <icm20948_write_mem>

  // Enable DMP interrupt
  // This would be the most efficient way of getting the DMP data, instead of polling the FIFO
  //intEnableDMP(true);

  return 0;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3748      	adds	r7, #72	@ 0x48
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	2000010c 	.word	0x2000010c
 8003308:	0800be64 	.word	0x0800be64
 800330c:	99999909 	.word	0x99999909
 8003310:	676666f6 	.word	0x676666f6
 8003314:	4992a403 	.word	0x4992a403
 8003318:	25499234 	.word	0x25499234
 800331c:	dbb66d0b 	.word	0xdbb66d0b

08003320 <icm20948_execute_r>:

ICM_20948_Status_e icm20948_execute_r(uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af04      	add	r7, sp, #16
 8003326:	4603      	mov	r3, r0
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, regaddr, I2C_MEMADD_SIZE_8BIT, pdata, len, 1000))
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800333a:	9102      	str	r1, [sp, #8]
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	2301      	movs	r3, #1
 8003344:	21d0      	movs	r1, #208	@ 0xd0
 8003346:	4806      	ldr	r0, [pc, #24]	@ (8003360 <icm20948_execute_r+0x40>)
 8003348:	f003 f828 	bl	800639c <HAL_I2C_Mem_Read>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <icm20948_execute_r+0x36>
		return ICM_20948_Stat_Err;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <icm20948_execute_r+0x38>
	return ICM_20948_Stat_Ok;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	2000010c 	.word	0x2000010c

08003364 <icm20948_execute_w>:

ICM_20948_Status_e icm20948_execute_w(uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af04      	add	r7, sp, #16
 800336a:	4603      	mov	r3, r0
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, regaddr, I2C_MEMADD_SIZE_8BIT, pdata, len, 1000))
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	b29a      	uxth	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800337e:	9102      	str	r1, [sp, #8]
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2301      	movs	r3, #1
 8003388:	21d0      	movs	r1, #208	@ 0xd0
 800338a:	4806      	ldr	r0, [pc, #24]	@ (80033a4 <icm20948_execute_w+0x40>)
 800338c:	f002 fef2 	bl	8006174 <HAL_I2C_Mem_Write>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <icm20948_execute_w+0x36>
		return ICM_20948_Stat_Err;
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <icm20948_execute_w+0x38>
	return ICM_20948_Stat_Ok;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000010c 	.word	0x2000010c

080033a8 <icm20948_startup_magnetometer>:

  return retval;
}

ICM_20948_Status_e icm20948_startup_magnetometer(bool minimal)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	@ 0x28
 80033ac:	af06      	add	r7, sp, #24
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73bb      	strb	r3, [r7, #14]

  icm20948_i2c_master_passthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
 80033b6:	2000      	movs	r0, #0
 80033b8:	f000 f86a 	bl	8003490 <icm20948_i2c_master_passthrough>
  icm20948_i2c_master_enable(true);
 80033bc:	2001      	movs	r0, #1
 80033be:	f000 f89e 	bl	80034fe <icm20948_i2c_master_enable>

  icm20948_reset_magnetomter();
 80033c2:	f000 f913 	bl	80035ec <icm20948_reset_magnetomter>

  //After a ICM reset the Mag sensor may stop responding over the I2C master
  //Reset the Master I2C until it responds
  uint8_t tries = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  while (tries < MAX_MAGNETOMETER_STARTS)
 80033ca:	e00e      	b.n	80033ea <icm20948_startup_magnetometer+0x42>
  {
    tries++;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	3301      	adds	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]

    //See if we can read the WhoIAm register correctly
    retval = icm20948_mag_who_i_am();
 80033d2:	f000 fa83 	bl	80038dc <icm20948_mag_who_i_am>
 80033d6:	4603      	mov	r3, r0
 80033d8:	73bb      	strb	r3, [r7, #14]
    if (retval == ICM_20948_Stat_Ok)
 80033da:	7bbb      	ldrb	r3, [r7, #14]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <icm20948_startup_magnetometer+0x4a>
      break; //WIA matched!

    icm20948_i2c_master_reset(); //Otherwise, reset the master I2C and try again
 80033e0:	f000 fa49 	bl	8003876 <icm20948_i2c_master_reset>

    HAL_Delay(10);
 80033e4:	200a      	movs	r0, #10
 80033e6:	f000 fdac 	bl	8003f42 <HAL_Delay>
  while (tries < MAX_MAGNETOMETER_STARTS)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	d9ed      	bls.n	80033cc <icm20948_startup_magnetometer+0x24>
 80033f0:	e000      	b.n	80033f4 <icm20948_startup_magnetometer+0x4c>
      break; //WIA matched!
 80033f2:	bf00      	nop
  }

  if (tries == MAX_MAGNETOMETER_STARTS)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b0a      	cmp	r3, #10
 80033f8:	d105      	bne.n	8003406 <icm20948_startup_magnetometer+0x5e>
  {
    /*debugPrint(F("ICM_20948::startupMagnetometer: reached MAX_MAGNETOMETER_STARTS ("));
    debugPrintf((int)MAX_MAGNETOMETER_STARTS);
    debugPrintln(F("). Returning ICM_20948_Stat_WrongID"));*/
    status = ICM_20948_Stat_WrongID;
 80033fa:	4b24      	ldr	r3, [pc, #144]	@ (800348c <icm20948_startup_magnetometer+0xe4>)
 80033fc:	2204      	movs	r2, #4
 80033fe:	701a      	strb	r2, [r3, #0]
    return status;
 8003400:	4b22      	ldr	r3, [pc, #136]	@ (800348c <icm20948_startup_magnetometer+0xe4>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	e03e      	b.n	8003484 <icm20948_startup_magnetometer+0xdc>
    else
      debugPrintln(F(" tries"));
  }*/

  //Return now if minimal is true. The mag will be configured manually for the DMP
  if (minimal) // Return now if minimal is true
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <icm20948_startup_magnetometer+0x6a>
  {
    //debugPrintln(F("ICM_20948::startupMagnetometer: minimal startup complete!"));
    return status;
 800340c:	4b1f      	ldr	r3, [pc, #124]	@ (800348c <icm20948_startup_magnetometer+0xe4>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	e038      	b.n	8003484 <icm20948_startup_magnetometer+0xdc>
  }

  //Set up magnetometer
  AK09916_CNTL2_Reg_t reg;
  reg.MODE = AK09916_mode_cont_100hz;
 8003412:	7b3b      	ldrb	r3, [r7, #12]
 8003414:	2208      	movs	r2, #8
 8003416:	f362 0304 	bfi	r3, r2, #0, #5
 800341a:	733b      	strb	r3, [r7, #12]
  reg.reserved_0 = 0; // Make sure the unused bits are clear. Probably redundant, but prevents confusion when looking at the I2C traffic
 800341c:	7b3b      	ldrb	r3, [r7, #12]
 800341e:	f36f 1347 	bfc	r3, #5, #3
 8003422:	733b      	strb	r3, [r7, #12]
  retval = icm20948_write_mag(AK09916_REG_CNTL2, (uint8_t *)&reg);
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	4619      	mov	r1, r3
 800342a:	2031      	movs	r0, #49	@ 0x31
 800342c:	f000 faa2 	bl	8003974 <icm20948_write_mag>
 8003430:	4603      	mov	r3, r0
 8003432:	73bb      	strb	r3, [r7, #14]
  if (retval != ICM_20948_Stat_Ok)
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <icm20948_startup_magnetometer+0x9e>
  {
    /*debugPrint(F("ICM_20948::startupMagnetometer: writeMag returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 800343a:	4a14      	ldr	r2, [pc, #80]	@ (800348c <icm20948_startup_magnetometer+0xe4>)
 800343c:	7bbb      	ldrb	r3, [r7, #14]
 800343e:	7013      	strb	r3, [r2, #0]
    return status;
 8003440:	4b12      	ldr	r3, [pc, #72]	@ (800348c <icm20948_startup_magnetometer+0xe4>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	e01e      	b.n	8003484 <icm20948_startup_magnetometer+0xdc>
  }

  retval = icm20948_i2c_controller_configure_peripheral(0, MAG_AK09916_I2C_ADDR, AK09916_REG_ST1, 9, true, true, false, false, false, 0);
 8003446:	2300      	movs	r3, #0
 8003448:	9305      	str	r3, [sp, #20]
 800344a:	2300      	movs	r3, #0
 800344c:	9304      	str	r3, [sp, #16]
 800344e:	2300      	movs	r3, #0
 8003450:	9303      	str	r3, [sp, #12]
 8003452:	2300      	movs	r3, #0
 8003454:	9302      	str	r3, [sp, #8]
 8003456:	2301      	movs	r3, #1
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	2301      	movs	r3, #1
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2309      	movs	r3, #9
 8003460:	2210      	movs	r2, #16
 8003462:	210c      	movs	r1, #12
 8003464:	2000      	movs	r0, #0
 8003466:	f7fd fd01 	bl	8000e6c <icm20948_i2c_controller_configure_peripheral>
 800346a:	4603      	mov	r3, r0
 800346c:	73bb      	strb	r3, [r7, #14]
  if (retval != ICM_20948_Stat_Ok)
 800346e:	7bbb      	ldrb	r3, [r7, #14]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <icm20948_startup_magnetometer+0xd8>
  {
    /*debugPrint(F("ICM_20948::startupMagnetometer: i2cMasterConfigurePeripheral returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8003474:	4a05      	ldr	r2, [pc, #20]	@ (800348c <icm20948_startup_magnetometer+0xe4>)
 8003476:	7bbb      	ldrb	r3, [r7, #14]
 8003478:	7013      	strb	r3, [r2, #0]
    return status;
 800347a:	4b04      	ldr	r3, [pc, #16]	@ (800348c <icm20948_startup_magnetometer+0xe4>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	e001      	b.n	8003484 <icm20948_startup_magnetometer+0xdc>
  }

  return status;
 8003480:	4b02      	ldr	r3, [pc, #8]	@ (800348c <icm20948_startup_magnetometer+0xe4>)
 8003482:	781b      	ldrb	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000160 	.word	0x20000160

08003490 <icm20948_i2c_master_passthrough>:

ICM_20948_Status_e icm20948_i2c_master_passthrough(bool passthrough)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]

  ICM_20948_INT_PIN_CFG_t reg;
  retval = icm20948_set_user_bank(0);
 800349e:	2000      	movs	r0, #0
 80034a0:	f7fd fc5a 	bl	8000d58 <icm20948_set_user_bank>
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <icm20948_i2c_master_passthrough+0x22>
  {
    return retval;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	e021      	b.n	80034f6 <icm20948_i2c_master_passthrough+0x66>
  }
  retval = icm20948_execute_r(AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	2201      	movs	r2, #1
 80034b8:	4619      	mov	r1, r3
 80034ba:	200f      	movs	r0, #15
 80034bc:	f7ff ff30 	bl	8003320 <icm20948_execute_r>
 80034c0:	4603      	mov	r3, r0
 80034c2:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <icm20948_i2c_master_passthrough+0x3e>
  {
    return retval;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	e013      	b.n	80034f6 <icm20948_i2c_master_passthrough+0x66>
  }
  reg.BYPASS_EN = passthrough;
 80034ce:	7b3b      	ldrb	r3, [r7, #12]
 80034d0:	79fa      	ldrb	r2, [r7, #7]
 80034d2:	f362 0341 	bfi	r3, r2, #1, #1
 80034d6:	733b      	strb	r3, [r7, #12]
  retval = icm20948_execute_w(AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	2201      	movs	r2, #1
 80034de:	4619      	mov	r1, r3
 80034e0:	200f      	movs	r0, #15
 80034e2:	f7ff ff3f 	bl	8003364 <icm20948_execute_w>
 80034e6:	4603      	mov	r3, r0
 80034e8:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <icm20948_i2c_master_passthrough+0x64>
  {
    return retval;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	e000      	b.n	80034f6 <icm20948_i2c_master_passthrough+0x66>
  }

  return retval;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <icm20948_i2c_master_enable>:

ICM_20948_Status_e icm20948_i2c_master_enable(bool enable)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]

  // Disable BYPASS_EN
  retval = icm20948_i2c_master_passthrough(false);
 800350c:	2000      	movs	r0, #0
 800350e:	f7ff ffbf 	bl	8003490 <icm20948_i2c_master_passthrough>
 8003512:	4603      	mov	r3, r0
 8003514:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <icm20948_i2c_master_enable+0x22>
  {
    return retval;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	e061      	b.n	80035e4 <icm20948_i2c_master_enable+0xe6>
  }

  ICM_20948_I2C_MST_CTRL_t ctrl;
  retval = icm20948_set_user_bank(3);
 8003520:	2003      	movs	r0, #3
 8003522:	f7fd fc19 	bl	8000d58 <icm20948_set_user_bank>
 8003526:	4603      	mov	r3, r0
 8003528:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <icm20948_i2c_master_enable+0x36>
  {
    return retval;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	e057      	b.n	80035e4 <icm20948_i2c_master_enable+0xe6>
  }
  retval = icm20948_execute_r(AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	2201      	movs	r2, #1
 800353a:	4619      	mov	r1, r3
 800353c:	2001      	movs	r0, #1
 800353e:	f7ff feef 	bl	8003320 <icm20948_execute_r>
 8003542:	4603      	mov	r3, r0
 8003544:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <icm20948_i2c_master_enable+0x52>
  {
    return retval;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	e049      	b.n	80035e4 <icm20948_i2c_master_enable+0xe6>
  }
  ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
 8003550:	7b3b      	ldrb	r3, [r7, #12]
 8003552:	2207      	movs	r2, #7
 8003554:	f362 0303 	bfi	r3, r2, #0, #4
 8003558:	733b      	strb	r3, [r7, #12]
  ctrl.I2C_MST_P_NSR = 1;
 800355a:	7b3b      	ldrb	r3, [r7, #12]
 800355c:	f043 0310 	orr.w	r3, r3, #16
 8003560:	733b      	strb	r3, [r7, #12]
  retval = icm20948_execute_w(AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	2201      	movs	r2, #1
 8003568:	4619      	mov	r1, r3
 800356a:	2001      	movs	r0, #1
 800356c:	f7ff fefa 	bl	8003364 <icm20948_execute_w>
 8003570:	4603      	mov	r3, r0
 8003572:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <icm20948_i2c_master_enable+0x80>
  {
    return retval;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	e032      	b.n	80035e4 <icm20948_i2c_master_enable+0xe6>
  }

  ICM_20948_USER_CTRL_t reg;
  retval = icm20948_set_user_bank(0);
 800357e:	2000      	movs	r0, #0
 8003580:	f7fd fbea 	bl	8000d58 <icm20948_set_user_bank>
 8003584:	4603      	mov	r3, r0
 8003586:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <icm20948_i2c_master_enable+0x94>
  {
    return retval;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	e028      	b.n	80035e4 <icm20948_i2c_master_enable+0xe6>
  }
  retval = icm20948_execute_r(AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
 8003592:	f107 0308 	add.w	r3, r7, #8
 8003596:	2201      	movs	r2, #1
 8003598:	4619      	mov	r1, r3
 800359a:	2003      	movs	r0, #3
 800359c:	f7ff fec0 	bl	8003320 <icm20948_execute_r>
 80035a0:	4603      	mov	r3, r0
 80035a2:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <icm20948_i2c_master_enable+0xb0>
  {
    return retval;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	e01a      	b.n	80035e4 <icm20948_i2c_master_enable+0xe6>
  }
  if (enable)
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d004      	beq.n	80035be <icm20948_i2c_master_enable+0xc0>
  {
    reg.I2C_MST_EN = 1;
 80035b4:	7a3b      	ldrb	r3, [r7, #8]
 80035b6:	f043 0320 	orr.w	r3, r3, #32
 80035ba:	723b      	strb	r3, [r7, #8]
 80035bc:	e003      	b.n	80035c6 <icm20948_i2c_master_enable+0xc8>
  }
  else
  {
    reg.I2C_MST_EN = 0;
 80035be:	7a3b      	ldrb	r3, [r7, #8]
 80035c0:	f36f 1345 	bfc	r3, #5, #1
 80035c4:	723b      	strb	r3, [r7, #8]
  }
  retval = icm20948_execute_w(AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
 80035c6:	f107 0308 	add.w	r3, r7, #8
 80035ca:	2201      	movs	r2, #1
 80035cc:	4619      	mov	r1, r3
 80035ce:	2003      	movs	r0, #3
 80035d0:	f7ff fec8 	bl	8003364 <icm20948_execute_w>
 80035d4:	4603      	mov	r3, r0
 80035d6:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <icm20948_i2c_master_enable+0xe4>
  {
    return retval;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	e000      	b.n	80035e4 <icm20948_i2c_master_enable+0xe6>
  }

  return retval;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <icm20948_reset_magnetomter>:


ICM_20948_Status_e icm20948_reset_magnetomter()
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
  uint8_t SRST = 1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	71fb      	strb	r3, [r7, #7]
  // SRST: Soft reset
  // “0”: Normal
  // “1”: Reset
  // When “1” is set, all registers are initialized. After reset, SRST bit turns to “0” automatically.
  status = icm20948_i2c_master_single_w(MAG_AK09916_I2C_ADDR, AK09916_REG_CNTL3, &SRST);
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	461a      	mov	r2, r3
 80035fa:	2132      	movs	r1, #50	@ 0x32
 80035fc:	200c      	movs	r0, #12
 80035fe:	f000 f80d 	bl	800361c <icm20948_i2c_master_single_w>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	4b04      	ldr	r3, [pc, #16]	@ (8003618 <icm20948_reset_magnetomter+0x2c>)
 8003608:	701a      	strb	r2, [r3, #0]
  return status;
 800360a:	4b03      	ldr	r3, [pc, #12]	@ (8003618 <icm20948_reset_magnetomter+0x2c>)
 800360c:	781b      	ldrb	r3, [r3, #0]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000160 	.word	0x20000160

0800361c <icm20948_i2c_master_single_w>:


ICM_20948_Status_e icm20948_i2c_master_single_w(uint8_t addr, uint8_t reg, uint8_t *data)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af02      	add	r7, sp, #8
 8003622:	4603      	mov	r3, r0
 8003624:	603a      	str	r2, [r7, #0]
 8003626:	71fb      	strb	r3, [r7, #7]
 8003628:	460b      	mov	r3, r1
 800362a:	71bb      	strb	r3, [r7, #6]
  return icm20948_i2c_controller_periph4_txn(addr, reg, data, 1, false, true);
 800362c:	79b9      	ldrb	r1, [r7, #6]
 800362e:	79f8      	ldrb	r0, [r7, #7]
 8003630:	2301      	movs	r3, #1
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	2300      	movs	r3, #0
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2301      	movs	r3, #1
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	f000 f81c 	bl	8003678 <icm20948_i2c_controller_periph4_txn>
 8003640:	4603      	mov	r3, r0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <icm20948_i2c_master_single_r>:


ICM_20948_Status_e icm20948_i2c_master_single_r(uint8_t addr, uint8_t reg, uint8_t *data)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af02      	add	r7, sp, #8
 8003650:	4603      	mov	r3, r0
 8003652:	603a      	str	r2, [r7, #0]
 8003654:	71fb      	strb	r3, [r7, #7]
 8003656:	460b      	mov	r3, r1
 8003658:	71bb      	strb	r3, [r7, #6]
  return icm20948_i2c_controller_periph4_txn(addr, reg, data, 1, true, true);
 800365a:	79b9      	ldrb	r1, [r7, #6]
 800365c:	79f8      	ldrb	r0, [r7, #7]
 800365e:	2301      	movs	r3, #1
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	2301      	movs	r3, #1
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	2301      	movs	r3, #1
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	f000 f805 	bl	8003678 <icm20948_i2c_controller_periph4_txn>
 800366e:	4603      	mov	r3, r0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <icm20948_i2c_controller_periph4_txn>:


ICM_20948_Status_e icm20948_i2c_controller_periph4_txn(uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	603a      	str	r2, [r7, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
 8003686:	460b      	mov	r3, r1
 8003688:	71bb      	strb	r3, [r7, #6]
 800368a:	4613      	mov	r3, r2
 800368c:	717b      	strb	r3, [r7, #5]
  // Thanks MikeFair! // https://github.com/kriswiner/MPU9250/issues/86
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 800368e:	2300      	movs	r3, #0
 8003690:	77fb      	strb	r3, [r7, #31]

  addr = (((Rw) ? 0x80 : 0x00) | addr);
 8003692:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <icm20948_i2c_controller_periph4_txn+0x28>
 800369a:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800369e:	e000      	b.n	80036a2 <icm20948_i2c_controller_periph4_txn+0x2a>
 80036a0:	2200      	movs	r2, #0
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	71fb      	strb	r3, [r7, #7]

  retval = icm20948_set_user_bank(3);
 80036ae:	2003      	movs	r0, #3
 80036b0:	f7fd fb52 	bl	8000d58 <icm20948_set_user_bank>
 80036b4:	4603      	mov	r3, r0
 80036b6:	77fb      	strb	r3, [r7, #31]
  retval = icm20948_execute_w(AGB3_REG_I2C_PERIPH4_ADDR, (uint8_t *)&addr, 1);
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	2201      	movs	r2, #1
 80036bc:	4619      	mov	r1, r3
 80036be:	2013      	movs	r0, #19
 80036c0:	f7ff fe50 	bl	8003364 <icm20948_execute_w>
 80036c4:	4603      	mov	r3, r0
 80036c6:	77fb      	strb	r3, [r7, #31]
  if (retval != ICM_20948_Stat_Ok)
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <icm20948_i2c_controller_periph4_txn+0x5a>
  {
    return retval;
 80036ce:	7ffb      	ldrb	r3, [r7, #31]
 80036d0:	e0cd      	b.n	800386e <icm20948_i2c_controller_periph4_txn+0x1f6>
  }

  retval = icm20948_set_user_bank(3);
 80036d2:	2003      	movs	r0, #3
 80036d4:	f7fd fb40 	bl	8000d58 <icm20948_set_user_bank>
 80036d8:	4603      	mov	r3, r0
 80036da:	77fb      	strb	r3, [r7, #31]
  retval = icm20948_execute_w(AGB3_REG_I2C_PERIPH4_REG, (uint8_t *)&reg, 1);
 80036dc:	1dbb      	adds	r3, r7, #6
 80036de:	2201      	movs	r2, #1
 80036e0:	4619      	mov	r1, r3
 80036e2:	2014      	movs	r0, #20
 80036e4:	f7ff fe3e 	bl	8003364 <icm20948_execute_w>
 80036e8:	4603      	mov	r3, r0
 80036ea:	77fb      	strb	r3, [r7, #31]
  if (retval != ICM_20948_Stat_Ok)
 80036ec:	7ffb      	ldrb	r3, [r7, #31]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <icm20948_i2c_controller_periph4_txn+0x7e>
  {
    return retval;
 80036f2:	7ffb      	ldrb	r3, [r7, #31]
 80036f4:	e0bb      	b.n	800386e <icm20948_i2c_controller_periph4_txn+0x1f6>
  }

  ICM_20948_I2C_PERIPH4_CTRL_t ctrl;
  ctrl.EN = 1;
 80036f6:	7b3b      	ldrb	r3, [r7, #12]
 80036f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036fc:	733b      	strb	r3, [r7, #12]
  ctrl.INT_EN = false;
 80036fe:	7b3b      	ldrb	r3, [r7, #12]
 8003700:	f36f 1386 	bfc	r3, #6, #1
 8003704:	733b      	strb	r3, [r7, #12]
  ctrl.DLY = 0;
 8003706:	7b3b      	ldrb	r3, [r7, #12]
 8003708:	f36f 0304 	bfc	r3, #0, #5
 800370c:	733b      	strb	r3, [r7, #12]
  ctrl.REG_DIS = !send_reg_addr;
 800370e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003712:	f083 0301 	eor.w	r3, r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	7b3b      	ldrb	r3, [r7, #12]
 800371a:	f362 1345 	bfi	r3, r2, #5, #1
 800371e:	733b      	strb	r3, [r7, #12]

  ICM_20948_I2C_MST_STATUS_t i2c_mst_status;
  bool txn_failed = false;
 8003720:	2300      	movs	r3, #0
 8003722:	77bb      	strb	r3, [r7, #30]
  uint16_t nByte = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	83bb      	strh	r3, [r7, #28]

  while (nByte < len)
 8003728:	e093      	b.n	8003852 <icm20948_i2c_controller_periph4_txn+0x1da>
  {
    if (!Rw)
 800372a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800372e:	f083 0301 	eor.w	r3, r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <icm20948_i2c_controller_periph4_txn+0xe8>
    {
      retval = icm20948_set_user_bank(3);
 8003738:	2003      	movs	r0, #3
 800373a:	f7fd fb0d 	bl	8000d58 <icm20948_set_user_bank>
 800373e:	4603      	mov	r3, r0
 8003740:	77fb      	strb	r3, [r7, #31]
      retval = icm20948_execute_w(AGB3_REG_I2C_PERIPH4_DO, (uint8_t *)&(data[nByte]), 1);
 8003742:	8bbb      	ldrh	r3, [r7, #28]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	4413      	add	r3, r2
 8003748:	2201      	movs	r2, #1
 800374a:	4619      	mov	r1, r3
 800374c:	2016      	movs	r0, #22
 800374e:	f7ff fe09 	bl	8003364 <icm20948_execute_w>
 8003752:	4603      	mov	r3, r0
 8003754:	77fb      	strb	r3, [r7, #31]
      if (retval != ICM_20948_Stat_Ok)
 8003756:	7ffb      	ldrb	r3, [r7, #31]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <icm20948_i2c_controller_periph4_txn+0xe8>
      {
        return retval;
 800375c:	7ffb      	ldrb	r3, [r7, #31]
 800375e:	e086      	b.n	800386e <icm20948_i2c_controller_periph4_txn+0x1f6>
      }
    }

    // Kick off txn
    retval = icm20948_set_user_bank(3);
 8003760:	2003      	movs	r0, #3
 8003762:	f7fd faf9 	bl	8000d58 <icm20948_set_user_bank>
 8003766:	4603      	mov	r3, r0
 8003768:	77fb      	strb	r3, [r7, #31]
    retval = icm20948_execute_w(AGB3_REG_I2C_PERIPH4_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_PERIPH4_CTRL_t));
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	2201      	movs	r2, #1
 8003770:	4619      	mov	r1, r3
 8003772:	2015      	movs	r0, #21
 8003774:	f7ff fdf6 	bl	8003364 <icm20948_execute_w>
 8003778:	4603      	mov	r3, r0
 800377a:	77fb      	strb	r3, [r7, #31]
    if (retval != ICM_20948_Stat_Ok)
 800377c:	7ffb      	ldrb	r3, [r7, #31]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <icm20948_i2c_controller_periph4_txn+0x10e>
    {
      return retval;
 8003782:	7ffb      	ldrb	r3, [r7, #31]
 8003784:	e073      	b.n	800386e <icm20948_i2c_controller_periph4_txn+0x1f6>
    }

    // long tsTimeout = millis() + 3000;  // Emergency timeout for txn (hard coded to 3 secs)
    uint32_t max_cycles = 1000;
 8003786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800378a:	613b      	str	r3, [r7, #16]
    uint32_t count = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
    bool peripheral4Done = false;
 8003790:	2300      	movs	r3, #0
 8003792:	75fb      	strb	r3, [r7, #23]
    while (!peripheral4Done)
 8003794:	e027      	b.n	80037e6 <icm20948_i2c_controller_periph4_txn+0x16e>
    {
      retval = icm20948_set_user_bank(0);
 8003796:	2000      	movs	r0, #0
 8003798:	f7fd fade 	bl	8000d58 <icm20948_set_user_bank>
 800379c:	4603      	mov	r3, r0
 800379e:	77fb      	strb	r3, [r7, #31]
      retval = icm20948_execute_r(AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);
 80037a0:	f107 0308 	add.w	r3, r7, #8
 80037a4:	2201      	movs	r2, #1
 80037a6:	4619      	mov	r1, r3
 80037a8:	2017      	movs	r0, #23
 80037aa:	f7ff fdb9 	bl	8003320 <icm20948_execute_r>
 80037ae:	4603      	mov	r3, r0
 80037b0:	77fb      	strb	r3, [r7, #31]

      peripheral4Done = (i2c_mst_status.I2C_PERIPH4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
 80037b2:	7a3b      	ldrb	r3, [r7, #8]
 80037b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	75fb      	strb	r3, [r7, #23]
      peripheral4Done |= (count >= max_cycles);
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	69b9      	ldr	r1, [r7, #24]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4291      	cmp	r1, r2
 80037cc:	bf2c      	ite	cs
 80037ce:	2201      	movcs	r2, #1
 80037d0:	2200      	movcc	r2, #0
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	4313      	orrs	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bf14      	ite	ne
 80037da:	2301      	movne	r3, #1
 80037dc:	2300      	moveq	r3, #0
 80037de:	75fb      	strb	r3, [r7, #23]
      count++;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
    while (!peripheral4Done)
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
 80037e8:	f083 0301 	eor.w	r3, r3, #1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1d1      	bne.n	8003796 <icm20948_i2c_controller_periph4_txn+0x11e>
    }
    txn_failed = (i2c_mst_status.I2C_PERIPH4_NACK /*| (millis() > tsTimeout) */);
 80037f2:	7a3b      	ldrb	r3, [r7, #8]
 80037f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf14      	ite	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	2300      	moveq	r3, #0
 8003802:	77bb      	strb	r3, [r7, #30]
    txn_failed |= (count >= max_cycles);
 8003804:	7fbb      	ldrb	r3, [r7, #30]
 8003806:	69b9      	ldr	r1, [r7, #24]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4291      	cmp	r1, r2
 800380c:	bf2c      	ite	cs
 800380e:	2201      	movcs	r2, #1
 8003810:	2200      	movcc	r2, #0
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	4313      	orrs	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	77bb      	strb	r3, [r7, #30]
    if (txn_failed)
 8003820:	7fbb      	ldrb	r3, [r7, #30]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11c      	bne.n	8003860 <icm20948_i2c_controller_periph4_txn+0x1e8>
      break;

    if (Rw)
 8003826:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00e      	beq.n	800384c <icm20948_i2c_controller_periph4_txn+0x1d4>
    {
      retval = icm20948_set_user_bank(3);
 800382e:	2003      	movs	r0, #3
 8003830:	f7fd fa92 	bl	8000d58 <icm20948_set_user_bank>
 8003834:	4603      	mov	r3, r0
 8003836:	77fb      	strb	r3, [r7, #31]
      retval = icm20948_execute_r(AGB3_REG_I2C_PERIPH4_DI, &data[nByte], 1);
 8003838:	8bbb      	ldrh	r3, [r7, #28]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	4413      	add	r3, r2
 800383e:	2201      	movs	r2, #1
 8003840:	4619      	mov	r1, r3
 8003842:	2017      	movs	r0, #23
 8003844:	f7ff fd6c 	bl	8003320 <icm20948_execute_r>
 8003848:	4603      	mov	r3, r0
 800384a:	77fb      	strb	r3, [r7, #31]
    }

    nByte++;
 800384c:	8bbb      	ldrh	r3, [r7, #28]
 800384e:	3301      	adds	r3, #1
 8003850:	83bb      	strh	r3, [r7, #28]
  while (nByte < len)
 8003852:	797b      	ldrb	r3, [r7, #5]
 8003854:	b29b      	uxth	r3, r3
 8003856:	8bba      	ldrh	r2, [r7, #28]
 8003858:	429a      	cmp	r2, r3
 800385a:	f4ff af66 	bcc.w	800372a <icm20948_i2c_controller_periph4_txn+0xb2>
 800385e:	e000      	b.n	8003862 <icm20948_i2c_controller_periph4_txn+0x1ea>
      break;
 8003860:	bf00      	nop
  }

  if (txn_failed)
 8003862:	7fbb      	ldrb	r3, [r7, #30]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <icm20948_i2c_controller_periph4_txn+0x1f4>
  {
    //We often fail here if mag is stuck
    return ICM_20948_Stat_Err;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <icm20948_i2c_controller_periph4_txn+0x1f6>
  }

  return retval;
 800386c:	7ffb      	ldrb	r3, [r7, #31]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <icm20948_i2c_master_reset>:


ICM_20948_Status_e icm20948_i2c_master_reset()
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 800387c:	2300      	movs	r3, #0
 800387e:	71fb      	strb	r3, [r7, #7]

  ICM_20948_USER_CTRL_t ctrl;
  retval = icm20948_set_user_bank(0);
 8003880:	2000      	movs	r0, #0
 8003882:	f7fd fa69 	bl	8000d58 <icm20948_set_user_bank>
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <icm20948_i2c_master_reset+0x1e>
  {
    return retval;
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	e01e      	b.n	80038d2 <icm20948_i2c_master_reset+0x5c>
  }

  retval = icm20948_execute_r(AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	2201      	movs	r2, #1
 8003898:	4619      	mov	r1, r3
 800389a:	2003      	movs	r0, #3
 800389c:	f7ff fd40 	bl	8003320 <icm20948_execute_r>
 80038a0:	4603      	mov	r3, r0
 80038a2:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <icm20948_i2c_master_reset+0x38>
  {
    return retval;
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	e011      	b.n	80038d2 <icm20948_i2c_master_reset+0x5c>
  }

  ctrl.I2C_MST_RST = 1; //Reset!
 80038ae:	793b      	ldrb	r3, [r7, #4]
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	713b      	strb	r3, [r7, #4]

  retval = icm20948_execute_w(AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 80038b6:	1d3b      	adds	r3, r7, #4
 80038b8:	2201      	movs	r2, #1
 80038ba:	4619      	mov	r1, r3
 80038bc:	2003      	movs	r0, #3
 80038be:	f7ff fd51 	bl	8003364 <icm20948_execute_w>
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <icm20948_i2c_master_reset+0x5a>
  {
    return retval;
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	e000      	b.n	80038d2 <icm20948_i2c_master_reset+0x5c>
  }
  return retval;
 80038d0:	79fb      	ldrb	r3, [r7, #7]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <icm20948_mag_who_i_am>:

ICM_20948_Status_e icm20948_mag_who_i_am(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80038e2:	2300      	movs	r3, #0
 80038e4:	71fb      	strb	r3, [r7, #7]

  uint8_t whoiam1, whoiam2;
  whoiam1 = icm20948_read_mag(AK09916_REG_WIA1);
 80038e6:	2000      	movs	r0, #0
 80038e8:	f000 f832 	bl	8003950 <icm20948_read_mag>
 80038ec:	4603      	mov	r3, r0
 80038ee:	71bb      	strb	r3, [r7, #6]
  // readMag calls i2cMasterSingleR which calls ICM_20948_i2c_master_single_r
  // i2cMasterSingleR updates status so it is OK to set retval to status here
  retval = status;
 80038f0:	4b16      	ldr	r3, [pc, #88]	@ (800394c <icm20948_mag_who_i_am+0x70>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <icm20948_mag_who_i_am+0x24>
    /*debugPrint(F("ICM_20948::magWhoIAm: whoiam1: "));
    debugPrintf((int)whoiam1);
    debugPrint(F(" (should be 72) readMag set status to: "));
    debugPrintStatus(status);
    debugPrintln(F(""));*/
    return retval;
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	e021      	b.n	8003944 <icm20948_mag_who_i_am+0x68>
  }
  whoiam2 = icm20948_read_mag(AK09916_REG_WIA2);
 8003900:	2001      	movs	r0, #1
 8003902:	f000 f825 	bl	8003950 <icm20948_read_mag>
 8003906:	4603      	mov	r3, r0
 8003908:	717b      	strb	r3, [r7, #5]
  // readMag calls i2cMasterSingleR which calls ICM_20948_i2c_master_single_r
  // i2cMasterSingleR updates status so it is OK to set retval to status here
  retval = status;
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <icm20948_mag_who_i_am+0x70>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <icm20948_mag_who_i_am+0x3e>
    debugPrint(F(" (should be 72) whoiam2: "));
    debugPrintf((int)whoiam2);
    debugPrint(F(" (should be 9) readMag set status to: "));
    debugPrintStatus(status);
    debugPrintln(F(""));*/
    return retval;
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	e014      	b.n	8003944 <icm20948_mag_who_i_am+0x68>
  }

  if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
 800391a:	79bb      	ldrb	r3, [r7, #6]
 800391c:	2b48      	cmp	r3, #72	@ 0x48
 800391e:	d10a      	bne.n	8003936 <icm20948_mag_who_i_am+0x5a>
 8003920:	797b      	ldrb	r3, [r7, #5]
 8003922:	2b09      	cmp	r3, #9
 8003924:	d107      	bne.n	8003936 <icm20948_mag_who_i_am+0x5a>
  {
    retval = ICM_20948_Stat_Ok;
 8003926:	2300      	movs	r3, #0
 8003928:	71fb      	strb	r3, [r7, #7]
    status = retval;
 800392a:	4a08      	ldr	r2, [pc, #32]	@ (800394c <icm20948_mag_who_i_am+0x70>)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	7013      	strb	r3, [r2, #0]
    return status;
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <icm20948_mag_who_i_am+0x70>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	e006      	b.n	8003944 <icm20948_mag_who_i_am+0x68>
  debugPrintf((int)whoiam1);
  debugPrint(F(" (should be 72) whoiam2: "));
  debugPrintf((int)whoiam2);
  debugPrintln(F(" (should be 9). Returning ICM_20948_Stat_WrongID"));*/

  retval = ICM_20948_Stat_WrongID;
 8003936:	2304      	movs	r3, #4
 8003938:	71fb      	strb	r3, [r7, #7]
  status = retval;
 800393a:	4a04      	ldr	r2, [pc, #16]	@ (800394c <icm20948_mag_who_i_am+0x70>)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	7013      	strb	r3, [r2, #0]
  return status;
 8003940:	4b02      	ldr	r3, [pc, #8]	@ (800394c <icm20948_mag_who_i_am+0x70>)
 8003942:	781b      	ldrb	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000160 	.word	0x20000160

08003950 <icm20948_read_mag>:


uint8_t icm20948_read_mag(AK09916_Reg_Addr_e reg)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  icm20948_i2c_master_single_r(MAG_AK09916_I2C_ADDR, reg, &data); // i2cMasterSingleR updates status too
 800395a:	f107 020f 	add.w	r2, r7, #15
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	4619      	mov	r1, r3
 8003962:	200c      	movs	r0, #12
 8003964:	f7ff fe71 	bl	800364a <icm20948_i2c_master_single_r>
  return data;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <icm20948_write_mag>:


ICM_20948_Status_e icm20948_write_mag(AK09916_Reg_Addr_e reg, uint8_t *pdata)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
  status = icm20948_i2c_master_single_w(MAG_AK09916_I2C_ADDR, reg, pdata);
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	4619      	mov	r1, r3
 8003986:	200c      	movs	r0, #12
 8003988:	f7ff fe48 	bl	800361c <icm20948_i2c_master_single_w>
 800398c:	4603      	mov	r3, r0
 800398e:	461a      	mov	r2, r3
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <icm20948_write_mag+0x2c>)
 8003992:	701a      	strb	r2, [r3, #0]
  return status;
 8003994:	4b02      	ldr	r3, [pc, #8]	@ (80039a0 <icm20948_write_mag+0x2c>)
 8003996:	781b      	ldrb	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000160 	.word	0x20000160

080039a4 <icm20948_startup_default>:


ICM_20948_Status_e icm20948_startup_default(bool minimal)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
    debugPrintln(F(""));
    status = retval;
    return status;
  }*/

  retval = icm20948_sw_reset();
 80039b2:	f7ff fa11 	bl	8002dd8 <icm20948_sw_reset>
 80039b6:	4603      	mov	r3, r0
 80039b8:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <icm20948_startup_default+0x28>
  {
    /*debugPrint(F("ICM_20948::startupDefault: swReset returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 80039c0:	4a4b      	ldr	r2, [pc, #300]	@ (8003af0 <icm20948_startup_default+0x14c>)
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	7013      	strb	r3, [r2, #0]
    return status;
 80039c6:	4b4a      	ldr	r3, [pc, #296]	@ (8003af0 <icm20948_startup_default+0x14c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	e08c      	b.n	8003ae6 <icm20948_startup_default+0x142>
  }
  HAL_Delay(50);
 80039cc:	2032      	movs	r0, #50	@ 0x32
 80039ce:	f000 fab8 	bl	8003f42 <HAL_Delay>

  retval = icm20948_sleep(false);
 80039d2:	2000      	movs	r0, #0
 80039d4:	f7ff f982 	bl	8002cdc <icm20948_sleep>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <icm20948_startup_default+0x4a>
  {
    /*debugPrint(F("ICM_20948::startupDefault: sleep returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 80039e2:	4a43      	ldr	r2, [pc, #268]	@ (8003af0 <icm20948_startup_default+0x14c>)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	7013      	strb	r3, [r2, #0]
    return status;
 80039e8:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <icm20948_startup_default+0x14c>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	e07b      	b.n	8003ae6 <icm20948_startup_default+0x142>
  }

  retval = icm20948_low_power(false);
 80039ee:	2000      	movs	r0, #0
 80039f0:	f7ff f9ae 	bl	8002d50 <icm20948_low_power>
 80039f4:	4603      	mov	r3, r0
 80039f6:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <icm20948_startup_default+0x66>
  {
    /*debugPrint(F("ICM_20948::startupDefault: lowPower returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 80039fe:	4a3c      	ldr	r2, [pc, #240]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	7013      	strb	r3, [r2, #0]
    return status;
 8003a04:	4b3a      	ldr	r3, [pc, #232]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	e06d      	b.n	8003ae6 <icm20948_startup_default+0x142>
  }

  retval = icm20948_startup_magnetometer(minimal); // Pass the minimal startup flag to startupMagnetometer
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fccb 	bl	80033a8 <icm20948_startup_magnetometer>
 8003a12:	4603      	mov	r3, r0
 8003a14:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <icm20948_startup_default+0x84>
  {
    /*debugPrint(F("ICM_20948::startupDefault: startupMagnetometer returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8003a1c:	4a34      	ldr	r2, [pc, #208]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	7013      	strb	r3, [r2, #0]
    return status;
 8003a22:	4b33      	ldr	r3, [pc, #204]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	e05e      	b.n	8003ae6 <icm20948_startup_default+0x142>
  }

  if (minimal) // Return now if minimal is true
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <icm20948_startup_default+0x90>
  {
    //debugPrintln(F("ICM_20948::startupDefault: minimal startup complete!"));
    return status;
 8003a2e:	4b30      	ldr	r3, [pc, #192]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	e058      	b.n	8003ae6 <icm20948_startup_default+0x142>
  }

  retval = icm20948_set_sample_mode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous); // options: ICM_20948_Sample_Mode_Continuous or ICM_20948_Sample_Mode_Cycled
 8003a34:	2100      	movs	r1, #0
 8003a36:	2003      	movs	r0, #3
 8003a38:	f7fd fb18 	bl	800106c <icm20948_set_sample_mode>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <icm20948_startup_default+0xae>
  {
    /*debugPrint(F("ICM_20948::startupDefault: setSampleMode returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8003a46:	4a2a      	ldr	r2, [pc, #168]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	7013      	strb	r3, [r2, #0]
    return status;
 8003a4c:	4b28      	ldr	r3, [pc, #160]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	e049      	b.n	8003ae6 <icm20948_startup_default+0x142>
  } // sensors: 	ICM_20948_Internal_Acc, ICM_20948_Internal_Gyr, ICM_20948_Internal_Mst

  ICM_20948_fss_t FSS;
  FSS.a = gpm2;   // (ICM_20948_ACCEL_CONFIG_FS_SEL_e)
 8003a52:	7b3b      	ldrb	r3, [r7, #12]
 8003a54:	f36f 0301 	bfc	r3, #0, #2
 8003a58:	733b      	strb	r3, [r7, #12]
  FSS.g = dps250; // (ICM_20948_GYRO_CONFIG_1_FS_SEL_e)
 8003a5a:	7b3b      	ldrb	r3, [r7, #12]
 8003a5c:	f36f 0383 	bfc	r3, #2, #2
 8003a60:	733b      	strb	r3, [r7, #12]
  retval = icm20948_set_full_scale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), FSS);
 8003a62:	7b39      	ldrb	r1, [r7, #12]
 8003a64:	2003      	movs	r0, #3
 8003a66:	f7fd fc31 	bl	80012cc <icm20948_set_full_scale>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <icm20948_startup_default+0xdc>
  {
    /*debugPrint(F("ICM_20948::startupDefault: setFullScale returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8003a74:	4a1e      	ldr	r2, [pc, #120]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	7013      	strb	r3, [r2, #0]
    return status;
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	e032      	b.n	8003ae6 <icm20948_startup_default+0x142>
  }

  ICM_20948_dlpcfg_t dlpcfg;
  dlpcfg.a = acc_d473bw_n499bw;
 8003a80:	2307      	movs	r3, #7
 8003a82:	723b      	strb	r3, [r7, #8]
  dlpcfg.g = gyr_d361bw4_n376bw5;
 8003a84:	2307      	movs	r3, #7
 8003a86:	727b      	strb	r3, [r7, #9]
  retval = icm20948_set_dlpf_cfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), dlpcfg);
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	2003      	movs	r0, #3
 8003a8c:	f7fd fd3c 	bl	8001508 <icm20948_set_dlpf_cfg>
 8003a90:	4603      	mov	r3, r0
 8003a92:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <icm20948_startup_default+0x102>
  {
    /*debugPrint(F("ICM_20948::startupDefault: setDLPFcfg returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8003a9a:	4a15      	ldr	r2, [pc, #84]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	7013      	strb	r3, [r2, #0]
    return status;
 8003aa0:	4b13      	ldr	r3, [pc, #76]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	e01f      	b.n	8003ae6 <icm20948_startup_default+0x142>
  }

  retval = icm20948_enable_dlpf(ICM_20948_Internal_Acc, false);
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	f7fd fc99 	bl	80013e0 <icm20948_enable_dlpf>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <icm20948_startup_default+0x120>
  {
    /*debugPrint(F("ICM_20948::startupDefault: enableDLPF (Acc) returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8003ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	7013      	strb	r3, [r2, #0]
    return status;
 8003abe:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	e010      	b.n	8003ae6 <icm20948_startup_default+0x142>
  }

  retval = icm20948_enable_dlpf(ICM_20948_Internal_Gyr, false);
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2002      	movs	r0, #2
 8003ac8:	f7fd fc8a 	bl	80013e0 <icm20948_enable_dlpf>
 8003acc:	4603      	mov	r3, r0
 8003ace:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <icm20948_startup_default+0x13e>
  {
    /*debugPrint(F("ICM_20948::startupDefault: enableDLPF (Gyr) returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8003ad6:	4a06      	ldr	r2, [pc, #24]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	7013      	strb	r3, [r2, #0]
    return status;
 8003adc:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	e001      	b.n	8003ae6 <icm20948_startup_default+0x142>
  }

  return status;
 8003ae2:	4b03      	ldr	r3, [pc, #12]	@ (8003af0 <icm20948_startup_default+0x14c>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000160 	.word	0x20000160

08003af4 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8003af4:	b5b0      	push	{r4, r5, r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8003afa:	4b15      	ldr	r3, [pc, #84]	@ (8003b50 <APPD_EnableCPU2+0x5c>)
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <APPD_EnableCPU2+0x60>)
 8003b00:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 8003b02:	4b15      	ldr	r3, [pc, #84]	@ (8003b58 <APPD_EnableCPU2+0x64>)
 8003b04:	881a      	ldrh	r2, [r3, #0]
 8003b06:	4b13      	ldr	r3, [pc, #76]	@ (8003b54 <APPD_EnableCPU2+0x60>)
 8003b08:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8003b0a:	4b14      	ldr	r3, [pc, #80]	@ (8003b5c <APPD_EnableCPU2+0x68>)
 8003b0c:	881a      	ldrh	r2, [r3, #0]
 8003b0e:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <APPD_EnableCPU2+0x60>)
 8003b10:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 8003b12:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <APPD_EnableCPU2+0x6c>)
 8003b14:	881a      	ldrh	r2, [r3, #0]
 8003b16:	4b0f      	ldr	r3, [pc, #60]	@ (8003b54 <APPD_EnableCPU2+0x60>)
 8003b18:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8003b1a:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <APPD_EnableCPU2+0x70>)
 8003b1c:	881a      	ldrh	r2, [r3, #0]
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <APPD_EnableCPU2+0x60>)
 8003b20:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8003b22:	4b11      	ldr	r3, [pc, #68]	@ (8003b68 <APPD_EnableCPU2+0x74>)
 8003b24:	1d3c      	adds	r4, r7, #4
 8003b26:	461d      	mov	r5, r3
 8003b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b30:	c403      	stmia	r4!, {r0, r1}
 8003b32:	8022      	strh	r2, [r4, #0]
 8003b34:	3402      	adds	r4, #2
 8003b36:	0c13      	lsrs	r3, r2, #16
 8003b38:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8003b3a:	f006 fd87 	bl	800a64c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f006 f818 	bl	8009b76 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8003b46:	bf00      	nop
}
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000008 	.word	0x20000008
 8003b54:	200301e8 	.word	0x200301e8
 8003b58:	2000000a 	.word	0x2000000a
 8003b5c:	2000000c 	.word	0x2000000c
 8003b60:	2000000e 	.word	0x2000000e
 8003b64:	20000010 	.word	0x20000010
 8003b68:	0800bde0 	.word	0x0800bde0

08003b6c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8003b74:	4b07      	ldr	r3, [pc, #28]	@ (8003b94 <LL_C2_PWR_SetPowerMode+0x28>)
 8003b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b7a:	f023 0207 	bic.w	r2, r3, #7
 8003b7e:	4905      	ldr	r1, [pc, #20]	@ (8003b94 <LL_C2_PWR_SetPowerMode+0x28>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	58000400 	.word	0x58000400

08003b98 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003ba0:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <LL_EXTI_EnableIT_32_63+0x24>)
 8003ba2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003ba6:	4905      	ldr	r1, [pc, #20]	@ (8003bbc <LL_EXTI_EnableIT_32_63+0x24>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	58000800 	.word	0x58000800

08003bc0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8003bce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bda:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	cafecafe 	.word	0xcafecafe

08003bfc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8003c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003c0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8003c28:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <LL_DBGMCU_GetDeviceID+0x18>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e0042000 	.word	0xe0042000

08003c40 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8003c44:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <LL_DBGMCU_GetRevisionID+0x18>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	b29b      	uxth	r3, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e0042000 	.word	0xe0042000

08003c5c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <LL_LPM_EnableSleep+0x1c>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	4a04      	ldr	r2, [pc, #16]	@ (8003c78 <LL_LPM_EnableSleep+0x1c>)
 8003c66:	f023 0304 	bic.w	r3, r3, #4
 8003c6a:	6113      	str	r3, [r2, #16]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	22ff      	movs	r2, #255	@ 0xff
 8003c88:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	22ca      	movs	r2, #202	@ 0xca
 8003ca2:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2253      	movs	r2, #83	@ 0x53
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 0207 	bic.w	r2, r3, #7
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	609a      	str	r2, [r3, #8]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <MX_APPE_Config+0x18>)
 8003ce2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003ce6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8003ce8:	f000 f81d 	bl	8003d26 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8003cec:	f000 f822 	bl	8003d34 <Config_HSE>

  return;
 8003cf0:	bf00      	nop
}
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	58004000 	.word	0x58004000

08003cf8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8003cfc:	f000 f82e 	bl	8003d5c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8003d00:	f000 f844 	bl	8003d8c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8003d04:	4903      	ldr	r1, [pc, #12]	@ (8003d14 <MX_APPE_Init+0x1c>)
 8003d06:	2000      	movs	r0, #0
 8003d08:	f000 fd92 	bl	8004830 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8003d0c:	f000 f84e 	bl	8003dac <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8003d10:	bf00      	nop
}
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000294 	.word	0x20000294

08003d18 <Init_Exti>:

void Init_Exti(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8003d1c:	2050      	movs	r0, #80	@ 0x50
 8003d1e:	f7ff ff3b 	bl	8003b98 <LL_EXTI_EnableIT_32_63>

  return;
 8003d22:	bf00      	nop
}
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8003d2a:	bf00      	nop
}
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f006 fd12 	bl	800a764 <OTP_Read>
 8003d40:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	799b      	ldrb	r3, [r3, #6]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff37 	bl	8003bc0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8003d52:	bf00      	nop
 8003d54:	bf00      	nop
}
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <System_Init>:

static void System_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  Init_Exti();
 8003d60:	f7ff ffda 	bl	8003d18 <Init_Exti>

  Init_Rtc();
 8003d64:	f000 f802 	bl	8003d6c <Init_Rtc>

  return;
 8003d68:	bf00      	nop
}
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <Init_Rtc>:

static void Init_Rtc(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8003d70:	4805      	ldr	r0, [pc, #20]	@ (8003d88 <Init_Rtc+0x1c>)
 8003d72:	f7ff ff90 	bl	8003c96 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8003d76:	2100      	movs	r1, #0
 8003d78:	4803      	ldr	r0, [pc, #12]	@ (8003d88 <Init_Rtc+0x1c>)
 8003d7a:	f7ff ff9c 	bl	8003cb6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8003d7e:	4802      	ldr	r0, [pc, #8]	@ (8003d88 <Init_Rtc+0x1c>)
 8003d80:	f7ff ff7c 	bl	8003c7c <LL_RTC_EnableWriteProtection>

  return;
 8003d84:	bf00      	nop
}
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40002800 	.word	0x40002800

08003d8c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8003d90:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003d94:	f7ff ff32 	bl	8003bfc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8003d98:	f007 fc44 	bl	800b624 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8003d9c:	2004      	movs	r0, #4
 8003d9e:	f7ff fee5 	bl	8003b6c <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8003da2:	f003 f815 	bl	8006dd0 <HAL_PWREx_EnableSRAMRetention>

  return;
 8003da6:	bf00      	nop
}
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8003db2:	f006 fa95 	bl	800a2e0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8003db6:	4a11      	ldr	r2, [pc, #68]	@ (8003dfc <appe_Tl_Init+0x50>)
 8003db8:	2100      	movs	r1, #0
 8003dba:	2004      	movs	r0, #4
 8003dbc:	f007 fd70 	bl	800b8a0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <appe_Tl_Init+0x54>)
 8003dc2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e04 <appe_Tl_Init+0x58>)
 8003dc6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8003dc8:	463b      	mov	r3, r7
 8003dca:	4619      	mov	r1, r3
 8003dcc:	480e      	ldr	r0, [pc, #56]	@ (8003e08 <appe_Tl_Init+0x5c>)
 8003dce:	f006 f949 	bl	800a064 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e0c <appe_Tl_Init+0x60>)
 8003dd4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e10 <appe_Tl_Init+0x64>)
 8003dd8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8003dda:	4b0e      	ldr	r3, [pc, #56]	@ (8003e14 <appe_Tl_Init+0x68>)
 8003ddc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8003dde:	f240 533c 	movw	r3, #1340	@ 0x53c
 8003de2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8003de4:	f107 0308 	add.w	r3, r7, #8
 8003de8:	4618      	mov	r0, r3
 8003dea:	f006 fbbb 	bl	800a564 <TL_MM_Init>

  TL_Enable();
 8003dee:	f006 fa71 	bl	800a2d4 <TL_Enable>

  return;
 8003df2:	bf00      	nop
}
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	0800a09d 	.word	0x0800a09d
 8003e00:	20030734 	.word	0x20030734
 8003e04:	08003e19 	.word	0x08003e19
 8003e08:	08003e31 	.word	0x08003e31
 8003e0c:	2003094c 	.word	0x2003094c
 8003e10:	20030840 	.word	0x20030840
 8003e14:	200301f8 	.word	0x200301f8

08003e18 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8003e22:	bf00      	nop
}
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	330b      	adds	r3, #11
 8003e3e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8003e4a:	2b07      	cmp	r3, #7
 8003e4c:	d81f      	bhi.n	8003e8e <APPE_SysUserEvtRx+0x5e>
 8003e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <APPE_SysUserEvtRx+0x24>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e75 	.word	0x08003e75
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003e8f 	.word	0x08003e8f
 8003e60:	08003e8f 	.word	0x08003e8f
 8003e64:	08003e8f 	.word	0x08003e8f
 8003e68:	08003e8f 	.word	0x08003e8f
 8003e6c:	08003e8f 	.word	0x08003e8f
 8003e70:	08003e8f 	.word	0x08003e8f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f005 fea9 	bl	8009bd0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f81b 	bl	8003eba <APPE_SysEvtReadyProcessing>
    break;
 8003e84:	e004      	b.n	8003e90 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f806 	bl	8003e98 <APPE_SysEvtError>
    break;
 8003e8c:	e000      	b.n	8003e90 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8003e8e:	bf00      	nop
  }

  return;
 8003e90:	bf00      	nop
}
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	330b      	adds	r3, #11
 8003ea6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3302      	adds	r3, #2
 8003eac:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8003eae:	bf00      	nop
}
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b08a      	sub	sp, #40	@ 0x28
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8003ec2:	f107 0308 	add.w	r3, r7, #8
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
 8003ece:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	330b      	adds	r3, #11
 8003ede:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d11d      	bne.n	8003f2a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8003eee:	f7ff fe01 	bl	8003af4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8003ef2:	230f      	movs	r3, #15
 8003ef4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8003ef6:	237f      	movs	r3, #127	@ 0x7f
 8003ef8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8003efa:	f7ff fea1 	bl	8003c40 <LL_DBGMCU_GetRevisionID>
 8003efe:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8003f06:	f7ff fe8d 	bl	8003c24 <LL_DBGMCU_GetDeviceID>
 8003f0a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	4618      	mov	r0, r3
 8003f18:	f005 fe44 	bl	8009ba4 <SHCI_C2_Config>

    APP_BLE_Init();
 8003f1c:	f006 fd2c 	bl	800a978 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8003f20:	2100      	movs	r1, #0
 8003f22:	2001      	movs	r0, #1
 8003f24:	f007 fb90 	bl	800b648 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8003f28:	e007      	b.n	8003f3a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d103      	bne.n	8003f3a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
  return;
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
}
 8003f3c:	3728      	adds	r7, #40	@ 0x28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f4a:	f001 fc15 	bl	8005778 <HAL_GetTick>
 8003f4e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f5a:	d00a      	beq.n	8003f72 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8003f5c:	f001 fc24 	bl	80057a8 <HAL_GetTickFreq>
 8003f60:	4603      	mov	r3, r0
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f6a:	e002      	b.n	8003f72 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8003f6c:	f7ff fe76 	bl	8003c5c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8003f70:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8003f72:	f001 fc01 	bl	8005778 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d8f4      	bhi.n	8003f6c <HAL_Delay+0x2a>
  }
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f94:	f007 fb88 	bl	800b6a8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8003fa0:	bf00      	nop
}
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fb8:	f007 fb76 	bl	800b6a8 <UTIL_SEQ_Run>
  return;
 8003fbc:	bf00      	nop
}
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003fcc:	2100      	movs	r1, #0
 8003fce:	2004      	movs	r0, #4
 8003fd0:	f007 fc88 	bl	800b8e4 <UTIL_SEQ_SetTask>
  return;
 8003fd4:	bf00      	nop
}
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8003fe4:	2002      	movs	r0, #2
 8003fe6:	f007 fce9 	bl	800b9bc <UTIL_SEQ_SetEvt>
  return;
 8003fea:	bf00      	nop
}
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8003ffa:	2002      	movs	r0, #2
 8003ffc:	f007 fcfe 	bl	800b9fc <UTIL_SEQ_WaitEvt>
  return;
 8004000:	bf00      	nop
}
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <LL_EXTI_EnableIT_0_31>:
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004010:	4b06      	ldr	r3, [pc, #24]	@ (800402c <LL_EXTI_EnableIT_0_31+0x24>)
 8004012:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004016:	4905      	ldr	r1, [pc, #20]	@ (800402c <LL_EXTI_EnableIT_0_31+0x24>)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	58000800 	.word	0x58000800

08004030 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004038:	4b05      	ldr	r3, [pc, #20]	@ (8004050 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4904      	ldr	r1, [pc, #16]	@ (8004050 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4313      	orrs	r3, r2
 8004042:	600b      	str	r3, [r1, #0]

}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	58000800 	.word	0x58000800

08004054 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800405a:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <ReadRtcSsrValue+0x3c>)
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	b29b      	uxth	r3, r3
 8004060:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8004062:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <ReadRtcSsrValue+0x3c>)
 8004064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004066:	b29b      	uxth	r3, r3
 8004068:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800406a:	e005      	b.n	8004078 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8004070:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <ReadRtcSsrValue+0x3c>)
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	b29b      	uxth	r3, r3
 8004076:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d1f5      	bne.n	800406c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8004080:	683b      	ldr	r3, [r7, #0]
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40002800 	.word	0x40002800

08004094 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	460a      	mov	r2, r1
 800409e:	71fb      	strb	r3, [r7, #7]
 80040a0:	4613      	mov	r3, r2
 80040a2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80040a4:	79ba      	ldrb	r2, [r7, #6]
 80040a6:	491d      	ldr	r1, [pc, #116]	@ (800411c <LinkTimerAfter+0x88>)
 80040a8:	4613      	mov	r3, r2
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4413      	add	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	440b      	add	r3, r1
 80040b2:	3315      	adds	r3, #21
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b06      	cmp	r3, #6
 80040bc:	d009      	beq.n	80040d2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	4916      	ldr	r1, [pc, #88]	@ (800411c <LinkTimerAfter+0x88>)
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	3314      	adds	r3, #20
 80040ce:	79fa      	ldrb	r2, [r7, #7]
 80040d0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80040d2:	79fa      	ldrb	r2, [r7, #7]
 80040d4:	4911      	ldr	r1, [pc, #68]	@ (800411c <LinkTimerAfter+0x88>)
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	440b      	add	r3, r1
 80040e0:	3315      	adds	r3, #21
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80040e6:	79fa      	ldrb	r2, [r7, #7]
 80040e8:	490c      	ldr	r1, [pc, #48]	@ (800411c <LinkTimerAfter+0x88>)
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	440b      	add	r3, r1
 80040f4:	3314      	adds	r3, #20
 80040f6:	79ba      	ldrb	r2, [r7, #6]
 80040f8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80040fa:	79ba      	ldrb	r2, [r7, #6]
 80040fc:	4907      	ldr	r1, [pc, #28]	@ (800411c <LinkTimerAfter+0x88>)
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	440b      	add	r3, r1
 8004108:	3315      	adds	r3, #21
 800410a:	79fa      	ldrb	r2, [r7, #7]
 800410c:	701a      	strb	r2, [r3, #0]

  return;
 800410e:	bf00      	nop
}
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000164 	.word	0x20000164

08004120 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	460a      	mov	r2, r1
 800412a:	71fb      	strb	r3, [r7, #7]
 800412c:	4613      	mov	r3, r2
 800412e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8004130:	4b29      	ldr	r3, [pc, #164]	@ (80041d8 <LinkTimerBefore+0xb8>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	79ba      	ldrb	r2, [r7, #6]
 8004138:	429a      	cmp	r2, r3
 800413a:	d032      	beq.n	80041a2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800413c:	79ba      	ldrb	r2, [r7, #6]
 800413e:	4927      	ldr	r1, [pc, #156]	@ (80041dc <LinkTimerBefore+0xbc>)
 8004140:	4613      	mov	r3, r2
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	440b      	add	r3, r1
 800414a:	3314      	adds	r3, #20
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	4922      	ldr	r1, [pc, #136]	@ (80041dc <LinkTimerBefore+0xbc>)
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	440b      	add	r3, r1
 800415e:	3315      	adds	r3, #21
 8004160:	79fa      	ldrb	r2, [r7, #7]
 8004162:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8004164:	79fa      	ldrb	r2, [r7, #7]
 8004166:	491d      	ldr	r1, [pc, #116]	@ (80041dc <LinkTimerBefore+0xbc>)
 8004168:	4613      	mov	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	440b      	add	r3, r1
 8004172:	3315      	adds	r3, #21
 8004174:	79ba      	ldrb	r2, [r7, #6]
 8004176:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8004178:	79fa      	ldrb	r2, [r7, #7]
 800417a:	4918      	ldr	r1, [pc, #96]	@ (80041dc <LinkTimerBefore+0xbc>)
 800417c:	4613      	mov	r3, r2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	4413      	add	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	440b      	add	r3, r1
 8004186:	3314      	adds	r3, #20
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800418c:	79ba      	ldrb	r2, [r7, #6]
 800418e:	4913      	ldr	r1, [pc, #76]	@ (80041dc <LinkTimerBefore+0xbc>)
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	440b      	add	r3, r1
 800419a:	3314      	adds	r3, #20
 800419c:	79fa      	ldrb	r2, [r7, #7]
 800419e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80041a0:	e014      	b.n	80041cc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80041a2:	79fa      	ldrb	r2, [r7, #7]
 80041a4:	490d      	ldr	r1, [pc, #52]	@ (80041dc <LinkTimerBefore+0xbc>)
 80041a6:	4613      	mov	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4413      	add	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	440b      	add	r3, r1
 80041b0:	3315      	adds	r3, #21
 80041b2:	79ba      	ldrb	r2, [r7, #6]
 80041b4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80041b6:	79ba      	ldrb	r2, [r7, #6]
 80041b8:	4908      	ldr	r1, [pc, #32]	@ (80041dc <LinkTimerBefore+0xbc>)
 80041ba:	4613      	mov	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	440b      	add	r3, r1
 80041c4:	3314      	adds	r3, #20
 80041c6:	79fa      	ldrb	r2, [r7, #7]
 80041c8:	701a      	strb	r2, [r3, #0]
  return;
 80041ca:	bf00      	nop
}
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	200001f4 	.word	0x200001f4
 80041dc:	20000164 	.word	0x20000164

080041e0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80041ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004324 <linkTimer+0x144>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b06      	cmp	r3, #6
 80041f2:	d118      	bne.n	8004226 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80041f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004324 <linkTimer+0x144>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004328 <linkTimer+0x148>)
 80041fc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80041fe:	4a49      	ldr	r2, [pc, #292]	@ (8004324 <linkTimer+0x144>)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8004204:	79fa      	ldrb	r2, [r7, #7]
 8004206:	4949      	ldr	r1, [pc, #292]	@ (800432c <linkTimer+0x14c>)
 8004208:	4613      	mov	r3, r2
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	3315      	adds	r3, #21
 8004214:	2206      	movs	r2, #6
 8004216:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8004218:	4b45      	ldr	r3, [pc, #276]	@ (8004330 <linkTimer+0x150>)
 800421a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800421e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	81fb      	strh	r3, [r7, #14]
 8004224:	e078      	b.n	8004318 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8004226:	f000 f909 	bl	800443c <ReturnTimeElapsed>
 800422a:	4603      	mov	r3, r0
 800422c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800422e:	79fa      	ldrb	r2, [r7, #7]
 8004230:	493e      	ldr	r1, [pc, #248]	@ (800432c <linkTimer+0x14c>)
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	440b      	add	r3, r1
 800423c:	3308      	adds	r3, #8
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	79fa      	ldrb	r2, [r7, #7]
 8004244:	4419      	add	r1, r3
 8004246:	4839      	ldr	r0, [pc, #228]	@ (800432c <linkTimer+0x14c>)
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4403      	add	r3, r0
 8004252:	3308      	adds	r3, #8
 8004254:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8004256:	79fa      	ldrb	r2, [r7, #7]
 8004258:	4934      	ldr	r1, [pc, #208]	@ (800432c <linkTimer+0x14c>)
 800425a:	4613      	mov	r3, r2
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4413      	add	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	440b      	add	r3, r1
 8004264:	3308      	adds	r3, #8
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800426a:	4b2e      	ldr	r3, [pc, #184]	@ (8004324 <linkTimer+0x144>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	4619      	mov	r1, r3
 8004272:	4a2e      	ldr	r2, [pc, #184]	@ (800432c <linkTimer+0x14c>)
 8004274:	460b      	mov	r3, r1
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	440b      	add	r3, r1
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4413      	add	r3, r2
 800427e:	3308      	adds	r3, #8
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	d337      	bcc.n	80042f8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8004288:	4b26      	ldr	r3, [pc, #152]	@ (8004324 <linkTimer+0x144>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800428e:	7b7a      	ldrb	r2, [r7, #13]
 8004290:	4926      	ldr	r1, [pc, #152]	@ (800432c <linkTimer+0x14c>)
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	440b      	add	r3, r1
 800429c:	3315      	adds	r3, #21
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80042a2:	e013      	b.n	80042cc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80042a4:	7b7a      	ldrb	r2, [r7, #13]
 80042a6:	4921      	ldr	r1, [pc, #132]	@ (800432c <linkTimer+0x14c>)
 80042a8:	4613      	mov	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4413      	add	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	440b      	add	r3, r1
 80042b2:	3315      	adds	r3, #21
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80042b8:	7b7a      	ldrb	r2, [r7, #13]
 80042ba:	491c      	ldr	r1, [pc, #112]	@ (800432c <linkTimer+0x14c>)
 80042bc:	4613      	mov	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4413      	add	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	440b      	add	r3, r1
 80042c6:	3315      	adds	r3, #21
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80042cc:	7b3b      	ldrb	r3, [r7, #12]
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d00b      	beq.n	80042ea <linkTimer+0x10a>
 80042d2:	7b3a      	ldrb	r2, [r7, #12]
 80042d4:	4915      	ldr	r1, [pc, #84]	@ (800432c <linkTimer+0x14c>)
 80042d6:	4613      	mov	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	440b      	add	r3, r1
 80042e0:	3308      	adds	r3, #8
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d2dc      	bcs.n	80042a4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80042ea:	7b7a      	ldrb	r2, [r7, #13]
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fecf 	bl	8004094 <LinkTimerAfter>
 80042f6:	e00f      	b.n	8004318 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80042f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <linkTimer+0x144>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ff0c 	bl	8004120 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8004308:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <linkTimer+0x144>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <linkTimer+0x148>)
 8004310:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8004312:	4a04      	ldr	r2, [pc, #16]	@ (8004324 <linkTimer+0x144>)
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8004318:	89fb      	ldrh	r3, [r7, #14]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200001f4 	.word	0x200001f4
 8004328:	200001f5 	.word	0x200001f5
 800432c:	20000164 	.word	0x20000164
 8004330:	200001f8 	.word	0x200001f8

08004334 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	460a      	mov	r2, r1
 800433e:	71fb      	strb	r3, [r7, #7]
 8004340:	4613      	mov	r3, r2
 8004342:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8004344:	4b39      	ldr	r3, [pc, #228]	@ (800442c <UnlinkTimer+0xf8>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	79fa      	ldrb	r2, [r7, #7]
 800434c:	429a      	cmp	r2, r3
 800434e:	d111      	bne.n	8004374 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8004350:	4b36      	ldr	r3, [pc, #216]	@ (800442c <UnlinkTimer+0xf8>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b2da      	uxtb	r2, r3
 8004356:	4b36      	ldr	r3, [pc, #216]	@ (8004430 <UnlinkTimer+0xfc>)
 8004358:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800435a:	79fa      	ldrb	r2, [r7, #7]
 800435c:	4935      	ldr	r1, [pc, #212]	@ (8004434 <UnlinkTimer+0x100>)
 800435e:	4613      	mov	r3, r2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	4413      	add	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	440b      	add	r3, r1
 8004368:	3315      	adds	r3, #21
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4b2f      	ldr	r3, [pc, #188]	@ (800442c <UnlinkTimer+0xf8>)
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e03e      	b.n	80043f2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8004374:	79fa      	ldrb	r2, [r7, #7]
 8004376:	492f      	ldr	r1, [pc, #188]	@ (8004434 <UnlinkTimer+0x100>)
 8004378:	4613      	mov	r3, r2
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	440b      	add	r3, r1
 8004382:	3314      	adds	r3, #20
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8004388:	79fa      	ldrb	r2, [r7, #7]
 800438a:	492a      	ldr	r1, [pc, #168]	@ (8004434 <UnlinkTimer+0x100>)
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	440b      	add	r3, r1
 8004396:	3315      	adds	r3, #21
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800439c:	79f9      	ldrb	r1, [r7, #7]
 800439e:	7bfa      	ldrb	r2, [r7, #15]
 80043a0:	4824      	ldr	r0, [pc, #144]	@ (8004434 <UnlinkTimer+0x100>)
 80043a2:	460b      	mov	r3, r1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	440b      	add	r3, r1
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4403      	add	r3, r0
 80043ac:	3315      	adds	r3, #21
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2d8      	uxtb	r0, r3
 80043b2:	4920      	ldr	r1, [pc, #128]	@ (8004434 <UnlinkTimer+0x100>)
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	440b      	add	r3, r1
 80043be:	3315      	adds	r3, #21
 80043c0:	4602      	mov	r2, r0
 80043c2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80043c4:	7bbb      	ldrb	r3, [r7, #14]
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d013      	beq.n	80043f2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80043ca:	79f9      	ldrb	r1, [r7, #7]
 80043cc:	7bba      	ldrb	r2, [r7, #14]
 80043ce:	4819      	ldr	r0, [pc, #100]	@ (8004434 <UnlinkTimer+0x100>)
 80043d0:	460b      	mov	r3, r1
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	440b      	add	r3, r1
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4403      	add	r3, r0
 80043da:	3314      	adds	r3, #20
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	b2d8      	uxtb	r0, r3
 80043e0:	4914      	ldr	r1, [pc, #80]	@ (8004434 <UnlinkTimer+0x100>)
 80043e2:	4613      	mov	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	440b      	add	r3, r1
 80043ec:	3314      	adds	r3, #20
 80043ee:	4602      	mov	r2, r0
 80043f0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80043f2:	79fa      	ldrb	r2, [r7, #7]
 80043f4:	490f      	ldr	r1, [pc, #60]	@ (8004434 <UnlinkTimer+0x100>)
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	440b      	add	r3, r1
 8004400:	330c      	adds	r3, #12
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8004406:	4b09      	ldr	r3, [pc, #36]	@ (800442c <UnlinkTimer+0xf8>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b06      	cmp	r3, #6
 800440e:	d107      	bne.n	8004420 <UnlinkTimer+0xec>
 8004410:	79bb      	ldrb	r3, [r7, #6]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d104      	bne.n	8004420 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8004416:	4b08      	ldr	r3, [pc, #32]	@ (8004438 <UnlinkTimer+0x104>)
 8004418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800441c:	601a      	str	r2, [r3, #0]
  }

  return;
 800441e:	bf00      	nop
 8004420:	bf00      	nop
}
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	200001f4 	.word	0x200001f4
 8004430:	200001f5 	.word	0x200001f5
 8004434:	20000164 	.word	0x20000164
 8004438:	200001f8 	.word	0x200001f8

0800443c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8004442:	4b1a      	ldr	r3, [pc, #104]	@ (80044ac <ReturnTimeElapsed+0x70>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800444a:	d026      	beq.n	800449a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800444c:	f7ff fe02 	bl	8004054 <ReadRtcSsrValue>
 8004450:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8004452:	4b16      	ldr	r3, [pc, #88]	@ (80044ac <ReturnTimeElapsed+0x70>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d805      	bhi.n	8004468 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800445c:	4b13      	ldr	r3, [pc, #76]	@ (80044ac <ReturnTimeElapsed+0x70>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	e00a      	b.n	800447e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8004468:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <ReturnTimeElapsed+0x74>)
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8004474:	4b0d      	ldr	r3, [pc, #52]	@ (80044ac <ReturnTimeElapsed+0x70>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	4413      	add	r3, r2
 800447c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800447e:	4b0d      	ldr	r3, [pc, #52]	@ (80044b4 <ReturnTimeElapsed+0x78>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800448c:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <ReturnTimeElapsed+0x7c>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	40d3      	lsrs	r3, r2
 8004496:	607b      	str	r3, [r7, #4]
 8004498:	e001      	b.n	800449e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	b29b      	uxth	r3, r3
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	200001f8 	.word	0x200001f8
 80044b0:	20000200 	.word	0x20000200
 80044b4:	200001fe 	.word	0x200001fe
 80044b8:	200001fd 	.word	0x200001fd

080044bc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d108      	bne.n	80044de <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80044cc:	f7ff fdc2 	bl	8004054 <ReadRtcSsrValue>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4a21      	ldr	r2, [pc, #132]	@ (8004558 <RestartWakeupCounter+0x9c>)
 80044d4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80044d6:	2003      	movs	r0, #3
 80044d8:	f001 faef 	bl	8005aba <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80044dc:	e039      	b.n	8004552 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d803      	bhi.n	80044ec <RestartWakeupCounter+0x30>
 80044e4:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <RestartWakeupCounter+0xa0>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d002      	beq.n	80044f2 <RestartWakeupCounter+0x36>
      Value -= 1;
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80044f2:	bf00      	nop
 80044f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <RestartWakeupCounter+0xa4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f8      	beq.n	80044f4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8004502:	4b17      	ldr	r3, [pc, #92]	@ (8004560 <RestartWakeupCounter+0xa4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <RestartWakeupCounter+0xa4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004512:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8004514:	4b13      	ldr	r3, [pc, #76]	@ (8004564 <RestartWakeupCounter+0xa8>)
 8004516:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800451a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800451c:	2003      	movs	r0, #3
 800451e:	f001 fada 	bl	8005ad6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8004522:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <RestartWakeupCounter+0xac>)
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	041b      	lsls	r3, r3, #16
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	490e      	ldr	r1, [pc, #56]	@ (8004568 <RestartWakeupCounter+0xac>)
 800452e:	4313      	orrs	r3, r2
 8004530:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8004532:	f7ff fd8f 	bl	8004054 <ReadRtcSsrValue>
 8004536:	4603      	mov	r3, r0
 8004538:	4a07      	ldr	r2, [pc, #28]	@ (8004558 <RestartWakeupCounter+0x9c>)
 800453a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800453c:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <RestartWakeupCounter+0xa4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <RestartWakeupCounter+0xa4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800454a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800454c:	f3af 8000 	nop.w
  return ;
 8004550:	bf00      	nop
}
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	200001f8 	.word	0x200001f8
 800455c:	200001fd 	.word	0x200001fd
 8004560:	20000294 	.word	0x20000294
 8004564:	58000800 	.word	0x58000800
 8004568:	40002800 	.word	0x40002800

0800456c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8004572:	4b45      	ldr	r3, [pc, #276]	@ (8004688 <RescheduleTimerList+0x11c>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800457a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457e:	d107      	bne.n	8004590 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8004580:	bf00      	nop
 8004582:	4b42      	ldr	r3, [pc, #264]	@ (800468c <RescheduleTimerList+0x120>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f8      	bne.n	8004582 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8004590:	4b3e      	ldr	r3, [pc, #248]	@ (800468c <RescheduleTimerList+0x120>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	4b3d      	ldr	r3, [pc, #244]	@ (800468c <RescheduleTimerList+0x120>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800459e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80045a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004690 <RescheduleTimerList+0x124>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	493a      	ldr	r1, [pc, #232]	@ (8004694 <RescheduleTimerList+0x128>)
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	440b      	add	r3, r1
 80045b4:	3308      	adds	r3, #8
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80045ba:	f7ff ff3f 	bl	800443c <ReturnTimeElapsed>
 80045be:	4603      	mov	r3, r0
 80045c0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d205      	bcs.n	80045d6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80045ce:	4b32      	ldr	r3, [pc, #200]	@ (8004698 <RescheduleTimerList+0x12c>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
 80045d4:	e04d      	b.n	8004672 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	4a30      	ldr	r2, [pc, #192]	@ (800469c <RescheduleTimerList+0x130>)
 80045da:	8812      	ldrh	r2, [r2, #0]
 80045dc:	b292      	uxth	r2, r2
 80045de:	4413      	add	r3, r2
 80045e0:	461a      	mov	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d906      	bls.n	80045f6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80045e8:	4b2c      	ldr	r3, [pc, #176]	@ (800469c <RescheduleTimerList+0x130>)
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80045ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004698 <RescheduleTimerList+0x12c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e03d      	b.n	8004672 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8004600:	4b25      	ldr	r3, [pc, #148]	@ (8004698 <RescheduleTimerList+0x12c>)
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8004606:	e034      	b.n	8004672 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8004608:	7bfa      	ldrb	r2, [r7, #15]
 800460a:	4922      	ldr	r1, [pc, #136]	@ (8004694 <RescheduleTimerList+0x128>)
 800460c:	4613      	mov	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	440b      	add	r3, r1
 8004616:	3308      	adds	r3, #8
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	429a      	cmp	r2, r3
 800461e:	d20a      	bcs.n	8004636 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	491c      	ldr	r1, [pc, #112]	@ (8004694 <RescheduleTimerList+0x128>)
 8004624:	4613      	mov	r3, r2
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4413      	add	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	440b      	add	r3, r1
 800462e:	3308      	adds	r3, #8
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e013      	b.n	800465e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8004636:	7bfa      	ldrb	r2, [r7, #15]
 8004638:	4916      	ldr	r1, [pc, #88]	@ (8004694 <RescheduleTimerList+0x128>)
 800463a:	4613      	mov	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	440b      	add	r3, r1
 8004644:	3308      	adds	r3, #8
 8004646:	6819      	ldr	r1, [r3, #0]
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	7bfa      	ldrb	r2, [r7, #15]
 800464c:	1ac9      	subs	r1, r1, r3
 800464e:	4811      	ldr	r0, [pc, #68]	@ (8004694 <RescheduleTimerList+0x128>)
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4403      	add	r3, r0
 800465a:	3308      	adds	r3, #8
 800465c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800465e:	7bfa      	ldrb	r2, [r7, #15]
 8004660:	490c      	ldr	r1, [pc, #48]	@ (8004694 <RescheduleTimerList+0x128>)
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	440b      	add	r3, r1
 800466c:	3315      	adds	r3, #21
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	2b06      	cmp	r3, #6
 8004676:	d1c7      	bne.n	8004608 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8004678:	89bb      	ldrh	r3, [r7, #12]
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff ff1e 	bl	80044bc <RestartWakeupCounter>

  return ;
 8004680:	bf00      	nop
}
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40002800 	.word	0x40002800
 800468c:	20000294 	.word	0x20000294
 8004690:	200001f4 	.word	0x200001f4
 8004694:	20000164 	.word	0x20000164
 8004698:	200001fc 	.word	0x200001fc
 800469c:	20000202 	.word	0x20000202

080046a0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	@ 0x28
 80046a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a6:	f3ef 8310 	mrs	r3, PRIMASK
 80046aa:	617b      	str	r3, [r7, #20]
  return(result);
 80046ac:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80046b0:	b672      	cpsid	i
}
 80046b2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80046b4:	4b59      	ldr	r3, [pc, #356]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	22ca      	movs	r2, #202	@ 0xca
 80046ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80046bc:	4b57      	ldr	r3, [pc, #348]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2253      	movs	r2, #83	@ 0x53
 80046c2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80046c4:	4b55      	ldr	r3, [pc, #340]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	4b54      	ldr	r3, [pc, #336]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80046d4:	4b52      	ldr	r3, [pc, #328]	@ (8004820 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80046dc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80046e0:	4950      	ldr	r1, [pc, #320]	@ (8004824 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80046e2:	4613      	mov	r3, r2
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	4413      	add	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	440b      	add	r3, r1
 80046ec:	330c      	adds	r3, #12
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d16e      	bne.n	80047d4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80046f6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80046fa:	494a      	ldr	r1, [pc, #296]	@ (8004824 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80046fc:	4613      	mov	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4413      	add	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	440b      	add	r3, r1
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800470a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800470e:	4945      	ldr	r1, [pc, #276]	@ (8004824 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8004710:	4613      	mov	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4413      	add	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	440b      	add	r3, r1
 800471a:	3310      	adds	r3, #16
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8004720:	4b41      	ldr	r3, [pc, #260]	@ (8004828 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d04c      	beq.n	80047c4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800472a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800472e:	493d      	ldr	r1, [pc, #244]	@ (8004824 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8004730:	4613      	mov	r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	330d      	adds	r3, #13
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d124      	bne.n	800478e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8004744:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004748:	2101      	movs	r1, #1
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fdf2 	bl	8004334 <UnlinkTimer>
 8004750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004752:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f383 8810 	msr	PRIMASK, r3
}
 800475a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800475c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004760:	4930      	ldr	r1, [pc, #192]	@ (8004824 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8004762:	4613      	mov	r3, r2
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	440b      	add	r3, r1
 800476c:	3304      	adds	r3, #4
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f9b8 	bl	8004aec <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800477c:	4b27      	ldr	r3, [pc, #156]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	22ca      	movs	r2, #202	@ 0xca
 8004782:	625a      	str	r2, [r3, #36]	@ 0x24
 8004784:	4b25      	ldr	r3, [pc, #148]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2253      	movs	r2, #83	@ 0x53
 800478a:	625a      	str	r2, [r3, #36]	@ 0x24
 800478c:	e012      	b.n	80047b4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f383 8810 	msr	PRIMASK, r3
}
 8004798:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800479a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f920 	bl	80049e4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80047a4:	4b1d      	ldr	r3, [pc, #116]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	22ca      	movs	r2, #202	@ 0xca
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80047ac:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2253      	movs	r2, #83	@ 0x53
 80047b2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80047b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	4619      	mov	r1, r3
 80047bc:	69b8      	ldr	r0, [r7, #24]
 80047be:	f000 fa1b 	bl	8004bf8 <HW_TS_RTC_Int_AppNot>
 80047c2:	e022      	b.n	800480a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80047c4:	f7ff fed2 	bl	800456c <RescheduleTimerList>
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f383 8810 	msr	PRIMASK, r3
}
 80047d2:	e01a      	b.n	800480a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80047d4:	bf00      	nop
 80047d6:	4b11      	ldr	r3, [pc, #68]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f8      	beq.n	80047d6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80047e4:	4b0d      	ldr	r3, [pc, #52]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	4b0b      	ldr	r3, [pc, #44]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80047f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80047f6:	4b0d      	ldr	r3, [pc, #52]	@ (800482c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80047f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80047fc:	60da      	str	r2, [r3, #12]
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f383 8810 	msr	PRIMASK, r3
}
 8004808:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800480a:	4b04      	ldr	r3, [pc, #16]	@ (800481c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	22ff      	movs	r2, #255	@ 0xff
 8004810:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8004812:	bf00      	nop
}
 8004814:	3728      	adds	r7, #40	@ 0x28
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000294 	.word	0x20000294
 8004820:	200001f4 	.word	0x200001f4
 8004824:	20000164 	.word	0x20000164
 8004828:	200001fc 	.word	0x200001fc
 800482c:	58000800 	.word	0x58000800

08004830 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	6039      	str	r1, [r7, #0]
 800483a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800483c:	4b5e      	ldr	r3, [pc, #376]	@ (80049b8 <HW_TS_Init+0x188>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	22ca      	movs	r2, #202	@ 0xca
 8004842:	625a      	str	r2, [r3, #36]	@ 0x24
 8004844:	4b5c      	ldr	r3, [pc, #368]	@ (80049b8 <HW_TS_Init+0x188>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2253      	movs	r2, #83	@ 0x53
 800484a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800484c:	4b5b      	ldr	r3, [pc, #364]	@ (80049bc <HW_TS_Init+0x18c>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a5a      	ldr	r2, [pc, #360]	@ (80049bc <HW_TS_Init+0x18c>)
 8004852:	f043 0320 	orr.w	r3, r3, #32
 8004856:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8004858:	4b58      	ldr	r3, [pc, #352]	@ (80049bc <HW_TS_Init+0x18c>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	b2db      	uxtb	r3, r3
 8004864:	f1c3 0304 	rsb	r3, r3, #4
 8004868:	b2da      	uxtb	r2, r3
 800486a:	4b55      	ldr	r3, [pc, #340]	@ (80049c0 <HW_TS_Init+0x190>)
 800486c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800486e:	4b53      	ldr	r3, [pc, #332]	@ (80049bc <HW_TS_Init+0x18c>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004876:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800487a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	fa92 f2a2 	rbit	r2, r2
 8004882:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	2a00      	cmp	r2, #0
 800488c:	d101      	bne.n	8004892 <HW_TS_Init+0x62>
  {
    return 32U;
 800488e:	2220      	movs	r2, #32
 8004890:	e003      	b.n	800489a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	fab2 f282 	clz	r2, r2
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	40d3      	lsrs	r3, r2
 800489c:	b2db      	uxtb	r3, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	4b48      	ldr	r3, [pc, #288]	@ (80049c4 <HW_TS_Init+0x194>)
 80048a4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80048a6:	4b45      	ldr	r3, [pc, #276]	@ (80049bc <HW_TS_Init+0x18c>)
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	4b44      	ldr	r3, [pc, #272]	@ (80049c8 <HW_TS_Init+0x198>)
 80048b8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80048ba:	4b43      	ldr	r3, [pc, #268]	@ (80049c8 <HW_TS_Init+0x198>)
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	3b01      	subs	r3, #1
 80048c0:	4a40      	ldr	r2, [pc, #256]	@ (80049c4 <HW_TS_Init+0x194>)
 80048c2:	7812      	ldrb	r2, [r2, #0]
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80048cc:	4a3c      	ldr	r2, [pc, #240]	@ (80049c0 <HW_TS_Init+0x190>)
 80048ce:	7812      	ldrb	r2, [r2, #0]
 80048d0:	40d3      	lsrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80048da:	4293      	cmp	r3, r2
 80048dc:	d904      	bls.n	80048e8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80048de:	4b3b      	ldr	r3, [pc, #236]	@ (80049cc <HW_TS_Init+0x19c>)
 80048e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048e4:	801a      	strh	r2, [r3, #0]
 80048e6:	e003      	b.n	80048f0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	4b37      	ldr	r3, [pc, #220]	@ (80049cc <HW_TS_Init+0x19c>)
 80048ee:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80048f0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80048f4:	f7ff fb9c 	bl	8004030 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80048f8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80048fc:	f7ff fb84 	bl	8004008 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d13d      	bne.n	8004982 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8004906:	4b32      	ldr	r3, [pc, #200]	@ (80049d0 <HW_TS_Init+0x1a0>)
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800490c:	4b31      	ldr	r3, [pc, #196]	@ (80049d4 <HW_TS_Init+0x1a4>)
 800490e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004912:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8004914:	2300      	movs	r3, #0
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e00c      	b.n	8004934 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800491a:	7ffa      	ldrb	r2, [r7, #31]
 800491c:	492e      	ldr	r1, [pc, #184]	@ (80049d8 <HW_TS_Init+0x1a8>)
 800491e:	4613      	mov	r3, r2
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	4413      	add	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	440b      	add	r3, r1
 8004928:	330c      	adds	r3, #12
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800492e:	7ffb      	ldrb	r3, [r7, #31]
 8004930:	3301      	adds	r3, #1
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	7ffb      	ldrb	r3, [r7, #31]
 8004936:	2b05      	cmp	r3, #5
 8004938:	d9ef      	bls.n	800491a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800493a:	4b28      	ldr	r3, [pc, #160]	@ (80049dc <HW_TS_Init+0x1ac>)
 800493c:	2206      	movs	r2, #6
 800493e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8004940:	4b1d      	ldr	r3, [pc, #116]	@ (80049b8 <HW_TS_Init+0x188>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	4b1c      	ldr	r3, [pc, #112]	@ (80049b8 <HW_TS_Init+0x188>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800494e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8004950:	4b19      	ldr	r3, [pc, #100]	@ (80049b8 <HW_TS_Init+0x188>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	4b17      	ldr	r3, [pc, #92]	@ (80049b8 <HW_TS_Init+0x188>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004960:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8004962:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <HW_TS_Init+0x1b0>)
 8004964:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004968:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800496a:	2003      	movs	r0, #3
 800496c:	f001 f8b3 	bl	8005ad6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8004970:	4b11      	ldr	r3, [pc, #68]	@ (80049b8 <HW_TS_Init+0x188>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	4b10      	ldr	r3, [pc, #64]	@ (80049b8 <HW_TS_Init+0x188>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	e009      	b.n	8004996 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8004982:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <HW_TS_Init+0x188>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8004990:	2003      	movs	r0, #3
 8004992:	f001 f892 	bl	8005aba <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004996:	4b08      	ldr	r3, [pc, #32]	@ (80049b8 <HW_TS_Init+0x188>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	22ff      	movs	r2, #255	@ 0xff
 800499c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800499e:	2200      	movs	r2, #0
 80049a0:	2103      	movs	r1, #3
 80049a2:	2003      	movs	r0, #3
 80049a4:	f001 f847 	bl	8005a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80049a8:	2003      	movs	r0, #3
 80049aa:	f001 f85e 	bl	8005a6a <HAL_NVIC_EnableIRQ>

  return;
 80049ae:	bf00      	nop
}
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000294 	.word	0x20000294
 80049bc:	40002800 	.word	0x40002800
 80049c0:	200001fd 	.word	0x200001fd
 80049c4:	200001fe 	.word	0x200001fe
 80049c8:	20000200 	.word	0x20000200
 80049cc:	20000202 	.word	0x20000202
 80049d0:	200001fc 	.word	0x200001fc
 80049d4:	200001f8 	.word	0x200001f8
 80049d8:	20000164 	.word	0x20000164
 80049dc:	200001f4 	.word	0x200001f4
 80049e0:	58000800 	.word	0x58000800

080049e4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ee:	f3ef 8310 	mrs	r3, PRIMASK
 80049f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80049f4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80049f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80049f8:	b672      	cpsid	i
}
 80049fa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80049fc:	2003      	movs	r0, #3
 80049fe:	f001 f842 	bl	8005a86 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8004a02:	4b34      	ldr	r3, [pc, #208]	@ (8004ad4 <HW_TS_Stop+0xf0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	22ca      	movs	r2, #202	@ 0xca
 8004a08:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a0a:	4b32      	ldr	r3, [pc, #200]	@ (8004ad4 <HW_TS_Stop+0xf0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2253      	movs	r2, #83	@ 0x53
 8004a10:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8004a12:	79fa      	ldrb	r2, [r7, #7]
 8004a14:	4930      	ldr	r1, [pc, #192]	@ (8004ad8 <HW_TS_Stop+0xf4>)
 8004a16:	4613      	mov	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	440b      	add	r3, r1
 8004a20:	330c      	adds	r3, #12
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d142      	bne.n	8004ab0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fc80 	bl	8004334 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8004a34:	4b29      	ldr	r3, [pc, #164]	@ (8004adc <HW_TS_Stop+0xf8>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	2b06      	cmp	r3, #6
 8004a3e:	d12f      	bne.n	8004aa0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8004a40:	4b27      	ldr	r3, [pc, #156]	@ (8004ae0 <HW_TS_Stop+0xfc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4c:	d107      	bne.n	8004a5e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8004a4e:	bf00      	nop
 8004a50:	4b20      	ldr	r3, [pc, #128]	@ (8004ad4 <HW_TS_Stop+0xf0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f8      	bne.n	8004a50 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <HW_TS_Stop+0xf0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad4 <HW_TS_Stop+0xf0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a6c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8004a6e:	bf00      	nop
 8004a70:	4b18      	ldr	r3, [pc, #96]	@ (8004ad4 <HW_TS_Stop+0xf0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f8      	beq.n	8004a70 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8004a7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ad4 <HW_TS_Stop+0xf0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	4b13      	ldr	r3, [pc, #76]	@ (8004ad4 <HW_TS_Stop+0xf0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004a8e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8004a90:	4b14      	ldr	r3, [pc, #80]	@ (8004ae4 <HW_TS_Stop+0x100>)
 8004a92:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004a96:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8004a98:	2003      	movs	r0, #3
 8004a9a:	f001 f81c 	bl	8005ad6 <HAL_NVIC_ClearPendingIRQ>
 8004a9e:	e007      	b.n	8004ab0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8004aa0:	4b11      	ldr	r3, [pc, #68]	@ (8004ae8 <HW_TS_Stop+0x104>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	7cfa      	ldrb	r2, [r7, #19]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8004aac:	f7ff fd5e 	bl	800456c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004ab0:	4b08      	ldr	r3, [pc, #32]	@ (8004ad4 <HW_TS_Stop+0xf0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	22ff      	movs	r2, #255	@ 0xff
 8004ab6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8004ab8:	2003      	movs	r0, #3
 8004aba:	f000 ffd6 	bl	8005a6a <HAL_NVIC_EnableIRQ>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f383 8810 	msr	PRIMASK, r3
}
 8004ac8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8004aca:	bf00      	nop
}
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000294 	.word	0x20000294
 8004ad8:	20000164 	.word	0x20000164
 8004adc:	200001f4 	.word	0x200001f4
 8004ae0:	40002800 	.word	0x40002800
 8004ae4:	58000800 	.word	0x58000800
 8004ae8:	200001f5 	.word	0x200001f5

08004aec <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	6039      	str	r1, [r7, #0]
 8004af6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8004af8:	79fa      	ldrb	r2, [r7, #7]
 8004afa:	493b      	ldr	r1, [pc, #236]	@ (8004be8 <HW_TS_Start+0xfc>)
 8004afc:	4613      	mov	r3, r2
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4413      	add	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	440b      	add	r3, r1
 8004b06:	330c      	adds	r3, #12
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d103      	bne.n	8004b18 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ff66 	bl	80049e4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b18:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004b20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b22:	b672      	cpsid	i
}
 8004b24:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8004b26:	2003      	movs	r0, #3
 8004b28:	f000 ffad 	bl	8005a86 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8004b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8004bec <HW_TS_Start+0x100>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	22ca      	movs	r2, #202	@ 0xca
 8004b32:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b34:	4b2d      	ldr	r3, [pc, #180]	@ (8004bec <HW_TS_Start+0x100>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2253      	movs	r2, #83	@ 0x53
 8004b3a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8004b3c:	79fa      	ldrb	r2, [r7, #7]
 8004b3e:	492a      	ldr	r1, [pc, #168]	@ (8004be8 <HW_TS_Start+0xfc>)
 8004b40:	4613      	mov	r3, r2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4413      	add	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	440b      	add	r3, r1
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8004b50:	79fa      	ldrb	r2, [r7, #7]
 8004b52:	4925      	ldr	r1, [pc, #148]	@ (8004be8 <HW_TS_Start+0xfc>)
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	440b      	add	r3, r1
 8004b5e:	3308      	adds	r3, #8
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8004b64:	79fa      	ldrb	r2, [r7, #7]
 8004b66:	4920      	ldr	r1, [pc, #128]	@ (8004be8 <HW_TS_Start+0xfc>)
 8004b68:	4613      	mov	r3, r2
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	4413      	add	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	440b      	add	r3, r1
 8004b72:	3304      	adds	r3, #4
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fb30 	bl	80041e0 <linkTimer>
 8004b80:	4603      	mov	r3, r0
 8004b82:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8004b84:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf0 <HW_TS_Start+0x104>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8004b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf4 <HW_TS_Start+0x108>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	7c7a      	ldrb	r2, [r7, #17]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d002      	beq.n	8004b9c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8004b96:	f7ff fce9 	bl	800456c <RescheduleTimerList>
 8004b9a:	e013      	b.n	8004bc4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8004b9c:	79fa      	ldrb	r2, [r7, #7]
 8004b9e:	4912      	ldr	r1, [pc, #72]	@ (8004be8 <HW_TS_Start+0xfc>)
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	4413      	add	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	440b      	add	r3, r1
 8004baa:	3308      	adds	r3, #8
 8004bac:	6819      	ldr	r1, [r3, #0]
 8004bae:	8a7b      	ldrh	r3, [r7, #18]
 8004bb0:	79fa      	ldrb	r2, [r7, #7]
 8004bb2:	1ac9      	subs	r1, r1, r3
 8004bb4:	480c      	ldr	r0, [pc, #48]	@ (8004be8 <HW_TS_Start+0xfc>)
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4403      	add	r3, r0
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004bc4:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <HW_TS_Start+0x100>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	22ff      	movs	r2, #255	@ 0xff
 8004bca:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8004bcc:	2003      	movs	r0, #3
 8004bce:	f000 ff4c 	bl	8005a6a <HAL_NVIC_EnableIRQ>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f383 8810 	msr	PRIMASK, r3
}
 8004bdc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8004bde:	bf00      	nop
}
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000164 	.word	0x20000164
 8004bec:	20000294 	.word	0x20000294
 8004bf0:	200001f4 	.word	0x200001f4
 8004bf4:	200001f5 	.word	0x200001f5

08004bf8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	460b      	mov	r3, r1
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4798      	blx	r3

  return;
 8004c0a:	bf00      	nop
}
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4013      	ands	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c36:	68fb      	ldr	r3, [r7, #12]
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <main>:
  */
uint8_t char_buf[512];
double q0, q1, q2, q3;

int main(void)
{
 8004c44:	b5b0      	push	{r4, r5, r7, lr}
 8004c46:	b0a6      	sub	sp, #152	@ 0x98
 8004c48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c4a:	f000 fd27 	bl	800569c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8004c4e:	f7ff f845 	bl	8003cdc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c52:	f000 f9e3 	bl	800501c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004c56:	f000 fa26 	bl	80050a6 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8004c5a:	f000 fa81 	bl	8005160 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c5e:	f000 facb 	bl	80051f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004c62:	f000 fa3d 	bl	80050e0 <MX_I2C1_Init>
  MX_RTC_Init();
 8004c66:	f000 fa97 	bl	8005198 <MX_RTC_Init>
  MX_RF_Init();
 8004c6a:	f000 fa8d 	bl	8005188 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8004c6e:	f7ff f843 	bl	8003cf8 <MX_APPE_Init>

  icm20948_set_i2c_bus(&hi2c1);
 8004c72:	4803      	ldr	r0, [pc, #12]	@ (8004c80 <main+0x3c>)
 8004c74:	f7fe f968 	bl	8002f48 <icm20948_set_i2c_bus>

  for(uint8_t i = 4; i < 6; i++)
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8004c7e:	e033      	b.n	8004ce8 <main+0xa4>
 8004c80:	20000204 	.word	0x20000204
  {
	  set_i2c_mux_index(&hi2c1, i);
 8004c84:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004c88:	4619      	mov	r1, r3
 8004c8a:	48cc      	ldr	r0, [pc, #816]	@ (8004fbc <main+0x378>)
 8004c8c:	f000 fada 	bl	8005244 <set_i2c_mux_index>
	  icm20948_startup_default(true);
 8004c90:	2001      	movs	r0, #1
 8004c92:	f7fe fe87 	bl	80039a4 <icm20948_startup_default>
	  if(icm20948_initialize_DMP())return;
 8004c96:	f7fe f969 	bl	8002f6c <icm20948_initialize_DMP>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f040 81b1 	bne.w	8005004 <main+0x3c0>
	  HAL_Delay(1000);
 8004ca2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ca6:	f7ff f94c 	bl	8003f42 <HAL_Delay>
	  if(icm20948_enable_DMP_sensor(INV_ICM20948_SENSOR_ORIENTATION, 1))return;
 8004caa:	2101      	movs	r1, #1
 8004cac:	2012      	movs	r0, #18
 8004cae:	f7fd f8cf 	bl	8001e50 <icm20948_enable_DMP_sensor>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f040 81a7 	bne.w	8005008 <main+0x3c4>
	  if(icm20948_set_DMP_sensor_period(DMP_ODR_Reg_Quat9, 0))return;
 8004cba:	2100      	movs	r1, #0
 8004cbc:	20a8      	movs	r0, #168	@ 0xa8
 8004cbe:	f7fd fa25 	bl	800210c <icm20948_set_DMP_sensor_period>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f040 81a1 	bne.w	800500c <main+0x3c8>
	  icm20948_enable_FIFO(true);
 8004cca:	2001      	movs	r0, #1
 8004ccc:	f7fc fa24 	bl	8001118 <icm20948_enable_FIFO>
	  icm20948_enable_DMP(true);
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	f7fc fa97 	bl	8001204 <icm20948_enable_DMP>
	  icm20948_reset_FIFO();
 8004cd6:	f7fc fa57 	bl	8001188 <icm20948_reset_FIFO>

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  icm20948_reset_DMP();
 8004cda:	f7fc facb 	bl	8001274 <icm20948_reset_DMP>
  for(uint8_t i = 4; i < 6; i++)
 8004cde:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8004ce8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	d9c9      	bls.n	8004c84 <main+0x40>
  }
  icm_20948_DMP_data_t dmp_data;
  while (1)
   {
 	    /* USER CODE END WHILE */
 	    MX_APPE_Process();
 8004cf0:	f7ff f94c 	bl	8003f8c <MX_APPE_Process>

 	    set_i2c_mux_index(&hi2c1, 4);
 8004cf4:	2104      	movs	r1, #4
 8004cf6:	48b1      	ldr	r0, [pc, #708]	@ (8004fbc <main+0x378>)
 8004cf8:	f000 faa4 	bl	8005244 <set_i2c_mux_index>
		int8_t result = icm20948_read_DMP_data(&dmp_data);
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fd fb68 	bl	80023d4 <icm20948_read_DMP_data>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
		if ((dmp_data.header & DMP_header_bitmap_Quat9) > 0) // We have asked for orientation data so we should receive Quat9
 8004d0a:	883b      	ldrh	r3, [r7, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f340 80a6 	ble.w	8004e62 <main+0x21e>
		  // The quaternion data is scaled by 2^30.

		  //SERIAL_PORT.printf("Quat9 data is: Q1:%ld Q2:%ld Q3:%ld Accuracy:%d\r\n", data.Quat9.Data.Q1, data.Quat9.Data.Q2, data.Quat9.Data.Q3, data.Quat9.Data.Accuracy);

		  // Scale to +/- 1
		  q1 = ((double)dmp_data.Quat9.Data.Q1) / 1073741824.0; // Convert to double. Divide by 2^30
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb fb8b 	bl	8000434 <__aeabi_i2d>
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	4ba7      	ldr	r3, [pc, #668]	@ (8004fc0 <main+0x37c>)
 8004d24:	f7fb fd1a 	bl	800075c <__aeabi_ddiv>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	49a5      	ldr	r1, [pc, #660]	@ (8004fc4 <main+0x380>)
 8004d2e:	e9c1 2300 	strd	r2, r3, [r1]
		  q2 = ((double)dmp_data.Quat9.Data.Q2) / 1073741824.0; // Convert to double. Divide by 2^30
 8004d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fb fb7d 	bl	8000434 <__aeabi_i2d>
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	4ba0      	ldr	r3, [pc, #640]	@ (8004fc0 <main+0x37c>)
 8004d40:	f7fb fd0c 	bl	800075c <__aeabi_ddiv>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	499f      	ldr	r1, [pc, #636]	@ (8004fc8 <main+0x384>)
 8004d4a:	e9c1 2300 	strd	r2, r3, [r1]
		  q3 = ((double)dmp_data.Quat9.Data.Q3) / 1073741824.0; // Convert to double. Divide by 2^30
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fb fb6f 	bl	8000434 <__aeabi_i2d>
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	4b99      	ldr	r3, [pc, #612]	@ (8004fc0 <main+0x37c>)
 8004d5c:	f7fb fcfe 	bl	800075c <__aeabi_ddiv>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4999      	ldr	r1, [pc, #612]	@ (8004fcc <main+0x388>)
 8004d66:	e9c1 2300 	strd	r2, r3, [r1]
		  q0 = sqrt(1.0 - ((q1 * q1) + (q2 * q2) + (q3 * q3)));
 8004d6a:	4b96      	ldr	r3, [pc, #600]	@ (8004fc4 <main+0x380>)
 8004d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d70:	4b94      	ldr	r3, [pc, #592]	@ (8004fc4 <main+0x380>)
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f7fb fbc7 	bl	8000508 <__aeabi_dmul>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4614      	mov	r4, r2
 8004d80:	461d      	mov	r5, r3
 8004d82:	4b91      	ldr	r3, [pc, #580]	@ (8004fc8 <main+0x384>)
 8004d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d88:	4b8f      	ldr	r3, [pc, #572]	@ (8004fc8 <main+0x384>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f7fb fbbb 	bl	8000508 <__aeabi_dmul>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4620      	mov	r0, r4
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f7fb f9ff 	bl	800019c <__adddf3>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4614      	mov	r4, r2
 8004da4:	461d      	mov	r5, r3
 8004da6:	4b89      	ldr	r3, [pc, #548]	@ (8004fcc <main+0x388>)
 8004da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dac:	4b87      	ldr	r3, [pc, #540]	@ (8004fcc <main+0x388>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb fba9 	bl	8000508 <__aeabi_dmul>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4620      	mov	r0, r4
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	f7fb f9ed 	bl	800019c <__adddf3>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	f04f 0000 	mov.w	r0, #0
 8004dca:	4981      	ldr	r1, [pc, #516]	@ (8004fd0 <main+0x38c>)
 8004dcc:	f7fb f9e4 	bl	8000198 <__aeabi_dsub>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	ec43 2b17 	vmov	d7, r2, r3
 8004dd8:	eeb0 0a47 	vmov.f32	s0, s14
 8004ddc:	eef0 0a67 	vmov.f32	s1, s15
 8004de0:	f006 feec 	bl	800bbbc <sqrt>
 8004de4:	eeb0 7a40 	vmov.f32	s14, s0
 8004de8:	eef0 7a60 	vmov.f32	s15, s1
 8004dec:	4b79      	ldr	r3, [pc, #484]	@ (8004fd4 <main+0x390>)
 8004dee:	ed83 7b00 	vstr	d7, [r3]
		  put_double_in_buffer(q0, char_buf, sizeof(char_buf), 0);
 8004df2:	4b78      	ldr	r3, [pc, #480]	@ (8004fd4 <main+0x390>)
 8004df4:	ed93 7b00 	vldr	d7, [r3]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004dfe:	4876      	ldr	r0, [pc, #472]	@ (8004fd8 <main+0x394>)
 8004e00:	eeb0 0a47 	vmov.f32	s0, s14
 8004e04:	eef0 0a67 	vmov.f32	s1, s15
 8004e08:	f000 fa3b 	bl	8005282 <put_double_in_buffer>
		  put_double_in_buffer(q1, char_buf, sizeof(char_buf), 8);
 8004e0c:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc4 <main+0x380>)
 8004e0e:	ed93 7b00 	vldr	d7, [r3]
 8004e12:	2208      	movs	r2, #8
 8004e14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e18:	486f      	ldr	r0, [pc, #444]	@ (8004fd8 <main+0x394>)
 8004e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e1e:	eef0 0a67 	vmov.f32	s1, s15
 8004e22:	f000 fa2e 	bl	8005282 <put_double_in_buffer>
		  put_double_in_buffer(q2, char_buf, sizeof(char_buf), 16);
 8004e26:	4b68      	ldr	r3, [pc, #416]	@ (8004fc8 <main+0x384>)
 8004e28:	ed93 7b00 	vldr	d7, [r3]
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e32:	4869      	ldr	r0, [pc, #420]	@ (8004fd8 <main+0x394>)
 8004e34:	eeb0 0a47 	vmov.f32	s0, s14
 8004e38:	eef0 0a67 	vmov.f32	s1, s15
 8004e3c:	f000 fa21 	bl	8005282 <put_double_in_buffer>
		  put_double_in_buffer(q3, char_buf, sizeof(char_buf), 24);
 8004e40:	4b62      	ldr	r3, [pc, #392]	@ (8004fcc <main+0x388>)
 8004e42:	ed93 7b00 	vldr	d7, [r3]
 8004e46:	2218      	movs	r2, #24
 8004e48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e4c:	4862      	ldr	r0, [pc, #392]	@ (8004fd8 <main+0x394>)
 8004e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8004e52:	eef0 0a67 	vmov.f32	s1, s15
 8004e56:	f000 fa14 	bl	8005282 <put_double_in_buffer>
		  Custom_STM_App_Update_Char(0, (uint8_t *)char_buf);
 8004e5a:	495f      	ldr	r1, [pc, #380]	@ (8004fd8 <main+0x394>)
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f006 f973 	bl	800b148 <Custom_STM_App_Update_Char>
		}
 	    set_i2c_mux_index(&hi2c1, 5);
 8004e62:	2105      	movs	r1, #5
 8004e64:	4855      	ldr	r0, [pc, #340]	@ (8004fbc <main+0x378>)
 8004e66:	f000 f9ed 	bl	8005244 <set_i2c_mux_index>
		result = icm20948_read_DMP_data(&dmp_data);
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fd fab1 	bl	80023d4 <icm20948_read_DMP_data>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
		if ((dmp_data.header & DMP_header_bitmap_Quat9) > 0) // We have asked for orientation data so we should receive Quat9
 8004e78:	883b      	ldrh	r3, [r7, #0]
 8004e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f340 80b7 	ble.w	8004ff2 <main+0x3ae>
		  // The quaternion data is scaled by 2^30.

		  //SERIAL_PORT.printf("Quat9 data is: Q1:%ld Q2:%ld Q3:%ld Accuracy:%d\r\n", data.Quat9.Data.Q1, data.Quat9.Data.Q2, data.Quat9.Data.Q3, data.Quat9.Data.Accuracy);

		  // Scale to +/- 1
		  q1 = ((double)dmp_data.Quat9.Data.Q1) / 1073741824.0; // Convert to double. Divide by 2^30
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fb fad4 	bl	8000434 <__aeabi_i2d>
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	4b4b      	ldr	r3, [pc, #300]	@ (8004fc0 <main+0x37c>)
 8004e92:	f7fb fc63 	bl	800075c <__aeabi_ddiv>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	494a      	ldr	r1, [pc, #296]	@ (8004fc4 <main+0x380>)
 8004e9c:	e9c1 2300 	strd	r2, r3, [r1]
		  q2 = ((double)dmp_data.Quat9.Data.Q2) / 1073741824.0; // Convert to double. Divide by 2^30
 8004ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fb fac6 	bl	8000434 <__aeabi_i2d>
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	4b44      	ldr	r3, [pc, #272]	@ (8004fc0 <main+0x37c>)
 8004eae:	f7fb fc55 	bl	800075c <__aeabi_ddiv>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4944      	ldr	r1, [pc, #272]	@ (8004fc8 <main+0x384>)
 8004eb8:	e9c1 2300 	strd	r2, r3, [r1]
		  q3 = ((double)dmp_data.Quat9.Data.Q3) / 1073741824.0; // Convert to double. Divide by 2^30
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb fab8 	bl	8000434 <__aeabi_i2d>
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc0 <main+0x37c>)
 8004eca:	f7fb fc47 	bl	800075c <__aeabi_ddiv>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	493e      	ldr	r1, [pc, #248]	@ (8004fcc <main+0x388>)
 8004ed4:	e9c1 2300 	strd	r2, r3, [r1]
		  q0 = sqrt(1.0 - ((q1 * q1) + (q2 * q2) + (q3 * q3)));
 8004ed8:	4b3a      	ldr	r3, [pc, #232]	@ (8004fc4 <main+0x380>)
 8004eda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ede:	4b39      	ldr	r3, [pc, #228]	@ (8004fc4 <main+0x380>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb fb10 	bl	8000508 <__aeabi_dmul>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4614      	mov	r4, r2
 8004eee:	461d      	mov	r5, r3
 8004ef0:	4b35      	ldr	r3, [pc, #212]	@ (8004fc8 <main+0x384>)
 8004ef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ef6:	4b34      	ldr	r3, [pc, #208]	@ (8004fc8 <main+0x384>)
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f7fb fb04 	bl	8000508 <__aeabi_dmul>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	4620      	mov	r0, r4
 8004f06:	4629      	mov	r1, r5
 8004f08:	f7fb f948 	bl	800019c <__adddf3>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4614      	mov	r4, r2
 8004f12:	461d      	mov	r5, r3
 8004f14:	4b2d      	ldr	r3, [pc, #180]	@ (8004fcc <main+0x388>)
 8004f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fcc <main+0x388>)
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f7fb faf2 	bl	8000508 <__aeabi_dmul>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4620      	mov	r0, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	f7fb f936 	bl	800019c <__adddf3>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	f04f 0000 	mov.w	r0, #0
 8004f38:	4925      	ldr	r1, [pc, #148]	@ (8004fd0 <main+0x38c>)
 8004f3a:	f7fb f92d 	bl	8000198 <__aeabi_dsub>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	ec43 2b17 	vmov	d7, r2, r3
 8004f46:	eeb0 0a47 	vmov.f32	s0, s14
 8004f4a:	eef0 0a67 	vmov.f32	s1, s15
 8004f4e:	f006 fe35 	bl	800bbbc <sqrt>
 8004f52:	eeb0 7a40 	vmov.f32	s14, s0
 8004f56:	eef0 7a60 	vmov.f32	s15, s1
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd4 <main+0x390>)
 8004f5c:	ed83 7b00 	vstr	d7, [r3]
		  put_double_in_buffer(q0, char_buf, sizeof(char_buf), 32);
 8004f60:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd4 <main+0x390>)
 8004f62:	ed93 7b00 	vldr	d7, [r3]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f6c:	481a      	ldr	r0, [pc, #104]	@ (8004fd8 <main+0x394>)
 8004f6e:	eeb0 0a47 	vmov.f32	s0, s14
 8004f72:	eef0 0a67 	vmov.f32	s1, s15
 8004f76:	f000 f984 	bl	8005282 <put_double_in_buffer>
		  put_double_in_buffer(q1, char_buf, sizeof(char_buf), 40);
 8004f7a:	4b12      	ldr	r3, [pc, #72]	@ (8004fc4 <main+0x380>)
 8004f7c:	ed93 7b00 	vldr	d7, [r3]
 8004f80:	2228      	movs	r2, #40	@ 0x28
 8004f82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f86:	4814      	ldr	r0, [pc, #80]	@ (8004fd8 <main+0x394>)
 8004f88:	eeb0 0a47 	vmov.f32	s0, s14
 8004f8c:	eef0 0a67 	vmov.f32	s1, s15
 8004f90:	f000 f977 	bl	8005282 <put_double_in_buffer>
		  put_double_in_buffer(q2, char_buf, sizeof(char_buf), 48);
 8004f94:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc8 <main+0x384>)
 8004f96:	ed93 7b00 	vldr	d7, [r3]
 8004f9a:	2230      	movs	r2, #48	@ 0x30
 8004f9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004fa0:	480d      	ldr	r0, [pc, #52]	@ (8004fd8 <main+0x394>)
 8004fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8004fa6:	eef0 0a67 	vmov.f32	s1, s15
 8004faa:	f000 f96a 	bl	8005282 <put_double_in_buffer>
		  put_double_in_buffer(q3, char_buf, sizeof(char_buf), 56);
 8004fae:	4b07      	ldr	r3, [pc, #28]	@ (8004fcc <main+0x388>)
 8004fb0:	ed93 7b00 	vldr	d7, [r3]
 8004fb4:	2238      	movs	r2, #56	@ 0x38
 8004fb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004fba:	e00f      	b.n	8004fdc <main+0x398>
 8004fbc:	20000204 	.word	0x20000204
 8004fc0:	41d00000 	.word	0x41d00000
 8004fc4:	200004c0 	.word	0x200004c0
 8004fc8:	200004c8 	.word	0x200004c8
 8004fcc:	200004d0 	.word	0x200004d0
 8004fd0:	3ff00000 	.word	0x3ff00000
 8004fd4:	200004b8 	.word	0x200004b8
 8004fd8:	200002b8 	.word	0x200002b8
 8004fdc:	480e      	ldr	r0, [pc, #56]	@ (8005018 <main+0x3d4>)
 8004fde:	eeb0 0a47 	vmov.f32	s0, s14
 8004fe2:	eef0 0a67 	vmov.f32	s1, s15
 8004fe6:	f000 f94c 	bl	8005282 <put_double_in_buffer>
		  Custom_STM_App_Update_Char(0, (uint8_t *)char_buf);
 8004fea:	490b      	ldr	r1, [pc, #44]	@ (8005018 <main+0x3d4>)
 8004fec:	2000      	movs	r0, #0
 8004fee:	f006 f8ab 	bl	800b148 <Custom_STM_App_Update_Char>
		}
		if(result != ICM_20948_Stat_FIFOMoreDataAvail)
 8004ff2:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8004ff6:	2b0c      	cmp	r3, #12
 8004ff8:	f43f ae7a 	beq.w	8004cf0 <main+0xac>
			HAL_Delay(10);
 8004ffc:	200a      	movs	r0, #10
 8004ffe:	f7fe ffa0 	bl	8003f42 <HAL_Delay>
   {
 8005002:	e675      	b.n	8004cf0 <main+0xac>
	  if(icm20948_initialize_DMP())return;
 8005004:	bf00      	nop
 8005006:	e002      	b.n	800500e <main+0x3ca>
	  if(icm20948_enable_DMP_sensor(INV_ICM20948_SENSOR_ORIENTATION, 1))return;
 8005008:	bf00      	nop
 800500a:	e000      	b.n	800500e <main+0x3ca>
	  if(icm20948_set_DMP_sensor_period(DMP_ODR_Reg_Quat9, 0))return;
 800500c:	bf00      	nop


   }
   /* USER CODE END 3 */
 }
 800500e:	4618      	mov	r0, r3
 8005010:	3798      	adds	r7, #152	@ 0x98
 8005012:	46bd      	mov	sp, r7
 8005014:	bdb0      	pop	{r4, r5, r7, pc}
 8005016:	bf00      	nop
 8005018:	200002b8 	.word	0x200002b8

0800501c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b098      	sub	sp, #96	@ 0x60
 8005020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005022:	f107 031c 	add.w	r3, r7, #28
 8005026:	2244      	movs	r2, #68	@ 0x44
 8005028:	2100      	movs	r1, #0
 800502a:	4618      	mov	r0, r3
 800502c:	f006 fd86 	bl	800bb3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005030:	463b      	mov	r3, r7
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	605a      	str	r2, [r3, #4]
 8005038:	609a      	str	r2, [r3, #8]
 800503a:	60da      	str	r2, [r3, #12]
 800503c:	611a      	str	r2, [r3, #16]
 800503e:	615a      	str	r2, [r3, #20]
 8005040:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8005042:	2303      	movs	r3, #3
 8005044:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005046:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800504a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800504c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005050:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005052:	2340      	movs	r3, #64	@ 0x40
 8005054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005056:	2300      	movs	r3, #0
 8005058:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800505a:	f107 031c 	add.w	r3, r7, #28
 800505e:	4618      	mov	r0, r3
 8005060:	f002 f9e6 	bl	8007430 <HAL_RCC_OscConfig>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <SystemClock_Config+0x52>
  {
    Error_Handler();
 800506a:	f000 f8e5 	bl	8005238 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800506e:	236f      	movs	r3, #111	@ 0x6f
 8005070:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8005072:	2302      	movs	r3, #2
 8005074:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800508a:	463b      	mov	r3, r7
 800508c:	2101      	movs	r1, #1
 800508e:	4618      	mov	r0, r3
 8005090:	f002 fd04 	bl	8007a9c <HAL_RCC_ClockConfig>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800509a:	f000 f8cd 	bl	8005238 <Error_Handler>
  }
}
 800509e:	bf00      	nop
 80050a0:	3760      	adds	r7, #96	@ 0x60
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b08a      	sub	sp, #40	@ 0x28
 80050aa:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050ac:	1d3b      	adds	r3, r7, #4
 80050ae:	2224      	movs	r2, #36	@ 0x24
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f006 fd42 	bl	800bb3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 80050b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050bc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80050be:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	4618      	mov	r0, r3
 80050c8:	f003 f840 	bl	800814c <HAL_RCCEx_PeriphCLKConfig>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 80050d2:	f000 f8b1 	bl	8005238 <Error_Handler>
  }
}
 80050d6:	bf00      	nop
 80050d8:	3728      	adds	r7, #40	@ 0x28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80050e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005154 <MX_I2C1_Init+0x74>)
 80050e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005158 <MX_I2C1_Init+0x78>)
 80050e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80050ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005154 <MX_I2C1_Init+0x74>)
 80050ec:	4a1b      	ldr	r2, [pc, #108]	@ (800515c <MX_I2C1_Init+0x7c>)
 80050ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80050f0:	4b18      	ldr	r3, [pc, #96]	@ (8005154 <MX_I2C1_Init+0x74>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050f6:	4b17      	ldr	r3, [pc, #92]	@ (8005154 <MX_I2C1_Init+0x74>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050fc:	4b15      	ldr	r3, [pc, #84]	@ (8005154 <MX_I2C1_Init+0x74>)
 80050fe:	2200      	movs	r2, #0
 8005100:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005102:	4b14      	ldr	r3, [pc, #80]	@ (8005154 <MX_I2C1_Init+0x74>)
 8005104:	2200      	movs	r2, #0
 8005106:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005108:	4b12      	ldr	r3, [pc, #72]	@ (8005154 <MX_I2C1_Init+0x74>)
 800510a:	2200      	movs	r2, #0
 800510c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800510e:	4b11      	ldr	r3, [pc, #68]	@ (8005154 <MX_I2C1_Init+0x74>)
 8005110:	2200      	movs	r2, #0
 8005112:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005114:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <MX_I2C1_Init+0x74>)
 8005116:	2200      	movs	r2, #0
 8005118:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800511a:	480e      	ldr	r0, [pc, #56]	@ (8005154 <MX_I2C1_Init+0x74>)
 800511c:	f000 fe76 	bl	8005e0c <HAL_I2C_Init>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005126:	f000 f887 	bl	8005238 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800512a:	2100      	movs	r1, #0
 800512c:	4809      	ldr	r0, [pc, #36]	@ (8005154 <MX_I2C1_Init+0x74>)
 800512e:	f001 fd11 	bl	8006b54 <HAL_I2CEx_ConfigAnalogFilter>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005138:	f000 f87e 	bl	8005238 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800513c:	2100      	movs	r1, #0
 800513e:	4805      	ldr	r0, [pc, #20]	@ (8005154 <MX_I2C1_Init+0x74>)
 8005140:	f001 fd53 	bl	8006bea <HAL_I2CEx_ConfigDigitalFilter>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800514a:	f000 f875 	bl	8005238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000204 	.word	0x20000204
 8005158:	40005400 	.word	0x40005400
 800515c:	00b07cb4 	.word	0x00b07cb4

08005160 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8005164:	4b06      	ldr	r3, [pc, #24]	@ (8005180 <MX_IPCC_Init+0x20>)
 8005166:	4a07      	ldr	r2, [pc, #28]	@ (8005184 <MX_IPCC_Init+0x24>)
 8005168:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800516a:	4805      	ldr	r0, [pc, #20]	@ (8005180 <MX_IPCC_Init+0x20>)
 800516c:	f001 fd8a 	bl	8006c84 <HAL_IPCC_Init>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8005176:	f000 f85f 	bl	8005238 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000258 	.word	0x20000258
 8005184:	58000c00 	.word	0x58000c00

08005188 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800518c:	bf00      	nop
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800519c:	4b14      	ldr	r3, [pc, #80]	@ (80051f0 <MX_RTC_Init+0x58>)
 800519e:	4a15      	ldr	r2, [pc, #84]	@ (80051f4 <MX_RTC_Init+0x5c>)
 80051a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80051a2:	4b13      	ldr	r3, [pc, #76]	@ (80051f0 <MX_RTC_Init+0x58>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80051a8:	4b11      	ldr	r3, [pc, #68]	@ (80051f0 <MX_RTC_Init+0x58>)
 80051aa:	227f      	movs	r2, #127	@ 0x7f
 80051ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80051ae:	4b10      	ldr	r3, [pc, #64]	@ (80051f0 <MX_RTC_Init+0x58>)
 80051b0:	f641 6284 	movw	r2, #7812	@ 0x1e84
 80051b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80051b6:	4b0e      	ldr	r3, [pc, #56]	@ (80051f0 <MX_RTC_Init+0x58>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80051bc:	4b0c      	ldr	r3, [pc, #48]	@ (80051f0 <MX_RTC_Init+0x58>)
 80051be:	2200      	movs	r2, #0
 80051c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80051c2:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <MX_RTC_Init+0x58>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80051c8:	4809      	ldr	r0, [pc, #36]	@ (80051f0 <MX_RTC_Init+0x58>)
 80051ca:	f003 f89b 	bl	8008304 <HAL_RTC_Init>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80051d4:	f000 f830 	bl	8005238 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80051d8:	2200      	movs	r2, #0
 80051da:	2100      	movs	r1, #0
 80051dc:	4804      	ldr	r0, [pc, #16]	@ (80051f0 <MX_RTC_Init+0x58>)
 80051de:	f003 f991 	bl	8008504 <HAL_RTCEx_SetWakeUpTimer_IT>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80051e8:	f000 f826 	bl	8005238 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80051ec:	bf00      	nop
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000294 	.word	0x20000294
 80051f4:	40002800 	.word	0x40002800

080051f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	60da      	str	r2, [r3, #12]
 800520a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800520c:	2002      	movs	r0, #2
 800520e:	f7ff fd00 	bl	8004c12 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005212:	2001      	movs	r0, #1
 8005214:	f7ff fcfd 	bl	8004c12 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : User_BTN_Pin */
  GPIO_InitStruct.Pin = User_BTN_Pin;
 8005218:	2340      	movs	r3, #64	@ 0x40
 800521a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800521c:	2300      	movs	r3, #0
 800521e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005220:	2301      	movs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_BTN_GPIO_Port, &GPIO_InitStruct);
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	4619      	mov	r1, r3
 8005228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800522c:	f000 fc62 	bl	8005af4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005230:	bf00      	nop
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800523c:	b672      	cpsid	i
}
 800523e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <Error_Handler+0x8>

08005244 <set_i2c_mux_index>:
#include "pb_helper.h"

int8_t set_i2c_mux_index(I2C_HandleTypeDef *i2c_bus, uint8_t index)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af02      	add	r7, sp, #8
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
	if (index > 7)return -1;
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	2b07      	cmp	r3, #7
 8005254:	d902      	bls.n	800525c <set_i2c_mux_index+0x18>
 8005256:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800525a:	e00e      	b.n	800527a <set_i2c_mux_index+0x36>
	index = 0x1 << index;
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	461a      	mov	r2, r3
 8005260:	2301      	movs	r3, #1
 8005262:	4093      	lsls	r3, r2
 8005264:	b2db      	uxtb	r3, r3
 8005266:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(i2c_bus, I2C_MUX_ADDR << 1, &index, 1, 1000);
 8005268:	1cfa      	adds	r2, r7, #3
 800526a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	2301      	movs	r3, #1
 8005272:	21e0      	movs	r1, #224	@ 0xe0
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fe65 	bl	8005f44 <HAL_I2C_Master_Transmit>
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <put_double_in_buffer>:

void put_double_in_buffer(double db, uint8_t *buffer, int buffer_length, int starting_index)
{
 8005282:	b480      	push	{r7}
 8005284:	b08b      	sub	sp, #44	@ 0x2c
 8005286:	af00      	add	r7, sp, #0
 8005288:	ed87 0b04 	vstr	d0, [r7, #16]
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
	if((starting_index + 4) > buffer_length)return;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3303      	adds	r3, #3
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	429a      	cmp	r2, r3
 800529a:	dd19      	ble.n	80052d0 <put_double_in_buffer+0x4e>
	  union {
	    double dbl;
	    unsigned char bytes[8];
	  } double_to_bytes;
	double_to_bytes.dbl = db;
 800529c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for(int i = 0; i < 8; i++){
 80052a4:	2300      	movs	r3, #0
 80052a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a8:	e00e      	b.n	80052c8 <put_double_in_buffer+0x46>
		buffer[starting_index+i] = double_to_bytes.bytes[i];
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	4413      	add	r3, r2
 80052b0:	461a      	mov	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f107 0118 	add.w	r1, r7, #24
 80052ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052bc:	440a      	add	r2, r1
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	3301      	adds	r3, #1
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	2b07      	cmp	r3, #7
 80052cc:	dded      	ble.n	80052aa <put_double_in_buffer+0x28>
 80052ce:	e000      	b.n	80052d2 <put_double_in_buffer+0x50>
	if((starting_index + 4) > buffer_length)return;
 80052d0:	bf00      	nop
	}
}
 80052d2:	372c      	adds	r7, #44	@ 0x2c
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <LL_AHB2_GRP1_EnableClock>:
{
 80052fe:	b480      	push	{r7}
 8005300:	b085      	sub	sp, #20
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800530a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800530c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4313      	orrs	r3, r2
 8005314:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800531a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4013      	ands	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005322:	68fb      	ldr	r3, [r7, #12]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800533c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800533e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4313      	orrs	r3, r2
 8005346:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4013      	ands	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005354:	68fb      	ldr	r3, [r7, #12]
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800536a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800536e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005370:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4313      	orrs	r3, r2
 8005378:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800537e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4013      	ands	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005386:	68fb      	ldr	r3, [r7, #12]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8005398:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800539c:	f7ff ffc8 	bl	8005330 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80053a0:	2200      	movs	r2, #0
 80053a2:	2100      	movs	r1, #0
 80053a4:	202e      	movs	r0, #46	@ 0x2e
 80053a6:	f000 fb46 	bl	8005a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80053aa:	202e      	movs	r0, #46	@ 0x2e
 80053ac:	f000 fb5d 	bl	8005a6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053b0:	bf00      	nop
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b090      	sub	sp, #64	@ 0x40
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	60da      	str	r2, [r3, #12]
 80053ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053cc:	f107 0308 	add.w	r3, r7, #8
 80053d0:	2224      	movs	r2, #36	@ 0x24
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f006 fbb1 	bl	800bb3c <memset>
  if(hi2c->Instance==I2C1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a17      	ldr	r2, [pc, #92]	@ (800543c <HAL_I2C_MspInit+0x88>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d126      	bne.n	8005432 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80053e4:	2304      	movs	r3, #4
 80053e6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80053e8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80053ec:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	4618      	mov	r0, r3
 80053f4:	f002 feaa 	bl	800814c <HAL_RCCEx_PeriphCLKConfig>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80053fe:	f7ff ff1b 	bl	8005238 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005402:	2002      	movs	r0, #2
 8005404:	f7ff ff7b 	bl	80052fe <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005408:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800540c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800540e:	2312      	movs	r3, #18
 8005410:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005412:	2300      	movs	r3, #0
 8005414:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005416:	2300      	movs	r3, #0
 8005418:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800541a:	2304      	movs	r3, #4
 800541c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800541e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005422:	4619      	mov	r1, r3
 8005424:	4806      	ldr	r0, [pc, #24]	@ (8005440 <HAL_I2C_MspInit+0x8c>)
 8005426:	f000 fb65 	bl	8005af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800542a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800542e:	f7ff ff98 	bl	8005362 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005432:	bf00      	nop
 8005434:	3740      	adds	r7, #64	@ 0x40
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40005400 	.word	0x40005400
 8005440:	48000400 	.word	0x48000400

08005444 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0d      	ldr	r2, [pc, #52]	@ (8005488 <HAL_IPCC_MspInit+0x44>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d113      	bne.n	800547e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8005456:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800545a:	f7ff ff69 	bl	8005330 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800545e:	2200      	movs	r2, #0
 8005460:	2100      	movs	r1, #0
 8005462:	202c      	movs	r0, #44	@ 0x2c
 8005464:	f000 fae7 	bl	8005a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8005468:	202c      	movs	r0, #44	@ 0x2c
 800546a:	f000 fafe 	bl	8005a6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800546e:	2200      	movs	r2, #0
 8005470:	2100      	movs	r1, #0
 8005472:	202d      	movs	r0, #45	@ 0x2d
 8005474:	f000 fadf 	bl	8005a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8005478:	202d      	movs	r0, #45	@ 0x2d
 800547a:	f000 faf6 	bl	8005a6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	58000c00 	.word	0x58000c00

0800548c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08c      	sub	sp, #48	@ 0x30
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005494:	f107 030c 	add.w	r3, r7, #12
 8005498:	2224      	movs	r2, #36	@ 0x24
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f006 fb4d 	bl	800bb3c <memset>
  if(hrtc->Instance==RTC)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a14      	ldr	r2, [pc, #80]	@ (80054f8 <HAL_RTC_MspInit+0x6c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d121      	bne.n	80054f0 <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
	  HAL_PWR_EnableBkUpAccess();
 80054ac:	f001 fc70 	bl	8006d90 <HAL_PWR_EnableBkUpAccess>
	  HAL_PWR_EnableBkUpAccess(); // written twice to flush apb-ahb bridge
 80054b0:	f001 fc6e 	bl	8006d90 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80054b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 80054ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80054be:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054c0:	f107 030c 	add.w	r3, r7, #12
 80054c4:	4618      	mov	r0, r3
 80054c6:	f002 fe41 	bl	800814c <HAL_RCCEx_PeriphCLKConfig>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80054d0:	f7ff feb2 	bl	8005238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80054d4:	f7ff ff02 	bl	80052dc <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80054d8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80054dc:	f7ff ff41 	bl	8005362 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80054e0:	2200      	movs	r2, #0
 80054e2:	2100      	movs	r1, #0
 80054e4:	2003      	movs	r0, #3
 80054e6:	f000 faa6 	bl	8005a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80054ea:	2003      	movs	r0, #3
 80054ec:	f000 fabd 	bl	8005a6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80054f0:	bf00      	nop
 80054f2:	3730      	adds	r7, #48	@ 0x30
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40002800 	.word	0x40002800

080054fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <NMI_Handler+0x4>

08005504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005508:	bf00      	nop
 800550a:	e7fd      	b.n	8005508 <HardFault_Handler+0x4>

0800550c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005510:	bf00      	nop
 8005512:	e7fd      	b.n	8005510 <MemManage_Handler+0x4>

08005514 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005518:	bf00      	nop
 800551a:	e7fd      	b.n	8005518 <BusFault_Handler+0x4>

0800551c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005520:	bf00      	nop
 8005522:	e7fd      	b.n	8005520 <UsageFault_Handler+0x4>

08005524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005532:	b480      	push	{r7}
 8005534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005552:	f000 f8fd 	bl	8005750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}

0800555a <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800555e:	f7ff f89f 	bl	80046a0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8005562:	bf00      	nop
 8005564:	bd80      	pop	{r7, pc}

08005566 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800556a:	f005 ff1d 	bl	800b3a8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	bd80      	pop	{r7, pc}

08005572 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8005576:	f005 ff4d 	bl	800b414 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}

0800557e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8005582:	f000 fc1f 	bl	8005dc4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8005590:	4b22      	ldr	r3, [pc, #136]	@ (800561c <SystemInit+0x90>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	4a21      	ldr	r2, [pc, #132]	@ (800561c <SystemInit+0x90>)
 8005598:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800559c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80055a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80055b8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80055ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055c4:	4b16      	ldr	r3, [pc, #88]	@ (8005620 <SystemInit+0x94>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80055ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055d6:	f023 0305 	bic.w	r3, r3, #5
 80055da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80055de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80055f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005624 <SystemInit+0x98>)
 80055f8:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005604:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005608:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560e:	2200      	movs	r2, #0
 8005610:	619a      	str	r2, [r3, #24]
}
 8005612:	bf00      	nop
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	e000ed00 	.word	0xe000ed00
 8005620:	faf6fefb 	.word	0xfaf6fefb
 8005624:	22041000 	.word	0x22041000

08005628 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005628:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800562a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800562c:	3304      	adds	r3, #4

0800562e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800562e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005630:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8005632:	d3f9      	bcc.n	8005628 <CopyDataInit>
  bx lr
 8005634:	4770      	bx	lr

08005636 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8005636:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005638:	3004      	adds	r0, #4

0800563a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800563a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800563c:	d3fb      	bcc.n	8005636 <FillZerobss>
  bx lr
 800563e:	4770      	bx	lr

08005640 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005640:	480c      	ldr	r0, [pc, #48]	@ (8005674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005642:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005644:	f7ff ffa2 	bl	800558c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005648:	480b      	ldr	r0, [pc, #44]	@ (8005678 <LoopForever+0x6>)
 800564a:	490c      	ldr	r1, [pc, #48]	@ (800567c <LoopForever+0xa>)
 800564c:	4a0c      	ldr	r2, [pc, #48]	@ (8005680 <LoopForever+0xe>)
 800564e:	2300      	movs	r3, #0
 8005650:	f7ff ffed 	bl	800562e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8005654:	480b      	ldr	r0, [pc, #44]	@ (8005684 <LoopForever+0x12>)
 8005656:	490c      	ldr	r1, [pc, #48]	@ (8005688 <LoopForever+0x16>)
 8005658:	4a0c      	ldr	r2, [pc, #48]	@ (800568c <LoopForever+0x1a>)
 800565a:	2300      	movs	r3, #0
 800565c:	f7ff ffe7 	bl	800562e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005660:	480b      	ldr	r0, [pc, #44]	@ (8005690 <LoopForever+0x1e>)
 8005662:	490c      	ldr	r1, [pc, #48]	@ (8005694 <LoopForever+0x22>)
 8005664:	2300      	movs	r3, #0
 8005666:	f7ff ffe8 	bl	800563a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800566a:	f006 fa75 	bl	800bb58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800566e:	f7ff fae9 	bl	8004c44 <main>

08005672 <LoopForever>:

LoopForever:
  b LoopForever
 8005672:	e7fe      	b.n	8005672 <LoopForever>
  ldr   r0, =_estack
 8005674:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8005678:	20000008 	.word	0x20000008
 800567c:	200000a0 	.word	0x200000a0
 8005680:	0800f964 	.word	0x0800f964
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8005684:	200301e4 	.word	0x200301e4
 8005688:	20030a67 	.word	0x20030a67
 800568c:	0800fa42 	.word	0x0800fa42
  INIT_BSS _sbss, _ebss
 8005690:	200000f0 	.word	0x200000f0
 8005694:	200007c8 	.word	0x200007c8

08005698 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005698:	e7fe      	b.n	8005698 <ADC1_IRQHandler>
	...

0800569c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056a6:	4b0c      	ldr	r3, [pc, #48]	@ (80056d8 <HAL_Init+0x3c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a0b      	ldr	r2, [pc, #44]	@ (80056d8 <HAL_Init+0x3c>)
 80056ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056b2:	2003      	movs	r0, #3
 80056b4:	f000 f9b4 	bl	8005a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056b8:	200f      	movs	r0, #15
 80056ba:	f000 f80f 	bl	80056dc <HAL_InitTick>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	71fb      	strb	r3, [r7, #7]
 80056c8:	e001      	b.n	80056ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80056ca:	f7ff fe63 	bl	8005394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80056ce:	79fb      	ldrb	r3, [r7, #7]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	58004000 	.word	0x58004000

080056dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80056e8:	4b17      	ldr	r3, [pc, #92]	@ (8005748 <HAL_InitTick+0x6c>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d024      	beq.n	800573a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80056f0:	f002 fb80 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b14      	ldr	r3, [pc, #80]	@ (8005748 <HAL_InitTick+0x6c>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005700:	fbb3 f3f1 	udiv	r3, r3, r1
 8005704:	fbb2 f3f3 	udiv	r3, r2, r3
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f9ca 	bl	8005aa2 <HAL_SYSTICK_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10f      	bne.n	8005734 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b0f      	cmp	r3, #15
 8005718:	d809      	bhi.n	800572e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800571a:	2200      	movs	r2, #0
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005722:	f000 f988 	bl	8005a36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005726:	4a09      	ldr	r2, [pc, #36]	@ (800574c <HAL_InitTick+0x70>)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	e007      	b.n	800573e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
 8005732:	e004      	b.n	800573e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
 8005738:	e001      	b.n	800573e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	2000001c 	.word	0x2000001c
 800574c:	20000018 	.word	0x20000018

08005750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005754:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <HAL_IncTick+0x20>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	4b06      	ldr	r3, [pc, #24]	@ (8005774 <HAL_IncTick+0x24>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4413      	add	r3, r2
 8005760:	4a04      	ldr	r2, [pc, #16]	@ (8005774 <HAL_IncTick+0x24>)
 8005762:	6013      	str	r3, [r2, #0]
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	2000001c 	.word	0x2000001c
 8005774:	200004d8 	.word	0x200004d8

08005778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return uwTick;
 800577c:	4b03      	ldr	r3, [pc, #12]	@ (800578c <HAL_GetTick+0x14>)
 800577e:	681b      	ldr	r3, [r3, #0]
}
 8005780:	4618      	mov	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	200004d8 	.word	0x200004d8

08005790 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005794:	4b03      	ldr	r3, [pc, #12]	@ (80057a4 <HAL_GetTickPrio+0x14>)
 8005796:	681b      	ldr	r3, [r3, #0]
}
 8005798:	4618      	mov	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000018 	.word	0x20000018

080057a8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80057ac:	4b03      	ldr	r3, [pc, #12]	@ (80057bc <HAL_GetTickFreq+0x14>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	2000001c 	.word	0x2000001c

080057c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005804 <__NVIC_SetPriorityGrouping+0x44>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057dc:	4013      	ands	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057f2:	4a04      	ldr	r2, [pc, #16]	@ (8005804 <__NVIC_SetPriorityGrouping+0x44>)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	60d3      	str	r3, [r2, #12]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	e000ed00 	.word	0xe000ed00

08005808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800580c:	4b04      	ldr	r3, [pc, #16]	@ (8005820 <__NVIC_GetPriorityGrouping+0x18>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	0a1b      	lsrs	r3, r3, #8
 8005812:	f003 0307 	and.w	r3, r3, #7
}
 8005816:	4618      	mov	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	e000ed00 	.word	0xe000ed00

08005824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800582e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005832:	2b00      	cmp	r3, #0
 8005834:	db0b      	blt.n	800584e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	f003 021f 	and.w	r2, r3, #31
 800583c:	4907      	ldr	r1, [pc, #28]	@ (800585c <__NVIC_EnableIRQ+0x38>)
 800583e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2001      	movs	r0, #1
 8005846:	fa00 f202 	lsl.w	r2, r0, r2
 800584a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	e000e100 	.word	0xe000e100

08005860 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800586a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800586e:	2b00      	cmp	r3, #0
 8005870:	db12      	blt.n	8005898 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	f003 021f 	and.w	r2, r3, #31
 8005878:	490a      	ldr	r1, [pc, #40]	@ (80058a4 <__NVIC_DisableIRQ+0x44>)
 800587a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	2001      	movs	r0, #1
 8005882:	fa00 f202 	lsl.w	r2, r0, r2
 8005886:	3320      	adds	r3, #32
 8005888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800588c:	f3bf 8f4f 	dsb	sy
}
 8005890:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005892:	f3bf 8f6f 	isb	sy
}
 8005896:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	e000e100 	.word	0xe000e100

080058a8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	db0c      	blt.n	80058d4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	f003 021f 	and.w	r2, r3, #31
 80058c0:	4907      	ldr	r1, [pc, #28]	@ (80058e0 <__NVIC_SetPendingIRQ+0x38>)
 80058c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	2001      	movs	r0, #1
 80058ca:	fa00 f202 	lsl.w	r2, r0, r2
 80058ce:	3340      	adds	r3, #64	@ 0x40
 80058d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	e000e100 	.word	0xe000e100

080058e4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	db0c      	blt.n	8005910 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	f003 021f 	and.w	r2, r3, #31
 80058fc:	4907      	ldr	r1, [pc, #28]	@ (800591c <__NVIC_ClearPendingIRQ+0x38>)
 80058fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	2001      	movs	r0, #1
 8005906:	fa00 f202 	lsl.w	r2, r0, r2
 800590a:	3360      	adds	r3, #96	@ 0x60
 800590c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	e000e100 	.word	0xe000e100

08005920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	6039      	str	r1, [r7, #0]
 800592a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800592c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005930:	2b00      	cmp	r3, #0
 8005932:	db0a      	blt.n	800594a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	b2da      	uxtb	r2, r3
 8005938:	490c      	ldr	r1, [pc, #48]	@ (800596c <__NVIC_SetPriority+0x4c>)
 800593a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593e:	0112      	lsls	r2, r2, #4
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	440b      	add	r3, r1
 8005944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005948:	e00a      	b.n	8005960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	b2da      	uxtb	r2, r3
 800594e:	4908      	ldr	r1, [pc, #32]	@ (8005970 <__NVIC_SetPriority+0x50>)
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	3b04      	subs	r3, #4
 8005958:	0112      	lsls	r2, r2, #4
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	440b      	add	r3, r1
 800595e:	761a      	strb	r2, [r3, #24]
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	e000e100 	.word	0xe000e100
 8005970:	e000ed00 	.word	0xe000ed00

08005974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	@ 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f1c3 0307 	rsb	r3, r3, #7
 800598e:	2b04      	cmp	r3, #4
 8005990:	bf28      	it	cs
 8005992:	2304      	movcs	r3, #4
 8005994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	3304      	adds	r3, #4
 800599a:	2b06      	cmp	r3, #6
 800599c:	d902      	bls.n	80059a4 <NVIC_EncodePriority+0x30>
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	3b03      	subs	r3, #3
 80059a2:	e000      	b.n	80059a6 <NVIC_EncodePriority+0x32>
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	43da      	mvns	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	401a      	ands	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	fa01 f303 	lsl.w	r3, r1, r3
 80059c6:	43d9      	mvns	r1, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059cc:	4313      	orrs	r3, r2
         );
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3724      	adds	r7, #36	@ 0x24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059ec:	d301      	bcc.n	80059f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059ee:	2301      	movs	r3, #1
 80059f0:	e00f      	b.n	8005a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059f2:	4a0a      	ldr	r2, [pc, #40]	@ (8005a1c <SysTick_Config+0x40>)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059fa:	210f      	movs	r1, #15
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a00:	f7ff ff8e 	bl	8005920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a04:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <SysTick_Config+0x40>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a0a:	4b04      	ldr	r3, [pc, #16]	@ (8005a1c <SysTick_Config+0x40>)
 8005a0c:	2207      	movs	r2, #7
 8005a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	e000e010 	.word	0xe000e010

08005a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff fec9 	bl	80057c0 <__NVIC_SetPriorityGrouping>
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b086      	sub	sp, #24
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a44:	f7ff fee0 	bl	8005808 <__NVIC_GetPriorityGrouping>
 8005a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	6978      	ldr	r0, [r7, #20]
 8005a50:	f7ff ff90 	bl	8005974 <NVIC_EncodePriority>
 8005a54:	4602      	mov	r2, r0
 8005a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff ff5f 	bl	8005920 <__NVIC_SetPriority>
}
 8005a62:	bf00      	nop
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	4603      	mov	r3, r0
 8005a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fed3 	bl	8005824 <__NVIC_EnableIRQ>
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff fee3 	bl	8005860 <__NVIC_DisableIRQ>
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ff96 	bl	80059dc <SysTick_Config>
 8005ab0:	4603      	mov	r3, r0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff feed 	bl	80058a8 <__NVIC_SetPendingIRQ>
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	4603      	mov	r3, r0
 8005ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fefd 	bl	80058e4 <__NVIC_ClearPendingIRQ>
}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b02:	e146      	b.n	8005d92 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	2101      	movs	r1, #1
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	4013      	ands	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8138 	beq.w	8005d8c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d005      	beq.n	8005b34 <HAL_GPIO_Init+0x40>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d130      	bne.n	8005b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	2203      	movs	r2, #3
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	43db      	mvns	r3, r3
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4013      	ands	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	091b      	lsrs	r3, r3, #4
 8005b80:	f003 0201 	and.w	r2, r3, #1
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d017      	beq.n	8005bd2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	2203      	movs	r2, #3
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d123      	bne.n	8005c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	08da      	lsrs	r2, r3, #3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3208      	adds	r2, #8
 8005be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	220f      	movs	r2, #15
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	08da      	lsrs	r2, r3, #3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3208      	adds	r2, #8
 8005c20:	6939      	ldr	r1, [r7, #16]
 8005c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	2203      	movs	r2, #3
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	43db      	mvns	r3, r3
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0203 	and.w	r2, r3, #3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8092 	beq.w	8005d8c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005c68:	4a51      	ldr	r2, [pc, #324]	@ (8005db0 <HAL_GPIO_Init+0x2bc>)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	089b      	lsrs	r3, r3, #2
 8005c6e:	3302      	adds	r3, #2
 8005c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	220f      	movs	r2, #15
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c92:	d013      	beq.n	8005cbc <HAL_GPIO_Init+0x1c8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a47      	ldr	r2, [pc, #284]	@ (8005db4 <HAL_GPIO_Init+0x2c0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00d      	beq.n	8005cb8 <HAL_GPIO_Init+0x1c4>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a46      	ldr	r2, [pc, #280]	@ (8005db8 <HAL_GPIO_Init+0x2c4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d007      	beq.n	8005cb4 <HAL_GPIO_Init+0x1c0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a45      	ldr	r2, [pc, #276]	@ (8005dbc <HAL_GPIO_Init+0x2c8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d101      	bne.n	8005cb0 <HAL_GPIO_Init+0x1bc>
 8005cac:	2304      	movs	r3, #4
 8005cae:	e006      	b.n	8005cbe <HAL_GPIO_Init+0x1ca>
 8005cb0:	2307      	movs	r3, #7
 8005cb2:	e004      	b.n	8005cbe <HAL_GPIO_Init+0x1ca>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e002      	b.n	8005cbe <HAL_GPIO_Init+0x1ca>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <HAL_GPIO_Init+0x1ca>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	f002 0203 	and.w	r2, r2, #3
 8005cc4:	0092      	lsls	r2, r2, #2
 8005cc6:	4093      	lsls	r3, r2
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005cce:	4938      	ldr	r1, [pc, #224]	@ (8005db0 <HAL_GPIO_Init+0x2bc>)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	089b      	lsrs	r3, r3, #2
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cdc:	4b38      	ldr	r3, [pc, #224]	@ (8005dc0 <HAL_GPIO_Init+0x2cc>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d00:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc0 <HAL_GPIO_Init+0x2cc>)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d06:	4b2e      	ldr	r3, [pc, #184]	@ (8005dc0 <HAL_GPIO_Init+0x2cc>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4013      	ands	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d2a:	4a25      	ldr	r2, [pc, #148]	@ (8005dc0 <HAL_GPIO_Init+0x2cc>)
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d30:	4b23      	ldr	r3, [pc, #140]	@ (8005dc0 <HAL_GPIO_Init+0x2cc>)
 8005d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d56:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc0 <HAL_GPIO_Init+0x2cc>)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8005d5e:	4b18      	ldr	r3, [pc, #96]	@ (8005dc0 <HAL_GPIO_Init+0x2cc>)
 8005d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d84:	4a0e      	ldr	r2, [pc, #56]	@ (8005dc0 <HAL_GPIO_Init+0x2cc>)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f47f aeb1 	bne.w	8005b04 <HAL_GPIO_Init+0x10>
  }
}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40010000 	.word	0x40010000
 8005db4:	48000400 	.word	0x48000400
 8005db8:	48000800 	.word	0x48000800
 8005dbc:	48001000 	.word	0x48001000
 8005dc0:	58000800 	.word	0x58000800

08005dc4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005dca:	4b0a      	ldr	r3, [pc, #40]	@ (8005df4 <HAL_HSEM_IRQHandler+0x30>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005dd0:	4b08      	ldr	r3, [pc, #32]	@ (8005df4 <HAL_HSEM_IRQHandler+0x30>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	4906      	ldr	r1, [pc, #24]	@ (8005df4 <HAL_HSEM_IRQHandler+0x30>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005dde:	4a05      	ldr	r2, [pc, #20]	@ (8005df4 <HAL_HSEM_IRQHandler+0x30>)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f807 	bl	8005df8 <HAL_HSEM_FreeCallback>
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	58001500 	.word	0x58001500

08005df8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e08d      	b.n	8005f3a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff fabe 	bl	80053b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2224      	movs	r2, #36	@ 0x24
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d107      	bne.n	8005e86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e82:	609a      	str	r2, [r3, #8]
 8005e84:	e006      	b.n	8005e94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005e92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d108      	bne.n	8005eae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eaa:	605a      	str	r2, [r3, #4]
 8005eac:	e007      	b.n	8005ebe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ebc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ee0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69d9      	ldr	r1, [r3, #28]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	460b      	mov	r3, r1
 8005f52:	817b      	strh	r3, [r7, #10]
 8005f54:	4613      	mov	r3, r2
 8005f56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	f040 80fd 	bne.w	8006160 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_I2C_Master_Transmit+0x30>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e0f6      	b.n	8006162 <HAL_I2C_Master_Transmit+0x21e>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f7c:	f7ff fbfc 	bl	8005778 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	2319      	movs	r3, #25
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fbea 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e0e1      	b.n	8006162 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2221      	movs	r2, #33	@ 0x21
 8005fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2210      	movs	r2, #16
 8005faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	893a      	ldrh	r2, [r7, #8]
 8005fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2bff      	cmp	r3, #255	@ 0xff
 8005fce:	d906      	bls.n	8005fde <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	22ff      	movs	r2, #255	@ 0xff
 8005fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005fd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e007      	b.n	8005fee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005fe8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d024      	beq.n	8006040 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	781a      	ldrb	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602a:	b2db      	uxtb	r3, r3
 800602c:	3301      	adds	r3, #1
 800602e:	b2da      	uxtb	r2, r3
 8006030:	8979      	ldrh	r1, [r7, #10]
 8006032:	4b4e      	ldr	r3, [pc, #312]	@ (800616c <HAL_I2C_Master_Transmit+0x228>)
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fd59 	bl	8006af0 <I2C_TransferConfig>
 800603e:	e066      	b.n	800610e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006044:	b2da      	uxtb	r2, r3
 8006046:	8979      	ldrh	r1, [r7, #10]
 8006048:	4b48      	ldr	r3, [pc, #288]	@ (800616c <HAL_I2C_Master_Transmit+0x228>)
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fd4e 	bl	8006af0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006054:	e05b      	b.n	800610e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	6a39      	ldr	r1, [r7, #32]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fbdd 	bl	800681a <I2C_WaitOnTXISFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e07b      	b.n	8006162 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d034      	beq.n	800610e <HAL_I2C_Master_Transmit+0x1ca>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d130      	bne.n	800610e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	2200      	movs	r2, #0
 80060b4:	2180      	movs	r1, #128	@ 0x80
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fb56 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e04d      	b.n	8006162 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2bff      	cmp	r3, #255	@ 0xff
 80060ce:	d90e      	bls.n	80060ee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	22ff      	movs	r2, #255	@ 0xff
 80060d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	8979      	ldrh	r1, [r7, #10]
 80060de:	2300      	movs	r3, #0
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fd02 	bl	8006af0 <I2C_TransferConfig>
 80060ec:	e00f      	b.n	800610e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	8979      	ldrh	r1, [r7, #10]
 8006100:	2300      	movs	r3, #0
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 fcf1 	bl	8006af0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006112:	b29b      	uxth	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d19e      	bne.n	8006056 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	6a39      	ldr	r1, [r7, #32]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 fbc3 	bl	80068a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e01a      	b.n	8006162 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2220      	movs	r2, #32
 8006132:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6859      	ldr	r1, [r3, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <HAL_I2C_Master_Transmit+0x22c>)
 8006140:	400b      	ands	r3, r1
 8006142:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	e000      	b.n	8006162 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006160:	2302      	movs	r3, #2
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	80002000 	.word	0x80002000
 8006170:	fe00e800 	.word	0xfe00e800

08006174 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af02      	add	r7, sp, #8
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	4608      	mov	r0, r1
 800617e:	4611      	mov	r1, r2
 8006180:	461a      	mov	r2, r3
 8006182:	4603      	mov	r3, r0
 8006184:	817b      	strh	r3, [r7, #10]
 8006186:	460b      	mov	r3, r1
 8006188:	813b      	strh	r3, [r7, #8]
 800618a:	4613      	mov	r3, r2
 800618c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b20      	cmp	r3, #32
 8006198:	f040 80f9 	bne.w	800638e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_I2C_Mem_Write+0x34>
 80061a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d105      	bne.n	80061b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0ed      	b.n	8006390 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_I2C_Mem_Write+0x4e>
 80061be:	2302      	movs	r3, #2
 80061c0:	e0e6      	b.n	8006390 <HAL_I2C_Mem_Write+0x21c>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061ca:	f7ff fad5 	bl	8005778 <HAL_GetTick>
 80061ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	2319      	movs	r3, #25
 80061d6:	2201      	movs	r2, #1
 80061d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fac3 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0d1      	b.n	8006390 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2221      	movs	r2, #33	@ 0x21
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2240      	movs	r2, #64	@ 0x40
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a3a      	ldr	r2, [r7, #32]
 8006206:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800620c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006214:	88f8      	ldrh	r0, [r7, #6]
 8006216:	893a      	ldrh	r2, [r7, #8]
 8006218:	8979      	ldrh	r1, [r7, #10]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	4603      	mov	r3, r0
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f9d3 	bl	80065d0 <I2C_RequestMemoryWrite>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0a9      	b.n	8006390 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006240:	b29b      	uxth	r3, r3
 8006242:	2bff      	cmp	r3, #255	@ 0xff
 8006244:	d90e      	bls.n	8006264 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	22ff      	movs	r2, #255	@ 0xff
 800624a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006250:	b2da      	uxtb	r2, r3
 8006252:	8979      	ldrh	r1, [r7, #10]
 8006254:	2300      	movs	r3, #0
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fc47 	bl	8006af0 <I2C_TransferConfig>
 8006262:	e00f      	b.n	8006284 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006272:	b2da      	uxtb	r2, r3
 8006274:	8979      	ldrh	r1, [r7, #10]
 8006276:	2300      	movs	r3, #0
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 fc36 	bl	8006af0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fac6 	bl	800681a <I2C_WaitOnTXISFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e07b      	b.n	8006390 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	781a      	ldrb	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d034      	beq.n	800633c <HAL_I2C_Mem_Write+0x1c8>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d130      	bne.n	800633c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	2200      	movs	r2, #0
 80062e2:	2180      	movs	r1, #128	@ 0x80
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fa3f 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e04d      	b.n	8006390 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2bff      	cmp	r3, #255	@ 0xff
 80062fc:	d90e      	bls.n	800631c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	22ff      	movs	r2, #255	@ 0xff
 8006302:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006308:	b2da      	uxtb	r2, r3
 800630a:	8979      	ldrh	r1, [r7, #10]
 800630c:	2300      	movs	r3, #0
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fbeb 	bl	8006af0 <I2C_TransferConfig>
 800631a:	e00f      	b.n	800633c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800632a:	b2da      	uxtb	r2, r3
 800632c:	8979      	ldrh	r1, [r7, #10]
 800632e:	2300      	movs	r3, #0
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fbda 	bl	8006af0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d19e      	bne.n	8006284 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 faac 	bl	80068a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e01a      	b.n	8006390 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2220      	movs	r2, #32
 8006360:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b0a      	ldr	r3, [pc, #40]	@ (8006398 <HAL_I2C_Mem_Write+0x224>)
 800636e:	400b      	ands	r3, r1
 8006370:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	fe00e800 	.word	0xfe00e800

0800639c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	4608      	mov	r0, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	461a      	mov	r2, r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	817b      	strh	r3, [r7, #10]
 80063ae:	460b      	mov	r3, r1
 80063b0:	813b      	strh	r3, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b20      	cmp	r3, #32
 80063c0:	f040 80fd 	bne.w	80065be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <HAL_I2C_Mem_Read+0x34>
 80063ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d105      	bne.n	80063dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e0f1      	b.n	80065c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_I2C_Mem_Read+0x4e>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e0ea      	b.n	80065c0 <HAL_I2C_Mem_Read+0x224>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063f2:	f7ff f9c1 	bl	8005778 <HAL_GetTick>
 80063f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	2319      	movs	r3, #25
 80063fe:	2201      	movs	r2, #1
 8006400:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f9af 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e0d5      	b.n	80065c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2222      	movs	r2, #34	@ 0x22
 8006418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2240      	movs	r2, #64	@ 0x40
 8006420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a3a      	ldr	r2, [r7, #32]
 800642e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006434:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800643c:	88f8      	ldrh	r0, [r7, #6]
 800643e:	893a      	ldrh	r2, [r7, #8]
 8006440:	8979      	ldrh	r1, [r7, #10]
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	9301      	str	r3, [sp, #4]
 8006446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	4603      	mov	r3, r0
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f913 	bl	8006678 <I2C_RequestMemoryRead>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e0ad      	b.n	80065c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	2bff      	cmp	r3, #255	@ 0xff
 800646c:	d90e      	bls.n	800648c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	22ff      	movs	r2, #255	@ 0xff
 8006472:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006478:	b2da      	uxtb	r2, r3
 800647a:	8979      	ldrh	r1, [r7, #10]
 800647c:	4b52      	ldr	r3, [pc, #328]	@ (80065c8 <HAL_I2C_Mem_Read+0x22c>)
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fb33 	bl	8006af0 <I2C_TransferConfig>
 800648a:	e00f      	b.n	80064ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649a:	b2da      	uxtb	r2, r3
 800649c:	8979      	ldrh	r1, [r7, #10]
 800649e:	4b4a      	ldr	r3, [pc, #296]	@ (80065c8 <HAL_I2C_Mem_Read+0x22c>)
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 fb22 	bl	8006af0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b2:	2200      	movs	r2, #0
 80064b4:	2104      	movs	r1, #4
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f956 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e07c      	b.n	80065c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d034      	beq.n	800656c <HAL_I2C_Mem_Read+0x1d0>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d130      	bne.n	800656c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006510:	2200      	movs	r2, #0
 8006512:	2180      	movs	r1, #128	@ 0x80
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f927 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e04d      	b.n	80065c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2bff      	cmp	r3, #255	@ 0xff
 800652c:	d90e      	bls.n	800654c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	22ff      	movs	r2, #255	@ 0xff
 8006532:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006538:	b2da      	uxtb	r2, r3
 800653a:	8979      	ldrh	r1, [r7, #10]
 800653c:	2300      	movs	r3, #0
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fad3 	bl	8006af0 <I2C_TransferConfig>
 800654a:	e00f      	b.n	800656c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800655a:	b2da      	uxtb	r2, r3
 800655c:	8979      	ldrh	r1, [r7, #10]
 800655e:	2300      	movs	r3, #0
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fac2 	bl	8006af0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d19a      	bne.n	80064ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f994 	bl	80068a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e01a      	b.n	80065c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2220      	movs	r2, #32
 8006590:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b0b      	ldr	r3, [pc, #44]	@ (80065cc <HAL_I2C_Mem_Read+0x230>)
 800659e:	400b      	ands	r3, r1
 80065a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e000      	b.n	80065c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80065be:	2302      	movs	r3, #2
  }
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	80002400 	.word	0x80002400
 80065cc:	fe00e800 	.word	0xfe00e800

080065d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	4608      	mov	r0, r1
 80065da:	4611      	mov	r1, r2
 80065dc:	461a      	mov	r2, r3
 80065de:	4603      	mov	r3, r0
 80065e0:	817b      	strh	r3, [r7, #10]
 80065e2:	460b      	mov	r3, r1
 80065e4:	813b      	strh	r3, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80065ea:	88fb      	ldrh	r3, [r7, #6]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	8979      	ldrh	r1, [r7, #10]
 80065f0:	4b20      	ldr	r3, [pc, #128]	@ (8006674 <I2C_RequestMemoryWrite+0xa4>)
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fa79 	bl	8006af0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	69b9      	ldr	r1, [r7, #24]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f909 	bl	800681a <I2C_WaitOnTXISFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e02c      	b.n	800666c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d105      	bne.n	8006624 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006618:	893b      	ldrh	r3, [r7, #8]
 800661a:	b2da      	uxtb	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	629a      	str	r2, [r3, #40]	@ 0x28
 8006622:	e015      	b.n	8006650 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006624:	893b      	ldrh	r3, [r7, #8]
 8006626:	0a1b      	lsrs	r3, r3, #8
 8006628:	b29b      	uxth	r3, r3
 800662a:	b2da      	uxtb	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	69b9      	ldr	r1, [r7, #24]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f8ef 	bl	800681a <I2C_WaitOnTXISFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e012      	b.n	800666c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006646:	893b      	ldrh	r3, [r7, #8]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2200      	movs	r2, #0
 8006658:	2180      	movs	r1, #128	@ 0x80
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f884 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	80002000 	.word	0x80002000

08006678 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af02      	add	r7, sp, #8
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	4608      	mov	r0, r1
 8006682:	4611      	mov	r1, r2
 8006684:	461a      	mov	r2, r3
 8006686:	4603      	mov	r3, r0
 8006688:	817b      	strh	r3, [r7, #10]
 800668a:	460b      	mov	r3, r1
 800668c:	813b      	strh	r3, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	b2da      	uxtb	r2, r3
 8006696:	8979      	ldrh	r1, [r7, #10]
 8006698:	4b20      	ldr	r3, [pc, #128]	@ (800671c <I2C_RequestMemoryRead+0xa4>)
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	2300      	movs	r3, #0
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 fa26 	bl	8006af0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	69b9      	ldr	r1, [r7, #24]
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f8b6 	bl	800681a <I2C_WaitOnTXISFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e02c      	b.n	8006712 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d105      	bne.n	80066ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066be:	893b      	ldrh	r3, [r7, #8]
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80066c8:	e015      	b.n	80066f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066ca:	893b      	ldrh	r3, [r7, #8]
 80066cc:	0a1b      	lsrs	r3, r3, #8
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	69b9      	ldr	r1, [r7, #24]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 f89c 	bl	800681a <I2C_WaitOnTXISFlagUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e012      	b.n	8006712 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066ec:	893b      	ldrh	r3, [r7, #8]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2200      	movs	r2, #0
 80066fe:	2140      	movs	r1, #64	@ 0x40
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f831 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	80002000 	.word	0x80002000

08006720 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b02      	cmp	r3, #2
 8006734:	d103      	bne.n	800673e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b01      	cmp	r3, #1
 800674a:	d007      	beq.n	800675c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	619a      	str	r2, [r3, #24]
  }
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	4613      	mov	r3, r2
 8006776:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006778:	e03b      	b.n	80067f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f8d6 	bl	8006930 <I2C_IsErrorOccurred>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e041      	b.n	8006812 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006794:	d02d      	beq.n	80067f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006796:	f7fe ffef 	bl	8005778 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d302      	bcc.n	80067ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d122      	bne.n	80067f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4013      	ands	r3, r2
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d113      	bne.n	80067f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ce:	f043 0220 	orr.w	r2, r3, #32
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e00f      	b.n	8006812 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4013      	ands	r3, r2
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	429a      	cmp	r2, r3
 8006800:	bf0c      	ite	eq
 8006802:	2301      	moveq	r3, #1
 8006804:	2300      	movne	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	429a      	cmp	r2, r3
 800680e:	d0b4      	beq.n	800677a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006826:	e033      	b.n	8006890 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 f87f 	bl	8006930 <I2C_IsErrorOccurred>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e031      	b.n	80068a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006842:	d025      	beq.n	8006890 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006844:	f7fe ff98 	bl	8005778 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	429a      	cmp	r2, r3
 8006852:	d302      	bcc.n	800685a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d11a      	bne.n	8006890 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	d013      	beq.n	8006890 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686c:	f043 0220 	orr.w	r2, r3, #32
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e007      	b.n	80068a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b02      	cmp	r3, #2
 800689c:	d1c4      	bne.n	8006828 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068b4:	e02f      	b.n	8006916 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f838 	bl	8006930 <I2C_IsErrorOccurred>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e02d      	b.n	8006926 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ca:	f7fe ff55 	bl	8005778 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11a      	bne.n	8006916 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d013      	beq.n	8006916 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f2:	f043 0220 	orr.w	r2, r3, #32
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e007      	b.n	8006926 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b20      	cmp	r3, #32
 8006922:	d1c8      	bne.n	80068b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08a      	sub	sp, #40	@ 0x28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	d068      	beq.n	8006a2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2210      	movs	r2, #16
 8006962:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006964:	e049      	b.n	80069fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800696c:	d045      	beq.n	80069fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800696e:	f7fe ff03 	bl	8005778 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	429a      	cmp	r2, r3
 800697c:	d302      	bcc.n	8006984 <I2C_IsErrorOccurred+0x54>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d13a      	bne.n	80069fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800698e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006996:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069a6:	d121      	bne.n	80069ec <I2C_IsErrorOccurred+0xbc>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ae:	d01d      	beq.n	80069ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069b0:	7cfb      	ldrb	r3, [r7, #19]
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d01a      	beq.n	80069ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069c6:	f7fe fed7 	bl	8005778 <HAL_GetTick>
 80069ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069cc:	e00e      	b.n	80069ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069ce:	f7fe fed3 	bl	8005778 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b19      	cmp	r3, #25
 80069da:	d907      	bls.n	80069ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	f043 0320 	orr.w	r3, r3, #32
 80069e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80069ea:	e006      	b.n	80069fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d1e9      	bne.n	80069ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d003      	beq.n	8006a10 <I2C_IsErrorOccurred+0xe0>
 8006a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0aa      	beq.n	8006966 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d103      	bne.n	8006a20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	f043 0304 	orr.w	r3, r3, #4
 8006a26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f043 0308 	orr.w	r3, r3, #8
 8006a68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	f043 0302 	orr.w	r3, r3, #2
 8006a8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01c      	beq.n	8006ade <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7ff fe3b 	bl	8006720 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6859      	ldr	r1, [r3, #4]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8006aec <I2C_IsErrorOccurred+0x1bc>)
 8006ab6:	400b      	ands	r3, r1
 8006ab8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006ade:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3728      	adds	r7, #40	@ 0x28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	fe00e800 	.word	0xfe00e800

08006af0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	460b      	mov	r3, r1
 8006afc:	817b      	strh	r3, [r7, #10]
 8006afe:	4613      	mov	r3, r2
 8006b00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b02:	897b      	ldrh	r3, [r7, #10]
 8006b04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b08:	7a7b      	ldrb	r3, [r7, #9]
 8006b0a:	041b      	lsls	r3, r3, #16
 8006b0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	0d5b      	lsrs	r3, r3, #21
 8006b2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b2e:	4b08      	ldr	r3, [pc, #32]	@ (8006b50 <I2C_TransferConfig+0x60>)
 8006b30:	430b      	orrs	r3, r1
 8006b32:	43db      	mvns	r3, r3
 8006b34:	ea02 0103 	and.w	r1, r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	03ff63ff 	.word	0x03ff63ff

08006b54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	d138      	bne.n	8006bdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b74:	2302      	movs	r3, #2
 8006b76:	e032      	b.n	8006bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2224      	movs	r2, #36	@ 0x24
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0201 	bic.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ba6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6819      	ldr	r1, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e000      	b.n	8006bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bdc:	2302      	movs	r3, #2
  }
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b085      	sub	sp, #20
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d139      	bne.n	8006c74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e033      	b.n	8006c76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2224      	movs	r2, #36	@ 0x24
 8006c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e000      	b.n	8006c76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01e      	beq.n	8006cd4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8006c96:	4b13      	ldr	r3, [pc, #76]	@ (8006ce4 <HAL_IPCC_Init+0x60>)
 8006c98:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fe fbcc 	bl	8005444 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8006cac:	68b8      	ldr	r0, [r7, #8]
 8006cae:	f000 f85b 	bl	8006d68 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f82c 	bl	8006d1c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8006cd2:	e001      	b.n	8006cd8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	58000c00 	.word	0x58000c00

08006ce8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	e00f      	b.n	8006d4a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	4a0b      	ldr	r2, [pc, #44]	@ (8006d60 <IPCC_SetDefaultCallbacks+0x44>)
 8006d34:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3306      	adds	r3, #6
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	4a08      	ldr	r2, [pc, #32]	@ (8006d64 <IPCC_SetDefaultCallbacks+0x48>)
 8006d42:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b05      	cmp	r3, #5
 8006d4e:	d9ec      	bls.n	8006d2a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	08006ce9 	.word	0x08006ce9
 8006d64:	08006d03 	.word	0x08006d03

08006d68 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8006d7c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	223f      	movs	r2, #63	@ 0x3f
 8006d82:	609a      	str	r2, [r3, #8]
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a04      	ldr	r2, [pc, #16]	@ (8006dac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d9e:	6013      	str	r3, [r2, #0]
}
 8006da0:	bf00      	nop
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	58000400 	.word	0x58000400

08006db0 <LL_PWR_EnableSRAM2Retention>:
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8006db4:	4b05      	ldr	r3, [pc, #20]	@ (8006dcc <LL_PWR_EnableSRAM2Retention+0x1c>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	4a04      	ldr	r2, [pc, #16]	@ (8006dcc <LL_PWR_EnableSRAM2Retention+0x1c>)
 8006dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006dbe:	6093      	str	r3, [r2, #8]
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	58000400 	.word	0x58000400

08006dd0 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8006dd4:	f7ff ffec 	bl	8006db0 <LL_PWR_EnableSRAM2Retention>
}
 8006dd8:	bf00      	nop
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dee:	d101      	bne.n	8006df4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <LL_RCC_HSE_Enable>:
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e12:	6013      	str	r3, [r2, #0]
}
 8006e14:	bf00      	nop
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <LL_RCC_HSE_Disable>:
{
 8006e1e:	b480      	push	{r7}
 8006e20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e30:	6013      	str	r3, [r2, #0]
}
 8006e32:	bf00      	nop
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <LL_RCC_HSE_IsReady>:
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e4e:	d101      	bne.n	8006e54 <LL_RCC_HSE_IsReady+0x18>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <LL_RCC_HSE_IsReady+0x1a>
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <LL_RCC_HSI_Enable>:
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e72:	6013      	str	r3, [r2, #0]
}
 8006e74:	bf00      	nop
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <LL_RCC_HSI_Disable>:
{
 8006e7e:	b480      	push	{r7}
 8006e80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e90:	6013      	str	r3, [r2, #0]
}
 8006e92:	bf00      	nop
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <LL_RCC_HSI_IsReady>:
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eae:	d101      	bne.n	8006eb4 <LL_RCC_HSI_IsReady+0x18>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <LL_RCC_HSI_IsReady+0x1a>
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	061b      	lsls	r3, r3, #24
 8006ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006eda:	4313      	orrs	r3, r2
 8006edc:	604b      	str	r3, [r1, #4]
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <LL_RCC_LSE_Enable>:
{
 8006eea:	b480      	push	{r7}
 8006eec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f02:	bf00      	nop
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <LL_RCC_LSE_Disable>:
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f1c:	f023 0301 	bic.w	r3, r3, #1
 8006f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f24:	bf00      	nop
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <LL_RCC_LSE_EnableBypass>:
{
 8006f2e:	b480      	push	{r7}
 8006f30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f3e:	f043 0304 	orr.w	r3, r3, #4
 8006f42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f46:	bf00      	nop
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <LL_RCC_LSE_DisableBypass>:
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f60:	f023 0304 	bic.w	r3, r3, #4
 8006f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <LL_RCC_LSE_IsReady>:
{
 8006f72:	b480      	push	{r7}
 8006f74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d101      	bne.n	8006f8a <LL_RCC_LSE_IsReady+0x18>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <LL_RCC_LSE_IsReady+0x1a>
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <LL_RCC_LSI1_Enable>:
{
 8006f96:	b480      	push	{r7}
 8006f98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006fae:	bf00      	nop
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <LL_RCC_LSI1_Disable>:
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006fd0:	bf00      	nop
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <LL_RCC_LSI1_IsReady>:
{
 8006fda:	b480      	push	{r7}
 8006fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d101      	bne.n	8006ff2 <LL_RCC_LSI1_IsReady+0x18>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <LL_RCC_LSI1_IsReady+0x1a>
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <LL_RCC_LSI2_Enable>:
{
 8006ffe:	b480      	push	{r7}
 8007000:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800700a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800700e:	f043 0304 	orr.w	r3, r3, #4
 8007012:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007016:	bf00      	nop
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <LL_RCC_LSI2_Disable>:
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800702c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007030:	f023 0304 	bic.w	r3, r3, #4
 8007034:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007038:	bf00      	nop
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <LL_RCC_LSI2_IsReady>:
{
 8007042:	b480      	push	{r7}
 8007044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800704a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800704e:	f003 0308 	and.w	r3, r3, #8
 8007052:	2b08      	cmp	r3, #8
 8007054:	d101      	bne.n	800705a <LL_RCC_LSI2_IsReady+0x18>
 8007056:	2301      	movs	r3, #1
 8007058:	e000      	b.n	800705c <LL_RCC_LSI2_IsReady+0x1a>
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <LL_RCC_LSI2_SetTrimming>:
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800706e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007076:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007082:	4313      	orrs	r3, r2
 8007084:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <LL_RCC_MSI_Enable>:
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070a2:	f043 0301 	orr.w	r3, r3, #1
 80070a6:	6013      	str	r3, [r2, #0]
}
 80070a8:	bf00      	nop
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <LL_RCC_MSI_Disable>:
{
 80070b2:	b480      	push	{r7}
 80070b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80070b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070c0:	f023 0301 	bic.w	r3, r3, #1
 80070c4:	6013      	str	r3, [r2, #0]
}
 80070c6:	bf00      	nop
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <LL_RCC_MSI_IsReady>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80070d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d101      	bne.n	80070e6 <LL_RCC_MSI_IsReady+0x16>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <LL_RCC_MSI_IsReady+0x18>
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <LL_RCC_MSI_SetRange>:
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80070fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007104:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4313      	orrs	r3, r2
 800710c:	600b      	str	r3, [r1, #0]
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <LL_RCC_MSI_GetRange>:
{
 800711a:	b480      	push	{r7}
 800711c:	b083      	sub	sp, #12
 800711e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800712a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2bb0      	cmp	r3, #176	@ 0xb0
 8007130:	d901      	bls.n	8007136 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007132:	23b0      	movs	r3, #176	@ 0xb0
 8007134:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007136:	687b      	ldr	r3, [r7, #4]
}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800714c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800715e:	4313      	orrs	r3, r2
 8007160:	604b      	str	r3, [r1, #4]
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <LL_RCC_SetSysClkSource>:
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f023 0203 	bic.w	r2, r3, #3
 8007180:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4313      	orrs	r3, r2
 8007188:	608b      	str	r3, [r1, #8]
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <LL_RCC_GetSysClkSource>:
{
 8007196:	b480      	push	{r7}
 8007198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800719a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 030c 	and.w	r3, r3, #12
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <LL_RCC_SetAHBPrescaler>:
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80071b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	608b      	str	r3, [r1, #8]
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80071de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80071e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <LL_RCC_SetAHB4Prescaler>:
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800720a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800720e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007212:	f023 020f 	bic.w	r2, r3, #15
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	091b      	lsrs	r3, r3, #4
 800721a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <LL_RCC_SetAPB1Prescaler>:
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007242:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4313      	orrs	r3, r2
 800724a:	608b      	str	r3, [r1, #8]
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <LL_RCC_SetAPB2Prescaler>:
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800726a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4313      	orrs	r3, r2
 8007272:	608b      	str	r3, [r1, #8]
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <LL_RCC_GetAHBPrescaler>:
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800728e:	4618      	mov	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <LL_RCC_GetAHB4Prescaler>:
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800729c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80072a4:	011b      	lsls	r3, r3, #4
 80072a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80072b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072c6:	6013      	str	r3, [r2, #0]
}
 80072c8:	bf00      	nop
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80072d2:	b480      	push	{r7}
 80072d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80072d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072e4:	6013      	str	r3, [r2, #0]
}
 80072e6:	bf00      	nop
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80072f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007302:	d101      	bne.n	8007308 <LL_RCC_PLL_IsReady+0x18>
 8007304:	2301      	movs	r3, #1
 8007306:	e000      	b.n	800730a <LL_RCC_PLL_IsReady+0x1a>
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8007324:	4618      	mov	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800732e:	b480      	push	{r7}
 8007330:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800733c:	4618      	mov	r0, r3
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007346:	b480      	push	{r7}
 8007348:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800734a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800735e:	b480      	push	{r7}
 8007360:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0303 	and.w	r3, r3, #3
}
 800736c:	4618      	mov	r0, r3
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007376:	b480      	push	{r7}
 8007378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800737a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007388:	d101      	bne.n	800738e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800739e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80073a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073ae:	d101      	bne.n	80073b4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e000      	b.n	80073b6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80073c0:	b480      	push	{r7}
 80073c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80073c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80073cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073d4:	d101      	bne.n	80073da <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e000      	b.n	80073dc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80073e6:	b480      	push	{r7}
 80073e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80073ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073f8:	d101      	bne.n	80073fe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800740a:	b480      	push	{r7}
 800740c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800740e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007418:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800741c:	d101      	bne.n	8007422 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007430:	b590      	push	{r4, r7, lr}
 8007432:	b08d      	sub	sp, #52	@ 0x34
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e324      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 808d 	beq.w	800756a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007450:	f7ff fea1 	bl	8007196 <LL_RCC_GetSysClkSource>
 8007454:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007456:	f7ff ff82 	bl	800735e <LL_RCC_PLL_GetMainSource>
 800745a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800745c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745e:	2b00      	cmp	r3, #0
 8007460:	d005      	beq.n	800746e <HAL_RCC_OscConfig+0x3e>
 8007462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007464:	2b0c      	cmp	r3, #12
 8007466:	d147      	bne.n	80074f8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746a:	2b01      	cmp	r3, #1
 800746c:	d144      	bne.n	80074f8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e308      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800747e:	f7ff fe4c 	bl	800711a <LL_RCC_MSI_GetRange>
 8007482:	4603      	mov	r3, r0
 8007484:	429c      	cmp	r4, r3
 8007486:	d914      	bls.n	80074b2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fcc5 	bl	8007e1c <RCC_SetFlashLatencyFromMSIRange>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e2f7      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff fe26 	bl	80070f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fe4a 	bl	8007144 <LL_RCC_MSI_SetCalibTrimming>
 80074b0:	e013      	b.n	80074da <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff fe1b 	bl	80070f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff fe3f 	bl	8007144 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fca6 	bl	8007e1c <RCC_SetFlashLatencyFromMSIRange>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e2d8      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80074da:	f000 fc8b 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 80074de:	4603      	mov	r3, r0
 80074e0:	4aa4      	ldr	r2, [pc, #656]	@ (8007774 <HAL_RCC_OscConfig+0x344>)
 80074e2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80074e4:	4ba4      	ldr	r3, [pc, #656]	@ (8007778 <HAL_RCC_OscConfig+0x348>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe f8f7 	bl	80056dc <HAL_InitTick>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d039      	beq.n	8007568 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e2c9      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01e      	beq.n	800753e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007500:	f7ff fdc8 	bl	8007094 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007504:	f7fe f938 	bl	8005778 <HAL_GetTick>
 8007508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800750c:	f7fe f934 	bl	8005778 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e2b6      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800751e:	f7ff fdd7 	bl	80070d0 <LL_RCC_MSI_IsReady>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0f1      	beq.n	800750c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff fde0 	bl	80070f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fe04 	bl	8007144 <LL_RCC_MSI_SetCalibTrimming>
 800753c:	e015      	b.n	800756a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800753e:	f7ff fdb8 	bl	80070b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007542:	f7fe f919 	bl	8005778 <HAL_GetTick>
 8007546:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007548:	e008      	b.n	800755c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800754a:	f7fe f915 	bl	8005778 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e297      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 800755c:	f7ff fdb8 	bl	80070d0 <LL_RCC_MSI_IsReady>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1f1      	bne.n	800754a <HAL_RCC_OscConfig+0x11a>
 8007566:	e000      	b.n	800756a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007568:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d047      	beq.n	8007606 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007576:	f7ff fe0e 	bl	8007196 <LL_RCC_GetSysClkSource>
 800757a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800757c:	f7ff feef 	bl	800735e <LL_RCC_PLL_GetMainSource>
 8007580:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	2b08      	cmp	r3, #8
 8007586:	d005      	beq.n	8007594 <HAL_RCC_OscConfig+0x164>
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	2b0c      	cmp	r3, #12
 800758c:	d108      	bne.n	80075a0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	2b03      	cmp	r3, #3
 8007592:	d105      	bne.n	80075a0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d134      	bne.n	8007606 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e275      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075a8:	d102      	bne.n	80075b0 <HAL_RCC_OscConfig+0x180>
 80075aa:	f7ff fc29 	bl	8006e00 <LL_RCC_HSE_Enable>
 80075ae:	e001      	b.n	80075b4 <HAL_RCC_OscConfig+0x184>
 80075b0:	f7ff fc35 	bl	8006e1e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d012      	beq.n	80075e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075bc:	f7fe f8dc 	bl	8005778 <HAL_GetTick>
 80075c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80075c2:	e008      	b.n	80075d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075c4:	f7fe f8d8 	bl	8005778 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b64      	cmp	r3, #100	@ 0x64
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e25a      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80075d6:	f7ff fc31 	bl	8006e3c <LL_RCC_HSE_IsReady>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0f1      	beq.n	80075c4 <HAL_RCC_OscConfig+0x194>
 80075e0:	e011      	b.n	8007606 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e2:	f7fe f8c9 	bl	8005778 <HAL_GetTick>
 80075e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80075e8:	e008      	b.n	80075fc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075ea:	f7fe f8c5 	bl	8005778 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b64      	cmp	r3, #100	@ 0x64
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e247      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80075fc:	f7ff fc1e 	bl	8006e3c <LL_RCC_HSE_IsReady>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1f1      	bne.n	80075ea <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d04c      	beq.n	80076ac <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007612:	f7ff fdc0 	bl	8007196 <LL_RCC_GetSysClkSource>
 8007616:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007618:	f7ff fea1 	bl	800735e <LL_RCC_PLL_GetMainSource>
 800761c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b04      	cmp	r3, #4
 8007622:	d005      	beq.n	8007630 <HAL_RCC_OscConfig+0x200>
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b0c      	cmp	r3, #12
 8007628:	d10e      	bne.n	8007648 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d10b      	bne.n	8007648 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e227      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	4618      	mov	r0, r3
 8007642:	f7ff fc3d 	bl	8006ec0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007646:	e031      	b.n	80076ac <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d019      	beq.n	8007684 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007650:	f7ff fc06 	bl	8006e60 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007654:	f7fe f890 	bl	8005778 <HAL_GetTick>
 8007658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800765c:	f7fe f88c 	bl	8005778 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e20e      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800766e:	f7ff fc15 	bl	8006e9c <LL_RCC_HSI_IsReady>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f1      	beq.n	800765c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff fc1f 	bl	8006ec0 <LL_RCC_HSI_SetCalibTrimming>
 8007682:	e013      	b.n	80076ac <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007684:	f7ff fbfb 	bl	8006e7e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007688:	f7fe f876 	bl	8005778 <HAL_GetTick>
 800768c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007690:	f7fe f872 	bl	8005778 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e1f4      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80076a2:	f7ff fbfb 	bl	8006e9c <LL_RCC_HSI_IsReady>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1f1      	bne.n	8007690 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d106      	bne.n	80076c6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80a3 	beq.w	800780c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d076      	beq.n	80077bc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d046      	beq.n	8007768 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80076da:	f7ff fc7e 	bl	8006fda <LL_RCC_LSI1_IsReady>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d113      	bne.n	800770c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80076e4:	f7ff fc57 	bl	8006f96 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076e8:	f7fe f846 	bl	8005778 <HAL_GetTick>
 80076ec:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80076f0:	f7fe f842 	bl	8005778 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e1c4      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007702:	f7ff fc6a 	bl	8006fda <LL_RCC_LSI1_IsReady>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0f1      	beq.n	80076f0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800770c:	f7ff fc77 	bl	8006ffe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007710:	f7fe f832 	bl	8005778 <HAL_GetTick>
 8007714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007718:	f7fe f82e 	bl	8005778 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b03      	cmp	r3, #3
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e1b0      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800772a:	f7ff fc8a 	bl	8007042 <LL_RCC_LSI2_IsReady>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0f1      	beq.n	8007718 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	4618      	mov	r0, r3
 800773a:	f7ff fc94 	bl	8007066 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800773e:	f7ff fc3b 	bl	8006fb8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007742:	f7fe f819 	bl	8005778 <HAL_GetTick>
 8007746:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007748:	e008      	b.n	800775c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800774a:	f7fe f815 	bl	8005778 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e197      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800775c:	f7ff fc3d 	bl	8006fda <LL_RCC_LSI1_IsReady>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1f1      	bne.n	800774a <HAL_RCC_OscConfig+0x31a>
 8007766:	e051      	b.n	800780c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007768:	f7ff fc15 	bl	8006f96 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776c:	f7fe f804 	bl	8005778 <HAL_GetTick>
 8007770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007772:	e00c      	b.n	800778e <HAL_RCC_OscConfig+0x35e>
 8007774:	20000014 	.word	0x20000014
 8007778:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800777c:	f7fd fffc 	bl	8005778 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e17e      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800778e:	f7ff fc24 	bl	8006fda <LL_RCC_LSI1_IsReady>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f1      	beq.n	800777c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007798:	f7ff fc42 	bl	8007020 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800779c:	e008      	b.n	80077b0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800779e:	f7fd ffeb 	bl	8005778 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e16d      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80077b0:	f7ff fc47 	bl	8007042 <LL_RCC_LSI2_IsReady>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1f1      	bne.n	800779e <HAL_RCC_OscConfig+0x36e>
 80077ba:	e027      	b.n	800780c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80077bc:	f7ff fc30 	bl	8007020 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c0:	f7fd ffda 	bl	8005778 <HAL_GetTick>
 80077c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80077c6:	e008      	b.n	80077da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80077c8:	f7fd ffd6 	bl	8005778 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e158      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80077da:	f7ff fc32 	bl	8007042 <LL_RCC_LSI2_IsReady>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1f1      	bne.n	80077c8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80077e4:	f7ff fbe8 	bl	8006fb8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e8:	f7fd ffc6 	bl	8005778 <HAL_GetTick>
 80077ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80077f0:	f7fd ffc2 	bl	8005778 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e144      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007802:	f7ff fbea 	bl	8006fda <LL_RCC_LSI1_IsReady>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1f1      	bne.n	80077f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d05b      	beq.n	80078d0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007818:	4b9e      	ldr	r3, [pc, #632]	@ (8007a94 <HAL_RCC_OscConfig+0x664>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	d114      	bne.n	800784e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007824:	f7ff fab4 	bl	8006d90 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007828:	f7fd ffa6 	bl	8005778 <HAL_GetTick>
 800782c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007830:	f7fd ffa2 	bl	8005778 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e124      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007842:	4b94      	ldr	r3, [pc, #592]	@ (8007a94 <HAL_RCC_OscConfig+0x664>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0f0      	beq.n	8007830 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d102      	bne.n	800785c <HAL_RCC_OscConfig+0x42c>
 8007856:	f7ff fb48 	bl	8006eea <LL_RCC_LSE_Enable>
 800785a:	e00c      	b.n	8007876 <HAL_RCC_OscConfig+0x446>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b05      	cmp	r3, #5
 8007862:	d104      	bne.n	800786e <HAL_RCC_OscConfig+0x43e>
 8007864:	f7ff fb63 	bl	8006f2e <LL_RCC_LSE_EnableBypass>
 8007868:	f7ff fb3f 	bl	8006eea <LL_RCC_LSE_Enable>
 800786c:	e003      	b.n	8007876 <HAL_RCC_OscConfig+0x446>
 800786e:	f7ff fb4d 	bl	8006f0c <LL_RCC_LSE_Disable>
 8007872:	f7ff fb6d 	bl	8006f50 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d014      	beq.n	80078a8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800787e:	f7fd ff7b 	bl	8005778 <HAL_GetTick>
 8007882:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007884:	e00a      	b.n	800789c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007886:	f7fd ff77 	bl	8005778 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007894:	4293      	cmp	r3, r2
 8007896:	d901      	bls.n	800789c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e0f7      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 800789c:	f7ff fb69 	bl	8006f72 <LL_RCC_LSE_IsReady>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0ef      	beq.n	8007886 <HAL_RCC_OscConfig+0x456>
 80078a6:	e013      	b.n	80078d0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a8:	f7fd ff66 	bl	8005778 <HAL_GetTick>
 80078ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80078ae:	e00a      	b.n	80078c6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078b0:	f7fd ff62 	bl	8005778 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078be:	4293      	cmp	r3, r2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e0e2      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80078c6:	f7ff fb54 	bl	8006f72 <LL_RCC_LSE_IsReady>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1ef      	bne.n	80078b0 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80d8 	beq.w	8007a8a <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078da:	f7ff fc5c 	bl	8007196 <LL_RCC_GetSysClkSource>
 80078de:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80078e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	f040 80a6 	bne.w	8007a3e <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f003 0203 	and.w	r2, r3, #3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d123      	bne.n	8007948 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790a:	429a      	cmp	r2, r3
 800790c:	d11c      	bne.n	8007948 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	0a1b      	lsrs	r3, r3, #8
 8007912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800791a:	429a      	cmp	r2, r3
 800791c:	d114      	bne.n	8007948 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007928:	429a      	cmp	r2, r3
 800792a:	d10d      	bne.n	8007948 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007936:	429a      	cmp	r2, r3
 8007938:	d106      	bne.n	8007948 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007944:	429a      	cmp	r2, r3
 8007946:	d054      	beq.n	80079f2 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b0c      	cmp	r3, #12
 800794c:	d04f      	beq.n	80079ee <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800794e:	f7ff fcc0 	bl	80072d2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007952:	f7fd ff11 	bl	8005778 <HAL_GetTick>
 8007956:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007958:	e008      	b.n	800796c <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800795a:	f7fd ff0d 	bl	8005778 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e08f      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800796c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1ef      	bne.n	800795a <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800797a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	4b45      	ldr	r3, [pc, #276]	@ (8007a98 <HAL_RCC_OscConfig+0x668>)
 8007982:	4013      	ands	r3, r2
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800798c:	4311      	orrs	r1, r2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007992:	0212      	lsls	r2, r2, #8
 8007994:	4311      	orrs	r1, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800799a:	4311      	orrs	r1, r2
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80079a0:	4311      	orrs	r1, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80079a6:	430a      	orrs	r2, r1
 80079a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80079b0:	f7ff fc80 	bl	80072b4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80079b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80079be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80079c4:	f7fd fed8 	bl	8005778 <HAL_GetTick>
 80079c8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079cc:	f7fd fed4 	bl	8005778 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e056      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0ef      	beq.n	80079cc <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079ec:	e04d      	b.n	8007a8a <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e04c      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d144      	bne.n	8007a8a <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007a00:	f7ff fc58 	bl	80072b4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a14:	f7fd feb0 	bl	8005778 <HAL_GetTick>
 8007a18:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a1a:	e008      	b.n	8007a2e <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a1c:	f7fd feac 	bl	8005778 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e02e      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0ef      	beq.n	8007a1c <HAL_RCC_OscConfig+0x5ec>
 8007a3c:	e025      	b.n	8007a8a <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b0c      	cmp	r3, #12
 8007a42:	d020      	beq.n	8007a86 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a44:	f7ff fc45 	bl	80072d2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a48:	f7fd fe96 	bl	8005778 <HAL_GetTick>
 8007a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a50:	f7fd fe92 	bl	8005778 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e014      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1ef      	bne.n	8007a50 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8007a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	60d3      	str	r3, [r2, #12]
 8007a84:	e001      	b.n	8007a8a <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3734      	adds	r7, #52	@ 0x34
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd90      	pop	{r4, r7, pc}
 8007a94:	58000400 	.word	0x58000400
 8007a98:	11c1808c 	.word	0x11c1808c

08007a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e12d      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ab0:	4b98      	ldr	r3, [pc, #608]	@ (8007d14 <HAL_RCC_ClockConfig+0x278>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d91b      	bls.n	8007af6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007abe:	4b95      	ldr	r3, [pc, #596]	@ (8007d14 <HAL_RCC_ClockConfig+0x278>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f023 0207 	bic.w	r2, r3, #7
 8007ac6:	4993      	ldr	r1, [pc, #588]	@ (8007d14 <HAL_RCC_ClockConfig+0x278>)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ace:	f7fd fe53 	bl	8005778 <HAL_GetTick>
 8007ad2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007ad6:	f7fd fe4f 	bl	8005778 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e111      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ae8:	4b8a      	ldr	r3, [pc, #552]	@ (8007d14 <HAL_RCC_ClockConfig+0x278>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d1ef      	bne.n	8007ad6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d016      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff fb51 	bl	80071ae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b0c:	f7fd fe34 	bl	8005778 <HAL_GetTick>
 8007b10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b14:	f7fd fe30 	bl	8005778 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e0f2      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007b26:	f7ff fc26 	bl	8007376 <LL_RCC_IsActiveFlag_HPRE>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0f1      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d016      	beq.n	8007b6a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fb48 	bl	80071d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b46:	f7fd fe17 	bl	8005778 <HAL_GetTick>
 8007b4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007b4c:	e008      	b.n	8007b60 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b4e:	f7fd fe13 	bl	8005778 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e0d5      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007b60:	f7ff fc1b 	bl	800739a <LL_RCC_IsActiveFlag_C2HPRE>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0f1      	beq.n	8007b4e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d016      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fb41 	bl	8007202 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b80:	f7fd fdfa 	bl	8005778 <HAL_GetTick>
 8007b84:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b88:	f7fd fdf6 	bl	8005778 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e0b8      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007b9a:	f7ff fc11 	bl	80073c0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0f1      	beq.n	8007b88 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d016      	beq.n	8007bde <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff fb3b 	bl	8007230 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007bba:	f7fd fddd 	bl	8005778 <HAL_GetTick>
 8007bbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007bc0:	e008      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007bc2:	f7fd fdd9 	bl	8005778 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d901      	bls.n	8007bd4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e09b      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007bd4:	f7ff fc07 	bl	80073e6 <LL_RCC_IsActiveFlag_PPRE1>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0f1      	beq.n	8007bc2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d017      	beq.n	8007c1a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff fb31 	bl	8007258 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007bf6:	f7fd fdbf 	bl	8005778 <HAL_GetTick>
 8007bfa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007bfc:	e008      	b.n	8007c10 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007bfe:	f7fd fdbb 	bl	8005778 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d901      	bls.n	8007c10 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e07d      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007c10:	f7ff fbfb 	bl	800740a <LL_RCC_IsActiveFlag_PPRE2>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f1      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d043      	beq.n	8007cae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d106      	bne.n	8007c3c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007c2e:	f7ff f905 	bl	8006e3c <LL_RCC_HSE_IsReady>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11e      	bne.n	8007c76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e067      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d106      	bne.n	8007c52 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007c44:	f7ff fb54 	bl	80072f0 <LL_RCC_PLL_IsReady>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d113      	bne.n	8007c76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e05c      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007c5a:	f7ff fa39 	bl	80070d0 <LL_RCC_MSI_IsReady>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d108      	bne.n	8007c76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e051      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007c68:	f7ff f918 	bl	8006e9c <LL_RCC_HSI_IsReady>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e04a      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fa77 	bl	800716e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c80:	f7fd fd7a 	bl	8005778 <HAL_GetTick>
 8007c84:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c86:	e00a      	b.n	8007c9e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c88:	f7fd fd76 	bl	8005778 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d901      	bls.n	8007c9e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e036      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c9e:	f7ff fa7a 	bl	8007196 <LL_RCC_GetSysClkSource>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d1ec      	bne.n	8007c88 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cae:	4b19      	ldr	r3, [pc, #100]	@ (8007d14 <HAL_RCC_ClockConfig+0x278>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0307 	and.w	r3, r3, #7
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d21b      	bcs.n	8007cf4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cbc:	4b15      	ldr	r3, [pc, #84]	@ (8007d14 <HAL_RCC_ClockConfig+0x278>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f023 0207 	bic.w	r2, r3, #7
 8007cc4:	4913      	ldr	r1, [pc, #76]	@ (8007d14 <HAL_RCC_ClockConfig+0x278>)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ccc:	f7fd fd54 	bl	8005778 <HAL_GetTick>
 8007cd0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cd2:	e008      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007cd4:	f7fd fd50 	bl	8005778 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e012      	b.n	8007d0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d14 <HAL_RCC_ClockConfig+0x278>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d1ef      	bne.n	8007cd4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007cf4:	f000 f87e 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	4a07      	ldr	r2, [pc, #28]	@ (8007d18 <HAL_RCC_ClockConfig+0x27c>)
 8007cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007cfe:	f7fd fd47 	bl	8005790 <HAL_GetTickPrio>
 8007d02:	4603      	mov	r3, r0
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fd fce9 	bl	80056dc <HAL_InitTick>
 8007d0a:	4603      	mov	r3, r0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	58004000 	.word	0x58004000
 8007d18:	20000014 	.word	0x20000014

08007d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d22:	f7ff fa38 	bl	8007196 <LL_RCC_GetSysClkSource>
 8007d26:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007d2e:	f7ff f9f4 	bl	800711a <LL_RCC_MSI_GetRange>
 8007d32:	4603      	mov	r3, r0
 8007d34:	091b      	lsrs	r3, r3, #4
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	4a2b      	ldr	r2, [pc, #172]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	e04b      	b.n	8007ddc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d102      	bne.n	8007d50 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d4a:	4b28      	ldr	r3, [pc, #160]	@ (8007dec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	e045      	b.n	8007ddc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b08      	cmp	r3, #8
 8007d54:	d10a      	bne.n	8007d6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007d56:	f7ff f841 	bl	8006ddc <LL_RCC_HSE_IsEnabledDiv2>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d102      	bne.n	8007d66 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007d60:	4b22      	ldr	r3, [pc, #136]	@ (8007dec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e03a      	b.n	8007ddc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007d66:	4b22      	ldr	r3, [pc, #136]	@ (8007df0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e037      	b.n	8007ddc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007d6c:	f7ff faf7 	bl	800735e <LL_RCC_PLL_GetMainSource>
 8007d70:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d003      	beq.n	8007d80 <HAL_RCC_GetSysClockFreq+0x64>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d003      	beq.n	8007d86 <HAL_RCC_GetSysClockFreq+0x6a>
 8007d7e:	e00d      	b.n	8007d9c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007d80:	4b1a      	ldr	r3, [pc, #104]	@ (8007dec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007d82:	60bb      	str	r3, [r7, #8]
        break;
 8007d84:	e015      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007d86:	f7ff f829 	bl	8006ddc <LL_RCC_HSE_IsEnabledDiv2>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d102      	bne.n	8007d96 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007d90:	4b16      	ldr	r3, [pc, #88]	@ (8007dec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007d92:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007d94:	e00d      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007d96:	4b16      	ldr	r3, [pc, #88]	@ (8007df0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007d98:	60bb      	str	r3, [r7, #8]
        break;
 8007d9a:	e00a      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007d9c:	f7ff f9bd 	bl	800711a <LL_RCC_MSI_GetRange>
 8007da0:	4603      	mov	r3, r0
 8007da2:	091b      	lsrs	r3, r3, #4
 8007da4:	f003 030f 	and.w	r3, r3, #15
 8007da8:	4a0f      	ldr	r2, [pc, #60]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dae:	60bb      	str	r3, [r7, #8]
        break;
 8007db0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007db2:	f7ff faaf 	bl	8007314 <LL_RCC_PLL_GetN>
 8007db6:	4602      	mov	r2, r0
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	fb03 f402 	mul.w	r4, r3, r2
 8007dbe:	f7ff fac2 	bl	8007346 <LL_RCC_PLL_GetDivider>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	091b      	lsrs	r3, r3, #4
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	fbb4 f4f3 	udiv	r4, r4, r3
 8007dcc:	f7ff faaf 	bl	800732e <LL_RCC_PLL_GetR>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	0f5b      	lsrs	r3, r3, #29
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	fbb4 f3f3 	udiv	r3, r4, r3
 8007dda:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd90      	pop	{r4, r7, pc}
 8007de6:	bf00      	nop
 8007de8:	0800f8dc 	.word	0x0800f8dc
 8007dec:	00f42400 	.word	0x00f42400
 8007df0:	01e84800 	.word	0x01e84800

08007df4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df4:	b598      	push	{r3, r4, r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007df8:	f7ff ff90 	bl	8007d1c <HAL_RCC_GetSysClockFreq>
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	f7ff fa3f 	bl	8007280 <LL_RCC_GetAHBPrescaler>
 8007e02:	4603      	mov	r3, r0
 8007e04:	091b      	lsrs	r3, r3, #4
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	4a03      	ldr	r2, [pc, #12]	@ (8007e18 <HAL_RCC_GetHCLKFreq+0x24>)
 8007e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	bd98      	pop	{r3, r4, r7, pc}
 8007e18:	0800f89c 	.word	0x0800f89c

08007e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2bb0      	cmp	r3, #176	@ 0xb0
 8007e28:	d903      	bls.n	8007e32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007e2a:	4b14      	ldr	r3, [pc, #80]	@ (8007e7c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e007      	b.n	8007e42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	091b      	lsrs	r3, r3, #4
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	4a10      	ldr	r2, [pc, #64]	@ (8007e7c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8007e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007e42:	f7ff fa29 	bl	8007298 <LL_RCC_GetAHB4Prescaler>
 8007e46:	4603      	mov	r3, r0
 8007e48:	091b      	lsrs	r3, r3, #4
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4a09      	ldr	r2, [pc, #36]	@ (8007e84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007e60:	fba2 2303 	umull	r2, r3, r2, r3
 8007e64:	0c9b      	lsrs	r3, r3, #18
 8007e66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 f80c 	bl	8007e88 <RCC_SetFlashLatency>
 8007e70:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	0800f8dc 	.word	0x0800f8dc
 8007e80:	0800f89c 	.word	0x0800f89c
 8007e84:	431bde83 	.word	0x431bde83

08007e88 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007e88:	b590      	push	{r4, r7, lr}
 8007e8a:	b08f      	sub	sp, #60	@ 0x3c
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007e92:	4b24      	ldr	r3, [pc, #144]	@ (8007f24 <RCC_SetFlashLatency+0x9c>)
 8007e94:	f107 041c 	add.w	r4, r7, #28
 8007e98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007e9e:	4b22      	ldr	r3, [pc, #136]	@ (8007f28 <RCC_SetFlashLatency+0xa0>)
 8007ea0:	f107 040c 	add.w	r4, r7, #12
 8007ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007eaa:	2300      	movs	r3, #0
 8007eac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007eae:	2300      	movs	r3, #0
 8007eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eb2:	e013      	b.n	8007edc <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	3338      	adds	r3, #56	@ 0x38
 8007eba:	443b      	add	r3, r7
 8007ebc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d807      	bhi.n	8007ed6 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	3338      	adds	r3, #56	@ 0x38
 8007ecc:	443b      	add	r3, r7
 8007ece:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007ed2:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8007ed4:	e005      	b.n	8007ee2 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	3301      	adds	r3, #1
 8007eda:	633b      	str	r3, [r7, #48]	@ 0x30
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d9e8      	bls.n	8007eb4 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007ee2:	4b12      	ldr	r3, [pc, #72]	@ (8007f2c <RCC_SetFlashLatency+0xa4>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f023 0207 	bic.w	r2, r3, #7
 8007eea:	4910      	ldr	r1, [pc, #64]	@ (8007f2c <RCC_SetFlashLatency+0xa4>)
 8007eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ef2:	f7fd fc41 	bl	8005778 <HAL_GetTick>
 8007ef6:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ef8:	e008      	b.n	8007f0c <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007efa:	f7fd fc3d 	bl	8005778 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d901      	bls.n	8007f0c <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e007      	b.n	8007f1c <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007f0c:	4b07      	ldr	r3, [pc, #28]	@ (8007f2c <RCC_SetFlashLatency+0xa4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0307 	and.w	r3, r3, #7
 8007f14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d1ef      	bne.n	8007efa <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	373c      	adds	r7, #60	@ 0x3c
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd90      	pop	{r4, r7, pc}
 8007f24:	0800bdfc 	.word	0x0800bdfc
 8007f28:	0800be0c 	.word	0x0800be0c
 8007f2c:	58004000 	.word	0x58004000

08007f30 <LL_RCC_LSE_IsEnabled>:
{
 8007f30:	b480      	push	{r7}
 8007f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <LL_RCC_LSE_IsEnabled+0x18>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <LL_RCC_LSE_IsEnabled+0x1a>
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <LL_RCC_LSE_IsReady>:
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d101      	bne.n	8007f6c <LL_RCC_LSE_IsReady+0x18>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e000      	b.n	8007f6e <LL_RCC_LSE_IsReady+0x1a>
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <LL_RCC_SetRFWKPClockSource>:
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007f8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <LL_RCC_SetUSARTClockSource>:
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb4:	f023 0203 	bic.w	r2, r3, #3
 8007fb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <LL_RCC_SetI2CClockSource>:
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	091b      	lsrs	r3, r3, #4
 8007fe4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007fe8:	43db      	mvns	r3, r3
 8007fea:	401a      	ands	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007ff4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <LL_RCC_SetLPTIMClockSource>:
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008016:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	0c1b      	lsrs	r3, r3, #16
 800801e:	041b      	lsls	r3, r3, #16
 8008020:	43db      	mvns	r3, r3
 8008022:	401a      	ands	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	041b      	lsls	r3, r3, #16
 8008028:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800802c:	4313      	orrs	r3, r2
 800802e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <LL_RCC_SetRNGClockSource>:
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800804a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800804e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008052:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4313      	orrs	r3, r2
 800805a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800805e:	bf00      	nop
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <LL_RCC_SetCLK48ClockSource>:
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800807a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800807e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4313      	orrs	r3, r2
 8008086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <LL_RCC_SetADCClockSource>:
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800809e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80080aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <LL_RCC_SetRTCClockSource>:
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80080ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80080d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4313      	orrs	r3, r2
 80080de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <LL_RCC_GetRTCClockSource>:
{
 80080ee:	b480      	push	{r7}
 80080f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80080f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80080fe:	4618      	mov	r0, r3
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <LL_RCC_ForceBackupDomainReset>:
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800810c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008114:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800811c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008120:	bf00      	nop
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <LL_RCC_ReleaseBackupDomainReset>:
{
 800812a:	b480      	push	{r7}
 800812c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800812e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800813a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800813e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008142:	bf00      	nop
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008154:	2300      	movs	r3, #0
 8008156:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008158:	2300      	movs	r3, #0
 800815a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008164:	2b00      	cmp	r3, #0
 8008166:	d046      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008168:	f7ff ffc1 	bl	80080ee <LL_RCC_GetRTCClockSource>
 800816c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	429a      	cmp	r2, r3
 8008176:	d03c      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008178:	f7fe fe0a 	bl	8006d90 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d105      	bne.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff ff9b 	bl	80080c2 <LL_RCC_SetRTCClockSource>
 800818c:	e02e      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800818e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008196:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008198:	f7ff ffb6 	bl	8008108 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800819c:	f7ff ffc5 	bl	800812a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80081ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80081b8:	f7ff feba 	bl	8007f30 <LL_RCC_LSE_IsEnabled>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d114      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80081c2:	f7fd fad9 	bl	8005778 <HAL_GetTick>
 80081c6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80081c8:	e00b      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ca:	f7fd fad5 	bl	8005778 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081d8:	4293      	cmp	r3, r2
 80081da:	d902      	bls.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	77fb      	strb	r3, [r7, #31]
              break;
 80081e0:	e004      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80081e2:	f7ff feb7 	bl	8007f54 <LL_RCC_LSE_IsReady>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d1ee      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80081ec:	7ffb      	ldrb	r3, [r7, #31]
 80081ee:	77bb      	strb	r3, [r7, #30]
 80081f0:	e001      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f2:	7ffb      	ldrb	r3, [r7, #31]
 80081f4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff fecc 	bl	8007fa4 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b00      	cmp	r3, #0
 8008216:	d004      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fef4 	bl	800800a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff fee9 	bl	800800a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fec1 	bl	8007fd0 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008256:	2b00      	cmp	r3, #0
 8008258:	d02b      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008262:	d008      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800826c:	d003      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d105      	bne.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff fedf 	bl	800803e <LL_RCC_SetRNGClockSource>
 8008280:	e00a      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	2000      	movs	r0, #0
 800828e:	f7ff fed6 	bl	800803e <LL_RCC_SetRNGClockSource>
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f7ff fee9 	bl	800806a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80082a0:	d107      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80082a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80082ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082b0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d011      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff fee7 	bl	8008096 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082d0:	d107      	bne.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80082d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80082dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082e0:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff fe40 	bl	8007f78 <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80082f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3720      	adds	r7, #32
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e09f      	b.n	8008456 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d106      	bne.n	8008330 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7fd f8ae 	bl	800548c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008338:	4b49      	ldr	r3, [pc, #292]	@ (8008460 <HAL_RTC_Init+0x15c>)
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b10      	cmp	r3, #16
 8008342:	d07e      	beq.n	8008442 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	22ca      	movs	r2, #202	@ 0xca
 800834a:	625a      	str	r2, [r3, #36]	@ 0x24
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2253      	movs	r2, #83	@ 0x53
 8008352:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f8ab 	bl	80084b0 <RTC_EnterInitMode>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	22ff      	movs	r2, #255	@ 0xff
 8008366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2204      	movs	r2, #4
 800836c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	73fb      	strb	r3, [r7, #15]
 8008374:	e067      	b.n	8008446 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6812      	ldr	r2, [r2, #0]
 8008380:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008388:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6899      	ldr	r1, [r3, #8]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	68d2      	ldr	r2, [r2, #12]
 80083b0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6919      	ldr	r1, [r3, #16]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	041a      	lsls	r2, r3, #16
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68da      	ldr	r2, [r3, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80083d4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0202 	bic.w	r2, r2, #2
 80083e4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	69da      	ldr	r2, [r3, #28]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	431a      	orrs	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d113      	bne.n	8008434 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f829 	bl	8008464 <HAL_RTC_WaitForSynchro>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00d      	beq.n	8008434 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	22ff      	movs	r2, #255	@ 0xff
 800841e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2204      	movs	r2, #4
 8008424:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e010      	b.n	8008456 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	22ff      	movs	r2, #255	@ 0xff
 800843a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
 8008440:	e001      	b.n	8008446 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	40002800 	.word	0x40002800

08008464 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68da      	ldr	r2, [r3, #12]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800847a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800847c:	f7fd f97c 	bl	8005778 <HAL_GetTick>
 8008480:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008482:	e009      	b.n	8008498 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008484:	f7fd f978 	bl	8005778 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008492:	d901      	bls.n	8008498 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e007      	b.n	80084a8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0ee      	beq.n	8008484 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d119      	bne.n	80084fa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80084d0:	f7fd f952 	bl	8005778 <HAL_GetTick>
 80084d4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80084d6:	e009      	b.n	80084ec <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80084d8:	f7fd f94e 	bl	8005778 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084e6:	d901      	bls.n	80084ec <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e007      	b.n	80084fc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0ee      	beq.n	80084d8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d101      	bne.n	800851e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800851a:	2302      	movs	r3, #2
 800851c:	e0a8      	b.n	8008670 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2202      	movs	r2, #2
 800852a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	22ca      	movs	r2, #202	@ 0xca
 8008534:	625a      	str	r2, [r3, #36]	@ 0x24
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2253      	movs	r2, #83	@ 0x53
 800853c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008548:	2b00      	cmp	r3, #0
 800854a:	d020      	beq.n	800858e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800854c:	f7fd f914 	bl	8005778 <HAL_GetTick>
 8008550:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008552:	e015      	b.n	8008580 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008554:	f7fd f910 	bl	8005778 <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008562:	d90d      	bls.n	8008580 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	22ff      	movs	r2, #255	@ 0xff
 800856a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2203      	movs	r2, #3
 8008570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e077      	b.n	8008670 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f003 0304 	and.w	r3, r3, #4
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e2      	bne.n	8008554 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800859c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80085ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80085b0:	f7fd f8e2 	bl	8005778 <HAL_GetTick>
 80085b4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80085b6:	e015      	b.n	80085e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80085b8:	f7fd f8de 	bl	8005778 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085c6:	d90d      	bls.n	80085e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	22ff      	movs	r2, #255	@ 0xff
 80085ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2203      	movs	r2, #3
 80085d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e045      	b.n	8008670 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0e2      	beq.n	80085b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0207 	bic.w	r2, r2, #7
 8008608:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6899      	ldr	r1, [r3, #8]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	430a      	orrs	r2, r1
 8008618:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800861a:	4b17      	ldr	r3, [pc, #92]	@ (8008678 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800861c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008620:	4a15      	ldr	r2, [pc, #84]	@ (8008678 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008622:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008626:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800862a:	4b13      	ldr	r3, [pc, #76]	@ (8008678 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a12      	ldr	r2, [pc, #72]	@ (8008678 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008630:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008634:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008644:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008654:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	22ff      	movs	r2, #255	@ 0xff
 800865c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	58000800 	.word	0x58000800

0800867c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008686:	f107 0308 	add.w	r3, r7, #8
 800868a:	2218      	movs	r2, #24
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f001 f92d 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008694:	233f      	movs	r3, #63	@ 0x3f
 8008696:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008698:	2381      	movs	r3, #129	@ 0x81
 800869a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800869c:	1dfb      	adds	r3, r7, #7
 800869e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80086a0:	2301      	movs	r3, #1
 80086a2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086a4:	f107 0308 	add.w	r3, r7, #8
 80086a8:	2100      	movs	r1, #0
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 fba8 	bl	8009e00 <hci_send_req>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da01      	bge.n	80086ba <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80086b6:	23ff      	movs	r3, #255	@ 0xff
 80086b8:	e000      	b.n	80086bc <aci_gap_set_non_discoverable+0x40>
  return status;
 80086ba:	79fb      	ldrb	r3, [r7, #7]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3720      	adds	r7, #32
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80086c4:	b5b0      	push	{r4, r5, r7, lr}
 80086c6:	b0ce      	sub	sp, #312	@ 0x138
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4605      	mov	r5, r0
 80086cc:	460c      	mov	r4, r1
 80086ce:	4610      	mov	r0, r2
 80086d0:	4619      	mov	r1, r3
 80086d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086d6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80086da:	462a      	mov	r2, r5
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80086e6:	4622      	mov	r2, r4
 80086e8:	801a      	strh	r2, [r3, #0]
 80086ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086ee:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80086f2:	4602      	mov	r2, r0
 80086f4:	801a      	strh	r2, [r3, #0]
 80086f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086fa:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80086fe:	460a      	mov	r2, r1
 8008700:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008702:	f107 0310 	add.w	r3, r7, #16
 8008706:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800870a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800870e:	3308      	adds	r3, #8
 8008710:	f107 0210 	add.w	r2, r7, #16
 8008714:	4413      	add	r3, r2
 8008716:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800871a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800871e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8008722:	4413      	add	r3, r2
 8008724:	3309      	adds	r3, #9
 8008726:	f107 0210 	add.w	r2, r7, #16
 800872a:	4413      	add	r3, r2
 800872c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008730:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008734:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008738:	2200      	movs	r2, #0
 800873a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008742:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008746:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800874a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800874e:	7812      	ldrb	r2, [r2, #0]
 8008750:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008752:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008756:	3301      	adds	r3, #1
 8008758:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800875c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008760:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008764:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008768:	8812      	ldrh	r2, [r2, #0]
 800876a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800876e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008772:	3302      	adds	r3, #2
 8008774:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008778:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800877c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008780:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8008784:	8812      	ldrh	r2, [r2, #0]
 8008786:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800878a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800878e:	3302      	adds	r3, #2
 8008790:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008794:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008798:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800879c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80087a0:	7812      	ldrb	r2, [r2, #0]
 80087a2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80087a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087a8:	3301      	adds	r3, #1
 80087aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80087ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087b2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80087b6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80087b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087bc:	3301      	adds	r3, #1
 80087be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80087c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087c6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80087ca:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80087cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087d0:	3301      	adds	r3, #1
 80087d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80087d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087da:	3308      	adds	r3, #8
 80087dc:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80087e0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80087e4:	4618      	mov	r0, r3
 80087e6:	f001 f872 	bl	80098ce <Osal_MemCpy>
    index_input += Local_Name_Length;
 80087ea:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80087ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80087f2:	4413      	add	r3, r2
 80087f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80087f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80087fc:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008800:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008802:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008806:	3301      	adds	r3, #1
 8008808:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800880c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008810:	3301      	adds	r3, #1
 8008812:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008816:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800881a:	4618      	mov	r0, r3
 800881c:	f001 f857 	bl	80098ce <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008820:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8008824:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008828:	4413      	add	r3, r2
 800882a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800882e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008832:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8008836:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008838:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800883c:	3302      	adds	r3, #2
 800883e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8008842:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008846:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800884a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800884c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008850:	3302      	adds	r3, #2
 8008852:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800885a:	2218      	movs	r2, #24
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f001 f845 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008864:	233f      	movs	r3, #63	@ 0x3f
 8008866:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800886a:	2383      	movs	r3, #131	@ 0x83
 800886c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008870:	f107 0310 	add.w	r3, r7, #16
 8008874:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800887c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008880:	f107 030f 	add.w	r3, r7, #15
 8008884:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008888:	2301      	movs	r3, #1
 800888a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800888e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fab3 	bl	8009e00 <hci_send_req>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	da01      	bge.n	80088a4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80088a0:	23ff      	movs	r3, #255	@ 0xff
 80088a2:	e004      	b.n	80088ae <aci_gap_set_discoverable+0x1ea>
  return status;
 80088a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088a8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80088ac:	781b      	ldrb	r3, [r3, #0]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bdb0      	pop	{r4, r5, r7, pc}

080088b8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b0cc      	sub	sp, #304	@ 0x130
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4602      	mov	r2, r0
 80088c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088c4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80088c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80088ca:	f107 0310 	add.w	r3, r7, #16
 80088ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80088d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088d6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80088e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088ec:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80088f0:	7812      	ldrb	r2, [r2, #0]
 80088f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80088f8:	3301      	adds	r3, #1
 80088fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008902:	2218      	movs	r2, #24
 8008904:	2100      	movs	r1, #0
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fff1 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 800890c:	233f      	movs	r3, #63	@ 0x3f
 800890e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8008912:	2385      	movs	r3, #133	@ 0x85
 8008914:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008918:	f107 0310 	add.w	r3, r7, #16
 800891c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008920:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008924:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008928:	f107 030f 	add.w	r3, r7, #15
 800892c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008930:	2301      	movs	r3, #1
 8008932:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800893a:	2100      	movs	r1, #0
 800893c:	4618      	mov	r0, r3
 800893e:	f001 fa5f 	bl	8009e00 <hci_send_req>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	da01      	bge.n	800894c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008948:	23ff      	movs	r3, #255	@ 0xff
 800894a:	e004      	b.n	8008956 <aci_gap_set_io_capability+0x9e>
  return status;
 800894c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008950:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008954:	781b      	ldrb	r3, [r3, #0]
}
 8008956:	4618      	mov	r0, r3
 8008958:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008960:	b5b0      	push	{r4, r5, r7, lr}
 8008962:	b0cc      	sub	sp, #304	@ 0x130
 8008964:	af00      	add	r7, sp, #0
 8008966:	4605      	mov	r5, r0
 8008968:	460c      	mov	r4, r1
 800896a:	4610      	mov	r0, r2
 800896c:	4619      	mov	r1, r3
 800896e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008972:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008976:	462a      	mov	r2, r5
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800897e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008982:	4622      	mov	r2, r4
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800898a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800898e:	4602      	mov	r2, r0
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008996:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800899a:	460a      	mov	r2, r1
 800899c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800899e:	f107 0310 	add.w	r3, r7, #16
 80089a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80089a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80089aa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80089ae:	2200      	movs	r2, #0
 80089b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80089b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80089c0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80089c4:	7812      	ldrb	r2, [r2, #0]
 80089c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80089c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089cc:	3301      	adds	r3, #1
 80089ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80089d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80089da:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80089de:	7812      	ldrb	r2, [r2, #0]
 80089e0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80089e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089e6:	3301      	adds	r3, #1
 80089e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80089ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80089f4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80089f8:	7812      	ldrb	r2, [r2, #0]
 80089fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80089fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a00:	3301      	adds	r3, #1
 8008a02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008a0e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008a12:	7812      	ldrb	r2, [r2, #0]
 8008a14:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008a16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a24:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8008a28:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a2e:	3301      	adds	r3, #1
 8008a30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a38:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8008a3c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a42:	3301      	adds	r3, #1
 8008a44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a4c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008a50:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008a52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a56:	3301      	adds	r3, #1
 8008a58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a60:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008a64:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a76:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008a7a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a80:	3301      	adds	r3, #1
 8008a82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a8a:	2218      	movs	r2, #24
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 ff2d 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a94:	233f      	movs	r3, #63	@ 0x3f
 8008a96:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8008a9a:	2386      	movs	r3, #134	@ 0x86
 8008a9c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008aa0:	f107 0310 	add.w	r3, r7, #16
 8008aa4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008aac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008ab0:	f107 030f 	add.w	r3, r7, #15
 8008ab4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008abe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 f99b 	bl	8009e00 <hci_send_req>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	da01      	bge.n	8008ad4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008ad0:	23ff      	movs	r3, #255	@ 0xff
 8008ad2:	e004      	b.n	8008ade <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008ad4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ad8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008adc:	781b      	ldrb	r3, [r3, #0]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bdb0      	pop	{r4, r5, r7, pc}

08008ae8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b0cc      	sub	sp, #304	@ 0x130
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4602      	mov	r2, r0
 8008af0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008af4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008af8:	6019      	str	r1, [r3, #0]
 8008afa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008afe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008b02:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008b04:	f107 0310 	add.w	r3, r7, #16
 8008b08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008b0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b10:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008b14:	2200      	movs	r2, #0
 8008b16:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b26:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008b2a:	8812      	ldrh	r2, [r2, #0]
 8008b2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b32:	3302      	adds	r3, #2
 8008b34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8008b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b3c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b40:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8008b44:	6812      	ldr	r2, [r2, #0]
 8008b46:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008b4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b4e:	3304      	adds	r3, #4
 8008b50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b58:	2218      	movs	r2, #24
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fec6 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b62:	233f      	movs	r3, #63	@ 0x3f
 8008b64:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8008b68:	2388      	movs	r3, #136	@ 0x88
 8008b6a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008b6e:	f107 0310 	add.w	r3, r7, #16
 8008b72:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008b7e:	f107 030f 	add.w	r3, r7, #15
 8008b82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f001 f934 	bl	8009e00 <hci_send_req>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da01      	bge.n	8008ba2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8008b9e:	23ff      	movs	r3, #255	@ 0xff
 8008ba0:	e004      	b.n	8008bac <aci_gap_pass_key_resp+0xc4>
  return status;
 8008ba2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ba6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008baa:	781b      	ldrb	r3, [r3, #0]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008bb6:	b590      	push	{r4, r7, lr}
 8008bb8:	b0cd      	sub	sp, #308	@ 0x134
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008bc6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bd0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bdc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008be0:	4602      	mov	r2, r0
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008be8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008bec:	460a      	mov	r2, r1
 8008bee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008bf0:	f107 0310 	add.w	r3, r7, #16
 8008bf4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008bf8:	f107 0308 	add.w	r3, r7, #8
 8008bfc:	2207      	movs	r2, #7
 8008bfe:	2100      	movs	r1, #0
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 fe74 	bl	80098ee <Osal_MemSet>
  int index_input = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8008c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c14:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008c18:	7812      	ldrb	r2, [r2, #0]
 8008c1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c20:	3301      	adds	r3, #1
 8008c22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c2e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008c32:	7812      	ldrb	r2, [r2, #0]
 8008c34:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c48:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008c4c:	7812      	ldrb	r2, [r2, #0]
 8008c4e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c54:	3301      	adds	r3, #1
 8008c56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c5e:	2218      	movs	r2, #24
 8008c60:	2100      	movs	r1, #0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fe43 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c68:	233f      	movs	r3, #63	@ 0x3f
 8008c6a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8008c6e:	238a      	movs	r3, #138	@ 0x8a
 8008c70:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008c74:	f107 0310 	add.w	r3, r7, #16
 8008c78:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008c7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008c84:	f107 0308 	add.w	r3, r7, #8
 8008c88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8008c8c:	2307      	movs	r3, #7
 8008c8e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 f8b1 	bl	8009e00 <hci_send_req>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	da01      	bge.n	8008ca8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008ca4:	23ff      	movs	r3, #255	@ 0xff
 8008ca6:	e02e      	b.n	8008d06 <aci_gap_init+0x150>
  if ( resp.Status )
 8008ca8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d005      	beq.n	8008cc2 <aci_gap_init+0x10c>
    return resp.Status;
 8008cb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	e021      	b.n	8008d06 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008cc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008cca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cd4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008cdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ce0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008ce4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008cee:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008cf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cf4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008cf8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008d02:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd90      	pop	{r4, r7, pc}

08008d10 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b0cc      	sub	sp, #304	@ 0x130
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4602      	mov	r2, r0
 8008d18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d1c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008d20:	6019      	str	r1, [r3, #0]
 8008d22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d26:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008d2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008d2c:	f107 0310 	add.w	r3, r7, #16
 8008d30:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008d34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d4e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008d52:	7812      	ldrb	r2, [r2, #0]
 8008d54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d64:	1c58      	adds	r0, r3, #1
 8008d66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d6a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008d6e:	781a      	ldrb	r2, [r3, #0]
 8008d70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d74:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008d78:	6819      	ldr	r1, [r3, #0]
 8008d7a:	f000 fda8 	bl	80098ce <Osal_MemCpy>
  index_input += AdvDataLen;
 8008d7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d82:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d96:	2218      	movs	r2, #24
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fda7 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008da0:	233f      	movs	r3, #63	@ 0x3f
 8008da2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8008da6:	238e      	movs	r3, #142	@ 0x8e
 8008da8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008dac:	f107 0310 	add.w	r3, r7, #16
 8008db0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008db8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008dbc:	f107 030f 	add.w	r3, r7, #15
 8008dc0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008dca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f001 f815 	bl	8009e00 <hci_send_req>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	da01      	bge.n	8008de0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008ddc:	23ff      	movs	r3, #255	@ 0xff
 8008dde:	e004      	b.n	8008dea <aci_gap_update_adv_data+0xda>
  return status;
 8008de0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008de4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008de8:	781b      	ldrb	r3, [r3, #0]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dfe:	f107 0308 	add.w	r3, r7, #8
 8008e02:	2218      	movs	r2, #24
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fd71 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e0c:	233f      	movs	r3, #63	@ 0x3f
 8008e0e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008e10:	2392      	movs	r3, #146	@ 0x92
 8008e12:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008e14:	1dfb      	adds	r3, r7, #7
 8008e16:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e1c:	f107 0308 	add.w	r3, r7, #8
 8008e20:	2100      	movs	r1, #0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 ffec 	bl	8009e00 <hci_send_req>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	da01      	bge.n	8008e32 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008e2e:	23ff      	movs	r3, #255	@ 0xff
 8008e30:	e000      	b.n	8008e34 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8008e32:	79fb      	ldrb	r3, [r7, #7]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3720      	adds	r7, #32
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b0cc      	sub	sp, #304	@ 0x130
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4602      	mov	r2, r0
 8008e44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e48:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008e4c:	801a      	strh	r2, [r3, #0]
 8008e4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e52:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008e56:	460a      	mov	r2, r1
 8008e58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008e62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e7c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008e80:	8812      	ldrh	r2, [r2, #0]
 8008e82:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e88:	3302      	adds	r3, #2
 8008e8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e92:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e96:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008e9a:	7812      	ldrb	r2, [r2, #0]
 8008e9c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ea8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eac:	2218      	movs	r2, #24
 8008eae:	2100      	movs	r1, #0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fd1c 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008eb6:	233f      	movs	r3, #63	@ 0x3f
 8008eb8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8008ebc:	23a5      	movs	r3, #165	@ 0xa5
 8008ebe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008ec2:	f107 0310 	add.w	r3, r7, #16
 8008ec6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ece:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008ed2:	f107 030f 	add.w	r3, r7, #15
 8008ed6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008eda:	2301      	movs	r3, #1
 8008edc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ee0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 ff8a 	bl	8009e00 <hci_send_req>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	da01      	bge.n	8008ef6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008ef2:	23ff      	movs	r3, #255	@ 0xff
 8008ef4:	e004      	b.n	8008f00 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008ef6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008efa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008efe:	781b      	ldrb	r3, [r3, #0]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b088      	sub	sp, #32
 8008f0e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f14:	f107 0308 	add.w	r3, r7, #8
 8008f18:	2218      	movs	r2, #24
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fce6 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f22:	233f      	movs	r3, #63	@ 0x3f
 8008f24:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008f26:	f240 1301 	movw	r3, #257	@ 0x101
 8008f2a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f2c:	1dfb      	adds	r3, r7, #7
 8008f2e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f30:	2301      	movs	r3, #1
 8008f32:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f34:	f107 0308 	add.w	r3, r7, #8
 8008f38:	2100      	movs	r1, #0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 ff60 	bl	8009e00 <hci_send_req>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	da01      	bge.n	8008f4a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008f46:	23ff      	movs	r3, #255	@ 0xff
 8008f48:	e000      	b.n	8008f4c <aci_gatt_init+0x42>
  return status;
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3720      	adds	r7, #32
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008f54:	b590      	push	{r4, r7, lr}
 8008f56:	b0cf      	sub	sp, #316	@ 0x13c
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8008f60:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8008f64:	6001      	str	r1, [r0, #0]
 8008f66:	4610      	mov	r0, r2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f6e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008f72:	4622      	mov	r2, r4
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f7a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008f7e:	4602      	mov	r2, r0
 8008f80:	701a      	strb	r2, [r3, #0]
 8008f82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f86:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008f8a:	460a      	mov	r2, r1
 8008f8c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008f8e:	f107 0310 	add.w	r3, r7, #16
 8008f92:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008f96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f9a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d00a      	beq.n	8008fba <aci_gatt_add_service+0x66>
 8008fa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fa8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d101      	bne.n	8008fb6 <aci_gatt_add_service+0x62>
 8008fb2:	2311      	movs	r3, #17
 8008fb4:	e002      	b.n	8008fbc <aci_gatt_add_service+0x68>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e000      	b.n	8008fbc <aci_gatt_add_service+0x68>
 8008fba:	2303      	movs	r3, #3
 8008fbc:	f107 0210 	add.w	r2, r7, #16
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008fc6:	f107 030c 	add.w	r3, r7, #12
 8008fca:	2203      	movs	r2, #3
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fc8d 	bl	80098ee <Osal_MemSet>
  int index_input = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008fda:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008fde:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008fe2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008fe6:	7812      	ldrb	r2, [r2, #0]
 8008fe8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008fea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008fee:	3301      	adds	r3, #1
 8008ff0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008ff4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ff8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d002      	beq.n	8009008 <aci_gatt_add_service+0xb4>
 8009002:	2b02      	cmp	r3, #2
 8009004:	d004      	beq.n	8009010 <aci_gatt_add_service+0xbc>
 8009006:	e007      	b.n	8009018 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009008:	2302      	movs	r3, #2
 800900a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800900e:	e005      	b.n	800901c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009010:	2310      	movs	r3, #16
 8009012:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009016:	e001      	b.n	800901c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009018:	2397      	movs	r3, #151	@ 0x97
 800901a:	e06c      	b.n	80090f6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800901c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009020:	1c58      	adds	r0, r3, #1
 8009022:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009026:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800902a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	f000 fc4d 	bl	80098ce <Osal_MemCpy>
    index_input += size;
 8009034:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8009038:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800903c:	4413      	add	r3, r2
 800903e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8009042:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009046:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800904a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800904e:	7812      	ldrb	r2, [r2, #0]
 8009050:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009052:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009056:	3301      	adds	r3, #1
 8009058:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800905c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009060:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009064:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009068:	7812      	ldrb	r2, [r2, #0]
 800906a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800906c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009070:	3301      	adds	r3, #1
 8009072:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009076:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800907a:	2218      	movs	r2, #24
 800907c:	2100      	movs	r1, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fc35 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8009084:	233f      	movs	r3, #63	@ 0x3f
 8009086:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800908a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800908e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009092:	f107 0310 	add.w	r3, r7, #16
 8009096:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800909a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800909e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80090a2:	f107 030c 	add.w	r3, r7, #12
 80090a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80090aa:	2303      	movs	r3, #3
 80090ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090b4:	2100      	movs	r1, #0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fea2 	bl	8009e00 <hci_send_req>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	da01      	bge.n	80090c6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80090c2:	23ff      	movs	r3, #255	@ 0xff
 80090c4:	e017      	b.n	80090f6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80090c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d005      	beq.n	80090e0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80090d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	e00a      	b.n	80090f6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80090e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80090e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80090f2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd90      	pop	{r4, r7, pc}

08009100 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009100:	b590      	push	{r4, r7, lr}
 8009102:	b0d1      	sub	sp, #324	@ 0x144
 8009104:	af00      	add	r7, sp, #0
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800910e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009112:	600a      	str	r2, [r1, #0]
 8009114:	4619      	mov	r1, r3
 8009116:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800911a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800911e:	4622      	mov	r2, r4
 8009120:	801a      	strh	r2, [r3, #0]
 8009122:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009126:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800912a:	4602      	mov	r2, r0
 800912c:	701a      	strb	r2, [r3, #0]
 800912e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009132:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8009136:	460a      	mov	r2, r1
 8009138:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800913a:	f107 0318 	add.w	r3, r7, #24
 800913e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009142:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009146:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d00a      	beq.n	8009166 <aci_gatt_add_char+0x66>
 8009150:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009154:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d101      	bne.n	8009162 <aci_gatt_add_char+0x62>
 800915e:	2313      	movs	r3, #19
 8009160:	e002      	b.n	8009168 <aci_gatt_add_char+0x68>
 8009162:	2303      	movs	r3, #3
 8009164:	e000      	b.n	8009168 <aci_gatt_add_char+0x68>
 8009166:	2305      	movs	r3, #5
 8009168:	f107 0218 	add.w	r2, r7, #24
 800916c:	4413      	add	r3, r2
 800916e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009172:	f107 0314 	add.w	r3, r7, #20
 8009176:	2203      	movs	r2, #3
 8009178:	2100      	movs	r1, #0
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fbb7 	bl	80098ee <Osal_MemSet>
  int index_input = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8009186:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800918a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800918e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009192:	8812      	ldrh	r2, [r2, #0]
 8009194:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009196:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800919a:	3302      	adds	r3, #2
 800919c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80091a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80091a4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80091a8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80091ac:	7812      	ldrb	r2, [r2, #0]
 80091ae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80091b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80091b4:	3301      	adds	r3, #1
 80091b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80091ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80091be:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d002      	beq.n	80091ce <aci_gatt_add_char+0xce>
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d004      	beq.n	80091d6 <aci_gatt_add_char+0xd6>
 80091cc:	e007      	b.n	80091de <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80091ce:	2302      	movs	r3, #2
 80091d0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80091d4:	e005      	b.n	80091e2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80091d6:	2310      	movs	r3, #16
 80091d8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80091dc:	e001      	b.n	80091e2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80091de:	2397      	movs	r3, #151	@ 0x97
 80091e0:	e091      	b.n	8009306 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80091e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80091e6:	1cd8      	adds	r0, r3, #3
 80091e8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80091ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80091f0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80091f4:	6819      	ldr	r1, [r3, #0]
 80091f6:	f000 fb6a 	bl	80098ce <Osal_MemCpy>
    index_input += size;
 80091fa:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80091fe:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009202:	4413      	add	r3, r2
 8009204:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009208:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800920c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009210:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8009214:	8812      	ldrh	r2, [r2, #0]
 8009216:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009218:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800921c:	3302      	adds	r3, #2
 800921e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009222:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009226:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800922a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800922c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009230:	3301      	adds	r3, #1
 8009232:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009236:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800923a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800923e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009240:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009244:	3301      	adds	r3, #1
 8009246:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800924a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800924e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8009252:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009254:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009258:	3301      	adds	r3, #1
 800925a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800925e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009262:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8009266:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009268:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800926c:	3301      	adds	r3, #1
 800926e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009272:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009276:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800927a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800927c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009280:	3301      	adds	r3, #1
 8009282:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009286:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800928a:	2218      	movs	r2, #24
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fb2d 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8009294:	233f      	movs	r3, #63	@ 0x3f
 8009296:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800929a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800929e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80092a2:	f107 0318 	add.w	r3, r7, #24
 80092a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80092aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80092ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80092b2:	f107 0314 	add.w	r3, r7, #20
 80092b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80092ba:	2303      	movs	r3, #3
 80092bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fd9a 	bl	8009e00 <hci_send_req>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	da01      	bge.n	80092d6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80092d2:	23ff      	movs	r3, #255	@ 0xff
 80092d4:	e017      	b.n	8009306 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80092d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80092e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	e00a      	b.n	8009306 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80092f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80092f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8009302:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800930c:	46bd      	mov	sp, r7
 800930e:	bd90      	pop	{r4, r7, pc}

08009310 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009310:	b5b0      	push	{r4, r5, r7, lr}
 8009312:	b0cc      	sub	sp, #304	@ 0x130
 8009314:	af00      	add	r7, sp, #0
 8009316:	4605      	mov	r5, r0
 8009318:	460c      	mov	r4, r1
 800931a:	4610      	mov	r0, r2
 800931c:	4619      	mov	r1, r3
 800931e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009322:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009326:	462a      	mov	r2, r5
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800932e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009332:	4622      	mov	r2, r4
 8009334:	801a      	strh	r2, [r3, #0]
 8009336:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800933a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800933e:	4602      	mov	r2, r0
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009346:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800934a:	460a      	mov	r2, r1
 800934c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800934e:	f107 0310 	add.w	r3, r7, #16
 8009352:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009356:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800935a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8009368:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800936c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009370:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009374:	8812      	ldrh	r2, [r2, #0]
 8009376:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009378:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800937c:	3302      	adds	r3, #2
 800937e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8009382:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009386:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800938a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800938e:	8812      	ldrh	r2, [r2, #0]
 8009390:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009392:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009396:	3302      	adds	r3, #2
 8009398:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800939c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80093a4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80093a8:	7812      	ldrb	r2, [r2, #0]
 80093aa:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80093ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093b0:	3301      	adds	r3, #1
 80093b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80093b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80093be:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80093c2:	7812      	ldrb	r2, [r2, #0]
 80093c4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80093c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093ca:	3301      	adds	r3, #1
 80093cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80093d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093d4:	1d98      	adds	r0, r3, #6
 80093d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093da:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80093e6:	f000 fa72 	bl	80098ce <Osal_MemCpy>
  index_input += Char_Value_Length;
 80093ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093ee:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80093f8:	4413      	add	r3, r2
 80093fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009402:	2218      	movs	r2, #24
 8009404:	2100      	movs	r1, #0
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fa71 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 800940c:	233f      	movs	r3, #63	@ 0x3f
 800940e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8009412:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009416:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800941a:	f107 0310 	add.w	r3, r7, #16
 800941e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009422:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009426:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800942a:	f107 030f 	add.w	r3, r7, #15
 800942e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009432:	2301      	movs	r3, #1
 8009434:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009438:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800943c:	2100      	movs	r1, #0
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fcde 	bl	8009e00 <hci_send_req>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	da01      	bge.n	800944e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800944a:	23ff      	movs	r3, #255	@ 0xff
 800944c:	e004      	b.n	8009458 <aci_gatt_update_char_value+0x148>
  return status;
 800944e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009452:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009456:	781b      	ldrb	r3, [r3, #0]
}
 8009458:	4618      	mov	r0, r3
 800945a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800945e:	46bd      	mov	sp, r7
 8009460:	bdb0      	pop	{r4, r5, r7, pc}

08009462 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b0cc      	sub	sp, #304	@ 0x130
 8009466:	af00      	add	r7, sp, #0
 8009468:	4602      	mov	r2, r0
 800946a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800946e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009472:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8009474:	f107 0310 	add.w	r3, r7, #16
 8009478:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800947c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009480:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009484:	2200      	movs	r2, #0
 8009486:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009488:	2300      	movs	r3, #0
 800948a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800948e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009492:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009496:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800949a:	8812      	ldrh	r2, [r2, #0]
 800949c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800949e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094a2:	3302      	adds	r3, #2
 80094a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094ac:	2218      	movs	r2, #24
 80094ae:	2100      	movs	r1, #0
 80094b0:	4618      	mov	r0, r3
 80094b2:	f000 fa1c 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 80094b6:	233f      	movs	r3, #63	@ 0x3f
 80094b8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80094bc:	f240 1325 	movw	r3, #293	@ 0x125
 80094c0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80094c4:	f107 0310 	add.w	r3, r7, #16
 80094c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80094cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80094d4:	f107 030f 	add.w	r3, r7, #15
 80094d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80094dc:	2301      	movs	r3, #1
 80094de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094e6:	2100      	movs	r1, #0
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fc89 	bl	8009e00 <hci_send_req>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	da01      	bge.n	80094f8 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80094f4:	23ff      	movs	r3, #255	@ 0xff
 80094f6:	e004      	b.n	8009502 <aci_gatt_confirm_indication+0xa0>
  return status;
 80094f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80094fc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009500:	781b      	ldrb	r3, [r3, #0]
}
 8009502:	4618      	mov	r0, r3
 8009504:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b0cc      	sub	sp, #304	@ 0x130
 8009510:	af00      	add	r7, sp, #0
 8009512:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009516:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009520:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009524:	4602      	mov	r2, r0
 8009526:	701a      	strb	r2, [r3, #0]
 8009528:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800952c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009530:	460a      	mov	r2, r1
 8009532:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009534:	f107 0310 	add.w	r3, r7, #16
 8009538:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800953c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009540:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009544:	2200      	movs	r2, #0
 8009546:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800954e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009552:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009556:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800955a:	7812      	ldrb	r2, [r2, #0]
 800955c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800955e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009562:	3301      	adds	r3, #1
 8009564:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8009568:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800956c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009570:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009574:	7812      	ldrb	r2, [r2, #0]
 8009576:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009578:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800957c:	3301      	adds	r3, #1
 800957e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009582:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009586:	1c98      	adds	r0, r3, #2
 8009588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800958c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009590:	781a      	ldrb	r2, [r3, #0]
 8009592:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009596:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800959a:	6819      	ldr	r1, [r3, #0]
 800959c:	f000 f997 	bl	80098ce <Osal_MemCpy>
  index_input += Length;
 80095a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095a4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80095ae:	4413      	add	r3, r2
 80095b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095b8:	2218      	movs	r2, #24
 80095ba:	2100      	movs	r1, #0
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 f996 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 80095c2:	233f      	movs	r3, #63	@ 0x3f
 80095c4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80095c8:	230c      	movs	r3, #12
 80095ca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80095ce:	f107 0310 	add.w	r3, r7, #16
 80095d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80095d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80095de:	f107 030f 	add.w	r3, r7, #15
 80095e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80095e6:	2301      	movs	r3, #1
 80095e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095f0:	2100      	movs	r1, #0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fc04 	bl	8009e00 <hci_send_req>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da01      	bge.n	8009602 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80095fe:	23ff      	movs	r3, #255	@ 0xff
 8009600:	e004      	b.n	800960c <aci_hal_write_config_data+0x100>
  return status;
 8009602:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009606:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800960a:	781b      	ldrb	r3, [r3, #0]
}
 800960c:	4618      	mov	r0, r3
 800960e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b0cc      	sub	sp, #304	@ 0x130
 800961a:	af00      	add	r7, sp, #0
 800961c:	4602      	mov	r2, r0
 800961e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009622:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009626:	701a      	strb	r2, [r3, #0]
 8009628:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800962c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009630:	460a      	mov	r2, r1
 8009632:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009634:	f107 0310 	add.w	r3, r7, #16
 8009638:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800963c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009640:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009644:	2200      	movs	r2, #0
 8009646:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800964e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009652:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009656:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800965a:	7812      	ldrb	r2, [r2, #0]
 800965c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800965e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009662:	3301      	adds	r3, #1
 8009664:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8009668:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800966c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009670:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009674:	7812      	ldrb	r2, [r2, #0]
 8009676:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009678:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800967c:	3301      	adds	r3, #1
 800967e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009686:	2218      	movs	r2, #24
 8009688:	2100      	movs	r1, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f000 f92f 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8009690:	233f      	movs	r3, #63	@ 0x3f
 8009692:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8009696:	230f      	movs	r3, #15
 8009698:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800969c:	f107 0310 	add.w	r3, r7, #16
 80096a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80096a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80096ac:	f107 030f 	add.w	r3, r7, #15
 80096b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096be:	2100      	movs	r1, #0
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 fb9d 	bl	8009e00 <hci_send_req>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	da01      	bge.n	80096d0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80096cc:	23ff      	movs	r3, #255	@ 0xff
 80096ce:	e004      	b.n	80096da <aci_hal_set_tx_power_level+0xc4>
  return status;
 80096d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096d8:	781b      	ldrb	r3, [r3, #0]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b0cc      	sub	sp, #304	@ 0x130
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	4602      	mov	r2, r0
 80096ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096f0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80096f4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80096f6:	f107 0310 	add.w	r3, r7, #16
 80096fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80096fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009702:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009706:	2200      	movs	r2, #0
 8009708:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009710:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009714:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009718:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800971c:	8812      	ldrh	r2, [r2, #0]
 800971e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009720:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009724:	3302      	adds	r3, #2
 8009726:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800972a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800972e:	2218      	movs	r2, #24
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f8db 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8009738:	233f      	movs	r3, #63	@ 0x3f
 800973a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800973e:	2318      	movs	r3, #24
 8009740:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009744:	f107 0310 	add.w	r3, r7, #16
 8009748:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800974c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009750:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009754:	f107 030f 	add.w	r3, r7, #15
 8009758:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800975c:	2301      	movs	r3, #1
 800975e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009762:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009766:	2100      	movs	r1, #0
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fb49 	bl	8009e00 <hci_send_req>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	da01      	bge.n	8009778 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009774:	23ff      	movs	r3, #255	@ 0xff
 8009776:	e004      	b.n	8009782 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009778:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800977c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009780:	781b      	ldrb	r3, [r3, #0]
}
 8009782:	4618      	mov	r0, r3
 8009784:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009796:	f107 0308 	add.w	r3, r7, #8
 800979a:	2218      	movs	r2, #24
 800979c:	2100      	movs	r1, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 f8a5 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x03;
 80097a4:	2303      	movs	r3, #3
 80097a6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80097a8:	2303      	movs	r3, #3
 80097aa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80097ac:	1dfb      	adds	r3, r7, #7
 80097ae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80097b0:	2301      	movs	r3, #1
 80097b2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097b4:	f107 0308 	add.w	r3, r7, #8
 80097b8:	2100      	movs	r1, #0
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fb20 	bl	8009e00 <hci_send_req>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	da01      	bge.n	80097ca <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80097c6:	23ff      	movs	r3, #255	@ 0xff
 80097c8:	e000      	b.n	80097cc <hci_reset+0x40>
  return status;
 80097ca:	79fb      	ldrb	r3, [r7, #7]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3720      	adds	r7, #32
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80097d4:	b590      	push	{r4, r7, lr}
 80097d6:	b0cd      	sub	sp, #308	@ 0x134
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	4611      	mov	r1, r2
 80097e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097e4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80097e8:	4622      	mov	r2, r4
 80097ea:	701a      	strb	r2, [r3, #0]
 80097ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097f0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80097f4:	4602      	mov	r2, r0
 80097f6:	701a      	strb	r2, [r3, #0]
 80097f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097fc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009800:	460a      	mov	r2, r1
 8009802:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009804:	f107 0310 	add.w	r3, r7, #16
 8009808:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800980c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009810:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009814:	2200      	movs	r2, #0
 8009816:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800981e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009822:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009826:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800982a:	7812      	ldrb	r2, [r2, #0]
 800982c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800982e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009832:	3301      	adds	r3, #1
 8009834:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009838:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800983c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009840:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009844:	7812      	ldrb	r2, [r2, #0]
 8009846:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009848:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800984c:	3301      	adds	r3, #1
 800984e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009852:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009856:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800985a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800985e:	7812      	ldrb	r2, [r2, #0]
 8009860:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009862:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009866:	3301      	adds	r3, #1
 8009868:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800986c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009870:	2218      	movs	r2, #24
 8009872:	2100      	movs	r1, #0
 8009874:	4618      	mov	r0, r3
 8009876:	f000 f83a 	bl	80098ee <Osal_MemSet>
  rq.ogf = 0x08;
 800987a:	2308      	movs	r3, #8
 800987c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8009880:	2331      	movs	r3, #49	@ 0x31
 8009882:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009886:	f107 0310 	add.w	r3, r7, #16
 800988a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800988e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009892:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009896:	f107 030f 	add.w	r3, r7, #15
 800989a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800989e:	2301      	movs	r3, #1
 80098a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098a8:	2100      	movs	r1, #0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 faa8 	bl	8009e00 <hci_send_req>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da01      	bge.n	80098ba <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80098b6:	23ff      	movs	r3, #255	@ 0xff
 80098b8:	e004      	b.n	80098c4 <hci_le_set_default_phy+0xf0>
  return status;
 80098ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098c2:	781b      	ldrb	r3, [r3, #0]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd90      	pop	{r4, r7, pc}

080098ce <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f002 f95e 	bl	800bba0 <memcpy>
 80098e4:	4603      	mov	r3, r0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	68b9      	ldr	r1, [r7, #8]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f002 f91c 	bl	800bb3c <memset>
 8009904:	4603      	mov	r3, r0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800990e:	b480      	push	{r7}
 8009910:	af00      	add	r7, sp, #0
  return;
 8009912:	bf00      	nop
}
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800991c:	b480      	push	{r7}
 800991e:	af00      	add	r7, sp, #0
  return;
 8009920:	bf00      	nop
}
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800992a:	b480      	push	{r7}
 800992c:	af00      	add	r7, sp, #0
  return;
 800992e:	bf00      	nop
}
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0
  return;
 800993c:	bf00      	nop
}
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009946:	b480      	push	{r7}
 8009948:	af00      	add	r7, sp, #0
  return;
 800994a:	bf00      	nop
}
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009954:	b480      	push	{r7}
 8009956:	af00      	add	r7, sp, #0
  return;
 8009958:	bf00      	nop
}
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009962:	b480      	push	{r7}
 8009964:	af00      	add	r7, sp, #0
  return;
 8009966:	bf00      	nop
}
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
  return;
 8009974:	bf00      	nop
}
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800997e:	b480      	push	{r7}
 8009980:	af00      	add	r7, sp, #0
  return;
 8009982:	bf00      	nop
}
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800998c:	b480      	push	{r7}
 800998e:	af00      	add	r7, sp, #0
  return;
 8009990:	bf00      	nop
}
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800999a:	b480      	push	{r7}
 800999c:	af00      	add	r7, sp, #0
  return;
 800999e:	bf00      	nop
}
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
  return;
 80099ac:	bf00      	nop
}
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80099b6:	b480      	push	{r7}
 80099b8:	af00      	add	r7, sp, #0
  return;
 80099ba:	bf00      	nop
}
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	af00      	add	r7, sp, #0
  return;
 80099c8:	bf00      	nop
}
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80099d2:	b480      	push	{r7}
 80099d4:	af00      	add	r7, sp, #0
  return;
 80099d6:	bf00      	nop
}
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80099e0:	b480      	push	{r7}
 80099e2:	af00      	add	r7, sp, #0
  return;
 80099e4:	bf00      	nop
}
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80099ee:	b480      	push	{r7}
 80099f0:	af00      	add	r7, sp, #0
  return;
 80099f2:	bf00      	nop
}
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009a00:	4b04      	ldr	r3, [pc, #16]	@ (8009a14 <SVCCTL_Init+0x18>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009a06:	4b04      	ldr	r3, [pc, #16]	@ (8009a18 <SVCCTL_Init+0x1c>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009a0c:	f000 f806 	bl	8009a1c <SVCCTL_SvcInit>

  return;
 8009a10:	bf00      	nop
}
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	200000a0 	.word	0x200000a0
 8009a18:	200000c0 	.word	0x200000c0

08009a1c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
  BAS_Init();
 8009a20:	f7ff ff75 	bl	800990e <BAS_Init>

  BLS_Init();
 8009a24:	f7ff ff7a 	bl	800991c <BLS_Init>

  CRS_STM_Init();
 8009a28:	f7ff ff7f 	bl	800992a <CRS_STM_Init>

  DIS_Init();
 8009a2c:	f7ff ff84 	bl	8009938 <DIS_Init>

  EDS_STM_Init();
 8009a30:	f7ff ff89 	bl	8009946 <EDS_STM_Init>

  HIDS_Init();
 8009a34:	f7ff ff8e 	bl	8009954 <HIDS_Init>

  HRS_Init();
 8009a38:	f7ff ff93 	bl	8009962 <HRS_Init>

  HTS_Init();
 8009a3c:	f7ff ff98 	bl	8009970 <HTS_Init>

  IAS_Init();
 8009a40:	f7ff ff9d 	bl	800997e <IAS_Init>

  LLS_Init();
 8009a44:	f7ff ffa2 	bl	800998c <LLS_Init>

  TPS_Init();
 8009a48:	f7ff ffa7 	bl	800999a <TPS_Init>

  MOTENV_STM_Init();
 8009a4c:	f7ff ffac 	bl	80099a8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009a50:	f7ff ffb1 	bl	80099b6 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009a54:	f7ff ffb6 	bl	80099c4 <ZDD_STM_Init>

  OTAS_STM_Init();
 8009a58:	f7ff ffbb 	bl	80099d2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009a5c:	f7ff ffc7 	bl	80099ee <BVOPUS_STM_Init>

  MESH_Init();
 8009a60:	f7ff ffbe 	bl	80099e0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009a64:	f001 fafa 	bl	800b05c <SVCCTL_InitCustomSvc>
  
  return;
 8009a68:	bf00      	nop
}
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009a74:	4b09      	ldr	r3, [pc, #36]	@ (8009a9c <SVCCTL_RegisterSvcHandler+0x30>)
 8009a76:	7f1b      	ldrb	r3, [r3, #28]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4a08      	ldr	r2, [pc, #32]	@ (8009a9c <SVCCTL_RegisterSvcHandler+0x30>)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009a82:	4b06      	ldr	r3, [pc, #24]	@ (8009a9c <SVCCTL_RegisterSvcHandler+0x30>)
 8009a84:	7f1b      	ldrb	r3, [r3, #28]
 8009a86:	3301      	adds	r3, #1
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	4b04      	ldr	r3, [pc, #16]	@ (8009a9c <SVCCTL_RegisterSvcHandler+0x30>)
 8009a8c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009a8e:	bf00      	nop
}
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	200000a0 	.word	0x200000a0

08009aa0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	2bff      	cmp	r3, #255	@ 0xff
 8009ab8:	d125      	bne.n	8009b06 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	3302      	adds	r3, #2
 8009abe:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009aca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ace:	d118      	bne.n	8009b02 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	757b      	strb	r3, [r7, #21]
 8009ad4:	e00d      	b.n	8009af2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009ad6:	7d7b      	ldrb	r3, [r7, #21]
 8009ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8009b44 <SVCCTL_UserEvtRx+0xa4>)
 8009ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	4798      	blx	r3
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d108      	bne.n	8009afe <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009aec:	7d7b      	ldrb	r3, [r7, #21]
 8009aee:	3301      	adds	r3, #1
 8009af0:	757b      	strb	r3, [r7, #21]
 8009af2:	4b14      	ldr	r3, [pc, #80]	@ (8009b44 <SVCCTL_UserEvtRx+0xa4>)
 8009af4:	7f1b      	ldrb	r3, [r3, #28]
 8009af6:	7d7a      	ldrb	r2, [r7, #21]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d3ec      	bcc.n	8009ad6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009afc:	e002      	b.n	8009b04 <SVCCTL_UserEvtRx+0x64>
              break;
 8009afe:	bf00      	nop
          break;
 8009b00:	e000      	b.n	8009b04 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009b02:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009b04:	e000      	b.n	8009b08 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009b06:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d00f      	beq.n	8009b2e <SVCCTL_UserEvtRx+0x8e>
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	dc10      	bgt.n	8009b34 <SVCCTL_UserEvtRx+0x94>
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d002      	beq.n	8009b1c <SVCCTL_UserEvtRx+0x7c>
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d006      	beq.n	8009b28 <SVCCTL_UserEvtRx+0x88>
 8009b1a:	e00b      	b.n	8009b34 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 ff85 	bl	800aa2c <SVCCTL_App_Notification>
 8009b22:	4603      	mov	r3, r0
 8009b24:	75bb      	strb	r3, [r7, #22]
      break;
 8009b26:	e008      	b.n	8009b3a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	75bb      	strb	r3, [r7, #22]
      break;
 8009b2c:	e005      	b.n	8009b3a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	75bb      	strb	r3, [r7, #22]
      break;
 8009b32:	e002      	b.n	8009b3a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009b34:	2301      	movs	r3, #1
 8009b36:	75bb      	strb	r3, [r7, #22]
      break;
 8009b38:	bf00      	nop
  }

  return (return_status);
 8009b3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	200000a0 	.word	0x200000a0

08009b48 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009b50:	f107 030c 	add.w	r3, r7, #12
 8009b54:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	212e      	movs	r1, #46	@ 0x2e
 8009b60:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8009b64:	f000 fae8 	bl	800a138 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	330b      	adds	r3, #11
 8009b6c:	78db      	ldrb	r3, [r3, #3]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3720      	adds	r7, #32
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b088      	sub	sp, #32
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009b7e:	f107 030c 	add.w	r3, r7, #12
 8009b82:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	210f      	movs	r1, #15
 8009b8e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8009b92:	f000 fad1 	bl	800a138 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	330b      	adds	r3, #11
 8009b9a:	78db      	ldrb	r3, [r3, #3]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3720      	adds	r7, #32
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b088      	sub	sp, #32
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009bac:	f107 030c 	add.w	r3, r7, #12
 8009bb0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	2110      	movs	r1, #16
 8009bb8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8009bbc:	f000 fabc 	bl	800a138 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	330b      	adds	r3, #11
 8009bc4:	78db      	ldrb	r3, [r3, #3]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3720      	adds	r7, #32
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
	...

08009bd0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b08b      	sub	sp, #44	@ 0x2c
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8009d24 <SHCI_GetWirelessFwInfo+0x154>)
 8009bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009c00:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009c0a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a44      	ldr	r2, [pc, #272]	@ (8009d28 <SHCI_GetWirelessFwInfo+0x158>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d10f      	bne.n	8009c3c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	617b      	str	r3, [r7, #20]
 8009c3a:	e01a      	b.n	8009c72 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009c44:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009c48:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	0e1b      	lsrs	r3, r3, #24
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7e:	0c1b      	lsrs	r3, r3, #16
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c88:	0a1b      	lsrs	r3, r3, #8
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c92:	091b      	lsrs	r3, r3, #4
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	f003 030f 	and.w	r3, r3, #15
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f003 030f 	and.w	r3, r3, #15
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	0e1b      	lsrs	r3, r3, #24
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	0c1b      	lsrs	r3, r3, #16
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009cc2:	6a3b      	ldr	r3, [r7, #32]
 8009cc4:	0a1b      	lsrs	r3, r3, #8
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	0e1b      	lsrs	r3, r3, #24
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	0c1b      	lsrs	r3, r3, #16
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	0a1b      	lsrs	r3, r3, #8
 8009cf4:	b2da      	uxtb	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	0e1b      	lsrs	r3, r3, #24
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	0c1b      	lsrs	r3, r3, #16
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	372c      	adds	r7, #44	@ 0x2c
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	58004000 	.word	0x58004000
 8009d28:	a94656b9 	.word	0xa94656b9

08009d2c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	4a08      	ldr	r2, [pc, #32]	@ (8009d5c <hci_init+0x30>)
 8009d3c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009d3e:	4a08      	ldr	r2, [pc, #32]	@ (8009d60 <hci_init+0x34>)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009d44:	4806      	ldr	r0, [pc, #24]	@ (8009d60 <hci_init+0x34>)
 8009d46:	f000 f979 	bl	800a03c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f8da 	bl	8009f08 <TlInit>

  return;
 8009d54:	bf00      	nop
}
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	20000504 	.word	0x20000504
 8009d60:	200004dc 	.word	0x200004dc

08009d64 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009d6a:	4822      	ldr	r0, [pc, #136]	@ (8009df4 <hci_user_evt_proc+0x90>)
 8009d6c:	f000 fd32 	bl	800a7d4 <LST_is_empty>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d12b      	bne.n	8009dce <hci_user_evt_proc+0x6a>
 8009d76:	4b20      	ldr	r3, [pc, #128]	@ (8009df8 <hci_user_evt_proc+0x94>)
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d027      	beq.n	8009dce <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009d7e:	f107 030c 	add.w	r3, r7, #12
 8009d82:	4619      	mov	r1, r3
 8009d84:	481b      	ldr	r0, [pc, #108]	@ (8009df4 <hci_user_evt_proc+0x90>)
 8009d86:	f000 fdb4 	bl	800a8f2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8009dfc <hci_user_evt_proc+0x98>)
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00c      	beq.n	8009dac <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009d96:	2301      	movs	r3, #1
 8009d98:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009d9a:	4b18      	ldr	r3, [pc, #96]	@ (8009dfc <hci_user_evt_proc+0x98>)
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	1d3a      	adds	r2, r7, #4
 8009da0:	4610      	mov	r0, r2
 8009da2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009da4:	793a      	ldrb	r2, [r7, #4]
 8009da6:	4b14      	ldr	r3, [pc, #80]	@ (8009df8 <hci_user_evt_proc+0x94>)
 8009da8:	701a      	strb	r2, [r3, #0]
 8009daa:	e002      	b.n	8009db2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009dac:	4b12      	ldr	r3, [pc, #72]	@ (8009df8 <hci_user_evt_proc+0x94>)
 8009dae:	2201      	movs	r2, #1
 8009db0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009db2:	4b11      	ldr	r3, [pc, #68]	@ (8009df8 <hci_user_evt_proc+0x94>)
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d004      	beq.n	8009dc4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 fc0d 	bl	800a5dc <TL_MM_EvtDone>
 8009dc2:	e004      	b.n	8009dce <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	480a      	ldr	r0, [pc, #40]	@ (8009df4 <hci_user_evt_proc+0x90>)
 8009dca:	f000 fd25 	bl	800a818 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009dce:	4809      	ldr	r0, [pc, #36]	@ (8009df4 <hci_user_evt_proc+0x90>)
 8009dd0:	f000 fd00 	bl	800a7d4 <LST_is_empty>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d107      	bne.n	8009dea <hci_user_evt_proc+0x86>
 8009dda:	4b07      	ldr	r3, [pc, #28]	@ (8009df8 <hci_user_evt_proc+0x94>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009de2:	4804      	ldr	r0, [pc, #16]	@ (8009df4 <hci_user_evt_proc+0x90>)
 8009de4:	f001 f848 	bl	800ae78 <hci_notify_asynch_evt>
  }


  return;
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
}
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	200000c8 	.word	0x200000c8
 8009df8:	200000d4 	.word	0x200000d4
 8009dfc:	200004dc 	.word	0x200004dc

08009e00 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	f000 f8d1 	bl	8009fb4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009e12:	2300      	movs	r3, #0
 8009e14:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	885b      	ldrh	r3, [r3, #2]
 8009e1a:	b21b      	sxth	r3, r3
 8009e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e20:	b21a      	sxth	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	029b      	lsls	r3, r3, #10
 8009e28:	b21b      	sxth	r3, r3
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	b21b      	sxth	r3, r3
 8009e2e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8009e30:	4b33      	ldr	r3, [pc, #204]	@ (8009f00 <hci_send_req+0x100>)
 8009e32:	2201      	movs	r2, #1
 8009e34:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	b2d9      	uxtb	r1, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689a      	ldr	r2, [r3, #8]
 8009e40:	8bbb      	ldrh	r3, [r7, #28]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 f890 	bl	8009f68 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009e48:	e04e      	b.n	8009ee8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009e4a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8009e4e:	f001 f82a 	bl	800aea6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009e52:	e043      	b.n	8009edc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009e54:	f107 030c 	add.w	r3, r7, #12
 8009e58:	4619      	mov	r1, r3
 8009e5a:	482a      	ldr	r0, [pc, #168]	@ (8009f04 <hci_send_req+0x104>)
 8009e5c:	f000 fd49 	bl	800a8f2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	7a5b      	ldrb	r3, [r3, #9]
 8009e64:	2b0f      	cmp	r3, #15
 8009e66:	d114      	bne.n	8009e92 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	330b      	adds	r3, #11
 8009e6c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	885b      	ldrh	r3, [r3, #2]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	8bba      	ldrh	r2, [r7, #28]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d104      	bne.n	8009e84 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	7812      	ldrb	r2, [r2, #0]
 8009e82:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	785b      	ldrb	r3, [r3, #1]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d027      	beq.n	8009edc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	77fb      	strb	r3, [r7, #31]
 8009e90:	e024      	b.n	8009edc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	330b      	adds	r3, #11
 8009e96:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	8bba      	ldrh	r2, [r7, #28]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d114      	bne.n	8009ed0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	7a9b      	ldrb	r3, [r3, #10]
 8009eaa:	3b03      	subs	r3, #3
 8009eac:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	695a      	ldr	r2, [r3, #20]
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	bfa8      	it	ge
 8009eb8:	461a      	movge	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6918      	ldr	r0, [r3, #16]
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	1cd9      	adds	r1, r3, #3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f001 fe68 	bl	800bba0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009edc:	4809      	ldr	r0, [pc, #36]	@ (8009f04 <hci_send_req+0x104>)
 8009ede:	f000 fc79 	bl	800a7d4 <LST_is_empty>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0b5      	beq.n	8009e54 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009ee8:	7ffb      	ldrb	r3, [r7, #31]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0ad      	beq.n	8009e4a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009eee:	2001      	movs	r0, #1
 8009ef0:	f000 f860 	bl	8009fb4 <NotifyCmdStatus>

  return 0;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20000508 	.word	0x20000508
 8009f04:	200004fc 	.word	0x200004fc

08009f08 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009f10:	480f      	ldr	r0, [pc, #60]	@ (8009f50 <TlInit+0x48>)
 8009f12:	f000 fc4f 	bl	800a7b4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009f16:	4a0f      	ldr	r2, [pc, #60]	@ (8009f54 <TlInit+0x4c>)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009f1c:	480e      	ldr	r0, [pc, #56]	@ (8009f58 <TlInit+0x50>)
 8009f1e:	f000 fc49 	bl	800a7b4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009f22:	4b0e      	ldr	r3, [pc, #56]	@ (8009f5c <TlInit+0x54>)
 8009f24:	2201      	movs	r2, #1
 8009f26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009f28:	4b0d      	ldr	r3, [pc, #52]	@ (8009f60 <TlInit+0x58>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00a      	beq.n	8009f46 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009f34:	4b0b      	ldr	r3, [pc, #44]	@ (8009f64 <TlInit+0x5c>)
 8009f36:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009f38:	4b09      	ldr	r3, [pc, #36]	@ (8009f60 <TlInit+0x58>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f107 0208 	add.w	r2, r7, #8
 8009f40:	4610      	mov	r0, r2
 8009f42:	4798      	blx	r3
  }

  return;
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
}
 8009f48:	3718      	adds	r7, #24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	200004fc 	.word	0x200004fc
 8009f54:	200000d0 	.word	0x200000d0
 8009f58:	200000c8 	.word	0x200000c8
 8009f5c:	200000d4 	.word	0x200000d4
 8009f60:	200004dc 	.word	0x200004dc
 8009f64:	08009ff5 	.word	0x08009ff5

08009f68 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	603a      	str	r2, [r7, #0]
 8009f72:	80fb      	strh	r3, [r7, #6]
 8009f74:	460b      	mov	r3, r1
 8009f76:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009f78:	4b0c      	ldr	r3, [pc, #48]	@ (8009fac <SendCmd+0x44>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	88fa      	ldrh	r2, [r7, #6]
 8009f7e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009f82:	4b0a      	ldr	r3, [pc, #40]	@ (8009fac <SendCmd+0x44>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	797a      	ldrb	r2, [r7, #5]
 8009f88:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009f8a:	4b08      	ldr	r3, [pc, #32]	@ (8009fac <SendCmd+0x44>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	330c      	adds	r3, #12
 8009f90:	797a      	ldrb	r2, [r7, #5]
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f001 fe03 	bl	800bba0 <memcpy>

  hciContext.io.Send(0,0);
 8009f9a:	4b05      	ldr	r3, [pc, #20]	@ (8009fb0 <SendCmd+0x48>)
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	4798      	blx	r3

  return;
 8009fa4:	bf00      	nop
}
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	200000d0 	.word	0x200000d0
 8009fb0:	200004dc 	.word	0x200004dc

08009fb4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009fbe:	79fb      	ldrb	r3, [r7, #7]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d108      	bne.n	8009fd6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ff0 <NotifyCmdStatus+0x3c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00d      	beq.n	8009fe8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009fcc:	4b08      	ldr	r3, [pc, #32]	@ (8009ff0 <NotifyCmdStatus+0x3c>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009fd4:	e008      	b.n	8009fe8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009fd6:	4b06      	ldr	r3, [pc, #24]	@ (8009ff0 <NotifyCmdStatus+0x3c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d004      	beq.n	8009fe8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009fde:	4b04      	ldr	r3, [pc, #16]	@ (8009ff0 <NotifyCmdStatus+0x3c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	4798      	blx	r3
  return;
 8009fe6:	bf00      	nop
 8009fe8:	bf00      	nop
}
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	20000504 	.word	0x20000504

08009ff4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	7a5b      	ldrb	r3, [r3, #9]
 800a000:	2b0f      	cmp	r3, #15
 800a002:	d003      	beq.n	800a00c <TlEvtReceived+0x18>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	7a5b      	ldrb	r3, [r3, #9]
 800a008:	2b0e      	cmp	r3, #14
 800a00a:	d107      	bne.n	800a01c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a00c:	6879      	ldr	r1, [r7, #4]
 800a00e:	4809      	ldr	r0, [pc, #36]	@ (800a034 <TlEvtReceived+0x40>)
 800a010:	f000 fc28 	bl	800a864 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a014:	2000      	movs	r0, #0
 800a016:	f000 ff3b 	bl	800ae90 <hci_cmd_resp_release>
 800a01a:	e006      	b.n	800a02a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a01c:	6879      	ldr	r1, [r7, #4]
 800a01e:	4806      	ldr	r0, [pc, #24]	@ (800a038 <TlEvtReceived+0x44>)
 800a020:	f000 fc20 	bl	800a864 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a024:	4804      	ldr	r0, [pc, #16]	@ (800a038 <TlEvtReceived+0x44>)
 800a026:	f000 ff27 	bl	800ae78 <hci_notify_asynch_evt>
  }

  return;
 800a02a:	bf00      	nop
}
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	200004fc 	.word	0x200004fc
 800a038:	200000c8 	.word	0x200000c8

0800a03c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a05      	ldr	r2, [pc, #20]	@ (800a05c <hci_register_io_bus+0x20>)
 800a048:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a04      	ldr	r2, [pc, #16]	@ (800a060 <hci_register_io_bus+0x24>)
 800a04e:	611a      	str	r2, [r3, #16]

  return;
 800a050:	bf00      	nop
}
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	0800a355 	.word	0x0800a355
 800a060:	0800a3bd 	.word	0x0800a3bd

0800a064 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	4a08      	ldr	r2, [pc, #32]	@ (800a094 <shci_init+0x30>)
 800a074:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a076:	4a08      	ldr	r2, [pc, #32]	@ (800a098 <shci_init+0x34>)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a07c:	4806      	ldr	r0, [pc, #24]	@ (800a098 <shci_init+0x34>)
 800a07e:	f000 f915 	bl	800a2ac <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f000 f898 	bl	800a1bc <TlInit>

  return;
 800a08c:	bf00      	nop
}
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	2000052c 	.word	0x2000052c
 800a098:	2000050c 	.word	0x2000050c

0800a09c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a0a2:	4822      	ldr	r0, [pc, #136]	@ (800a12c <shci_user_evt_proc+0x90>)
 800a0a4:	f000 fb96 	bl	800a7d4 <LST_is_empty>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d12b      	bne.n	800a106 <shci_user_evt_proc+0x6a>
 800a0ae:	4b20      	ldr	r3, [pc, #128]	@ (800a130 <shci_user_evt_proc+0x94>)
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d027      	beq.n	800a106 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a0b6:	f107 030c 	add.w	r3, r7, #12
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	481b      	ldr	r0, [pc, #108]	@ (800a12c <shci_user_evt_proc+0x90>)
 800a0be:	f000 fc18 	bl	800a8f2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	@ (800a134 <shci_user_evt_proc+0x98>)
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00c      	beq.n	800a0e4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a0d2:	4b18      	ldr	r3, [pc, #96]	@ (800a134 <shci_user_evt_proc+0x98>)
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	1d3a      	adds	r2, r7, #4
 800a0d8:	4610      	mov	r0, r2
 800a0da:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a0dc:	793a      	ldrb	r2, [r7, #4]
 800a0de:	4b14      	ldr	r3, [pc, #80]	@ (800a130 <shci_user_evt_proc+0x94>)
 800a0e0:	701a      	strb	r2, [r3, #0]
 800a0e2:	e002      	b.n	800a0ea <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a0e4:	4b12      	ldr	r3, [pc, #72]	@ (800a130 <shci_user_evt_proc+0x94>)
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a0ea:	4b11      	ldr	r3, [pc, #68]	@ (800a130 <shci_user_evt_proc+0x94>)
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 fa71 	bl	800a5dc <TL_MM_EvtDone>
 800a0fa:	e004      	b.n	800a106 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4619      	mov	r1, r3
 800a100:	480a      	ldr	r0, [pc, #40]	@ (800a12c <shci_user_evt_proc+0x90>)
 800a102:	f000 fb89 	bl	800a818 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a106:	4809      	ldr	r0, [pc, #36]	@ (800a12c <shci_user_evt_proc+0x90>)
 800a108:	f000 fb64 	bl	800a7d4 <LST_is_empty>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d107      	bne.n	800a122 <shci_user_evt_proc+0x86>
 800a112:	4b07      	ldr	r3, [pc, #28]	@ (800a130 <shci_user_evt_proc+0x94>)
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a11a:	4804      	ldr	r0, [pc, #16]	@ (800a12c <shci_user_evt_proc+0x90>)
 800a11c:	f7f9 ff52 	bl	8003fc4 <shci_notify_asynch_evt>
  }


  return;
 800a120:	bf00      	nop
 800a122:	bf00      	nop
}
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	200000d8 	.word	0x200000d8
 800a130:	200000e8 	.word	0x200000e8
 800a134:	2000050c 	.word	0x2000050c

0800a138 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60ba      	str	r2, [r7, #8]
 800a140:	607b      	str	r3, [r7, #4]
 800a142:	4603      	mov	r3, r0
 800a144:	81fb      	strh	r3, [r7, #14]
 800a146:	460b      	mov	r3, r1
 800a148:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a14a:	2000      	movs	r0, #0
 800a14c:	f000 f868 	bl	800a220 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a150:	4b17      	ldr	r3, [pc, #92]	@ (800a1b0 <shci_send+0x78>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	89fa      	ldrh	r2, [r7, #14]
 800a156:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a15a:	4b15      	ldr	r3, [pc, #84]	@ (800a1b0 <shci_send+0x78>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	7b7a      	ldrb	r2, [r7, #13]
 800a160:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a162:	4b13      	ldr	r3, [pc, #76]	@ (800a1b0 <shci_send+0x78>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	330c      	adds	r3, #12
 800a168:	7b7a      	ldrb	r2, [r7, #13]
 800a16a:	68b9      	ldr	r1, [r7, #8]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f001 fd17 	bl	800bba0 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800a172:	4b10      	ldr	r3, [pc, #64]	@ (800a1b4 <shci_send+0x7c>)
 800a174:	2201      	movs	r2, #1
 800a176:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800a178:	4b0f      	ldr	r3, [pc, #60]	@ (800a1b8 <shci_send+0x80>)
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	2100      	movs	r1, #0
 800a17e:	2000      	movs	r0, #0
 800a180:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a182:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800a186:	f7f9 ff34 	bl	8003ff2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f103 0008 	add.w	r0, r3, #8
 800a190:	4b07      	ldr	r3, [pc, #28]	@ (800a1b0 <shci_send+0x78>)
 800a192:	6819      	ldr	r1, [r3, #0]
 800a194:	4b06      	ldr	r3, [pc, #24]	@ (800a1b0 <shci_send+0x78>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	789b      	ldrb	r3, [r3, #2]
 800a19a:	3303      	adds	r3, #3
 800a19c:	461a      	mov	r2, r3
 800a19e:	f001 fcff 	bl	800bba0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	f000 f83c 	bl	800a220 <Cmd_SetStatus>

  return;
 800a1a8:	bf00      	nop
}
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	200000e4 	.word	0x200000e4
 800a1b4:	20000530 	.word	0x20000530
 800a1b8:	2000050c 	.word	0x2000050c

0800a1bc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a1c4:	4a10      	ldr	r2, [pc, #64]	@ (800a208 <TlInit+0x4c>)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a1ca:	4810      	ldr	r0, [pc, #64]	@ (800a20c <TlInit+0x50>)
 800a1cc:	f000 faf2 	bl	800a7b4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	f000 f825 	bl	800a220 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a1d6:	4b0e      	ldr	r3, [pc, #56]	@ (800a210 <TlInit+0x54>)
 800a1d8:	2201      	movs	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a1dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a214 <TlInit+0x58>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00c      	beq.n	800a1fe <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a1e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a218 <TlInit+0x5c>)
 800a1ea:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a1ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a21c <TlInit+0x60>)
 800a1ee:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a1f0:	4b08      	ldr	r3, [pc, #32]	@ (800a214 <TlInit+0x58>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f107 020c 	add.w	r2, r7, #12
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4798      	blx	r3
  }

  return;
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
}
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	200000e4 	.word	0x200000e4
 800a20c:	200000d8 	.word	0x200000d8
 800a210:	200000e8 	.word	0x200000e8
 800a214:	2000050c 	.word	0x2000050c
 800a218:	0800a271 	.word	0x0800a271
 800a21c:	0800a289 	.word	0x0800a289

0800a220 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10b      	bne.n	800a248 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a230:	4b0d      	ldr	r3, [pc, #52]	@ (800a268 <Cmd_SetStatus+0x48>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d003      	beq.n	800a240 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a238:	4b0b      	ldr	r3, [pc, #44]	@ (800a268 <Cmd_SetStatus+0x48>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2000      	movs	r0, #0
 800a23e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a240:	4b0a      	ldr	r3, [pc, #40]	@ (800a26c <Cmd_SetStatus+0x4c>)
 800a242:	2200      	movs	r2, #0
 800a244:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a246:	e00b      	b.n	800a260 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a248:	4b08      	ldr	r3, [pc, #32]	@ (800a26c <Cmd_SetStatus+0x4c>)
 800a24a:	2201      	movs	r2, #1
 800a24c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a24e:	4b06      	ldr	r3, [pc, #24]	@ (800a268 <Cmd_SetStatus+0x48>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d004      	beq.n	800a260 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a256:	4b04      	ldr	r3, [pc, #16]	@ (800a268 <Cmd_SetStatus+0x48>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2001      	movs	r0, #1
 800a25c:	4798      	blx	r3
  return;
 800a25e:	bf00      	nop
 800a260:	bf00      	nop
}
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	2000052c 	.word	0x2000052c
 800a26c:	200000e0 	.word	0x200000e0

0800a270 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a278:	2000      	movs	r0, #0
 800a27a:	f7f9 feaf 	bl	8003fdc <shci_cmd_resp_release>

  return;
 800a27e:	bf00      	nop
}
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a290:	6879      	ldr	r1, [r7, #4]
 800a292:	4805      	ldr	r0, [pc, #20]	@ (800a2a8 <TlUserEvtReceived+0x20>)
 800a294:	f000 fae6 	bl	800a864 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a298:	4803      	ldr	r0, [pc, #12]	@ (800a2a8 <TlUserEvtReceived+0x20>)
 800a29a:	f7f9 fe93 	bl	8003fc4 <shci_notify_asynch_evt>

  return;
 800a29e:	bf00      	nop
}
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200000d8 	.word	0x200000d8

0800a2ac <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a05      	ldr	r2, [pc, #20]	@ (800a2cc <shci_register_io_bus+0x20>)
 800a2b8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a04      	ldr	r2, [pc, #16]	@ (800a2d0 <shci_register_io_bus+0x24>)
 800a2be:	611a      	str	r2, [r3, #16]

  return;
 800a2c0:	bf00      	nop
}
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	0800a469 	.word	0x0800a469
 800a2d0:	0800a4bd 	.word	0x0800a4bd

0800a2d4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a2d8:	f001 f8d2 	bl	800b480 <HW_IPCC_Enable>

  return;
 800a2dc:	bf00      	nop
}
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <TL_Init>:


void TL_Init( void )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a2e4:	4b10      	ldr	r3, [pc, #64]	@ (800a328 <TL_Init+0x48>)
 800a2e6:	4a11      	ldr	r2, [pc, #68]	@ (800a32c <TL_Init+0x4c>)
 800a2e8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a2ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a328 <TL_Init+0x48>)
 800a2ec:	4a10      	ldr	r2, [pc, #64]	@ (800a330 <TL_Init+0x50>)
 800a2ee:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a2f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <TL_Init+0x48>)
 800a2f2:	4a10      	ldr	r2, [pc, #64]	@ (800a334 <TL_Init+0x54>)
 800a2f4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a2f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a328 <TL_Init+0x48>)
 800a2f8:	4a0f      	ldr	r2, [pc, #60]	@ (800a338 <TL_Init+0x58>)
 800a2fa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a328 <TL_Init+0x48>)
 800a2fe:	4a0f      	ldr	r2, [pc, #60]	@ (800a33c <TL_Init+0x5c>)
 800a300:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a302:	4b09      	ldr	r3, [pc, #36]	@ (800a328 <TL_Init+0x48>)
 800a304:	4a0e      	ldr	r2, [pc, #56]	@ (800a340 <TL_Init+0x60>)
 800a306:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a308:	4b07      	ldr	r3, [pc, #28]	@ (800a328 <TL_Init+0x48>)
 800a30a:	4a0e      	ldr	r2, [pc, #56]	@ (800a344 <TL_Init+0x64>)
 800a30c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a30e:	4b06      	ldr	r3, [pc, #24]	@ (800a328 <TL_Init+0x48>)
 800a310:	4a0d      	ldr	r2, [pc, #52]	@ (800a348 <TL_Init+0x68>)
 800a312:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a314:	4b04      	ldr	r3, [pc, #16]	@ (800a328 <TL_Init+0x48>)
 800a316:	4a0d      	ldr	r2, [pc, #52]	@ (800a34c <TL_Init+0x6c>)
 800a318:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a31a:	4b03      	ldr	r3, [pc, #12]	@ (800a328 <TL_Init+0x48>)
 800a31c:	4a0c      	ldr	r2, [pc, #48]	@ (800a350 <TL_Init+0x70>)
 800a31e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a320:	f001 f8c2 	bl	800b4a8 <HW_IPCC_Init>

  return;
 800a324:	bf00      	nop
}
 800a326:	bd80      	pop	{r7, pc}
 800a328:	20030000 	.word	0x20030000
 800a32c:	20030028 	.word	0x20030028
 800a330:	20030048 	.word	0x20030048
 800a334:	20030058 	.word	0x20030058
 800a338:	20030068 	.word	0x20030068
 800a33c:	20030070 	.word	0x20030070
 800a340:	20030078 	.word	0x20030078
 800a344:	20030080 	.word	0x20030080
 800a348:	2003009c 	.word	0x2003009c
 800a34c:	200300a0 	.word	0x200300a0
 800a350:	200300ac 	.word	0x200300ac

0800a354 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a360:	4811      	ldr	r0, [pc, #68]	@ (800a3a8 <TL_BLE_Init+0x54>)
 800a362:	f000 fa27 	bl	800a7b4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a366:	4b11      	ldr	r3, [pc, #68]	@ (800a3ac <TL_BLE_Init+0x58>)
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4a0c      	ldr	r2, [pc, #48]	@ (800a3b0 <TL_BLE_Init+0x5c>)
 800a380:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	4a08      	ldr	r2, [pc, #32]	@ (800a3a8 <TL_BLE_Init+0x54>)
 800a386:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a388:	f001 f8a4 	bl	800b4d4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a08      	ldr	r2, [pc, #32]	@ (800a3b4 <TL_BLE_Init+0x60>)
 800a392:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	4a07      	ldr	r2, [pc, #28]	@ (800a3b8 <TL_BLE_Init+0x64>)
 800a39a:	6013      	str	r3, [r2, #0]

  return 0;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	200300c8 	.word	0x200300c8
 800a3ac:	20030000 	.word	0x20030000
 800a3b0:	20030a58 	.word	0x20030a58
 800a3b4:	2000053c 	.word	0x2000053c
 800a3b8:	20000540 	.word	0x20000540

0800a3bc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a3c8:	4b09      	ldr	r3, [pc, #36]	@ (800a3f0 <TL_BLE_SendCmd+0x34>)
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a3d2:	4b07      	ldr	r3, [pc, #28]	@ (800a3f0 <TL_BLE_SendCmd+0x34>)
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	2001      	movs	r0, #1
 800a3dc:	f000 f96c 	bl	800a6b8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a3e0:	f001 f882 	bl	800b4e8 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20030000 	.word	0x20030000

0800a3f4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a3fa:	e01c      	b.n	800a436 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a3fc:	1d3b      	adds	r3, r7, #4
 800a3fe:	4619      	mov	r1, r3
 800a400:	4812      	ldr	r0, [pc, #72]	@ (800a44c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a402:	f000 fa76 	bl	800a8f2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	7a5b      	ldrb	r3, [r3, #9]
 800a40a:	2b0f      	cmp	r3, #15
 800a40c:	d003      	beq.n	800a416 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	7a5b      	ldrb	r3, [r3, #9]
 800a412:	2b0e      	cmp	r3, #14
 800a414:	d105      	bne.n	800a422 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4619      	mov	r1, r3
 800a41a:	2002      	movs	r0, #2
 800a41c:	f000 f94c 	bl	800a6b8 <OutputDbgTrace>
 800a420:	e004      	b.n	800a42c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4619      	mov	r1, r3
 800a426:	2003      	movs	r0, #3
 800a428:	f000 f946 	bl	800a6b8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a42c:	4b08      	ldr	r3, [pc, #32]	@ (800a450 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	4610      	mov	r0, r2
 800a434:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a436:	4805      	ldr	r0, [pc, #20]	@ (800a44c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a438:	f000 f9cc 	bl	800a7d4 <LST_is_empty>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0dc      	beq.n	800a3fc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a442:	bf00      	nop
}
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	200300c8 	.word	0x200300c8
 800a450:	2000053c 	.word	0x2000053c

0800a454 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a458:	4b02      	ldr	r3, [pc, #8]	@ (800a464 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4798      	blx	r3

  return;
 800a45e:	bf00      	nop
}
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20000540 	.word	0x20000540

0800a468 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a474:	480d      	ldr	r0, [pc, #52]	@ (800a4ac <TL_SYS_Init+0x44>)
 800a476:	f000 f99d 	bl	800a7b4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a47a:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b0 <TL_SYS_Init+0x48>)
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	4a08      	ldr	r2, [pc, #32]	@ (800a4ac <TL_SYS_Init+0x44>)
 800a48c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a48e:	f001 f84d 	bl	800b52c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a07      	ldr	r2, [pc, #28]	@ (800a4b4 <TL_SYS_Init+0x4c>)
 800a498:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	4a06      	ldr	r2, [pc, #24]	@ (800a4b8 <TL_SYS_Init+0x50>)
 800a4a0:	6013      	str	r3, [r2, #0]

  return 0;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	200300d0 	.word	0x200300d0
 800a4b0:	20030000 	.word	0x20030000
 800a4b4:	20000544 	.word	0x20000544
 800a4b8:	20000548 	.word	0x20000548

0800a4bc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a4c8:	4b09      	ldr	r3, [pc, #36]	@ (800a4f0 <TL_SYS_SendCmd+0x34>)
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2210      	movs	r2, #16
 800a4d0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a4d2:	4b07      	ldr	r3, [pc, #28]	@ (800a4f0 <TL_SYS_SendCmd+0x34>)
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	2004      	movs	r0, #4
 800a4dc:	f000 f8ec 	bl	800a6b8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a4e0:	f001 f82e 	bl	800b540 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20030000 	.word	0x20030000

0800a4f4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a4f8:	4b07      	ldr	r3, [pc, #28]	@ (800a518 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4619      	mov	r1, r3
 800a500:	2005      	movs	r0, #5
 800a502:	f000 f8d9 	bl	800a6b8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a506:	4b05      	ldr	r3, [pc, #20]	@ (800a51c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a03      	ldr	r2, [pc, #12]	@ (800a518 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a50c:	68d2      	ldr	r2, [r2, #12]
 800a50e:	6812      	ldr	r2, [r2, #0]
 800a510:	4610      	mov	r0, r2
 800a512:	4798      	blx	r3

  return;
 800a514:	bf00      	nop
}
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20030000 	.word	0x20030000
 800a51c:	20000544 	.word	0x20000544

0800a520 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a526:	e00e      	b.n	800a546 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a528:	1d3b      	adds	r3, r7, #4
 800a52a:	4619      	mov	r1, r3
 800a52c:	480b      	ldr	r0, [pc, #44]	@ (800a55c <HW_IPCC_SYS_EvtNot+0x3c>)
 800a52e:	f000 f9e0 	bl	800a8f2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4619      	mov	r1, r3
 800a536:	2006      	movs	r0, #6
 800a538:	f000 f8be 	bl	800a6b8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a53c:	4b08      	ldr	r3, [pc, #32]	@ (800a560 <HW_IPCC_SYS_EvtNot+0x40>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	4610      	mov	r0, r2
 800a544:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a546:	4805      	ldr	r0, [pc, #20]	@ (800a55c <HW_IPCC_SYS_EvtNot+0x3c>)
 800a548:	f000 f944 	bl	800a7d4 <LST_is_empty>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d0ea      	beq.n	800a528 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a552:	bf00      	nop
}
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	200300d0 	.word	0x200300d0
 800a560:	20000548 	.word	0x20000548

0800a564 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a56c:	4817      	ldr	r0, [pc, #92]	@ (800a5cc <TL_MM_Init+0x68>)
 800a56e:	f000 f921 	bl	800a7b4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a572:	4817      	ldr	r0, [pc, #92]	@ (800a5d0 <TL_MM_Init+0x6c>)
 800a574:	f000 f91e 	bl	800a7b4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a578:	4b16      	ldr	r3, [pc, #88]	@ (800a5d4 <TL_MM_Init+0x70>)
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	4a16      	ldr	r2, [pc, #88]	@ (800a5d8 <TL_MM_Init+0x74>)
 800a57e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a580:	4b15      	ldr	r3, [pc, #84]	@ (800a5d8 <TL_MM_Init+0x74>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	6892      	ldr	r2, [r2, #8]
 800a588:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a58a:	4b13      	ldr	r3, [pc, #76]	@ (800a5d8 <TL_MM_Init+0x74>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	68d2      	ldr	r2, [r2, #12]
 800a592:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a594:	4b10      	ldr	r3, [pc, #64]	@ (800a5d8 <TL_MM_Init+0x74>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a0c      	ldr	r2, [pc, #48]	@ (800a5cc <TL_MM_Init+0x68>)
 800a59a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a59c:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d8 <TL_MM_Init+0x74>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d8 <TL_MM_Init+0x74>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	6852      	ldr	r2, [r2, #4]
 800a5ae:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a5b0:	4b09      	ldr	r3, [pc, #36]	@ (800a5d8 <TL_MM_Init+0x74>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	6912      	ldr	r2, [r2, #16]
 800a5b8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a5ba:	4b07      	ldr	r3, [pc, #28]	@ (800a5d8 <TL_MM_Init+0x74>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	6952      	ldr	r2, [r2, #20]
 800a5c2:	619a      	str	r2, [r3, #24]

  return;
 800a5c4:	bf00      	nop
}
 800a5c6:	3708      	adds	r7, #8
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	200300b8 	.word	0x200300b8
 800a5d0:	20000534 	.word	0x20000534
 800a5d4:	20030000 	.word	0x20030000
 800a5d8:	2000054c 	.word	0x2000054c

0800a5dc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	4807      	ldr	r0, [pc, #28]	@ (800a604 <TL_MM_EvtDone+0x28>)
 800a5e8:	f000 f93c 	bl	800a864 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	f000 f862 	bl	800a6b8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a5f4:	4804      	ldr	r0, [pc, #16]	@ (800a608 <TL_MM_EvtDone+0x2c>)
 800a5f6:	f000 ffc9 	bl	800b58c <HW_IPCC_MM_SendFreeBuf>

  return;
 800a5fa:	bf00      	nop
}
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000534 	.word	0x20000534
 800a608:	0800a60d 	.word	0x0800a60d

0800a60c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a612:	e00c      	b.n	800a62e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a614:	1d3b      	adds	r3, r7, #4
 800a616:	4619      	mov	r1, r3
 800a618:	480a      	ldr	r0, [pc, #40]	@ (800a644 <SendFreeBuf+0x38>)
 800a61a:	f000 f96a 	bl	800a8f2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a61e:	4b0a      	ldr	r3, [pc, #40]	@ (800a648 <SendFreeBuf+0x3c>)
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	4611      	mov	r1, r2
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 f91b 	bl	800a864 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a62e:	4805      	ldr	r0, [pc, #20]	@ (800a644 <SendFreeBuf+0x38>)
 800a630:	f000 f8d0 	bl	800a7d4 <LST_is_empty>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0ec      	beq.n	800a614 <SendFreeBuf+0x8>
  }

  return;
 800a63a:	bf00      	nop
}
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000534 	.word	0x20000534
 800a648:	20030000 	.word	0x20030000

0800a64c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a650:	4805      	ldr	r0, [pc, #20]	@ (800a668 <TL_TRACES_Init+0x1c>)
 800a652:	f000 f8af 	bl	800a7b4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a656:	4b05      	ldr	r3, [pc, #20]	@ (800a66c <TL_TRACES_Init+0x20>)
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	4a03      	ldr	r2, [pc, #12]	@ (800a668 <TL_TRACES_Init+0x1c>)
 800a65c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a65e:	f000 ffcb 	bl	800b5f8 <HW_IPCC_TRACES_Init>

  return;
 800a662:	bf00      	nop
}
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	200300c0 	.word	0x200300c0
 800a66c:	20030000 	.word	0x20030000

0800a670 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a676:	e008      	b.n	800a68a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a678:	1d3b      	adds	r3, r7, #4
 800a67a:	4619      	mov	r1, r3
 800a67c:	4808      	ldr	r0, [pc, #32]	@ (800a6a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a67e:	f000 f938 	bl	800a8f2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4618      	mov	r0, r3
 800a686:	f000 f80d 	bl	800a6a4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a68a:	4805      	ldr	r0, [pc, #20]	@ (800a6a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a68c:	f000 f8a2 	bl	800a7d4 <LST_is_empty>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0f0      	beq.n	800a678 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a696:	bf00      	nop
}
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	200300c0 	.word	0x200300c0

0800a6a4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	4603      	mov	r3, r0
 800a6c0:	6039      	str	r1, [r7, #0]
 800a6c2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a6c4:	79fb      	ldrb	r3, [r7, #7]
 800a6c6:	2b06      	cmp	r3, #6
 800a6c8:	d845      	bhi.n	800a756 <OutputDbgTrace+0x9e>
 800a6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d0 <OutputDbgTrace+0x18>)
 800a6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d0:	0800a6ed 	.word	0x0800a6ed
 800a6d4:	0800a711 	.word	0x0800a711
 800a6d8:	0800a717 	.word	0x0800a717
 800a6dc:	0800a72b 	.word	0x0800a72b
 800a6e0:	0800a737 	.word	0x0800a737
 800a6e4:	0800a73d 	.word	0x0800a73d
 800a6e8:	0800a74b 	.word	0x0800a74b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	7a5b      	ldrb	r3, [r3, #9]
 800a6f4:	2bff      	cmp	r3, #255	@ 0xff
 800a6f6:	d005      	beq.n	800a704 <OutputDbgTrace+0x4c>
 800a6f8:	2bff      	cmp	r3, #255	@ 0xff
 800a6fa:	dc05      	bgt.n	800a708 <OutputDbgTrace+0x50>
 800a6fc:	2b0e      	cmp	r3, #14
 800a6fe:	d005      	beq.n	800a70c <OutputDbgTrace+0x54>
 800a700:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a702:	e001      	b.n	800a708 <OutputDbgTrace+0x50>
          break;
 800a704:	bf00      	nop
 800a706:	e027      	b.n	800a758 <OutputDbgTrace+0xa0>
          break;
 800a708:	bf00      	nop
 800a70a:	e025      	b.n	800a758 <OutputDbgTrace+0xa0>
          break;
 800a70c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a70e:	e023      	b.n	800a758 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a714:	e020      	b.n	800a758 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	7a5b      	ldrb	r3, [r3, #9]
 800a71e:	2b0e      	cmp	r3, #14
 800a720:	d001      	beq.n	800a726 <OutputDbgTrace+0x6e>
 800a722:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a724:	e000      	b.n	800a728 <OutputDbgTrace+0x70>
          break;
 800a726:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a728:	e016      	b.n	800a758 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	7a5b      	ldrb	r3, [r3, #9]
 800a732:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a734:	e010      	b.n	800a758 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a73a:	e00d      	b.n	800a758 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	7a5b      	ldrb	r3, [r3, #9]
 800a744:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a746:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a748:	e006      	b.n	800a758 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	7a5b      	ldrb	r3, [r3, #9]
 800a752:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a754:	e000      	b.n	800a758 <OutputDbgTrace+0xa0>

    default:
      break;
 800a756:	bf00      	nop
  }

  return;
 800a758:	bf00      	nop
}
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	4603      	mov	r3, r0
 800a76c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a76e:	4b0f      	ldr	r3, [pc, #60]	@ (800a7ac <OTP_Read+0x48>)
 800a770:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a772:	e002      	b.n	800a77a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	3b08      	subs	r3, #8
 800a778:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3307      	adds	r3, #7
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	79fa      	ldrb	r2, [r7, #7]
 800a782:	429a      	cmp	r2, r3
 800a784:	d003      	beq.n	800a78e <OTP_Read+0x2a>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	4a09      	ldr	r2, [pc, #36]	@ (800a7b0 <OTP_Read+0x4c>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d1f2      	bne.n	800a774 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3307      	adds	r3, #7
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	79fa      	ldrb	r2, [r7, #7]
 800a796:	429a      	cmp	r2, r3
 800a798:	d001      	beq.n	800a79e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a79a:	2300      	movs	r3, #0
 800a79c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a79e:	68fb      	ldr	r3, [r7, #12]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	1fff73f8 	.word	0x1fff73f8
 800a7b0:	1fff7000 	.word	0x1fff7000

0800a7b4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	605a      	str	r2, [r3, #4]
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a7e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a7e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7e6:	b672      	cpsid	i
}
 800a7e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d102      	bne.n	800a7fa <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	75fb      	strb	r3, [r7, #23]
 800a7f8:	e001      	b.n	800a7fe <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	75fb      	strb	r3, [r7, #23]
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	f383 8810 	msr	PRIMASK, r3
}
 800a808:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	371c      	adds	r7, #28
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a818:	b480      	push	{r7}
 800a81a:	b087      	sub	sp, #28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a822:	f3ef 8310 	mrs	r3, PRIMASK
 800a826:	60fb      	str	r3, [r7, #12]
  return(result);
 800a828:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a82a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a82c:	b672      	cpsid	i
}
 800a82e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	605a      	str	r2, [r3, #4]
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f383 8810 	msr	PRIMASK, r3
}
 800a856:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a858:	bf00      	nop
 800a85a:	371c      	adds	r7, #28
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a864:	b480      	push	{r7}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a86e:	f3ef 8310 	mrs	r3, PRIMASK
 800a872:	60fb      	str	r3, [r7, #12]
  return(result);
 800a874:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a876:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a878:	b672      	cpsid	i
}
 800a87a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	f383 8810 	msr	PRIMASK, r3
}
 800a8a2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a8a4:	bf00      	nop
 800a8a6:	371c      	adds	r7, #28
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a8c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8c2:	b672      	cpsid	i
}
 800a8c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6812      	ldr	r2, [r2, #0]
 800a8ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	6852      	ldr	r2, [r2, #4]
 800a8d8:	605a      	str	r2, [r3, #4]
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f383 8810 	msr	PRIMASK, r3
}
 800a8e4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a8e6:	bf00      	nop
 800a8e8:	371c      	adds	r7, #28
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b086      	sub	sp, #24
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a900:	60fb      	str	r3, [r7, #12]
  return(result);
 800a902:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a906:	b672      	cpsid	i
}
 800a908:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff ffca 	bl	800a8b0 <LST_remove_node>
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f383 8810 	msr	PRIMASK, r3
}
 800a926:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a928:	bf00      	nop
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a930:	b480      	push	{r7}
 800a932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a934:	4b03      	ldr	r3, [pc, #12]	@ (800a944 <LL_FLASH_GetUDN+0x14>)
 800a936:	681b      	ldr	r3, [r3, #0]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	1fff7580 	.word	0x1fff7580

0800a948 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a94c:	4b03      	ldr	r3, [pc, #12]	@ (800a95c <LL_FLASH_GetDeviceID+0x14>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	b2db      	uxtb	r3, r3
}
 800a952:	4618      	mov	r0, r3
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	1fff7584 	.word	0x1fff7584

0800a960 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a960:	b480      	push	{r7}
 800a962:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800a964:	4b03      	ldr	r3, [pc, #12]	@ (800a974 <LL_FLASH_GetSTCompanyID+0x14>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	0a1b      	lsrs	r3, r3, #8
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	1fff7584 	.word	0x1fff7584

0800a978 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800a978:	b5b0      	push	{r4, r5, r7, lr}
 800a97a:	b090      	sub	sp, #64	@ 0x40
 800a97c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a97e:	2392      	movs	r3, #146	@ 0x92
 800a980:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a984:	4b25      	ldr	r3, [pc, #148]	@ (800aa1c <APP_BLE_Init+0xa4>)
 800a986:	1d3c      	adds	r4, r7, #4
 800a988:	461d      	mov	r5, r3
 800a98a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a98c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a98e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a996:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a99a:	c403      	stmia	r4!, {r0, r1}
 800a99c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800a99e:	f000 f913 	bl	800abc8 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	2002      	movs	r0, #2
 800a9a6:	f000 fe4f 	bl	800b648 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a9aa:	4a1d      	ldr	r2, [pc, #116]	@ (800aa20 <APP_BLE_Init+0xa8>)
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	2002      	movs	r0, #2
 800a9b0:	f000 ff76 	bl	800b8a0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800a9b4:	1d3b      	adds	r3, r7, #4
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7ff f8c6 	bl	8009b48 <SHCI_C2_BLE_Init>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800a9c2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800a9ca:	f7fa fc35 	bl	8005238 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a9ce:	f000 f911 	bl	800abf4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a9d2:	f7ff f813 	bl	80099fc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a9d6:	4b13      	ldr	r3, [pc, #76]	@ (800aa24 <APP_BLE_Init+0xac>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a9de:	4b11      	ldr	r3, [pc, #68]	@ (800aa24 <APP_BLE_Init+0xac>)
 800a9e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a9e4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a9e6:	4a10      	ldr	r2, [pc, #64]	@ (800aa28 <APP_BLE_Init+0xb0>)
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	2001      	movs	r0, #1
 800a9ec:	f000 ff58 	bl	800b8a0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800a9f0:	2006      	movs	r0, #6
 800a9f2:	f7fe fe77 	bl	80096e4 <aci_hal_set_radio_activity_mask>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800a9fc:	f000 fabd 	bl	800af7a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800aa00:	4b08      	ldr	r3, [pc, #32]	@ (800aa24 <APP_BLE_Init+0xac>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800aa06:	4b07      	ldr	r3, [pc, #28]	@ (800aa24 <APP_BLE_Init+0xac>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800aa0c:	2001      	movs	r0, #1
 800aa0e:	f000 f9a5 	bl	800ad5c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800aa12:	bf00      	nop
}
 800aa14:	3740      	adds	r7, #64	@ 0x40
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bdb0      	pop	{r4, r5, r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	0800be1c 	.word	0x0800be1c
 800aa20:	08009d65 	.word	0x08009d65
 800aa24:	20000558 	.word	0x20000558
 800aa28:	0800ae45 	.word	0x0800ae45

0800aa2c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08a      	sub	sp, #40	@ 0x28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800aa34:	2392      	movs	r3, #146	@ 0x92
 800aa36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2bff      	cmp	r3, #255	@ 0xff
 800aa46:	d053      	beq.n	800aaf0 <SVCCTL_App_Notification+0xc4>
 800aa48:	2bff      	cmp	r3, #255	@ 0xff
 800aa4a:	f300 80af 	bgt.w	800abac <SVCCTL_App_Notification+0x180>
 800aa4e:	2b05      	cmp	r3, #5
 800aa50:	d002      	beq.n	800aa58 <SVCCTL_App_Notification+0x2c>
 800aa52:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa54:	d020      	beq.n	800aa98 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800aa56:	e0a9      	b.n	800abac <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800aa58:	6a3b      	ldr	r3, [r7, #32]
 800aa5a:	3302      	adds	r3, #2
 800aa5c:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	4b55      	ldr	r3, [pc, #340]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800aa68:	8adb      	ldrh	r3, [r3, #22]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d106      	bne.n	800aa7c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800aa6e:	4b53      	ldr	r3, [pc, #332]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800aa74:	4b51      	ldr	r3, [pc, #324]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800aa7c:	2001      	movs	r0, #1
 800aa7e:	f000 f96d 	bl	800ad5c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800aa82:	4b4f      	ldr	r3, [pc, #316]	@ (800abc0 <SVCCTL_App_Notification+0x194>)
 800aa84:	2201      	movs	r2, #1
 800aa86:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aa88:	4b4c      	ldr	r3, [pc, #304]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800aa8a:	8ada      	ldrh	r2, [r3, #22]
 800aa8c:	4b4c      	ldr	r3, [pc, #304]	@ (800abc0 <SVCCTL_App_Notification+0x194>)
 800aa8e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800aa90:	484b      	ldr	r0, [pc, #300]	@ (800abc0 <SVCCTL_App_Notification+0x194>)
 800aa92:	f000 fa5e 	bl	800af52 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800aa96:	e08c      	b.n	800abb2 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	3302      	adds	r3, #2
 800aa9c:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d001      	beq.n	800aaaa <SVCCTL_App_Notification+0x7e>
 800aaa6:	2b03      	cmp	r3, #3
          break;
 800aaa8:	e021      	b.n	800aaee <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	3301      	adds	r3, #1
 800aaae:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800aab0:	4b42      	ldr	r3, [pc, #264]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800aab2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800aab6:	2b04      	cmp	r3, #4
 800aab8:	d104      	bne.n	800aac4 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800aaba:	4b40      	ldr	r3, [pc, #256]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800aabc:	2206      	movs	r2, #6
 800aabe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800aac2:	e003      	b.n	800aacc <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800aac4:	4b3d      	ldr	r3, [pc, #244]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800aac6:	2205      	movs	r2, #5
 800aac8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	4b39      	ldr	r3, [pc, #228]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800aad6:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800aad8:	4b39      	ldr	r3, [pc, #228]	@ (800abc0 <SVCCTL_App_Notification+0x194>)
 800aada:	2200      	movs	r2, #0
 800aadc:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aade:	4b37      	ldr	r3, [pc, #220]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800aae0:	8ada      	ldrh	r2, [r3, #22]
 800aae2:	4b37      	ldr	r3, [pc, #220]	@ (800abc0 <SVCCTL_App_Notification+0x194>)
 800aae4:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800aae6:	4836      	ldr	r0, [pc, #216]	@ (800abc0 <SVCCTL_App_Notification+0x194>)
 800aae8:	f000 fa33 	bl	800af52 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800aaec:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800aaee:	e060      	b.n	800abb2 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800aaf0:	6a3b      	ldr	r3, [r7, #32]
 800aaf2:	3302      	adds	r3, #2
 800aaf4:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d047      	beq.n	800ab94 <SVCCTL_App_Notification+0x168>
 800ab04:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	dc51      	bgt.n	800abb0 <SVCCTL_App_Notification+0x184>
 800ab0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab10:	d046      	beq.n	800aba0 <SVCCTL_App_Notification+0x174>
 800ab12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab16:	dc4b      	bgt.n	800abb0 <SVCCTL_App_Notification+0x184>
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d043      	beq.n	800aba4 <SVCCTL_App_Notification+0x178>
 800ab1c:	2b04      	cmp	r3, #4
 800ab1e:	db47      	blt.n	800abb0 <SVCCTL_App_Notification+0x184>
 800ab20:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ab24:	4293      	cmp	r3, r2
 800ab26:	dc43      	bgt.n	800abb0 <SVCCTL_App_Notification+0x184>
 800ab28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab2c:	dd40      	ble.n	800abb0 <SVCCTL_App_Notification+0x184>
 800ab2e:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800ab32:	2b09      	cmp	r3, #9
 800ab34:	d83c      	bhi.n	800abb0 <SVCCTL_App_Notification+0x184>
 800ab36:	a201      	add	r2, pc, #4	@ (adr r2, 800ab3c <SVCCTL_App_Notification+0x110>)
 800ab38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3c:	0800ab8d 	.word	0x0800ab8d
 800ab40:	0800ab65 	.word	0x0800ab65
 800ab44:	0800abb1 	.word	0x0800abb1
 800ab48:	0800abb1 	.word	0x0800abb1
 800ab4c:	0800abb1 	.word	0x0800abb1
 800ab50:	0800abb1 	.word	0x0800abb1
 800ab54:	0800aba9 	.word	0x0800aba9
 800ab58:	0800abb1 	.word	0x0800abb1
 800ab5c:	0800ab79 	.word	0x0800ab79
 800ab60:	0800aba9 	.word	0x0800aba9
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800ab64:	4b15      	ldr	r3, [pc, #84]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800ab66:	8adb      	ldrh	r3, [r3, #22]
 800ab68:	4916      	ldr	r1, [pc, #88]	@ (800abc4 <SVCCTL_App_Notification+0x198>)
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fd ffbc 	bl	8008ae8 <aci_gap_pass_key_resp>
 800ab70:	4603      	mov	r3, r0
 800ab72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800ab76:	e018      	b.n	800abaa <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800ab78:	4b10      	ldr	r3, [pc, #64]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800ab7a:	8adb      	ldrh	r3, [r3, #22]
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe f95c 	bl	8008e3c <aci_gap_numeric_comparison_value_confirm_yesno>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800ab8a:	e00e      	b.n	800abaa <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	3302      	adds	r3, #2
 800ab90:	61bb      	str	r3, [r7, #24]
          break;
 800ab92:	e00a      	b.n	800abaa <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ab94:	4b09      	ldr	r3, [pc, #36]	@ (800abbc <SVCCTL_App_Notification+0x190>)
 800ab96:	8adb      	ldrh	r3, [r3, #22]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fe fc62 	bl	8009462 <aci_gatt_confirm_indication>
        break;
 800ab9e:	e004      	b.n	800abaa <SVCCTL_App_Notification+0x17e>
          break;
 800aba0:	bf00      	nop
 800aba2:	e005      	b.n	800abb0 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800aba4:	bf00      	nop
 800aba6:	e003      	b.n	800abb0 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800aba8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800abaa:	e001      	b.n	800abb0 <SVCCTL_App_Notification+0x184>
      break;
 800abac:	bf00      	nop
 800abae:	e000      	b.n	800abb2 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800abb0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800abb2:	2301      	movs	r3, #1
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3728      	adds	r7, #40	@ 0x28
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	20000558 	.word	0x20000558
 800abc0:	200005dc 	.word	0x200005dc
 800abc4:	0001b207 	.word	0x0001b207

0800abc8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800abce:	4b06      	ldr	r3, [pc, #24]	@ (800abe8 <Ble_Tl_Init+0x20>)
 800abd0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800abd2:	4b06      	ldr	r3, [pc, #24]	@ (800abec <Ble_Tl_Init+0x24>)
 800abd4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800abd6:	463b      	mov	r3, r7
 800abd8:	4619      	mov	r1, r3
 800abda:	4805      	ldr	r0, [pc, #20]	@ (800abf0 <Ble_Tl_Init+0x28>)
 800abdc:	f7ff f8a6 	bl	8009d2c <hci_init>

  return;
 800abe0:	bf00      	nop
}
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	200300d8 	.word	0x200300d8
 800abec:	0800aef5 	.word	0x0800aef5
 800abf0:	0800aebd 	.word	0x0800aebd

0800abf4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800abf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abf6:	b08d      	sub	sp, #52	@ 0x34
 800abf8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800abfa:	2300      	movs	r3, #0
 800abfc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800abfe:	2392      	movs	r3, #146	@ 0x92
 800ac00:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800ac02:	f7fe fdc3 	bl	800978c <hci_reset>
 800ac06:	4603      	mov	r3, r0
 800ac08:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800ac0a:	f000 f8d7 	bl	800adbc <BleGetBdAddress>
 800ac0e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	2106      	movs	r1, #6
 800ac14:	2000      	movs	r0, #0
 800ac16:	f7fe fc79 	bl	800950c <aci_hal_write_config_data>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800ac1e:	4a4a      	ldr	r2, [pc, #296]	@ (800ad48 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800ac20:	2110      	movs	r1, #16
 800ac22:	2018      	movs	r0, #24
 800ac24:	f7fe fc72 	bl	800950c <aci_hal_write_config_data>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800ac2c:	4a47      	ldr	r2, [pc, #284]	@ (800ad4c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800ac2e:	2110      	movs	r1, #16
 800ac30:	2008      	movs	r0, #8
 800ac32:	f7fe fc6b 	bl	800950c <aci_hal_write_config_data>
 800ac36:	4603      	mov	r3, r0
 800ac38:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ac3a:	2118      	movs	r1, #24
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	f7fe fcea 	bl	8009616 <aci_hal_set_tx_power_level>
 800ac42:	4603      	mov	r3, r0
 800ac44:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800ac46:	f7fe f960 	bl	8008f0a <aci_gatt_init>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	f043 0301 	orr.w	r3, r3, #1
 800ac58:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d01f      	beq.n	800aca0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800ac60:	4b3b      	ldr	r3, [pc, #236]	@ (800ad50 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800ac62:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800ac64:	1dba      	adds	r2, r7, #6
 800ac66:	7bf8      	ldrb	r0, [r7, #15]
 800ac68:	1cbb      	adds	r3, r7, #2
 800ac6a:	9301      	str	r3, [sp, #4]
 800ac6c:	1d3b      	adds	r3, r7, #4
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	4613      	mov	r3, r2
 800ac72:	2208      	movs	r2, #8
 800ac74:	2100      	movs	r1, #0
 800ac76:	f7fd ff9e 	bl	8008bb6 <aci_gap_init>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800ac7e:	88fc      	ldrh	r4, [r7, #6]
 800ac80:	88bd      	ldrh	r5, [r7, #4]
 800ac82:	68b8      	ldr	r0, [r7, #8]
 800ac84:	f7f5 fa7c 	bl	8000180 <strlen>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	4613      	mov	r3, r2
 800ac92:	2200      	movs	r2, #0
 800ac94:	4629      	mov	r1, r5
 800ac96:	4620      	mov	r0, r4
 800ac98:	f7fe fb3a 	bl	8009310 <aci_gatt_update_char_value>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800aca0:	88f8      	ldrh	r0, [r7, #6]
 800aca2:	8879      	ldrh	r1, [r7, #2]
 800aca4:	463b      	mov	r3, r7
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	2302      	movs	r3, #2
 800acaa:	2200      	movs	r2, #0
 800acac:	f7fe fb30 	bl	8009310 <aci_gatt_update_char_value>
 800acb0:	4603      	mov	r3, r0
 800acb2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800acb4:	2202      	movs	r2, #2
 800acb6:	2102      	movs	r1, #2
 800acb8:	2000      	movs	r0, #0
 800acba:	f7fe fd8b 	bl	80097d4 <hci_le_set_default_phy>
 800acbe:	4603      	mov	r3, r0
 800acc0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800acc2:	4b24      	ldr	r3, [pc, #144]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acc4:	2201      	movs	r2, #1
 800acc6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800acc8:	4b22      	ldr	r3, [pc, #136]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	4618      	mov	r0, r3
 800acce:	f7fd fdf3 	bl	80088b8 <aci_gap_set_io_capability>
 800acd2:	4603      	mov	r3, r0
 800acd4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800acd6:	4b1f      	ldr	r3, [pc, #124]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acd8:	2201      	movs	r2, #1
 800acda:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800acdc:	4b1d      	ldr	r3, [pc, #116]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acde:	2208      	movs	r2, #8
 800ace0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800ace2:	4b1c      	ldr	r3, [pc, #112]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ace4:	2210      	movs	r2, #16
 800ace6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800ace8:	4b1a      	ldr	r3, [pc, #104]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acea:	2200      	movs	r2, #0
 800acec:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800acee:	4b19      	ldr	r3, [pc, #100]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acf0:	4a19      	ldr	r2, [pc, #100]	@ (800ad58 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800acf2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800acf4:	4b17      	ldr	r3, [pc, #92]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800acfa:	4b16      	ldr	r3, [pc, #88]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acfc:	789c      	ldrb	r4, [r3, #2]
 800acfe:	4b15      	ldr	r3, [pc, #84]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad00:	785d      	ldrb	r5, [r3, #1]
 800ad02:	4b14      	ldr	r3, [pc, #80]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad04:	791b      	ldrb	r3, [r3, #4]
 800ad06:	4a13      	ldr	r2, [pc, #76]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad08:	7952      	ldrb	r2, [r2, #5]
 800ad0a:	4912      	ldr	r1, [pc, #72]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad0c:	78c9      	ldrb	r1, [r1, #3]
 800ad0e:	4811      	ldr	r0, [pc, #68]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad10:	6880      	ldr	r0, [r0, #8]
 800ad12:	2600      	movs	r6, #0
 800ad14:	9604      	str	r6, [sp, #16]
 800ad16:	9003      	str	r0, [sp, #12]
 800ad18:	9102      	str	r1, [sp, #8]
 800ad1a:	9201      	str	r2, [sp, #4]
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	2201      	movs	r2, #1
 800ad22:	4629      	mov	r1, r5
 800ad24:	4620      	mov	r0, r4
 800ad26:	f7fd fe1b 	bl	8008960 <aci_gap_set_authentication_requirement>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ad2e:	4b09      	ldr	r3, [pc, #36]	@ (800ad54 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad30:	789b      	ldrb	r3, [r3, #2]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800ad36:	f7fe f85d 	bl	8008df4 <aci_gap_configure_filter_accept_list>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800ad3e:	bf00      	nop
 800ad40:	371c      	adds	r7, #28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad46:	bf00      	nop
 800ad48:	0800f924 	.word	0x0800f924
 800ad4c:	0800f934 	.word	0x0800f934
 800ad50:	0800be58 	.word	0x0800be58
 800ad54:	20000558 	.word	0x20000558
 800ad58:	0001b207 	.word	0x0001b207

0800ad5c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b08c      	sub	sp, #48	@ 0x30
 800ad60:	af08      	add	r7, sp, #32
 800ad62:	4603      	mov	r3, r0
 800ad64:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ad66:	2392      	movs	r3, #146	@ 0x92
 800ad68:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800ad6a:	4a12      	ldr	r2, [pc, #72]	@ (800adb4 <Adv_Request+0x58>)
 800ad6c:	79fb      	ldrb	r3, [r7, #7]
 800ad6e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800ad72:	2300      	movs	r3, #0
 800ad74:	9306      	str	r3, [sp, #24]
 800ad76:	2300      	movs	r3, #0
 800ad78:	9305      	str	r3, [sp, #20]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	9303      	str	r3, [sp, #12]
 800ad82:	2300      	movs	r3, #0
 800ad84:	9302      	str	r3, [sp, #8]
 800ad86:	2300      	movs	r3, #0
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	22a0      	movs	r2, #160	@ 0xa0
 800ad92:	2180      	movs	r1, #128	@ 0x80
 800ad94:	2000      	movs	r0, #0
 800ad96:	f7fd fc95 	bl	80086c4 <aci_gap_set_discoverable>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800ad9e:	4906      	ldr	r1, [pc, #24]	@ (800adb8 <Adv_Request+0x5c>)
 800ada0:	2010      	movs	r0, #16
 800ada2:	f7fd ffb5 	bl	8008d10 <aci_gap_update_adv_data>
 800ada6:	4603      	mov	r3, r0
 800ada8:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800adaa:	bf00      	nop
}
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000558 	.word	0x20000558
 800adb8:	20000020 	.word	0x20000020

0800adbc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800adc2:	f7ff fdb5 	bl	800a930 <LL_FLASH_GetUDN>
 800adc6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adce:	d023      	beq.n	800ae18 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800add0:	f7ff fdc6 	bl	800a960 <LL_FLASH_GetSTCompanyID>
 800add4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800add6:	f7ff fdb7 	bl	800a948 <LL_FLASH_GetDeviceID>
 800adda:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	4b16      	ldr	r3, [pc, #88]	@ (800ae3c <BleGetBdAddress+0x80>)
 800ade2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	0a1b      	lsrs	r3, r3, #8
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	4b14      	ldr	r3, [pc, #80]	@ (800ae3c <BleGetBdAddress+0x80>)
 800adec:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	4b12      	ldr	r3, [pc, #72]	@ (800ae3c <BleGetBdAddress+0x80>)
 800adf4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	4b10      	ldr	r3, [pc, #64]	@ (800ae3c <BleGetBdAddress+0x80>)
 800adfc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	0a1b      	lsrs	r3, r3, #8
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	4b0d      	ldr	r3, [pc, #52]	@ (800ae3c <BleGetBdAddress+0x80>)
 800ae06:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	0c1b      	lsrs	r3, r3, #16
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae3c <BleGetBdAddress+0x80>)
 800ae10:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800ae12:	4b0a      	ldr	r3, [pc, #40]	@ (800ae3c <BleGetBdAddress+0x80>)
 800ae14:	617b      	str	r3, [r7, #20]
 800ae16:	e00b      	b.n	800ae30 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800ae18:	2000      	movs	r0, #0
 800ae1a:	f7ff fca3 	bl	800a764 <OTP_Read>
 800ae1e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d002      	beq.n	800ae2c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	e001      	b.n	800ae30 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800ae2c:	4b04      	ldr	r3, [pc, #16]	@ (800ae40 <BleGetBdAddress+0x84>)
 800ae2e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800ae30:	697b      	ldr	r3, [r7, #20]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3718      	adds	r7, #24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20000550 	.word	0x20000550
 800ae40:	0800f91c 	.word	0x0800f91c

0800ae44 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ae4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae74 <Adv_Cancel+0x30>)
 800ae4c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ae50:	2b05      	cmp	r3, #5
 800ae52:	d00a      	beq.n	800ae6a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ae54:	2392      	movs	r3, #146	@ 0x92
 800ae56:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800ae58:	f7fd fc10 	bl	800867c <aci_gap_set_non_discoverable>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ae60:	4b04      	ldr	r3, [pc, #16]	@ (800ae74 <Adv_Cancel+0x30>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800ae68:	bf00      	nop
 800ae6a:	bf00      	nop
}
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	20000558 	.word	0x20000558

0800ae78 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ae80:	2100      	movs	r1, #0
 800ae82:	2002      	movs	r0, #2
 800ae84:	f000 fd2e 	bl	800b8e4 <UTIL_SEQ_SetTask>

  return;
 800ae88:	bf00      	nop
}
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ae98:	2001      	movs	r0, #1
 800ae9a:	f000 fd8f 	bl	800b9bc <UTIL_SEQ_SetEvt>

  return;
 800ae9e:	bf00      	nop
}
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800aeae:	2001      	movs	r0, #1
 800aeb0:	f000 fda4 	bl	800b9fc <UTIL_SEQ_WaitEvt>

  return;
 800aeb4:	bf00      	nop
}
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	3308      	adds	r3, #8
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe fde6 	bl	8009aa0 <SVCCTL_UserEvtRx>
 800aed4:	4603      	mov	r3, r0
 800aed6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800aed8:	7afb      	ldrb	r3, [r7, #11]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d003      	beq.n	800aee6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2201      	movs	r2, #1
 800aee2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800aee4:	e003      	b.n	800aeee <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	701a      	strb	r2, [r3, #0]
  return;
 800aeec:	bf00      	nop
}
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d002      	beq.n	800af0a <BLE_StatusNot+0x16>
 800af04:	2b01      	cmp	r3, #1
 800af06:	d006      	beq.n	800af16 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800af08:	e00b      	b.n	800af22 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800af0a:	2303      	movs	r3, #3
 800af0c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f000 fd14 	bl	800b93c <UTIL_SEQ_PauseTask>
      break;
 800af14:	e005      	b.n	800af22 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800af16:	2303      	movs	r3, #3
 800af18:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f000 fd2e 	bl	800b97c <UTIL_SEQ_ResumeTask>
      break;
 800af20:	bf00      	nop
  }

  return;
 800af22:	bf00      	nop
}
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800af2a:	b480      	push	{r7}
 800af2c:	b083      	sub	sp, #12
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d002      	beq.n	800af40 <Custom_STM_App_Notification+0x16>
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d002      	beq.n	800af44 <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800af3e:	e002      	b.n	800af46 <Custom_STM_App_Notification+0x1c>
      break;
 800af40:	bf00      	nop
 800af42:	e000      	b.n	800af46 <Custom_STM_App_Notification+0x1c>
      break;
 800af44:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800af46:	bf00      	nop
}
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d002      	beq.n	800af68 <Custom_APP_Notification+0x16>
 800af62:	2b01      	cmp	r3, #1
 800af64:	d002      	beq.n	800af6c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800af66:	e002      	b.n	800af6e <Custom_APP_Notification+0x1c>
      break;
 800af68:	bf00      	nop
 800af6a:	e000      	b.n	800af6e <Custom_APP_Notification+0x1c>
      break;
 800af6c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800af6e:	bf00      	nop
}
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800af7a:	b480      	push	{r7}
 800af7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800af7e:	bf00      	nop
}
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08c      	sub	sp, #48	@ 0x30
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800af90:	2300      	movs	r3, #0
 800af92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3301      	adds	r3, #1
 800af9a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800af9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	2bff      	cmp	r3, #255	@ 0xff
 800afa2:	d154      	bne.n	800b04e <Custom_STM_Event_Handler+0xc6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	3302      	adds	r3, #2
 800afa8:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800afaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afac:	881b      	ldrh	r3, [r3, #0]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800afb4:	2b1a      	cmp	r3, #26
 800afb6:	d848      	bhi.n	800b04a <Custom_STM_Event_Handler+0xc2>
 800afb8:	a201      	add	r2, pc, #4	@ (adr r2, 800afc0 <Custom_STM_Event_Handler+0x38>)
 800afba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbe:	bf00      	nop
 800afc0:	0800b04b 	.word	0x0800b04b
 800afc4:	0800b04b 	.word	0x0800b04b
 800afc8:	0800b04b 	.word	0x0800b04b
 800afcc:	0800b04b 	.word	0x0800b04b
 800afd0:	0800b04b 	.word	0x0800b04b
 800afd4:	0800b04b 	.word	0x0800b04b
 800afd8:	0800b04b 	.word	0x0800b04b
 800afdc:	0800b04b 	.word	0x0800b04b
 800afe0:	0800b04b 	.word	0x0800b04b
 800afe4:	0800b04b 	.word	0x0800b04b
 800afe8:	0800b04b 	.word	0x0800b04b
 800afec:	0800b04b 	.word	0x0800b04b
 800aff0:	0800b04b 	.word	0x0800b04b
 800aff4:	0800b04b 	.word	0x0800b04b
 800aff8:	0800b04b 	.word	0x0800b04b
 800affc:	0800b04b 	.word	0x0800b04b
 800b000:	0800b04b 	.word	0x0800b04b
 800b004:	0800b04b 	.word	0x0800b04b
 800b008:	0800b04b 	.word	0x0800b04b
 800b00c:	0800b04b 	.word	0x0800b04b
 800b010:	0800b04b 	.word	0x0800b04b
 800b014:	0800b04b 	.word	0x0800b04b
 800b018:	0800b04b 	.word	0x0800b04b
 800b01c:	0800b04b 	.word	0x0800b04b
 800b020:	0800b04b 	.word	0x0800b04b
 800b024:	0800b04b 	.word	0x0800b04b
 800b028:	0800b02d 	.word	0x0800b02d
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800b02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02e:	3302      	adds	r3, #2
 800b030:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800b032:	2301      	movs	r3, #1
 800b034:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	881b      	ldrh	r3, [r3, #0]
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 800b03e:	f107 030c 	add.w	r3, r7, #12
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff ff71 	bl	800af2a <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800b048:	e000      	b.n	800b04c <Custom_STM_Event_Handler+0xc4>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800b04a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b04c:	e000      	b.n	800b050 <Custom_STM_Event_Handler+0xc8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800b04e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800b050:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800b054:	4618      	mov	r0, r3
 800b056:	3730      	adds	r7, #48	@ 0x30
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b08c      	sub	sp, #48	@ 0x30
 800b060:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b062:	2392      	movs	r3, #146	@ 0x92
 800b064:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800b066:	4834      	ldr	r0, [pc, #208]	@ (800b138 <SVCCTL_InitCustomSvc+0xdc>)
 800b068:	f7fe fd00 	bl	8009a6c <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800b06c:	2303      	movs	r3, #3
 800b06e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_PRESSCOUNTER_UUID(uuid.Char_UUID_128);
 800b070:	238f      	movs	r3, #143	@ 0x8f
 800b072:	713b      	strb	r3, [r7, #4]
 800b074:	23e5      	movs	r3, #229	@ 0xe5
 800b076:	717b      	strb	r3, [r7, #5]
 800b078:	23b3      	movs	r3, #179	@ 0xb3
 800b07a:	71bb      	strb	r3, [r7, #6]
 800b07c:	23d5      	movs	r3, #213	@ 0xd5
 800b07e:	71fb      	strb	r3, [r7, #7]
 800b080:	232e      	movs	r3, #46	@ 0x2e
 800b082:	723b      	strb	r3, [r7, #8]
 800b084:	237f      	movs	r3, #127	@ 0x7f
 800b086:	727b      	strb	r3, [r7, #9]
 800b088:	234a      	movs	r3, #74	@ 0x4a
 800b08a:	72bb      	strb	r3, [r7, #10]
 800b08c:	2398      	movs	r3, #152	@ 0x98
 800b08e:	72fb      	strb	r3, [r7, #11]
 800b090:	232a      	movs	r3, #42	@ 0x2a
 800b092:	733b      	strb	r3, [r7, #12]
 800b094:	2348      	movs	r3, #72	@ 0x48
 800b096:	737b      	strb	r3, [r7, #13]
 800b098:	237a      	movs	r3, #122	@ 0x7a
 800b09a:	73bb      	strb	r3, [r7, #14]
 800b09c:	23cc      	movs	r3, #204	@ 0xcc
 800b09e:	73fb      	strb	r3, [r7, #15]
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	743b      	strb	r3, [r7, #16]
 800b0a4:	2318      	movs	r3, #24
 800b0a6:	747b      	strb	r3, [r7, #17]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	74bb      	strb	r3, [r7, #18]
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b0b0:	7dbb      	ldrb	r3, [r7, #22]
 800b0b2:	1d39      	adds	r1, r7, #4
 800b0b4:	4a21      	ldr	r2, [pc, #132]	@ (800b13c <SVCCTL_InitCustomSvc+0xe0>)
 800b0b6:	9200      	str	r2, [sp, #0]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	2002      	movs	r0, #2
 800b0bc:	f7fd ff4a 	bl	8008f54 <aci_gatt_add_service>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  information
   */
  COPY_INFORMATION_UUID(uuid.Char_UUID_128);
 800b0c4:	2319      	movs	r3, #25
 800b0c6:	713b      	strb	r3, [r7, #4]
 800b0c8:	23ed      	movs	r3, #237	@ 0xed
 800b0ca:	717b      	strb	r3, [r7, #5]
 800b0cc:	2382      	movs	r3, #130	@ 0x82
 800b0ce:	71bb      	strb	r3, [r7, #6]
 800b0d0:	23ae      	movs	r3, #174	@ 0xae
 800b0d2:	71fb      	strb	r3, [r7, #7]
 800b0d4:	23ed      	movs	r3, #237	@ 0xed
 800b0d6:	723b      	strb	r3, [r7, #8]
 800b0d8:	2321      	movs	r3, #33	@ 0x21
 800b0da:	727b      	strb	r3, [r7, #9]
 800b0dc:	234c      	movs	r3, #76	@ 0x4c
 800b0de:	72bb      	strb	r3, [r7, #10]
 800b0e0:	239d      	movs	r3, #157	@ 0x9d
 800b0e2:	72fb      	strb	r3, [r7, #11]
 800b0e4:	2341      	movs	r3, #65	@ 0x41
 800b0e6:	733b      	strb	r3, [r7, #12]
 800b0e8:	2345      	movs	r3, #69	@ 0x45
 800b0ea:	737b      	strb	r3, [r7, #13]
 800b0ec:	2322      	movs	r3, #34	@ 0x22
 800b0ee:	73bb      	strb	r3, [r7, #14]
 800b0f0:	238e      	movs	r3, #142	@ 0x8e
 800b0f2:	73fb      	strb	r3, [r7, #15]
 800b0f4:	2334      	movs	r3, #52	@ 0x34
 800b0f6:	743b      	strb	r3, [r7, #16]
 800b0f8:	2312      	movs	r3, #18
 800b0fa:	747b      	strb	r3, [r7, #17]
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	74bb      	strb	r3, [r7, #18]
 800b100:	2300      	movs	r3, #0
 800b102:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomPressctrHdle,
 800b104:	4b0d      	ldr	r3, [pc, #52]	@ (800b13c <SVCCTL_InitCustomSvc+0xe0>)
 800b106:	8818      	ldrh	r0, [r3, #0]
 800b108:	4b0d      	ldr	r3, [pc, #52]	@ (800b140 <SVCCTL_InitCustomSvc+0xe4>)
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	1d3a      	adds	r2, r7, #4
 800b10e:	490d      	ldr	r1, [pc, #52]	@ (800b144 <SVCCTL_InitCustomSvc+0xe8>)
 800b110:	9105      	str	r1, [sp, #20]
 800b112:	2100      	movs	r1, #0
 800b114:	9104      	str	r1, [sp, #16]
 800b116:	2110      	movs	r1, #16
 800b118:	9103      	str	r1, [sp, #12]
 800b11a:	2100      	movs	r1, #0
 800b11c:	9102      	str	r1, [sp, #8]
 800b11e:	2100      	movs	r1, #0
 800b120:	9101      	str	r1, [sp, #4]
 800b122:	2102      	movs	r1, #2
 800b124:	9100      	str	r1, [sp, #0]
 800b126:	2102      	movs	r1, #2
 800b128:	f7fd ffea 	bl	8009100 <aci_gatt_add_char>
 800b12c:	4603      	mov	r3, r0
 800b12e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800b130:	bf00      	nop
}
 800b132:	3718      	adds	r7, #24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	0800af89 	.word	0x0800af89
 800b13c:	200005e0 	.word	0x200005e0
 800b140:	20000030 	.word	0x20000030
 800b144:	200005e2 	.word	0x200005e2

0800b148 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af02      	add	r7, sp, #8
 800b14e:	4603      	mov	r3, r0
 800b150:	6039      	str	r1, [r7, #0]
 800b152:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b154:	2392      	movs	r3, #146	@ 0x92
 800b156:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800b158:	79fb      	ldrb	r3, [r7, #7]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10f      	bne.n	800b17e <Custom_STM_App_Update_Char+0x36>
  {

    case CUSTOM_STM_INFO_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomPressctrHdle,
 800b15e:	4b0b      	ldr	r3, [pc, #44]	@ (800b18c <Custom_STM_App_Update_Char+0x44>)
 800b160:	8818      	ldrh	r0, [r3, #0]
 800b162:	4b0a      	ldr	r3, [pc, #40]	@ (800b18c <Custom_STM_App_Update_Char+0x44>)
 800b164:	8859      	ldrh	r1, [r3, #2]
 800b166:	4b0a      	ldr	r3, [pc, #40]	@ (800b190 <Custom_STM_App_Update_Char+0x48>)
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	4613      	mov	r3, r2
 800b172:	2200      	movs	r2, #0
 800b174:	f7fe f8cc 	bl	8009310 <aci_gatt_update_char_value>
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value INFO_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800b17c:	e000      	b.n	800b180 <Custom_STM_App_Update_Char+0x38>

    default:
      break;
 800b17e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800b180:	7bfb      	ldrb	r3, [r7, #15]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	200005e0 	.word	0x200005e0
 800b190:	20000030 	.word	0x20000030

0800b194 <LL_PWR_EnableBootC2>:
{
 800b194:	b480      	push	{r7}
 800b196:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b198:	4b05      	ldr	r3, [pc, #20]	@ (800b1b0 <LL_PWR_EnableBootC2+0x1c>)
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	4a04      	ldr	r2, [pc, #16]	@ (800b1b0 <LL_PWR_EnableBootC2+0x1c>)
 800b19e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1a2:	60d3      	str	r3, [r2, #12]
}
 800b1a4:	bf00      	nop
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	58000400 	.word	0x58000400

0800b1b4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b1bc:	4b06      	ldr	r3, [pc, #24]	@ (800b1d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b1be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b1c2:	4905      	ldr	r1, [pc, #20]	@ (800b1d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	58000800 	.word	0x58000800

0800b1dc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b1e4:	4b05      	ldr	r3, [pc, #20]	@ (800b1fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b1e6:	6a1a      	ldr	r2, [r3, #32]
 800b1e8:	4904      	ldr	r1, [pc, #16]	@ (800b1fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	620b      	str	r3, [r1, #32]
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	58000800 	.word	0x58000800

0800b200 <LL_AHB3_GRP1_EnableClock>:
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b20c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b20e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4313      	orrs	r3, r2
 800b216:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b21c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4013      	ands	r3, r2
 800b222:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b224:	68fb      	ldr	r3, [r7, #12]
}
 800b226:	bf00      	nop
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b232:	b480      	push	{r7}
 800b234:	b085      	sub	sp, #20
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b23a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b23e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b242:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4313      	orrs	r3, r2
 800b24a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b24e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b252:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4013      	ands	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b25c:	68fb      	ldr	r3, [r7, #12]
}
 800b25e:	bf00      	nop
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800b26a:	b480      	push	{r7}
 800b26c:	b083      	sub	sp, #12
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	601a      	str	r2, [r3, #0]
}
 800b27e:	bf00      	nop
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b083      	sub	sp, #12
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f043 0201 	orr.w	r2, r3, #1
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	601a      	str	r2, [r3, #0]
}
 800b29e:	bf00      	nop
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b083      	sub	sp, #12
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
 800b2b2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685a      	ldr	r2, [r3, #4]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	041b      	lsls	r3, r3, #16
 800b2bc:	43db      	mvns	r3, r3
 800b2be:	401a      	ands	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	605a      	str	r2, [r3, #4]
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	041b      	lsls	r3, r3, #16
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	605a      	str	r2, [r3, #4]
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685a      	ldr	r2, [r3, #4]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	43db      	mvns	r3, r3
 800b306:	401a      	ands	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	605a      	str	r2, [r3, #4]
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	609a      	str	r2, [r3, #8]
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	041a      	lsls	r2, r3, #16
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	609a      	str	r2, [r3, #8]
}
 800b346:	bf00      	nop
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	4013      	ands	r3, r2
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	429a      	cmp	r2, r3
 800b368:	d101      	bne.n	800b36e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b36a:	2301      	movs	r3, #1
 800b36c:	e000      	b.n	800b370 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	69da      	ldr	r2, [r3, #28]
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	4013      	ands	r3, r2
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	429a      	cmp	r2, r3
 800b392:	d101      	bne.n	800b398 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b394:	2301      	movs	r3, #1
 800b396:	e000      	b.n	800b39a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
	...

0800b3a8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b3ac:	2102      	movs	r1, #2
 800b3ae:	4818      	ldr	r0, [pc, #96]	@ (800b410 <HW_IPCC_Rx_Handler+0x68>)
 800b3b0:	f7ff ffe4 	bl	800b37c <LL_C2_IPCC_IsActiveFlag_CHx>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d008      	beq.n	800b3cc <HW_IPCC_Rx_Handler+0x24>
 800b3ba:	4b15      	ldr	r3, [pc, #84]	@ (800b410 <HW_IPCC_Rx_Handler+0x68>)
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f003 0302 	and.w	r3, r3, #2
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d102      	bne.n	800b3cc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800b3c6:	f000 f8d5 	bl	800b574 <HW_IPCC_SYS_EvtHandler>
 800b3ca:	e01e      	b.n	800b40a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b3cc:	2101      	movs	r1, #1
 800b3ce:	4810      	ldr	r0, [pc, #64]	@ (800b410 <HW_IPCC_Rx_Handler+0x68>)
 800b3d0:	f7ff ffd4 	bl	800b37c <LL_C2_IPCC_IsActiveFlag_CHx>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d008      	beq.n	800b3ec <HW_IPCC_Rx_Handler+0x44>
 800b3da:	4b0d      	ldr	r3, [pc, #52]	@ (800b410 <HW_IPCC_Rx_Handler+0x68>)
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d102      	bne.n	800b3ec <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800b3e6:	f000 f889 	bl	800b4fc <HW_IPCC_BLE_EvtHandler>
 800b3ea:	e00e      	b.n	800b40a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b3ec:	2108      	movs	r1, #8
 800b3ee:	4808      	ldr	r0, [pc, #32]	@ (800b410 <HW_IPCC_Rx_Handler+0x68>)
 800b3f0:	f7ff ffc4 	bl	800b37c <LL_C2_IPCC_IsActiveFlag_CHx>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d008      	beq.n	800b40c <HW_IPCC_Rx_Handler+0x64>
 800b3fa:	4b05      	ldr	r3, [pc, #20]	@ (800b410 <HW_IPCC_Rx_Handler+0x68>)
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f003 0308 	and.w	r3, r3, #8
 800b402:	2b00      	cmp	r3, #0
 800b404:	d102      	bne.n	800b40c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b406:	f000 f901 	bl	800b60c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b40a:	bf00      	nop
 800b40c:	bf00      	nop
}
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	58000c00 	.word	0x58000c00

0800b414 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b418:	2102      	movs	r1, #2
 800b41a:	4818      	ldr	r0, [pc, #96]	@ (800b47c <HW_IPCC_Tx_Handler+0x68>)
 800b41c:	f7ff ff99 	bl	800b352 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d108      	bne.n	800b438 <HW_IPCC_Tx_Handler+0x24>
 800b426:	4b15      	ldr	r3, [pc, #84]	@ (800b47c <HW_IPCC_Tx_Handler+0x68>)
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d102      	bne.n	800b438 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b432:	f000 f893 	bl	800b55c <HW_IPCC_SYS_CmdEvtHandler>
 800b436:	e01e      	b.n	800b476 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b438:	2108      	movs	r1, #8
 800b43a:	4810      	ldr	r0, [pc, #64]	@ (800b47c <HW_IPCC_Tx_Handler+0x68>)
 800b43c:	f7ff ff89 	bl	800b352 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d108      	bne.n	800b458 <HW_IPCC_Tx_Handler+0x44>
 800b446:	4b0d      	ldr	r3, [pc, #52]	@ (800b47c <HW_IPCC_Tx_Handler+0x68>)
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d102      	bne.n	800b458 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b452:	f000 f8bd 	bl	800b5d0 <HW_IPCC_MM_FreeBufHandler>
 800b456:	e00e      	b.n	800b476 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b458:	2120      	movs	r1, #32
 800b45a:	4808      	ldr	r0, [pc, #32]	@ (800b47c <HW_IPCC_Tx_Handler+0x68>)
 800b45c:	f7ff ff79 	bl	800b352 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d108      	bne.n	800b478 <HW_IPCC_Tx_Handler+0x64>
 800b466:	4b05      	ldr	r3, [pc, #20]	@ (800b47c <HW_IPCC_Tx_Handler+0x68>)
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d102      	bne.n	800b478 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b472:	f000 f84f 	bl	800b514 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b476:	bf00      	nop
 800b478:	bf00      	nop
}
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	58000c00 	.word	0x58000c00

0800b480 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b484:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b488:	f7ff fed3 	bl	800b232 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b48c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b490:	f7ff fea4 	bl	800b1dc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b494:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b498:	f7ff fe8c 	bl	800b1b4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b49c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b49e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b4a0:	f7ff fe78 	bl	800b194 <LL_PWR_EnableBootC2>

  return;
 800b4a4:	bf00      	nop
}
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b4ac:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b4b0:	f7ff fea6 	bl	800b200 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b4b4:	4806      	ldr	r0, [pc, #24]	@ (800b4d0 <HW_IPCC_Init+0x28>)
 800b4b6:	f7ff fee8 	bl	800b28a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b4ba:	4805      	ldr	r0, [pc, #20]	@ (800b4d0 <HW_IPCC_Init+0x28>)
 800b4bc:	f7ff fed5 	bl	800b26a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b4c0:	202c      	movs	r0, #44	@ 0x2c
 800b4c2:	f7fa fad2 	bl	8005a6a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b4c6:	202d      	movs	r0, #45	@ 0x2d
 800b4c8:	f7fa facf 	bl	8005a6a <HAL_NVIC_EnableIRQ>

  return;
 800b4cc:	bf00      	nop
}
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	58000c00 	.word	0x58000c00

0800b4d4 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b4d8:	2101      	movs	r1, #1
 800b4da:	4802      	ldr	r0, [pc, #8]	@ (800b4e4 <HW_IPCC_BLE_Init+0x10>)
 800b4dc:	f7ff ff0a 	bl	800b2f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b4e0:	bf00      	nop
}
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	58000c00 	.word	0x58000c00

0800b4e8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	4802      	ldr	r0, [pc, #8]	@ (800b4f8 <HW_IPCC_BLE_SendCmd+0x10>)
 800b4f0:	f7ff ff20 	bl	800b334 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b4f4:	bf00      	nop
}
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	58000c00 	.word	0x58000c00

0800b4fc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b500:	f7fe ff78 	bl	800a3f4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b504:	2101      	movs	r1, #1
 800b506:	4802      	ldr	r0, [pc, #8]	@ (800b510 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b508:	f7ff ff06 	bl	800b318 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b50c:	bf00      	nop
}
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	58000c00 	.word	0x58000c00

0800b514 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b518:	2120      	movs	r1, #32
 800b51a:	4803      	ldr	r0, [pc, #12]	@ (800b528 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b51c:	f7ff fed8 	bl	800b2d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b520:	f7fe ff98 	bl	800a454 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b524:	bf00      	nop
}
 800b526:	bd80      	pop	{r7, pc}
 800b528:	58000c00 	.word	0x58000c00

0800b52c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b530:	2102      	movs	r1, #2
 800b532:	4802      	ldr	r0, [pc, #8]	@ (800b53c <HW_IPCC_SYS_Init+0x10>)
 800b534:	f7ff fede 	bl	800b2f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b538:	bf00      	nop
}
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	58000c00 	.word	0x58000c00

0800b540 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b544:	2102      	movs	r1, #2
 800b546:	4804      	ldr	r0, [pc, #16]	@ (800b558 <HW_IPCC_SYS_SendCmd+0x18>)
 800b548:	f7ff fef4 	bl	800b334 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b54c:	2102      	movs	r1, #2
 800b54e:	4802      	ldr	r0, [pc, #8]	@ (800b558 <HW_IPCC_SYS_SendCmd+0x18>)
 800b550:	f7ff feab 	bl	800b2aa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b554:	bf00      	nop
}
 800b556:	bd80      	pop	{r7, pc}
 800b558:	58000c00 	.word	0x58000c00

0800b55c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b560:	2102      	movs	r1, #2
 800b562:	4803      	ldr	r0, [pc, #12]	@ (800b570 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b564:	f7ff feb4 	bl	800b2d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b568:	f7fe ffc4 	bl	800a4f4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b56c:	bf00      	nop
}
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	58000c00 	.word	0x58000c00

0800b574 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b578:	f7fe ffd2 	bl	800a520 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b57c:	2102      	movs	r1, #2
 800b57e:	4802      	ldr	r0, [pc, #8]	@ (800b588 <HW_IPCC_SYS_EvtHandler+0x14>)
 800b580:	f7ff feca 	bl	800b318 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b584:	bf00      	nop
}
 800b586:	bd80      	pop	{r7, pc}
 800b588:	58000c00 	.word	0x58000c00

0800b58c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b594:	2108      	movs	r1, #8
 800b596:	480c      	ldr	r0, [pc, #48]	@ (800b5c8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b598:	f7ff fedb 	bl	800b352 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d007      	beq.n	800b5b2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b5a2:	4a0a      	ldr	r2, [pc, #40]	@ (800b5cc <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5a8:	2108      	movs	r1, #8
 800b5aa:	4807      	ldr	r0, [pc, #28]	@ (800b5c8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b5ac:	f7ff fe7d 	bl	800b2aa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b5b0:	e006      	b.n	800b5c0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5b6:	2108      	movs	r1, #8
 800b5b8:	4803      	ldr	r0, [pc, #12]	@ (800b5c8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b5ba:	f7ff febb 	bl	800b334 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b5be:	bf00      	nop
}
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	58000c00 	.word	0x58000c00
 800b5cc:	200005e4 	.word	0x200005e4

0800b5d0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5d4:	2108      	movs	r1, #8
 800b5d6:	4806      	ldr	r0, [pc, #24]	@ (800b5f0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b5d8:	f7ff fe7a 	bl	800b2d0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b5dc:	4b05      	ldr	r3, [pc, #20]	@ (800b5f4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5e2:	2108      	movs	r1, #8
 800b5e4:	4802      	ldr	r0, [pc, #8]	@ (800b5f0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b5e6:	f7ff fea5 	bl	800b334 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b5ea:	bf00      	nop
}
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	58000c00 	.word	0x58000c00
 800b5f4:	200005e4 	.word	0x200005e4

0800b5f8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b5fc:	2108      	movs	r1, #8
 800b5fe:	4802      	ldr	r0, [pc, #8]	@ (800b608 <HW_IPCC_TRACES_Init+0x10>)
 800b600:	f7ff fe78 	bl	800b2f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b604:	bf00      	nop
}
 800b606:	bd80      	pop	{r7, pc}
 800b608:	58000c00 	.word	0x58000c00

0800b60c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b610:	f7ff f82e 	bl	800a670 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b614:	2108      	movs	r1, #8
 800b616:	4802      	ldr	r0, [pc, #8]	@ (800b620 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b618:	f7ff fe7e 	bl	800b318 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b61c:	bf00      	nop
}
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	58000c00 	.word	0x58000c00

0800b624 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b624:	b480      	push	{r7}
 800b626:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b628:	4b05      	ldr	r3, [pc, #20]	@ (800b640 <UTIL_LPM_Init+0x1c>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b62e:	4b05      	ldr	r3, [pc, #20]	@ (800b644 <UTIL_LPM_Init+0x20>)
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b634:	bf00      	nop
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	200005e8 	.word	0x200005e8
 800b644:	200005ec 	.word	0x200005ec

0800b648 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b654:	f3ef 8310 	mrs	r3, PRIMASK
 800b658:	613b      	str	r3, [r7, #16]
  return(result);
 800b65a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b65c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b65e:	b672      	cpsid	i
}
 800b660:	bf00      	nop
  
  switch(state)
 800b662:	78fb      	ldrb	r3, [r7, #3]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d008      	beq.n	800b67a <UTIL_LPM_SetOffMode+0x32>
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d10e      	bne.n	800b68a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b66c:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a4 <UTIL_LPM_SetOffMode+0x5c>)
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4313      	orrs	r3, r2
 800b674:	4a0b      	ldr	r2, [pc, #44]	@ (800b6a4 <UTIL_LPM_SetOffMode+0x5c>)
 800b676:	6013      	str	r3, [r2, #0]
      break;
 800b678:	e008      	b.n	800b68c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	43da      	mvns	r2, r3
 800b67e:	4b09      	ldr	r3, [pc, #36]	@ (800b6a4 <UTIL_LPM_SetOffMode+0x5c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4013      	ands	r3, r2
 800b684:	4a07      	ldr	r2, [pc, #28]	@ (800b6a4 <UTIL_LPM_SetOffMode+0x5c>)
 800b686:	6013      	str	r3, [r2, #0]
      break;
 800b688:	e000      	b.n	800b68c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b68a:	bf00      	nop
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f383 8810 	msr	PRIMASK, r3
}
 800b696:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b698:	bf00      	nop
 800b69a:	371c      	adds	r7, #28
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr
 800b6a4:	200005ec 	.word	0x200005ec

0800b6a8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b090      	sub	sp, #64	@ 0x40
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b6b0:	4b73      	ldr	r3, [pc, #460]	@ (800b880 <UTIL_SEQ_Run+0x1d8>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800b6b6:	4b72      	ldr	r3, [pc, #456]	@ (800b880 <UTIL_SEQ_Run+0x1d8>)
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4013      	ands	r3, r2
 800b6be:	4a70      	ldr	r2, [pc, #448]	@ (800b880 <UTIL_SEQ_Run+0x1d8>)
 800b6c0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b6c2:	4b70      	ldr	r3, [pc, #448]	@ (800b884 <UTIL_SEQ_Run+0x1dc>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b6c8:	4b6f      	ldr	r3, [pc, #444]	@ (800b888 <UTIL_SEQ_Run+0x1e0>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b6ce:	4b6f      	ldr	r3, [pc, #444]	@ (800b88c <UTIL_SEQ_Run+0x1e4>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800b6d4:	4b6e      	ldr	r3, [pc, #440]	@ (800b890 <UTIL_SEQ_Run+0x1e8>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b6da:	e08d      	b.n	800b7f8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b6e0:	e002      	b.n	800b6e8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b6e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b6e8:	4a6a      	ldr	r2, [pc, #424]	@ (800b894 <UTIL_SEQ_Run+0x1ec>)
 800b6ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f2:	401a      	ands	r2, r3
 800b6f4:	4b62      	ldr	r3, [pc, #392]	@ (800b880 <UTIL_SEQ_Run+0x1d8>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0f1      	beq.n	800b6e2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b6fe:	4a65      	ldr	r2, [pc, #404]	@ (800b894 <UTIL_SEQ_Run+0x1ec>)
 800b700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b702:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b708:	401a      	ands	r2, r3
 800b70a:	4b5d      	ldr	r3, [pc, #372]	@ (800b880 <UTIL_SEQ_Run+0x1d8>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4013      	ands	r3, r2
 800b710:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b712:	4a60      	ldr	r2, [pc, #384]	@ (800b894 <UTIL_SEQ_Run+0x1ec>)
 800b714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b716:	00db      	lsls	r3, r3, #3
 800b718:	4413      	add	r3, r2
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b71e:	4013      	ands	r3, r2
 800b720:	2b00      	cmp	r3, #0
 800b722:	d106      	bne.n	800b732 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b724:	4a5b      	ldr	r2, [pc, #364]	@ (800b894 <UTIL_SEQ_Run+0x1ec>)
 800b726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	4413      	add	r3, r2
 800b72c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b730:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b732:	4a58      	ldr	r2, [pc, #352]	@ (800b894 <UTIL_SEQ_Run+0x1ec>)
 800b734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	4413      	add	r3, r2
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	4013      	ands	r3, r2
 800b740:	4618      	mov	r0, r3
 800b742:	f000 f9b3 	bl	800baac <SEQ_BitPosition>
 800b746:	4603      	mov	r3, r0
 800b748:	461a      	mov	r2, r3
 800b74a:	4b53      	ldr	r3, [pc, #332]	@ (800b898 <UTIL_SEQ_Run+0x1f0>)
 800b74c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b74e:	4a51      	ldr	r2, [pc, #324]	@ (800b894 <UTIL_SEQ_Run+0x1ec>)
 800b750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	4413      	add	r3, r2
 800b756:	685a      	ldr	r2, [r3, #4]
 800b758:	4b4f      	ldr	r3, [pc, #316]	@ (800b898 <UTIL_SEQ_Run+0x1f0>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2101      	movs	r1, #1
 800b75e:	fa01 f303 	lsl.w	r3, r1, r3
 800b762:	43db      	mvns	r3, r3
 800b764:	401a      	ands	r2, r3
 800b766:	494b      	ldr	r1, [pc, #300]	@ (800b894 <UTIL_SEQ_Run+0x1ec>)
 800b768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b76a:	00db      	lsls	r3, r3, #3
 800b76c:	440b      	add	r3, r1
 800b76e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b770:	f3ef 8310 	mrs	r3, PRIMASK
 800b774:	61bb      	str	r3, [r7, #24]
  return(result);
 800b776:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b778:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b77a:	b672      	cpsid	i
}
 800b77c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b77e:	4b46      	ldr	r3, [pc, #280]	@ (800b898 <UTIL_SEQ_Run+0x1f0>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2201      	movs	r2, #1
 800b784:	fa02 f303 	lsl.w	r3, r2, r3
 800b788:	43da      	mvns	r2, r3
 800b78a:	4b3e      	ldr	r3, [pc, #248]	@ (800b884 <UTIL_SEQ_Run+0x1dc>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4013      	ands	r3, r2
 800b790:	4a3c      	ldr	r2, [pc, #240]	@ (800b884 <UTIL_SEQ_Run+0x1dc>)
 800b792:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b794:	2302      	movs	r3, #2
 800b796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b798:	e013      	b.n	800b7c2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b79a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b79c:	3b01      	subs	r3, #1
 800b79e:	4a3d      	ldr	r2, [pc, #244]	@ (800b894 <UTIL_SEQ_Run+0x1ec>)
 800b7a0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b7a4:	4b3c      	ldr	r3, [pc, #240]	@ (800b898 <UTIL_SEQ_Run+0x1f0>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ae:	43da      	mvns	r2, r3
 800b7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	400a      	ands	r2, r1
 800b7b6:	4937      	ldr	r1, [pc, #220]	@ (800b894 <UTIL_SEQ_Run+0x1ec>)
 800b7b8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b7bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e8      	bne.n	800b79a <UTIL_SEQ_Run+0xf2>
 800b7c8:	6a3b      	ldr	r3, [r7, #32]
 800b7ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f383 8810 	msr	PRIMASK, r3
}
 800b7d2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b7d4:	4b30      	ldr	r3, [pc, #192]	@ (800b898 <UTIL_SEQ_Run+0x1f0>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a30      	ldr	r2, [pc, #192]	@ (800b89c <UTIL_SEQ_Run+0x1f4>)
 800b7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7de:	4798      	blx	r3

    local_taskset = TaskSet;
 800b7e0:	4b28      	ldr	r3, [pc, #160]	@ (800b884 <UTIL_SEQ_Run+0x1dc>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800b7e6:	4b28      	ldr	r3, [pc, #160]	@ (800b888 <UTIL_SEQ_Run+0x1e0>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800b7ec:	4b27      	ldr	r3, [pc, #156]	@ (800b88c <UTIL_SEQ_Run+0x1e4>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800b7f2:	4b27      	ldr	r3, [pc, #156]	@ (800b890 <UTIL_SEQ_Run+0x1e8>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b7f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7fc:	401a      	ands	r2, r3
 800b7fe:	4b20      	ldr	r3, [pc, #128]	@ (800b880 <UTIL_SEQ_Run+0x1d8>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4013      	ands	r3, r2
 800b804:	2b00      	cmp	r3, #0
 800b806:	d005      	beq.n	800b814 <UTIL_SEQ_Run+0x16c>
 800b808:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b80c:	4013      	ands	r3, r2
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f43f af64 	beq.w	800b6dc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b814:	4b20      	ldr	r3, [pc, #128]	@ (800b898 <UTIL_SEQ_Run+0x1f0>)
 800b816:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b81a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b81c:	f000 f938 	bl	800ba90 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b820:	f3ef 8310 	mrs	r3, PRIMASK
 800b824:	613b      	str	r3, [r7, #16]
  return(result);
 800b826:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b82a:	b672      	cpsid	i
}
 800b82c:	bf00      	nop
  local_taskset = TaskSet;
 800b82e:	4b15      	ldr	r3, [pc, #84]	@ (800b884 <UTIL_SEQ_Run+0x1dc>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b834:	4b14      	ldr	r3, [pc, #80]	@ (800b888 <UTIL_SEQ_Run+0x1e0>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b83a:	4b14      	ldr	r3, [pc, #80]	@ (800b88c <UTIL_SEQ_Run+0x1e4>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b844:	401a      	ands	r2, r3
 800b846:	4b0e      	ldr	r3, [pc, #56]	@ (800b880 <UTIL_SEQ_Run+0x1d8>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4013      	ands	r3, r2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d107      	bne.n	800b860 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b850:	4b0f      	ldr	r3, [pc, #60]	@ (800b890 <UTIL_SEQ_Run+0x1e8>)
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b856:	4013      	ands	r3, r2
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d101      	bne.n	800b860 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b85c:	f7f8 fb9e 	bl	8003f9c <UTIL_SEQ_Idle>
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f383 8810 	msr	PRIMASK, r3
}
 800b86a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b86c:	f000 f917 	bl	800ba9e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b870:	4a03      	ldr	r2, [pc, #12]	@ (800b880 <UTIL_SEQ_Run+0x1d8>)
 800b872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b874:	6013      	str	r3, [r2, #0]

  return;
 800b876:	bf00      	nop
}
 800b878:	3740      	adds	r7, #64	@ 0x40
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	20000038 	.word	0x20000038
 800b884:	200005f0 	.word	0x200005f0
 800b888:	200005f4 	.word	0x200005f4
 800b88c:	20000034 	.word	0x20000034
 800b890:	200005f8 	.word	0x200005f8
 800b894:	20000680 	.word	0x20000680
 800b898:	200005fc 	.word	0x200005fc
 800b89c:	20000600 	.word	0x20000600

0800b8a0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b088      	sub	sp, #32
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b8b0:	617b      	str	r3, [r7, #20]
  return(result);
 800b8b2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b8b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8b6:	b672      	cpsid	i
}
 800b8b8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f000 f8f6 	bl	800baac <SEQ_BitPosition>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4a06      	ldr	r2, [pc, #24]	@ (800b8e0 <UTIL_SEQ_RegTask+0x40>)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	f383 8810 	msr	PRIMASK, r3
}
 800b8d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b8d8:	bf00      	nop
}
 800b8da:	3720      	adds	r7, #32
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	20000600 	.word	0x20000600

0800b8e4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b087      	sub	sp, #28
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b8f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b8f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8f8:	b672      	cpsid	i
}
 800b8fa:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800b934 <UTIL_SEQ_SetTask+0x50>)
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4313      	orrs	r3, r2
 800b904:	4a0b      	ldr	r2, [pc, #44]	@ (800b934 <UTIL_SEQ_SetTask+0x50>)
 800b906:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b908:	4a0b      	ldr	r2, [pc, #44]	@ (800b938 <UTIL_SEQ_SetTask+0x54>)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	431a      	orrs	r2, r3
 800b914:	4908      	ldr	r1, [pc, #32]	@ (800b938 <UTIL_SEQ_SetTask+0x54>)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f383 8810 	msr	PRIMASK, r3
}
 800b926:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b928:	bf00      	nop
}
 800b92a:	371c      	adds	r7, #28
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	200005f0 	.word	0x200005f0
 800b938:	20000680 	.word	0x20000680

0800b93c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b944:	f3ef 8310 	mrs	r3, PRIMASK
 800b948:	60fb      	str	r3, [r7, #12]
  return(result);
 800b94a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b94c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b94e:	b672      	cpsid	i
}
 800b950:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	43da      	mvns	r2, r3
 800b956:	4b08      	ldr	r3, [pc, #32]	@ (800b978 <UTIL_SEQ_PauseTask+0x3c>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4013      	ands	r3, r2
 800b95c:	4a06      	ldr	r2, [pc, #24]	@ (800b978 <UTIL_SEQ_PauseTask+0x3c>)
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f383 8810 	msr	PRIMASK, r3
}
 800b96a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b96c:	bf00      	nop
}
 800b96e:	371c      	adds	r7, #28
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr
 800b978:	20000034 	.word	0x20000034

0800b97c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b984:	f3ef 8310 	mrs	r3, PRIMASK
 800b988:	60fb      	str	r3, [r7, #12]
  return(result);
 800b98a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b98c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b98e:	b672      	cpsid	i
}
 800b990:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b992:	4b09      	ldr	r3, [pc, #36]	@ (800b9b8 <UTIL_SEQ_ResumeTask+0x3c>)
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4313      	orrs	r3, r2
 800b99a:	4a07      	ldr	r2, [pc, #28]	@ (800b9b8 <UTIL_SEQ_ResumeTask+0x3c>)
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	f383 8810 	msr	PRIMASK, r3
}
 800b9a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b9aa:	bf00      	nop
}
 800b9ac:	371c      	adds	r7, #28
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	20000034 	.word	0x20000034

0800b9bc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b9cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9ce:	b672      	cpsid	i
}
 800b9d0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b9d2:	4b09      	ldr	r3, [pc, #36]	@ (800b9f8 <UTIL_SEQ_SetEvt+0x3c>)
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	4a07      	ldr	r2, [pc, #28]	@ (800b9f8 <UTIL_SEQ_SetEvt+0x3c>)
 800b9dc:	6013      	str	r3, [r2, #0]
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	f383 8810 	msr	PRIMASK, r3
}
 800b9e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b9ea:	bf00      	nop
}
 800b9ec:	371c      	adds	r7, #28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	200005f4 	.word	0x200005f4

0800b9fc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b088      	sub	sp, #32
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800ba04:	4b1f      	ldr	r3, [pc, #124]	@ (800ba84 <UTIL_SEQ_WaitEvt+0x88>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ba0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ba84 <UTIL_SEQ_WaitEvt+0x88>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba12:	d102      	bne.n	800ba1a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800ba14:	2300      	movs	r3, #0
 800ba16:	61fb      	str	r3, [r7, #28]
 800ba18:	e005      	b.n	800ba26 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800ba1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ba84 <UTIL_SEQ_WaitEvt+0x88>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	fa02 f303 	lsl.w	r3, r2, r3
 800ba24:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ba26:	4b18      	ldr	r3, [pc, #96]	@ (800ba88 <UTIL_SEQ_WaitEvt+0x8c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ba2c:	4a16      	ldr	r2, [pc, #88]	@ (800ba88 <UTIL_SEQ_WaitEvt+0x8c>)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800ba32:	e003      	b.n	800ba3c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800ba34:	6879      	ldr	r1, [r7, #4]
 800ba36:	69f8      	ldr	r0, [r7, #28]
 800ba38:	f7f8 fab7 	bl	8003faa <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ba3c:	4b13      	ldr	r3, [pc, #76]	@ (800ba8c <UTIL_SEQ_WaitEvt+0x90>)
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4013      	ands	r3, r2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d0f5      	beq.n	800ba34 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ba48:	4a0e      	ldr	r2, [pc, #56]	@ (800ba84 <UTIL_SEQ_WaitEvt+0x88>)
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ba52:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba54:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ba56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba58:	b672      	cpsid	i
}
 800ba5a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	43da      	mvns	r2, r3
 800ba60:	4b0a      	ldr	r3, [pc, #40]	@ (800ba8c <UTIL_SEQ_WaitEvt+0x90>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4013      	ands	r3, r2
 800ba66:	4a09      	ldr	r2, [pc, #36]	@ (800ba8c <UTIL_SEQ_WaitEvt+0x90>)
 800ba68:	6013      	str	r3, [r2, #0]
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f383 8810 	msr	PRIMASK, r3
}
 800ba74:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ba76:	4a04      	ldr	r2, [pc, #16]	@ (800ba88 <UTIL_SEQ_WaitEvt+0x8c>)
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	6013      	str	r3, [r2, #0]
  return;
 800ba7c:	bf00      	nop
}
 800ba7e:	3720      	adds	r7, #32
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	200005fc 	.word	0x200005fc
 800ba88:	200005f8 	.word	0x200005f8
 800ba8c:	200005f4 	.word	0x200005f4

0800ba90 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ba90:	b480      	push	{r7}
 800ba92:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ba94:	bf00      	nop
}
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ba9e:	b480      	push	{r7}
 800baa0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800baa2:	bf00      	nop
}
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bac2:	d204      	bcs.n	800bace <SEQ_BitPosition+0x22>
 800bac4:	2310      	movs	r3, #16
 800bac6:	73fb      	strb	r3, [r7, #15]
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	041b      	lsls	r3, r3, #16
 800bacc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bad4:	d205      	bcs.n	800bae2 <SEQ_BitPosition+0x36>
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	3308      	adds	r3, #8
 800bada:	73fb      	strb	r3, [r7, #15]
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	021b      	lsls	r3, r3, #8
 800bae0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bae8:	d205      	bcs.n	800baf6 <SEQ_BitPosition+0x4a>
 800baea:	7bfb      	ldrb	r3, [r7, #15]
 800baec:	3304      	adds	r3, #4
 800baee:	73fb      	strb	r3, [r7, #15]
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	011b      	lsls	r3, r3, #4
 800baf4:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	0f1b      	lsrs	r3, r3, #28
 800bafa:	4a07      	ldr	r2, [pc, #28]	@ (800bb18 <SEQ_BitPosition+0x6c>)
 800bafc:	5cd2      	ldrb	r2, [r2, r3]
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	4413      	add	r3, r2
 800bb02:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	f1c3 031f 	rsb	r3, r3, #31
 800bb0a:	b2db      	uxtb	r3, r3
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr
 800bb18:	0800f944 	.word	0x0800f944

0800bb1c <memcmp>:
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	3901      	subs	r1, #1
 800bb20:	4402      	add	r2, r0
 800bb22:	4290      	cmp	r0, r2
 800bb24:	d101      	bne.n	800bb2a <memcmp+0xe>
 800bb26:	2000      	movs	r0, #0
 800bb28:	e005      	b.n	800bb36 <memcmp+0x1a>
 800bb2a:	7803      	ldrb	r3, [r0, #0]
 800bb2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bb30:	42a3      	cmp	r3, r4
 800bb32:	d001      	beq.n	800bb38 <memcmp+0x1c>
 800bb34:	1b18      	subs	r0, r3, r4
 800bb36:	bd10      	pop	{r4, pc}
 800bb38:	3001      	adds	r0, #1
 800bb3a:	e7f2      	b.n	800bb22 <memcmp+0x6>

0800bb3c <memset>:
 800bb3c:	4402      	add	r2, r0
 800bb3e:	4603      	mov	r3, r0
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d100      	bne.n	800bb46 <memset+0xa>
 800bb44:	4770      	bx	lr
 800bb46:	f803 1b01 	strb.w	r1, [r3], #1
 800bb4a:	e7f9      	b.n	800bb40 <memset+0x4>

0800bb4c <__errno>:
 800bb4c:	4b01      	ldr	r3, [pc, #4]	@ (800bb54 <__errno+0x8>)
 800bb4e:	6818      	ldr	r0, [r3, #0]
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	2000003c 	.word	0x2000003c

0800bb58 <__libc_init_array>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	4d0d      	ldr	r5, [pc, #52]	@ (800bb90 <__libc_init_array+0x38>)
 800bb5c:	4c0d      	ldr	r4, [pc, #52]	@ (800bb94 <__libc_init_array+0x3c>)
 800bb5e:	1b64      	subs	r4, r4, r5
 800bb60:	10a4      	asrs	r4, r4, #2
 800bb62:	2600      	movs	r6, #0
 800bb64:	42a6      	cmp	r6, r4
 800bb66:	d109      	bne.n	800bb7c <__libc_init_array+0x24>
 800bb68:	4d0b      	ldr	r5, [pc, #44]	@ (800bb98 <__libc_init_array+0x40>)
 800bb6a:	4c0c      	ldr	r4, [pc, #48]	@ (800bb9c <__libc_init_array+0x44>)
 800bb6c:	f000 f92c 	bl	800bdc8 <_init>
 800bb70:	1b64      	subs	r4, r4, r5
 800bb72:	10a4      	asrs	r4, r4, #2
 800bb74:	2600      	movs	r6, #0
 800bb76:	42a6      	cmp	r6, r4
 800bb78:	d105      	bne.n	800bb86 <__libc_init_array+0x2e>
 800bb7a:	bd70      	pop	{r4, r5, r6, pc}
 800bb7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb80:	4798      	blx	r3
 800bb82:	3601      	adds	r6, #1
 800bb84:	e7ee      	b.n	800bb64 <__libc_init_array+0xc>
 800bb86:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb8a:	4798      	blx	r3
 800bb8c:	3601      	adds	r6, #1
 800bb8e:	e7f2      	b.n	800bb76 <__libc_init_array+0x1e>
 800bb90:	0800f95c 	.word	0x0800f95c
 800bb94:	0800f95c 	.word	0x0800f95c
 800bb98:	0800f95c 	.word	0x0800f95c
 800bb9c:	0800f960 	.word	0x0800f960

0800bba0 <memcpy>:
 800bba0:	440a      	add	r2, r1
 800bba2:	4291      	cmp	r1, r2
 800bba4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bba8:	d100      	bne.n	800bbac <memcpy+0xc>
 800bbaa:	4770      	bx	lr
 800bbac:	b510      	push	{r4, lr}
 800bbae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbb6:	4291      	cmp	r1, r2
 800bbb8:	d1f9      	bne.n	800bbae <memcpy+0xe>
 800bbba:	bd10      	pop	{r4, pc}

0800bbbc <sqrt>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	ed2d 8b02 	vpush	{d8}
 800bbc2:	ec55 4b10 	vmov	r4, r5, d0
 800bbc6:	f000 f825 	bl	800bc14 <__ieee754_sqrt>
 800bbca:	4622      	mov	r2, r4
 800bbcc:	462b      	mov	r3, r5
 800bbce:	4620      	mov	r0, r4
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	eeb0 8a40 	vmov.f32	s16, s0
 800bbd6:	eef0 8a60 	vmov.f32	s17, s1
 800bbda:	f7f4 ff2f 	bl	8000a3c <__aeabi_dcmpun>
 800bbde:	b990      	cbnz	r0, 800bc06 <sqrt+0x4a>
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	f7f4 ff00 	bl	80009ec <__aeabi_dcmplt>
 800bbec:	b158      	cbz	r0, 800bc06 <sqrt+0x4a>
 800bbee:	f7ff ffad 	bl	800bb4c <__errno>
 800bbf2:	2321      	movs	r3, #33	@ 0x21
 800bbf4:	6003      	str	r3, [r0, #0]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4610      	mov	r0, r2
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	f7f4 fdad 	bl	800075c <__aeabi_ddiv>
 800bc02:	ec41 0b18 	vmov	d8, r0, r1
 800bc06:	eeb0 0a48 	vmov.f32	s0, s16
 800bc0a:	eef0 0a68 	vmov.f32	s1, s17
 800bc0e:	ecbd 8b02 	vpop	{d8}
 800bc12:	bd38      	pop	{r3, r4, r5, pc}

0800bc14 <__ieee754_sqrt>:
 800bc14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc18:	4a68      	ldr	r2, [pc, #416]	@ (800bdbc <__ieee754_sqrt+0x1a8>)
 800bc1a:	ec55 4b10 	vmov	r4, r5, d0
 800bc1e:	43aa      	bics	r2, r5
 800bc20:	462b      	mov	r3, r5
 800bc22:	4621      	mov	r1, r4
 800bc24:	d110      	bne.n	800bc48 <__ieee754_sqrt+0x34>
 800bc26:	4622      	mov	r2, r4
 800bc28:	4620      	mov	r0, r4
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	f7f4 fc6c 	bl	8000508 <__aeabi_dmul>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	4620      	mov	r0, r4
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7f4 fab0 	bl	800019c <__adddf3>
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	460d      	mov	r5, r1
 800bc40:	ec45 4b10 	vmov	d0, r4, r5
 800bc44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc48:	2d00      	cmp	r5, #0
 800bc4a:	dc0e      	bgt.n	800bc6a <__ieee754_sqrt+0x56>
 800bc4c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bc50:	4322      	orrs	r2, r4
 800bc52:	d0f5      	beq.n	800bc40 <__ieee754_sqrt+0x2c>
 800bc54:	b19d      	cbz	r5, 800bc7e <__ieee754_sqrt+0x6a>
 800bc56:	4622      	mov	r2, r4
 800bc58:	4620      	mov	r0, r4
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7f4 fa9c 	bl	8000198 <__aeabi_dsub>
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	f7f4 fd7a 	bl	800075c <__aeabi_ddiv>
 800bc68:	e7e8      	b.n	800bc3c <__ieee754_sqrt+0x28>
 800bc6a:	152a      	asrs	r2, r5, #20
 800bc6c:	d115      	bne.n	800bc9a <__ieee754_sqrt+0x86>
 800bc6e:	2000      	movs	r0, #0
 800bc70:	e009      	b.n	800bc86 <__ieee754_sqrt+0x72>
 800bc72:	0acb      	lsrs	r3, r1, #11
 800bc74:	3a15      	subs	r2, #21
 800bc76:	0549      	lsls	r1, r1, #21
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0fa      	beq.n	800bc72 <__ieee754_sqrt+0x5e>
 800bc7c:	e7f7      	b.n	800bc6e <__ieee754_sqrt+0x5a>
 800bc7e:	462a      	mov	r2, r5
 800bc80:	e7fa      	b.n	800bc78 <__ieee754_sqrt+0x64>
 800bc82:	005b      	lsls	r3, r3, #1
 800bc84:	3001      	adds	r0, #1
 800bc86:	02dc      	lsls	r4, r3, #11
 800bc88:	d5fb      	bpl.n	800bc82 <__ieee754_sqrt+0x6e>
 800bc8a:	1e44      	subs	r4, r0, #1
 800bc8c:	1b12      	subs	r2, r2, r4
 800bc8e:	f1c0 0420 	rsb	r4, r0, #32
 800bc92:	fa21 f404 	lsr.w	r4, r1, r4
 800bc96:	4323      	orrs	r3, r4
 800bc98:	4081      	lsls	r1, r0
 800bc9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc9e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bca6:	07d2      	lsls	r2, r2, #31
 800bca8:	bf5c      	itt	pl
 800bcaa:	005b      	lslpl	r3, r3, #1
 800bcac:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bcb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bcb4:	bf58      	it	pl
 800bcb6:	0049      	lslpl	r1, r1, #1
 800bcb8:	2600      	movs	r6, #0
 800bcba:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bcbe:	106d      	asrs	r5, r5, #1
 800bcc0:	0049      	lsls	r1, r1, #1
 800bcc2:	2016      	movs	r0, #22
 800bcc4:	4632      	mov	r2, r6
 800bcc6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bcca:	1917      	adds	r7, r2, r4
 800bccc:	429f      	cmp	r7, r3
 800bcce:	bfde      	ittt	le
 800bcd0:	193a      	addle	r2, r7, r4
 800bcd2:	1bdb      	suble	r3, r3, r7
 800bcd4:	1936      	addle	r6, r6, r4
 800bcd6:	0fcf      	lsrs	r7, r1, #31
 800bcd8:	3801      	subs	r0, #1
 800bcda:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bcde:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bce2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bce6:	d1f0      	bne.n	800bcca <__ieee754_sqrt+0xb6>
 800bce8:	4604      	mov	r4, r0
 800bcea:	2720      	movs	r7, #32
 800bcec:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	eb00 0e0c 	add.w	lr, r0, ip
 800bcf6:	db02      	blt.n	800bcfe <__ieee754_sqrt+0xea>
 800bcf8:	d113      	bne.n	800bd22 <__ieee754_sqrt+0x10e>
 800bcfa:	458e      	cmp	lr, r1
 800bcfc:	d811      	bhi.n	800bd22 <__ieee754_sqrt+0x10e>
 800bcfe:	f1be 0f00 	cmp.w	lr, #0
 800bd02:	eb0e 000c 	add.w	r0, lr, ip
 800bd06:	da42      	bge.n	800bd8e <__ieee754_sqrt+0x17a>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	db40      	blt.n	800bd8e <__ieee754_sqrt+0x17a>
 800bd0c:	f102 0801 	add.w	r8, r2, #1
 800bd10:	1a9b      	subs	r3, r3, r2
 800bd12:	458e      	cmp	lr, r1
 800bd14:	bf88      	it	hi
 800bd16:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800bd1a:	eba1 010e 	sub.w	r1, r1, lr
 800bd1e:	4464      	add	r4, ip
 800bd20:	4642      	mov	r2, r8
 800bd22:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bd26:	3f01      	subs	r7, #1
 800bd28:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bd2c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bd30:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bd34:	d1dc      	bne.n	800bcf0 <__ieee754_sqrt+0xdc>
 800bd36:	4319      	orrs	r1, r3
 800bd38:	d01b      	beq.n	800bd72 <__ieee754_sqrt+0x15e>
 800bd3a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bdc0 <__ieee754_sqrt+0x1ac>
 800bd3e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bdc4 <__ieee754_sqrt+0x1b0>
 800bd42:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd46:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd4a:	f7f4 fa25 	bl	8000198 <__aeabi_dsub>
 800bd4e:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	4640      	mov	r0, r8
 800bd58:	4649      	mov	r1, r9
 800bd5a:	f7f4 fe51 	bl	8000a00 <__aeabi_dcmple>
 800bd5e:	b140      	cbz	r0, 800bd72 <__ieee754_sqrt+0x15e>
 800bd60:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800bd64:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd68:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd6c:	d111      	bne.n	800bd92 <__ieee754_sqrt+0x17e>
 800bd6e:	3601      	adds	r6, #1
 800bd70:	463c      	mov	r4, r7
 800bd72:	1072      	asrs	r2, r6, #1
 800bd74:	0863      	lsrs	r3, r4, #1
 800bd76:	07f1      	lsls	r1, r6, #31
 800bd78:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bd7c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bd80:	bf48      	it	mi
 800bd82:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bd86:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	e756      	b.n	800bc3c <__ieee754_sqrt+0x28>
 800bd8e:	4690      	mov	r8, r2
 800bd90:	e7be      	b.n	800bd10 <__ieee754_sqrt+0xfc>
 800bd92:	f7f4 fa03 	bl	800019c <__adddf3>
 800bd96:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	4640      	mov	r0, r8
 800bda0:	4649      	mov	r1, r9
 800bda2:	f7f4 fe23 	bl	80009ec <__aeabi_dcmplt>
 800bda6:	b120      	cbz	r0, 800bdb2 <__ieee754_sqrt+0x19e>
 800bda8:	1ca0      	adds	r0, r4, #2
 800bdaa:	bf08      	it	eq
 800bdac:	3601      	addeq	r6, #1
 800bdae:	3402      	adds	r4, #2
 800bdb0:	e7df      	b.n	800bd72 <__ieee754_sqrt+0x15e>
 800bdb2:	1c63      	adds	r3, r4, #1
 800bdb4:	f023 0401 	bic.w	r4, r3, #1
 800bdb8:	e7db      	b.n	800bd72 <__ieee754_sqrt+0x15e>
 800bdba:	bf00      	nop
 800bdbc:	7ff00000 	.word	0x7ff00000
 800bdc0:	20000098 	.word	0x20000098
 800bdc4:	20000090 	.word	0x20000090

0800bdc8 <_init>:
 800bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdca:	bf00      	nop
 800bdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdce:	bc08      	pop	{r3}
 800bdd0:	469e      	mov	lr, r3
 800bdd2:	4770      	bx	lr

0800bdd4 <_fini>:
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	bf00      	nop
 800bdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdda:	bc08      	pop	{r3}
 800bddc:	469e      	mov	lr, r3
 800bdde:	4770      	bx	lr
