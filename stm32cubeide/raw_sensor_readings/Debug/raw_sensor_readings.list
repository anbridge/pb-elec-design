
raw_sensor_readings.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d5c  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08009e9c  08009e9c  0000ae9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a108  0800a108  0000b108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a110  0800a110  0000b110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a114  0800a114  0000b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  20000008  0800a118  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000003c  0800a14c  0000c03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000074  0800a181  0000c074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000088  0800a192  0000c088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  0800a192  0000c608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800a192  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002b6d5  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005ea4  00000000  00000000  0003816c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000025b8  00000000  00000000  0003e010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001ccf  00000000  00000000  000405c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026577  00000000  00000000  00042297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00028c88  00000000  00000000  0006880e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d1ad8  00000000  00000000  00091496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00162f6e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009dd8  00000000  00000000  00162fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000008b  00000000  00000000  0016cd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000088 	.word	0x20000088
 800015c:	00000000 	.word	0x00000000
 8000160:	08009e84 	.word	0x08009e84

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000008c 	.word	0x2000008c
 800017c:	08009e84 	.word	0x08009e84

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <icm20948_set_user_bank>:

I2C_HandleTypeDef i2c_bus;

// select user bank 
ICM_20948_Status_e icm20948_set_user_bank(uint8_t bank)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af04      	add	r7, sp, #16
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
    bank = (bank << 4) & 0x30; // bits 1:0 of bank -> 5:4 of icm bank select register
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	71fb      	strb	r3, [r7, #7]
    if(HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, REG_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &bank, 1, 1000))
 80009e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e8:	9302      	str	r3, [sp, #8]
 80009ea:	2301      	movs	r3, #1
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2301      	movs	r3, #1
 80009f4:	227f      	movs	r2, #127	@ 0x7f
 80009f6:	21d0      	movs	r1, #208	@ 0xd0
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <icm20948_set_user_bank+0x48>)
 80009fa:	f003 fd35 	bl	8004468 <HAL_I2C_Mem_Write>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <icm20948_set_user_bank+0x3c>
    	return ICM_20948_Stat_Err;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <icm20948_set_user_bank+0x3e>
    return ICM_20948_Stat_Ok;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000a4 	.word	0x200000a4

08000a18 <icm20948_i2c_controller_configure_peripheral>:
        0x4048, // 43 Raw Gyr
};


int8_t icm20948_i2c_controller_configure_peripheral(uint8_t peripheral, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap, uint8_t dataOut)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b08d      	sub	sp, #52	@ 0x34
 8000a1c:	af04      	add	r7, sp, #16
 8000a1e:	4604      	mov	r4, r0
 8000a20:	4608      	mov	r0, r1
 8000a22:	4611      	mov	r1, r2
 8000a24:	461a      	mov	r2, r3
 8000a26:	4623      	mov	r3, r4
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71bb      	strb	r3, [r7, #6]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	717b      	strb	r3, [r7, #5]
 8000a32:	4613      	mov	r3, r2
 8000a34:	713b      	strb	r3, [r7, #4]
  uint8_t periph_addr_reg;
  uint8_t periph_reg_reg;
  uint8_t periph_ctrl_reg;
  uint8_t periph_do_reg;

  switch (peripheral)
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d82f      	bhi.n	8000a9c <icm20948_i2c_controller_configure_peripheral+0x84>
 8000a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a44 <icm20948_i2c_controller_configure_peripheral+0x2c>)
 8000a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a42:	bf00      	nop
 8000a44:	08000a55 	.word	0x08000a55
 8000a48:	08000a67 	.word	0x08000a67
 8000a4c:	08000a79 	.word	0x08000a79
 8000a50:	08000a8b 	.word	0x08000a8b
  {
  case 0:
    periph_addr_reg = AGB3_REG_I2C_PERIPH0_ADDR;
 8000a54:	2303      	movs	r3, #3
 8000a56:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH0_REG;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH0_CTRL;
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH0_DO;
 8000a60:	2306      	movs	r3, #6
 8000a62:	773b      	strb	r3, [r7, #28]
    break;
 8000a64:	e01d      	b.n	8000aa2 <icm20948_i2c_controller_configure_peripheral+0x8a>
  case 1:
    periph_addr_reg = AGB3_REG_I2C_PERIPH1_ADDR;
 8000a66:	2307      	movs	r3, #7
 8000a68:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH1_REG;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH1_CTRL;
 8000a6e:	2309      	movs	r3, #9
 8000a70:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH1_DO;
 8000a72:	230a      	movs	r3, #10
 8000a74:	773b      	strb	r3, [r7, #28]
    break;
 8000a76:	e014      	b.n	8000aa2 <icm20948_i2c_controller_configure_peripheral+0x8a>
  case 2:
    periph_addr_reg = AGB3_REG_I2C_PERIPH2_ADDR;
 8000a78:	230b      	movs	r3, #11
 8000a7a:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH2_REG;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH2_CTRL;
 8000a80:	230d      	movs	r3, #13
 8000a82:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH2_DO;
 8000a84:	230e      	movs	r3, #14
 8000a86:	773b      	strb	r3, [r7, #28]
    break;
 8000a88:	e00b      	b.n	8000aa2 <icm20948_i2c_controller_configure_peripheral+0x8a>
  case 3:
    periph_addr_reg = AGB3_REG_I2C_PERIPH3_ADDR;
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH3_REG;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH3_CTRL;
 8000a92:	2311      	movs	r3, #17
 8000a94:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH3_DO;
 8000a96:	2312      	movs	r3, #18
 8000a98:	773b      	strb	r3, [r7, #28]
    break;
 8000a9a:	e002      	b.n	8000aa2 <icm20948_i2c_controller_configure_peripheral+0x8a>
  default:
    return -1;
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aa0:	e080      	b.n	8000ba4 <icm20948_i2c_controller_configure_peripheral+0x18c>
  }

  icm20948_set_user_bank(3);
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f7ff ff92 	bl	80009cc <icm20948_set_user_bank>


  // Set the peripheral address and the Rw flag
  ICM_20948_I2C_PERIPHX_ADDR_t address;
  address.ID = addr;
 8000aa8:	79bb      	ldrb	r3, [r7, #6]
 8000aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	7e3b      	ldrb	r3, [r7, #24]
 8000ab2:	f362 0306 	bfi	r3, r2, #0, #7
 8000ab6:	763b      	strb	r3, [r7, #24]
  if (Rw)
 8000ab8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d004      	beq.n	8000aca <icm20948_i2c_controller_configure_peripheral+0xb2>
  {
    address.RNW = 1;
 8000ac0:	7e3b      	ldrb	r3, [r7, #24]
 8000ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac6:	763b      	strb	r3, [r7, #24]
 8000ac8:	e003      	b.n	8000ad2 <icm20948_i2c_controller_configure_peripheral+0xba>
  }
  else
  {
    address.RNW = 0; // Make sure bit is clear (just in case there is any garbage in that RAM location)
 8000aca:	7e3b      	ldrb	r3, [r7, #24]
 8000acc:	f36f 13c7 	bfc	r3, #7, #1
 8000ad0:	763b      	strb	r3, [r7, #24]
  }
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_addr_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&address, sizeof(ICM_20948_I2C_PERIPHX_ADDR_t), 1000);
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ada:	9302      	str	r3, [sp, #8]
 8000adc:	2301      	movs	r3, #1
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	21d0      	movs	r1, #208	@ 0xd0
 8000aea:	4830      	ldr	r0, [pc, #192]	@ (8000bac <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000aec:	f003 fcbc 	bl	8004468 <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, periph_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_PERIPHX_ADDR_t));


  // If we are setting up a write, configure the Data Out register too
  if (!Rw)
 8000af0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000af4:	f083 0301 	eor.w	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d011      	beq.n	8000b22 <icm20948_i2c_controller_configure_peripheral+0x10a>
  {
    ICM_20948_I2C_PERIPHX_DO_t dataOutByte;
    dataOutByte.DO = dataOut;
 8000afe:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000b02:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_do_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dataOutByte, sizeof(ICM_20948_I2C_PERIPHX_DO_t), 1000);
 8000b04:	7f3b      	ldrb	r3, [r7, #28]
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0c:	9302      	str	r3, [sp, #8]
 8000b0e:	2301      	movs	r3, #1
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	21d0      	movs	r1, #208	@ 0xd0
 8000b1c:	4823      	ldr	r0, [pc, #140]	@ (8000bac <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000b1e:	f003 fca3 	bl	8004468 <HAL_I2C_Mem_Write>

  }

  // Set the peripheral sub-address (register address)
  ICM_20948_I2C_PERIPHX_REG_t subaddress;
  subaddress.REG = reg;
 8000b22:	797b      	ldrb	r3, [r7, #5]
 8000b24:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_reg_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_PERIPHX_REG_t), 1000);
 8000b26:	7fbb      	ldrb	r3, [r7, #30]
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	2301      	movs	r3, #1
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	21d0      	movs	r1, #208	@ 0xd0
 8000b3e:	481b      	ldr	r0, [pc, #108]	@ (8000bac <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000b40:	f003 fc92 	bl	8004468 <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, periph_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_PERIPHX_REG_t));


  // Set up the control info
  ICM_20948_I2C_PERIPHX_CTRL_t ctrl;
  ctrl.LENG = len;
 8000b44:	793b      	ldrb	r3, [r7, #4]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	7c3b      	ldrb	r3, [r7, #16]
 8000b4e:	f362 0303 	bfi	r3, r2, #0, #4
 8000b52:	743b      	strb	r3, [r7, #16]
  ctrl.EN = enable;
 8000b54:	7c3b      	ldrb	r3, [r7, #16]
 8000b56:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8000b5a:	f362 13c7 	bfi	r3, r2, #7, #1
 8000b5e:	743b      	strb	r3, [r7, #16]
  ctrl.REG_DIS = data_only;
 8000b60:	7c3b      	ldrb	r3, [r7, #16]
 8000b62:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000b66:	f362 1345 	bfi	r3, r2, #5, #1
 8000b6a:	743b      	strb	r3, [r7, #16]
  ctrl.GRP = grp;
 8000b6c:	7c3b      	ldrb	r3, [r7, #16]
 8000b6e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8000b72:	f362 1304 	bfi	r3, r2, #4, #1
 8000b76:	743b      	strb	r3, [r7, #16]
  ctrl.BYTE_SW = swap;
 8000b78:	7c3b      	ldrb	r3, [r7, #16]
 8000b7a:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8000b7e:	f362 1386 	bfi	r3, r2, #6, #1
 8000b82:	743b      	strb	r3, [r7, #16]
  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, periph_ctrl_reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_PERIPHX_CTRL_t), 1000);
 8000b84:	7f7b      	ldrb	r3, [r7, #29]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	21d0      	movs	r1, #208	@ 0xd0
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <icm20948_i2c_controller_configure_peripheral+0x194>)
 8000b9e:	f003 fc63 	bl	8004468 <HAL_I2C_Mem_Write>
  //ICM_20948_execute_w(pdev, periph_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_PERIPHX_CTRL_t));

  return 0;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3724      	adds	r7, #36	@ 0x24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	200000a4 	.word	0x200000a4

08000bb0 <icm20948_set_sample_mode>:
  return 0;
}


int8_t icm20948_set_sample_mode(ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af04      	add	r7, sp, #16
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
  /*if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
  {
    return -1;
  }*/

  icm20948_set_user_bank(0); // Must be in the right bank
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff ff03 	bl	80009cc <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_LP_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t), 1000);
 8000bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2205      	movs	r2, #5
 8000bda:	21d0      	movs	r1, #208	@ 0xd0
 8000bdc:	481e      	ldr	r0, [pc, #120]	@ (8000c58 <icm20948_set_sample_mode+0xa8>)
 8000bde:	f003 fd57 	bl	8004690 <HAL_I2C_Mem_Read>


  if (sensors & ICM_20948_Internal_Acc)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d007      	beq.n	8000bfc <icm20948_set_sample_mode+0x4c>
  {
    reg.ACCEL_CYCLE = mode;
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	7b3b      	ldrb	r3, [r7, #12]
 8000bf6:	f362 1345 	bfi	r3, r2, #5, #1
 8000bfa:	733b      	strb	r3, [r7, #12]
  } // Set all desired sensors to this setting
  if (sensors & ICM_20948_Internal_Gyr)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <icm20948_set_sample_mode+0x66>
  {
    reg.GYRO_CYCLE = mode;
 8000c06:	79bb      	ldrb	r3, [r7, #6]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	7b3b      	ldrb	r3, [r7, #12]
 8000c10:	f362 1304 	bfi	r3, r2, #4, #1
 8000c14:	733b      	strb	r3, [r7, #12]
  }
  if (sensors & ICM_20948_Internal_Mst)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d007      	beq.n	8000c30 <icm20948_set_sample_mode+0x80>
  {
    reg.I2C_MST_CYCLE = mode;
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	7b3b      	ldrb	r3, [r7, #12]
 8000c2a:	f362 1386 	bfi	r3, r2, #6, #1
 8000c2e:	733b      	strb	r3, [r7, #12]
  }

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_LP_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t), 1000);
 8000c30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c34:	9302      	str	r3, [sp, #8]
 8000c36:	2301      	movs	r3, #1
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2301      	movs	r3, #1
 8000c42:	2205      	movs	r2, #5
 8000c44:	21d0      	movs	r1, #208	@ 0xd0
 8000c46:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <icm20948_set_sample_mode+0xa8>)
 8000c48:	f003 fc0e 	bl	8004468 <HAL_I2C_Mem_Write>

  // Check the data was written correctly
  //HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_LP_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t), 1000);
  return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000a4 	.word	0x200000a4

08000c5c <icm20948_set_full_scale>:
  return 0;
}


int8_t icm20948_set_full_scale(ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af04      	add	r7, sp, #16
 8000c62:	4603      	mov	r3, r0
 8000c64:	7139      	strb	r1, [r7, #4]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <icm20948_set_full_scale+0x1c>
  {
    return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c76:	e074      	b.n	8000d62 <icm20948_set_full_scale+0x106>
  }

  if (sensors & ICM_20948_Internal_Acc)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d034      	beq.n	8000cec <icm20948_set_full_scale+0x90>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 8000c82:	2002      	movs	r0, #2
 8000c84:	f7ff fea2 	bl	80009cc <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8000c88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8c:	9302      	str	r3, [sp, #8]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	2214      	movs	r2, #20
 8000c9c:	21d0      	movs	r1, #208	@ 0xd0
 8000c9e:	4833      	ldr	r0, [pc, #204]	@ (8000d6c <icm20948_set_full_scale+0x110>)
 8000ca0:	f003 fcf6 	bl	8004690 <HAL_I2C_Mem_Read>
    reg.ACCEL_FS_SEL = fss.a;
 8000ca4:	793b      	ldrb	r3, [r7, #4]
 8000ca6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
 8000cae:	f362 0342 	bfi	r3, r2, #1, #2
 8000cb2:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8000cb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	2214      	movs	r2, #20
 8000cc8:	21d0      	movs	r1, #208	@ 0xd0
 8000cca:	4828      	ldr	r0, [pc, #160]	@ (8000d6c <icm20948_set_full_scale+0x110>)
 8000ccc:	f003 fbcc 	bl	8004468 <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8000cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd4:	9302      	str	r3, [sp, #8]
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	2214      	movs	r2, #20
 8000ce4:	21d0      	movs	r1, #208	@ 0xd0
 8000ce6:	4821      	ldr	r0, [pc, #132]	@ (8000d6c <icm20948_set_full_scale+0x110>)
 8000ce8:	f003 fcd2 	bl	8004690 <HAL_I2C_Mem_Read>
    
  }
  if (sensors & ICM_20948_Internal_Gyr)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d034      	beq.n	8000d60 <icm20948_set_full_scale+0x104>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f7ff fe68 	bl	80009cc <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR,AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 8000cfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d00:	9302      	str	r3, [sp, #8]
 8000d02:	2301      	movs	r3, #1
 8000d04:	9301      	str	r3, [sp, #4]
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	2201      	movs	r2, #1
 8000d10:	21d0      	movs	r1, #208	@ 0xd0
 8000d12:	4816      	ldr	r0, [pc, #88]	@ (8000d6c <icm20948_set_full_scale+0x110>)
 8000d14:	f003 fcbc 	bl	8004690 <HAL_I2C_Mem_Read>
    reg.GYRO_FS_SEL = fss.g;
 8000d18:	793b      	ldrb	r3, [r7, #4]
 8000d1a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	7a3b      	ldrb	r3, [r7, #8]
 8000d22:	f362 0342 	bfi	r3, r2, #1, #2
 8000d26:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 8000d28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	21d0      	movs	r1, #208	@ 0xd0
 8000d3e:	480b      	ldr	r0, [pc, #44]	@ (8000d6c <icm20948_set_full_scale+0x110>)
 8000d40:	f003 fb92 	bl	8004468 <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 8000d44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	2201      	movs	r2, #1
 8000d58:	21d0      	movs	r1, #208	@ 0xd0
 8000d5a:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <icm20948_set_full_scale+0x110>)
 8000d5c:	f003 fc98 	bl	8004690 <HAL_I2C_Mem_Read>
  }
  return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000a4 	.word	0x200000a4

08000d70 <icm20948_enable_dlpf>:


int8_t icm20948_enable_dlpf(ICM_20948_InternalSensorID_bm sensors, bool enable)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af04      	add	r7, sp, #16
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	71bb      	strb	r3, [r7, #6]
  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <icm20948_enable_dlpf+0x20>
  {
    return -1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d8e:	e07c      	b.n	8000e8a <icm20948_enable_dlpf+0x11a>
  }

  if (sensors & ICM_20948_Internal_Acc)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d038      	beq.n	8000e0c <icm20948_enable_dlpf+0x9c>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 8000d9a:	2002      	movs	r0, #2
 8000d9c:	f7ff fe16 	bl	80009cc <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8000da0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da4:	9302      	str	r3, [sp, #8]
 8000da6:	2301      	movs	r3, #1
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2301      	movs	r3, #1
 8000db2:	2214      	movs	r2, #20
 8000db4:	21d0      	movs	r1, #208	@ 0xd0
 8000db6:	4837      	ldr	r0, [pc, #220]	@ (8000e94 <icm20948_enable_dlpf+0x124>)
 8000db8:	f003 fc6a 	bl	8004690 <HAL_I2C_Mem_Read>
    if (enable)
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d004      	beq.n	8000dcc <icm20948_enable_dlpf+0x5c>
    {
      reg.ACCEL_FCHOICE = 1;
 8000dc2:	7b3b      	ldrb	r3, [r7, #12]
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	733b      	strb	r3, [r7, #12]
 8000dca:	e003      	b.n	8000dd4 <icm20948_enable_dlpf+0x64>
    }
    else
    {
      reg.ACCEL_FCHOICE = 0;
 8000dcc:	7b3b      	ldrb	r3, [r7, #12]
 8000dce:	f36f 0300 	bfc	r3, #0, #1
 8000dd2:	733b      	strb	r3, [r7, #12]
    }
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8000dd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd8:	9302      	str	r3, [sp, #8]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2301      	movs	r3, #1
 8000de6:	2214      	movs	r2, #20
 8000de8:	21d0      	movs	r1, #208	@ 0xd0
 8000dea:	482a      	ldr	r0, [pc, #168]	@ (8000e94 <icm20948_enable_dlpf+0x124>)
 8000dec:	f003 fb3c 	bl	8004468 <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t), 1000);
 8000df0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df4:	9302      	str	r3, [sp, #8]
 8000df6:	2301      	movs	r3, #1
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	2214      	movs	r2, #20
 8000e04:	21d0      	movs	r1, #208	@ 0xd0
 8000e06:	4823      	ldr	r0, [pc, #140]	@ (8000e94 <icm20948_enable_dlpf+0x124>)
 8000e08:	f003 fc42 	bl	8004690 <HAL_I2C_Mem_Read>

  }
  if (sensors & ICM_20948_Internal_Gyr)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d038      	beq.n	8000e88 <icm20948_enable_dlpf+0x118>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    icm20948_set_user_bank(2); // Must be in the right bank
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff fdd8 	bl	80009cc <icm20948_set_user_bank>
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 8000e1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e20:	9302      	str	r3, [sp, #8]
 8000e22:	2301      	movs	r3, #1
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	2201      	movs	r2, #1
 8000e30:	21d0      	movs	r1, #208	@ 0xd0
 8000e32:	4818      	ldr	r0, [pc, #96]	@ (8000e94 <icm20948_enable_dlpf+0x124>)
 8000e34:	f003 fc2c 	bl	8004690 <HAL_I2C_Mem_Read>
    if (enable)
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d004      	beq.n	8000e48 <icm20948_enable_dlpf+0xd8>
    {
      reg.GYRO_FCHOICE = 1;
 8000e3e:	7a3b      	ldrb	r3, [r7, #8]
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	723b      	strb	r3, [r7, #8]
 8000e46:	e003      	b.n	8000e50 <icm20948_enable_dlpf+0xe0>
    }
    else
    {
      reg.GYRO_FCHOICE = 0;
 8000e48:	7a3b      	ldrb	r3, [r7, #8]
 8000e4a:	f36f 0300 	bfc	r3, #0, #1
 8000e4e:	723b      	strb	r3, [r7, #8]
    }
    HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 8000e50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e54:	9302      	str	r3, [sp, #8]
 8000e56:	2301      	movs	r3, #1
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2301      	movs	r3, #1
 8000e62:	2201      	movs	r2, #1
 8000e64:	21d0      	movs	r1, #208	@ 0xd0
 8000e66:	480b      	ldr	r0, [pc, #44]	@ (8000e94 <icm20948_enable_dlpf+0x124>)
 8000e68:	f003 fafe 	bl	8004468 <HAL_I2C_Mem_Write>
    // Check the data was written correctly
    HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB2_REG_GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t), 1000);
 8000e6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	2201      	movs	r2, #1
 8000e80:	21d0      	movs	r1, #208	@ 0xd0
 8000e82:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <icm20948_enable_dlpf+0x124>)
 8000e84:	f003 fc04 	bl	8004690 <HAL_I2C_Mem_Read>
  }
  return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000a4 	.word	0x200000a4

08000e98 <icm20948_set_dlpf_cfg>:


ICM_20948_Status_e icm20948_set_dlpf_cfg(ICM_20948_InternalSensorID_bm sensors, ICM_20948_dlpcfg_t cfg)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	8039      	strh	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]

  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <icm20948_set_dlpf_cfg+0x1e>
  {
    return ICM_20948_Stat_SensorNotSupported;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e08a      	b.n	8000fcc <icm20948_set_dlpf_cfg+0x134>
  }

  if (sensors & ICM_20948_Internal_Acc)
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d03f      	beq.n	8000f40 <icm20948_set_dlpf_cfg+0xa8>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    retval |= icm20948_set_user_bank(2); // Must be in the right bank
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f7ff fd83 	bl	80009cc <icm20948_set_user_bank>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	73fb      	strb	r3, [r7, #15]
    retval |= icm20948_execute_r(AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2014      	movs	r0, #20
 8000eda:	f000 f937 	bl	800114c <icm20948_execute_r>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	73fb      	strb	r3, [r7, #15]
    reg.ACCEL_DLPFCFG = cfg.a;
 8000ee8:	783b      	ldrb	r3, [r7, #0]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	7b3b      	ldrb	r3, [r7, #12]
 8000ef2:	f362 03c5 	bfi	r3, r2, #3, #3
 8000ef6:	733b      	strb	r3, [r7, #12]
    retval |= icm20948_execute_w(AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2201      	movs	r2, #1
 8000efe:	4619      	mov	r1, r3
 8000f00:	2014      	movs	r0, #20
 8000f02:	f000 f945 	bl	8001190 <icm20948_execute_w>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	73fb      	strb	r3, [r7, #15]
    // Check the data was written correctly
    retval |= icm20948_execute_r(AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	2014      	movs	r0, #20
 8000f1a:	f000 f917 	bl	800114c <icm20948_execute_r>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	73fb      	strb	r3, [r7, #15]
    if (reg.ACCEL_DLPFCFG != cfg.a) retval |= ICM_20948_Stat_Err;
 8000f28:	7b3b      	ldrb	r3, [r7, #12]
 8000f2a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	783b      	ldrb	r3, [r7, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d003      	beq.n	8000f40 <icm20948_set_dlpf_cfg+0xa8>
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
  }
  if (sensors & ICM_20948_Internal_Gyr)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d03f      	beq.n	8000fca <icm20948_set_dlpf_cfg+0x132>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    retval |= icm20948_set_user_bank(2); // Must be in the right bank
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f7ff fd3e 	bl	80009cc <icm20948_set_user_bank>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	73fb      	strb	r3, [r7, #15]
    retval |= icm20948_execute_r(AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4619      	mov	r1, r3
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 f8f2 	bl	800114c <icm20948_execute_r>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	73fb      	strb	r3, [r7, #15]
    reg.GYRO_DLPFCFG = cfg.g;
 8000f72:	787b      	ldrb	r3, [r7, #1]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	7a3b      	ldrb	r3, [r7, #8]
 8000f7c:	f362 03c5 	bfi	r3, r2, #3, #3
 8000f80:	723b      	strb	r3, [r7, #8]
    retval |= icm20948_execute_w(AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	2201      	movs	r2, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 f900 	bl	8001190 <icm20948_execute_w>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	73fb      	strb	r3, [r7, #15]
    // Check the data was written correctly
    retval |= icm20948_execute_r(AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 f8d2 	bl	800114c <icm20948_execute_r>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	73fb      	strb	r3, [r7, #15]
    if (reg.GYRO_DLPFCFG != cfg.g) retval |= ICM_20948_Stat_Err;
 8000fb2:	7a3b      	ldrb	r3, [r7, #8]
 8000fb4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d003      	beq.n	8000fca <icm20948_set_dlpf_cfg+0x132>
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
  }
  return retval;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <icm20948_sleep>:

  return 0;
}

ICM_20948_Status_e icm20948_sleep(bool on)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af04      	add	r7, sp, #16
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  ICM_20948_PWR_MGMT_1_t reg;

  icm20948_set_user_bank(0); // Must be in the right bank
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff fcf2 	bl	80009cc <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 8000fe8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2206      	movs	r2, #6
 8000ffc:	21d0      	movs	r1, #208	@ 0xd0
 8000ffe:	4811      	ldr	r0, [pc, #68]	@ (8001044 <icm20948_sleep+0x70>)
 8001000:	f003 fb46 	bl	8004690 <HAL_I2C_Mem_Read>


  if (on)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <icm20948_sleep+0x40>
  {
    reg.SLEEP = 1;
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001010:	733b      	strb	r3, [r7, #12]
 8001012:	e003      	b.n	800101c <icm20948_sleep+0x48>
  }
  else
  {
    reg.SLEEP = 0;
 8001014:	7b3b      	ldrb	r3, [r7, #12]
 8001016:	f36f 1386 	bfc	r3, #6, #1
 800101a:	733b      	strb	r3, [r7, #12]
  }

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT,  (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 800101c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2301      	movs	r3, #1
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	2206      	movs	r2, #6
 8001030:	21d0      	movs	r1, #208	@ 0xd0
 8001032:	4804      	ldr	r0, [pc, #16]	@ (8001044 <icm20948_sleep+0x70>)
 8001034:	f003 fa18 	bl	8004468 <HAL_I2C_Mem_Write>

  return retval;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000a4 	.word	0x200000a4

08001048 <icm20948_low_power>:


ICM_20948_Status_e icm20948_low_power(bool on)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
  ICM_20948_PWR_MGMT_1_t reg;

  icm20948_set_user_bank(0); // Must be in the right bank
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff fcb8 	bl	80009cc <icm20948_set_user_bank>

  HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR,  AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 800105c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	2301      	movs	r3, #1
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	2206      	movs	r2, #6
 8001070:	21d0      	movs	r1, #208	@ 0xd0
 8001072:	4816      	ldr	r0, [pc, #88]	@ (80010cc <icm20948_low_power+0x84>)
 8001074:	f003 fb0c 	bl	8004690 <HAL_I2C_Mem_Read>
  if (retval != ICM_20948_Stat_Ok)
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <icm20948_low_power+0x3a>
  {
    return retval;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	e01f      	b.n	80010c2 <icm20948_low_power+0x7a>
  }

  if (on)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <icm20948_low_power+0x4a>
  {
    reg.LP_EN = 1;
 8001088:	7b3b      	ldrb	r3, [r7, #12]
 800108a:	f043 0320 	orr.w	r3, r3, #32
 800108e:	733b      	strb	r3, [r7, #12]
 8001090:	e003      	b.n	800109a <icm20948_low_power+0x52>
  }
  else
  {
    reg.LP_EN = 0;
 8001092:	7b3b      	ldrb	r3, [r7, #12]
 8001094:	f36f 1345 	bfc	r3, #5, #1
 8001098:	733b      	strb	r3, [r7, #12]
  }

  HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR,  AGB0_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t), 1000);
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	2301      	movs	r3, #1
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2206      	movs	r2, #6
 80010ae:	21d0      	movs	r1, #208	@ 0xd0
 80010b0:	4806      	ldr	r0, [pc, #24]	@ (80010cc <icm20948_low_power+0x84>)
 80010b2:	f003 f9d9 	bl	8004468 <HAL_I2C_Mem_Write>
  if (retval != ICM_20948_Stat_Ok)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <icm20948_low_power+0x78>
  {
    return retval;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	e000      	b.n	80010c2 <icm20948_low_power+0x7a>
  }
  return retval;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000a4 	.word	0x200000a4

080010d0 <icm20948_sw_reset>:


ICM_20948_Status_e icm20948_sw_reset(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80010d6:	2300      	movs	r3, #0
 80010d8:	71fb      	strb	r3, [r7, #7]
  ICM_20948_PWR_MGMT_1_t reg;

  icm20948_set_user_bank(0); // Must be in the right bank
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff fc76 	bl	80009cc <icm20948_set_user_bank>

  retval = icm20948_execute_r(AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	2006      	movs	r0, #6
 80010e8:	f000 f830 	bl	800114c <icm20948_execute_r>
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <icm20948_sw_reset+0x2a>
  {
    return retval;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	e011      	b.n	800111e <icm20948_sw_reset+0x4e>
  }

  reg.DEVICE_RESET = 1;
 80010fa:	793b      	ldrb	r3, [r7, #4]
 80010fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001100:	713b      	strb	r3, [r7, #4]

  retval = icm20948_execute_w(AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	2006      	movs	r0, #6
 800110a:	f000 f841 	bl	8001190 <icm20948_execute_w>
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <icm20948_sw_reset+0x4c>
  {
    return retval;
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	e000      	b.n	800111e <icm20948_sw_reset+0x4e>
  }
  return retval;
 800111c:	79fb      	ldrb	r3, [r7, #7]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <icm20948_set_i2c_bus>:

  return 0;
}

void icm20948_set_i2c_bus(I2C_HandleTypeDef *bus)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	i2c_bus = *bus;
 8001130:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <icm20948_set_i2c_bus+0x20>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	2354      	movs	r3, #84	@ 0x54
 800113a:	461a      	mov	r2, r3
 800113c:	f008 fe94 	bl	8009e68 <memcpy>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000a4 	.word	0x200000a4

0800114c <icm20948_execute_r>:

  return 0;
}

ICM_20948_Status_e icm20948_execute_r(uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af04      	add	r7, sp, #16
 8001152:	4603      	mov	r3, r0
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Read(&i2c_bus, ICM_20948_I2C_ADDR, regaddr, I2C_MEMADD_SIZE_8BIT, pdata, len, 1000))
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	b29b      	uxth	r3, r3
 8001162:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001166:	9102      	str	r1, [sp, #8]
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	21d0      	movs	r1, #208	@ 0xd0
 8001172:	4806      	ldr	r0, [pc, #24]	@ (800118c <icm20948_execute_r+0x40>)
 8001174:	f003 fa8c 	bl	8004690 <HAL_I2C_Mem_Read>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <icm20948_execute_r+0x36>
		return ICM_20948_Stat_Err;
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <icm20948_execute_r+0x38>
	return ICM_20948_Stat_Ok;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200000a4 	.word	0x200000a4

08001190 <icm20948_execute_w>:

ICM_20948_Status_e icm20948_execute_w(uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af04      	add	r7, sp, #16
 8001196:	4603      	mov	r3, r0
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&i2c_bus, ICM_20948_I2C_ADDR, regaddr, I2C_MEMADD_SIZE_8BIT, pdata, len, 1000))
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011aa:	9102      	str	r1, [sp, #8]
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	21d0      	movs	r1, #208	@ 0xd0
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <icm20948_execute_w+0x40>)
 80011b8:	f003 f956 	bl	8004468 <HAL_I2C_Mem_Write>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <icm20948_execute_w+0x36>
		return ICM_20948_Stat_Err;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <icm20948_execute_w+0x38>
	return ICM_20948_Stat_Ok;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200000a4 	.word	0x200000a4

080011d4 <icm20948_get_agmt>:

ICM_20948_Status_e icm20948_get_agmt(ICM_20948_AGMT_t *pagmt)
{
 80011d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011d8:	b089      	sub	sp, #36	@ 0x24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	466b      	mov	r3, sp
 80011e0:	461e      	mov	r6, r3
  if (pagmt == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <icm20948_get_agmt+0x18>
  {
    return ICM_20948_Stat_ParamErr;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e0f9      	b.n	80013e0 <icm20948_get_agmt+0x20c>
  }

  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80011ec:	2300      	movs	r3, #0
 80011ee:	77fb      	strb	r3, [r7, #31]
  const uint8_t numbytes = 14 + 9; //Read Accel, gyro, temp, and 9 bytes of mag
 80011f0:	2317      	movs	r3, #23
 80011f2:	77bb      	strb	r3, [r7, #30]
  uint8_t buff[numbytes];
 80011f4:	7fbb      	ldrb	r3, [r7, #30]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	7fbb      	ldrb	r3, [r7, #30]
 80011fc:	2200      	movs	r2, #0
 80011fe:	4698      	mov	r8, r3
 8001200:	4691      	mov	r9, r2
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800120e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001216:	7fbb      	ldrb	r3, [r7, #30]
 8001218:	2200      	movs	r2, #0
 800121a:	461c      	mov	r4, r3
 800121c:	4615      	mov	r5, r2
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	00eb      	lsls	r3, r5, #3
 8001228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800122c:	00e2      	lsls	r2, r4, #3
 800122e:	7fbb      	ldrb	r3, [r7, #30]
 8001230:	3307      	adds	r3, #7
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	ebad 0d03 	sub.w	sp, sp, r3
 800123a:	466b      	mov	r3, sp
 800123c:	3300      	adds	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  // Get readings
  retval |= icm20948_set_user_bank(0);
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fbc3 	bl	80009cc <icm20948_set_user_bank>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	7ffb      	ldrb	r3, [r7, #31]
 800124c:	4313      	orrs	r3, r2
 800124e:	77fb      	strb	r3, [r7, #31]
  retval |= icm20948_execute_r((uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
 8001250:	7fbb      	ldrb	r3, [r7, #30]
 8001252:	461a      	mov	r2, r3
 8001254:	6979      	ldr	r1, [r7, #20]
 8001256:	202d      	movs	r0, #45	@ 0x2d
 8001258:	f7ff ff78 	bl	800114c <icm20948_execute_r>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	7ffb      	ldrb	r3, [r7, #31]
 8001262:	4313      	orrs	r3, r2
 8001264:	77fb      	strb	r3, [r7, #31]

  pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21a      	sxth	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21a      	sxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	801a      	strh	r2, [r3, #0]
  pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	789b      	ldrb	r3, [r3, #2]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21a      	sxth	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b21a      	sxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	805a      	strh	r2, [r3, #2]
  pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	791b      	ldrb	r3, [r3, #4]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	795b      	ldrb	r3, [r3, #5]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	809a      	strh	r2, [r3, #4]

  pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	799b      	ldrb	r3, [r3, #6]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	79db      	ldrb	r3, [r3, #7]
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	80da      	strh	r2, [r3, #6]
  pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	7a1b      	ldrb	r3, [r3, #8]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	7a5b      	ldrb	r3, [r3, #9]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	811a      	strh	r2, [r3, #8]
  pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	7a9b      	ldrb	r3, [r3, #10]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	7adb      	ldrb	r3, [r3, #11]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	815a      	strh	r2, [r3, #10]

  pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	7b1b      	ldrb	r3, [r3, #12]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	7b5b      	ldrb	r3, [r3, #13]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	825a      	strh	r2, [r3, #18]

  pagmt->magStat1 = buff[14];
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	7b9a      	ldrb	r2, [r3, #14]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	755a      	strb	r2, [r3, #21]
  pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	7c1b      	ldrb	r3, [r3, #16]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	7bdb      	ldrb	r3, [r3, #15]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21a      	sxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	819a      	strh	r2, [r3, #12]
  pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	7c9b      	ldrb	r3, [r3, #18]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	7c5b      	ldrb	r3, [r3, #17]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21a      	sxth	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	81da      	strh	r2, [r3, #14]
  pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	7d1b      	ldrb	r3, [r3, #20]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21a      	sxth	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	7cdb      	ldrb	r3, [r3, #19]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21a      	sxth	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	821a      	strh	r2, [r3, #16]
  pagmt->magStat2 = buff[22];
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	7d9a      	ldrb	r2, [r3, #22]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	759a      	strb	r2, [r3, #22]

  // Get settings to be able to compute scaled values
  retval |= icm20948_set_user_bank(2);
 8001352:	2002      	movs	r0, #2
 8001354:	f7ff fb3a 	bl	80009cc <icm20948_set_user_bank>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	4313      	orrs	r3, r2
 8001360:	77fb      	strb	r3, [r7, #31]
  ICM_20948_ACCEL_CONFIG_t acfg;
  retval |= icm20948_execute_r((uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	2201      	movs	r2, #1
 8001368:	4619      	mov	r1, r3
 800136a:	2014      	movs	r0, #20
 800136c:	f7ff feee 	bl	800114c <icm20948_execute_r>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	4313      	orrs	r3, r2
 8001378:	77fb      	strb	r3, [r7, #31]
  pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
 800137a:	7c3b      	ldrb	r3, [r7, #16]
 800137c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001380:	b2d9      	uxtb	r1, r3
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	7d13      	ldrb	r3, [r2, #20]
 8001386:	f361 0301 	bfi	r3, r1, #0, #2
 800138a:	7513      	strb	r3, [r2, #20]
                                    // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
  retval |= icm20948_set_user_bank(2);
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff fb1d 	bl	80009cc <icm20948_set_user_bank>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	4313      	orrs	r3, r2
 800139a:	77fb      	strb	r3, [r7, #31]
  ICM_20948_GYRO_CONFIG_1_t gcfg1;
  retval |= icm20948_execute_r((uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2201      	movs	r2, #1
 80013a2:	4619      	mov	r1, r3
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff fed1 	bl	800114c <icm20948_execute_r>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	77fb      	strb	r3, [r7, #31]
  pagmt->fss.g = gcfg1.GYRO_FS_SEL;
 80013b4:	7b3b      	ldrb	r3, [r7, #12]
 80013b6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80013ba:	b2d9      	uxtb	r1, r3
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	7d13      	ldrb	r3, [r2, #20]
 80013c0:	f361 0383 	bfi	r3, r1, #2, #2
 80013c4:	7513      	strb	r3, [r2, #20]
  ICM_20948_ACCEL_CONFIG_2_t acfg2;
  retval |= icm20948_execute_r((uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2201      	movs	r2, #1
 80013cc:	4619      	mov	r1, r3
 80013ce:	2015      	movs	r0, #21
 80013d0:	f7ff febc 	bl	800114c <icm20948_execute_r>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	7ffb      	ldrb	r3, [r7, #31]
 80013da:	4313      	orrs	r3, r2
 80013dc:	77fb      	strb	r3, [r7, #31]

  return retval;
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	46b5      	mov	sp, r6
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013ec <icm20948_startup_magnetometer>:

ICM_20948_Status_e icm20948_startup_magnetometer(bool minimal)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af06      	add	r7, sp, #24
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73bb      	strb	r3, [r7, #14]

  icm20948_i2c_master_passthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f86a 	bl	80014d4 <icm20948_i2c_master_passthrough>
  icm20948_i2c_master_enable(true);
 8001400:	2001      	movs	r0, #1
 8001402:	f000 f89e 	bl	8001542 <icm20948_i2c_master_enable>

  icm20948_reset_magnetomter();
 8001406:	f000 f913 	bl	8001630 <icm20948_reset_magnetomter>

  //After a ICM reset the Mag sensor may stop responding over the I2C master
  //Reset the Master I2C until it responds
  uint8_t tries = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
  while (tries < MAX_MAGNETOMETER_STARTS)
 800140e:	e00e      	b.n	800142e <icm20948_startup_magnetometer+0x42>
  {
    tries++;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	3301      	adds	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]

    //See if we can read the WhoIAm register correctly
    retval = icm20948_mag_who_i_am();
 8001416:	f000 fa83 	bl	8001920 <icm20948_mag_who_i_am>
 800141a:	4603      	mov	r3, r0
 800141c:	73bb      	strb	r3, [r7, #14]
    if (retval == ICM_20948_Stat_Ok)
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d008      	beq.n	8001436 <icm20948_startup_magnetometer+0x4a>
      break; //WIA matched!

    icm20948_i2c_master_reset(); //Otherwise, reset the master I2C and try again
 8001424:	f000 fa49 	bl	80018ba <icm20948_i2c_master_reset>

    HAL_Delay(10);
 8001428:	200a      	movs	r0, #10
 800142a:	f000 fffc 	bl	8002426 <HAL_Delay>
  while (tries < MAX_MAGNETOMETER_STARTS)
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d9ed      	bls.n	8001410 <icm20948_startup_magnetometer+0x24>
 8001434:	e000      	b.n	8001438 <icm20948_startup_magnetometer+0x4c>
      break; //WIA matched!
 8001436:	bf00      	nop
  }

  if (tries == MAX_MAGNETOMETER_STARTS)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d105      	bne.n	800144a <icm20948_startup_magnetometer+0x5e>
  {
    /*debugPrint(F("icm20948_startupMagnetometer: reached MAX_MAGNETOMETER_STARTS ("));
    debugPrintf((int)MAX_MAGNETOMETER_STARTS);
    debugPrintln(F("). Returning ICM_20948_Stat_WrongID"));*/
    status = ICM_20948_Stat_WrongID;
 800143e:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <icm20948_startup_magnetometer+0xe4>)
 8001440:	2204      	movs	r2, #4
 8001442:	701a      	strb	r2, [r3, #0]
    return status;
 8001444:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <icm20948_startup_magnetometer+0xe4>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	e03e      	b.n	80014c8 <icm20948_startup_magnetometer+0xdc>
    else
      debugPrintln(F(" tries"));
  }*/

  //Return now if minimal is true. The mag will be configured manually for the DMP
  if (minimal) // Return now if minimal is true
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <icm20948_startup_magnetometer+0x6a>
  {
    //debugPrintln(F("icm20948_startupMagnetometer: minimal startup complete!"));
    return status;
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <icm20948_startup_magnetometer+0xe4>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	e038      	b.n	80014c8 <icm20948_startup_magnetometer+0xdc>
  }

  //Set up magnetometer
  AK09916_CNTL2_Reg_t reg;
  reg.MODE = AK09916_mode_cont_100hz;
 8001456:	7b3b      	ldrb	r3, [r7, #12]
 8001458:	2208      	movs	r2, #8
 800145a:	f362 0304 	bfi	r3, r2, #0, #5
 800145e:	733b      	strb	r3, [r7, #12]
  reg.reserved_0 = 0; // Make sure the unused bits are clear. Probably redundant, but prevents confusion when looking at the I2C traffic
 8001460:	7b3b      	ldrb	r3, [r7, #12]
 8001462:	f36f 1347 	bfc	r3, #5, #3
 8001466:	733b      	strb	r3, [r7, #12]
  retval = icm20948_write_mag(AK09916_REG_CNTL2, (uint8_t *)&reg);
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	4619      	mov	r1, r3
 800146e:	2031      	movs	r0, #49	@ 0x31
 8001470:	f000 faa2 	bl	80019b8 <icm20948_write_mag>
 8001474:	4603      	mov	r3, r0
 8001476:	73bb      	strb	r3, [r7, #14]
  if (retval != ICM_20948_Stat_Ok)
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <icm20948_startup_magnetometer+0x9e>
  {
    /*debugPrint(F("icm20948_startupMagnetometer: writeMag returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 800147e:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <icm20948_startup_magnetometer+0xe4>)
 8001480:	7bbb      	ldrb	r3, [r7, #14]
 8001482:	7013      	strb	r3, [r2, #0]
    return status;
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <icm20948_startup_magnetometer+0xe4>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	e01e      	b.n	80014c8 <icm20948_startup_magnetometer+0xdc>
  }

  retval = icm20948_i2c_controller_configure_peripheral(0, MAG_AK09916_I2C_ADDR, AK09916_REG_ST1, 9, true, true, false, false, false, 0);
 800148a:	2300      	movs	r3, #0
 800148c:	9305      	str	r3, [sp, #20]
 800148e:	2300      	movs	r3, #0
 8001490:	9304      	str	r3, [sp, #16]
 8001492:	2300      	movs	r3, #0
 8001494:	9303      	str	r3, [sp, #12]
 8001496:	2300      	movs	r3, #0
 8001498:	9302      	str	r3, [sp, #8]
 800149a:	2301      	movs	r3, #1
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	2301      	movs	r3, #1
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2309      	movs	r3, #9
 80014a4:	2210      	movs	r2, #16
 80014a6:	210c      	movs	r1, #12
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fab5 	bl	8000a18 <icm20948_i2c_controller_configure_peripheral>
 80014ae:	4603      	mov	r3, r0
 80014b0:	73bb      	strb	r3, [r7, #14]
  if (retval != ICM_20948_Stat_Ok)
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <icm20948_startup_magnetometer+0xd8>
  {
    /*debugPrint(F("icm20948_startupMagnetometer: i2cMasterConfigurePeripheral returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 80014b8:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <icm20948_startup_magnetometer+0xe4>)
 80014ba:	7bbb      	ldrb	r3, [r7, #14]
 80014bc:	7013      	strb	r3, [r2, #0]
    return status;
 80014be:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <icm20948_startup_magnetometer+0xe4>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	e001      	b.n	80014c8 <icm20948_startup_magnetometer+0xdc>
  }

  return status;
 80014c4:	4b02      	ldr	r3, [pc, #8]	@ (80014d0 <icm20948_startup_magnetometer+0xe4>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200000f8 	.word	0x200000f8

080014d4 <icm20948_i2c_master_passthrough>:

ICM_20948_Status_e icm20948_i2c_master_passthrough(bool passthrough)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]

  ICM_20948_INT_PIN_CFG_t reg;
  retval = icm20948_set_user_bank(0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fa72 	bl	80009cc <icm20948_set_user_bank>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <icm20948_i2c_master_passthrough+0x22>
  {
    return retval;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	e021      	b.n	800153a <icm20948_i2c_master_passthrough+0x66>
  }
  retval = icm20948_execute_r(AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	2201      	movs	r2, #1
 80014fc:	4619      	mov	r1, r3
 80014fe:	200f      	movs	r0, #15
 8001500:	f7ff fe24 	bl	800114c <icm20948_execute_r>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <icm20948_i2c_master_passthrough+0x3e>
  {
    return retval;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	e013      	b.n	800153a <icm20948_i2c_master_passthrough+0x66>
  }
  reg.BYPASS_EN = passthrough;
 8001512:	7b3b      	ldrb	r3, [r7, #12]
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	f362 0341 	bfi	r3, r2, #1, #1
 800151a:	733b      	strb	r3, [r7, #12]
  retval = icm20948_execute_w(AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2201      	movs	r2, #1
 8001522:	4619      	mov	r1, r3
 8001524:	200f      	movs	r0, #15
 8001526:	f7ff fe33 	bl	8001190 <icm20948_execute_w>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <icm20948_i2c_master_passthrough+0x64>
  {
    return retval;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	e000      	b.n	800153a <icm20948_i2c_master_passthrough+0x66>
  }

  return retval;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <icm20948_i2c_master_enable>:

ICM_20948_Status_e icm20948_i2c_master_enable(bool enable)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b084      	sub	sp, #16
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]

  // Disable BYPASS_EN
  retval = icm20948_i2c_master_passthrough(false);
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ffbf 	bl	80014d4 <icm20948_i2c_master_passthrough>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <icm20948_i2c_master_enable+0x22>
  {
    return retval;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	e061      	b.n	8001628 <icm20948_i2c_master_enable+0xe6>
  }

  ICM_20948_I2C_MST_CTRL_t ctrl;
  retval = icm20948_set_user_bank(3);
 8001564:	2003      	movs	r0, #3
 8001566:	f7ff fa31 	bl	80009cc <icm20948_set_user_bank>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <icm20948_i2c_master_enable+0x36>
  {
    return retval;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	e057      	b.n	8001628 <icm20948_i2c_master_enable+0xe6>
  }
  retval = icm20948_execute_r(AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff fde3 	bl	800114c <icm20948_execute_r>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <icm20948_i2c_master_enable+0x52>
  {
    return retval;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	e049      	b.n	8001628 <icm20948_i2c_master_enable+0xe6>
  }
  ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	2207      	movs	r2, #7
 8001598:	f362 0303 	bfi	r3, r2, #0, #4
 800159c:	733b      	strb	r3, [r7, #12]
  ctrl.I2C_MST_P_NSR = 1;
 800159e:	7b3b      	ldrb	r3, [r7, #12]
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	733b      	strb	r3, [r7, #12]
  retval = icm20948_execute_w(AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2201      	movs	r2, #1
 80015ac:	4619      	mov	r1, r3
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff fdee 	bl	8001190 <icm20948_execute_w>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <icm20948_i2c_master_enable+0x80>
  {
    return retval;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	e032      	b.n	8001628 <icm20948_i2c_master_enable+0xe6>
  }

  ICM_20948_USER_CTRL_t reg;
  retval = icm20948_set_user_bank(0);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff fa02 	bl	80009cc <icm20948_set_user_bank>
 80015c8:	4603      	mov	r3, r0
 80015ca:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <icm20948_i2c_master_enable+0x94>
  {
    return retval;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	e028      	b.n	8001628 <icm20948_i2c_master_enable+0xe6>
  }
  retval = icm20948_execute_r(AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	2201      	movs	r2, #1
 80015dc:	4619      	mov	r1, r3
 80015de:	2003      	movs	r0, #3
 80015e0:	f7ff fdb4 	bl	800114c <icm20948_execute_r>
 80015e4:	4603      	mov	r3, r0
 80015e6:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <icm20948_i2c_master_enable+0xb0>
  {
    return retval;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	e01a      	b.n	8001628 <icm20948_i2c_master_enable+0xe6>
  }
  if (enable)
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d004      	beq.n	8001602 <icm20948_i2c_master_enable+0xc0>
  {
    reg.I2C_MST_EN = 1;
 80015f8:	7a3b      	ldrb	r3, [r7, #8]
 80015fa:	f043 0320 	orr.w	r3, r3, #32
 80015fe:	723b      	strb	r3, [r7, #8]
 8001600:	e003      	b.n	800160a <icm20948_i2c_master_enable+0xc8>
  }
  else
  {
    reg.I2C_MST_EN = 0;
 8001602:	7a3b      	ldrb	r3, [r7, #8]
 8001604:	f36f 1345 	bfc	r3, #5, #1
 8001608:	723b      	strb	r3, [r7, #8]
  }
  retval = icm20948_execute_w(AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2201      	movs	r2, #1
 8001610:	4619      	mov	r1, r3
 8001612:	2003      	movs	r0, #3
 8001614:	f7ff fdbc 	bl	8001190 <icm20948_execute_w>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <icm20948_i2c_master_enable+0xe4>
  {
    return retval;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	e000      	b.n	8001628 <icm20948_i2c_master_enable+0xe6>
  }

  return retval;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <icm20948_reset_magnetomter>:


ICM_20948_Status_e icm20948_reset_magnetomter()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
  uint8_t SRST = 1;
 8001636:	2301      	movs	r3, #1
 8001638:	71fb      	strb	r3, [r7, #7]
  // SRST: Soft reset
  // “0”: Normal
  // “1”: Reset
  // When “1” is set, all registers are initialized. After reset, SRST bit turns to “0” automatically.
  status = icm20948_i2c_master_single_w(MAG_AK09916_I2C_ADDR, AK09916_REG_CNTL3, &SRST);
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	461a      	mov	r2, r3
 800163e:	2132      	movs	r1, #50	@ 0x32
 8001640:	200c      	movs	r0, #12
 8001642:	f000 f80d 	bl	8001660 <icm20948_i2c_master_single_w>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	4b04      	ldr	r3, [pc, #16]	@ (800165c <icm20948_reset_magnetomter+0x2c>)
 800164c:	701a      	strb	r2, [r3, #0]
  return status;
 800164e:	4b03      	ldr	r3, [pc, #12]	@ (800165c <icm20948_reset_magnetomter+0x2c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000f8 	.word	0x200000f8

08001660 <icm20948_i2c_master_single_w>:


ICM_20948_Status_e icm20948_i2c_master_single_w(uint8_t addr, uint8_t reg, uint8_t *data)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af02      	add	r7, sp, #8
 8001666:	4603      	mov	r3, r0
 8001668:	603a      	str	r2, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	460b      	mov	r3, r1
 800166e:	71bb      	strb	r3, [r7, #6]
  return icm20948_i2c_controller_periph4_txn(addr, reg, data, 1, false, true);
 8001670:	79b9      	ldrb	r1, [r7, #6]
 8001672:	79f8      	ldrb	r0, [r7, #7]
 8001674:	2301      	movs	r3, #1
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	f000 f81c 	bl	80016bc <icm20948_i2c_controller_periph4_txn>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <icm20948_i2c_master_single_r>:


ICM_20948_Status_e icm20948_i2c_master_single_r(uint8_t addr, uint8_t reg, uint8_t *data)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af02      	add	r7, sp, #8
 8001694:	4603      	mov	r3, r0
 8001696:	603a      	str	r2, [r7, #0]
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	460b      	mov	r3, r1
 800169c:	71bb      	strb	r3, [r7, #6]
  return icm20948_i2c_controller_periph4_txn(addr, reg, data, 1, true, true);
 800169e:	79b9      	ldrb	r1, [r7, #6]
 80016a0:	79f8      	ldrb	r0, [r7, #7]
 80016a2:	2301      	movs	r3, #1
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	2301      	movs	r3, #1
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	f000 f805 	bl	80016bc <icm20948_i2c_controller_periph4_txn>
 80016b2:	4603      	mov	r3, r0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <icm20948_i2c_controller_periph4_txn>:


ICM_20948_Status_e icm20948_i2c_controller_periph4_txn(uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	603a      	str	r2, [r7, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	460b      	mov	r3, r1
 80016cc:	71bb      	strb	r3, [r7, #6]
 80016ce:	4613      	mov	r3, r2
 80016d0:	717b      	strb	r3, [r7, #5]
  // Thanks MikeFair! // https://github.com/kriswiner/MPU9250/issues/86
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80016d2:	2300      	movs	r3, #0
 80016d4:	77fb      	strb	r3, [r7, #31]

  addr = (((Rw) ? 0x80 : 0x00) | addr);
 80016d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <icm20948_i2c_controller_periph4_txn+0x28>
 80016de:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80016e2:	e000      	b.n	80016e6 <icm20948_i2c_controller_periph4_txn+0x2a>
 80016e4:	2200      	movs	r2, #0
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	71fb      	strb	r3, [r7, #7]

  retval = icm20948_set_user_bank(3);
 80016f2:	2003      	movs	r0, #3
 80016f4:	f7ff f96a 	bl	80009cc <icm20948_set_user_bank>
 80016f8:	4603      	mov	r3, r0
 80016fa:	77fb      	strb	r3, [r7, #31]
  retval = icm20948_execute_w(AGB3_REG_I2C_PERIPH4_ADDR, (uint8_t *)&addr, 1);
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	2201      	movs	r2, #1
 8001700:	4619      	mov	r1, r3
 8001702:	2013      	movs	r0, #19
 8001704:	f7ff fd44 	bl	8001190 <icm20948_execute_w>
 8001708:	4603      	mov	r3, r0
 800170a:	77fb      	strb	r3, [r7, #31]
  if (retval != ICM_20948_Stat_Ok)
 800170c:	7ffb      	ldrb	r3, [r7, #31]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <icm20948_i2c_controller_periph4_txn+0x5a>
  {
    return retval;
 8001712:	7ffb      	ldrb	r3, [r7, #31]
 8001714:	e0cd      	b.n	80018b2 <icm20948_i2c_controller_periph4_txn+0x1f6>
  }

  retval = icm20948_set_user_bank(3);
 8001716:	2003      	movs	r0, #3
 8001718:	f7ff f958 	bl	80009cc <icm20948_set_user_bank>
 800171c:	4603      	mov	r3, r0
 800171e:	77fb      	strb	r3, [r7, #31]
  retval = icm20948_execute_w(AGB3_REG_I2C_PERIPH4_REG, (uint8_t *)&reg, 1);
 8001720:	1dbb      	adds	r3, r7, #6
 8001722:	2201      	movs	r2, #1
 8001724:	4619      	mov	r1, r3
 8001726:	2014      	movs	r0, #20
 8001728:	f7ff fd32 	bl	8001190 <icm20948_execute_w>
 800172c:	4603      	mov	r3, r0
 800172e:	77fb      	strb	r3, [r7, #31]
  if (retval != ICM_20948_Stat_Ok)
 8001730:	7ffb      	ldrb	r3, [r7, #31]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <icm20948_i2c_controller_periph4_txn+0x7e>
  {
    return retval;
 8001736:	7ffb      	ldrb	r3, [r7, #31]
 8001738:	e0bb      	b.n	80018b2 <icm20948_i2c_controller_periph4_txn+0x1f6>
  }

  ICM_20948_I2C_PERIPH4_CTRL_t ctrl;
  ctrl.EN = 1;
 800173a:	7b3b      	ldrb	r3, [r7, #12]
 800173c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001740:	733b      	strb	r3, [r7, #12]
  ctrl.INT_EN = false;
 8001742:	7b3b      	ldrb	r3, [r7, #12]
 8001744:	f36f 1386 	bfc	r3, #6, #1
 8001748:	733b      	strb	r3, [r7, #12]
  ctrl.DLY = 0;
 800174a:	7b3b      	ldrb	r3, [r7, #12]
 800174c:	f36f 0304 	bfc	r3, #0, #5
 8001750:	733b      	strb	r3, [r7, #12]
  ctrl.REG_DIS = !send_reg_addr;
 8001752:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001756:	f083 0301 	eor.w	r3, r3, #1
 800175a:	b2da      	uxtb	r2, r3
 800175c:	7b3b      	ldrb	r3, [r7, #12]
 800175e:	f362 1345 	bfi	r3, r2, #5, #1
 8001762:	733b      	strb	r3, [r7, #12]

  ICM_20948_I2C_MST_STATUS_t i2c_mst_status;
  bool txn_failed = false;
 8001764:	2300      	movs	r3, #0
 8001766:	77bb      	strb	r3, [r7, #30]
  uint16_t nByte = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	83bb      	strh	r3, [r7, #28]

  while (nByte < len)
 800176c:	e093      	b.n	8001896 <icm20948_i2c_controller_periph4_txn+0x1da>
  {
    if (!Rw)
 800176e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001772:	f083 0301 	eor.w	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <icm20948_i2c_controller_periph4_txn+0xe8>
    {
      retval = icm20948_set_user_bank(3);
 800177c:	2003      	movs	r0, #3
 800177e:	f7ff f925 	bl	80009cc <icm20948_set_user_bank>
 8001782:	4603      	mov	r3, r0
 8001784:	77fb      	strb	r3, [r7, #31]
      retval = icm20948_execute_w(AGB3_REG_I2C_PERIPH4_DO, (uint8_t *)&(data[nByte]), 1);
 8001786:	8bbb      	ldrh	r3, [r7, #28]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	2201      	movs	r2, #1
 800178e:	4619      	mov	r1, r3
 8001790:	2016      	movs	r0, #22
 8001792:	f7ff fcfd 	bl	8001190 <icm20948_execute_w>
 8001796:	4603      	mov	r3, r0
 8001798:	77fb      	strb	r3, [r7, #31]
      if (retval != ICM_20948_Stat_Ok)
 800179a:	7ffb      	ldrb	r3, [r7, #31]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <icm20948_i2c_controller_periph4_txn+0xe8>
      {
        return retval;
 80017a0:	7ffb      	ldrb	r3, [r7, #31]
 80017a2:	e086      	b.n	80018b2 <icm20948_i2c_controller_periph4_txn+0x1f6>
      }
    }

    // Kick off txn
    retval = icm20948_set_user_bank(3);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f7ff f911 	bl	80009cc <icm20948_set_user_bank>
 80017aa:	4603      	mov	r3, r0
 80017ac:	77fb      	strb	r3, [r7, #31]
    retval = icm20948_execute_w(AGB3_REG_I2C_PERIPH4_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_PERIPH4_CTRL_t));
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2201      	movs	r2, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	2015      	movs	r0, #21
 80017b8:	f7ff fcea 	bl	8001190 <icm20948_execute_w>
 80017bc:	4603      	mov	r3, r0
 80017be:	77fb      	strb	r3, [r7, #31]
    if (retval != ICM_20948_Stat_Ok)
 80017c0:	7ffb      	ldrb	r3, [r7, #31]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <icm20948_i2c_controller_periph4_txn+0x10e>
    {
      return retval;
 80017c6:	7ffb      	ldrb	r3, [r7, #31]
 80017c8:	e073      	b.n	80018b2 <icm20948_i2c_controller_periph4_txn+0x1f6>
    }

    // long tsTimeout = millis() + 3000;  // Emergency timeout for txn (hard coded to 3 secs)
    uint32_t max_cycles = 1000;
 80017ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ce:	613b      	str	r3, [r7, #16]
    uint32_t count = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
    bool peripheral4Done = false;
 80017d4:	2300      	movs	r3, #0
 80017d6:	75fb      	strb	r3, [r7, #23]
    while (!peripheral4Done)
 80017d8:	e027      	b.n	800182a <icm20948_i2c_controller_periph4_txn+0x16e>
    {
      retval = icm20948_set_user_bank(0);
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff f8f6 	bl	80009cc <icm20948_set_user_bank>
 80017e0:	4603      	mov	r3, r0
 80017e2:	77fb      	strb	r3, [r7, #31]
      retval = icm20948_execute_r(AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	2201      	movs	r2, #1
 80017ea:	4619      	mov	r1, r3
 80017ec:	2017      	movs	r0, #23
 80017ee:	f7ff fcad 	bl	800114c <icm20948_execute_r>
 80017f2:	4603      	mov	r3, r0
 80017f4:	77fb      	strb	r3, [r7, #31]

      peripheral4Done = (i2c_mst_status.I2C_PERIPH4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
 80017f6:	7a3b      	ldrb	r3, [r7, #8]
 80017f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bf14      	ite	ne
 8001802:	2301      	movne	r3, #1
 8001804:	2300      	moveq	r3, #0
 8001806:	75fb      	strb	r3, [r7, #23]
      peripheral4Done |= (count >= max_cycles);
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	69b9      	ldr	r1, [r7, #24]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4291      	cmp	r1, r2
 8001810:	bf2c      	ite	cs
 8001812:	2201      	movcs	r2, #1
 8001814:	2200      	movcc	r2, #0
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	4313      	orrs	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	75fb      	strb	r3, [r7, #23]
      count++;
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	3301      	adds	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
    while (!peripheral4Done)
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	f083 0301 	eor.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1d1      	bne.n	80017da <icm20948_i2c_controller_periph4_txn+0x11e>
    }
    txn_failed = (i2c_mst_status.I2C_PERIPH4_NACK /*| (millis() > tsTimeout) */);
 8001836:	7a3b      	ldrb	r3, [r7, #8]
 8001838:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	bf14      	ite	ne
 8001842:	2301      	movne	r3, #1
 8001844:	2300      	moveq	r3, #0
 8001846:	77bb      	strb	r3, [r7, #30]
    txn_failed |= (count >= max_cycles);
 8001848:	7fbb      	ldrb	r3, [r7, #30]
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4291      	cmp	r1, r2
 8001850:	bf2c      	ite	cs
 8001852:	2201      	movcs	r2, #1
 8001854:	2200      	movcc	r2, #0
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	4313      	orrs	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf14      	ite	ne
 800185e:	2301      	movne	r3, #1
 8001860:	2300      	moveq	r3, #0
 8001862:	77bb      	strb	r3, [r7, #30]
    if (txn_failed)
 8001864:	7fbb      	ldrb	r3, [r7, #30]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d11c      	bne.n	80018a4 <icm20948_i2c_controller_periph4_txn+0x1e8>
      break;

    if (Rw)
 800186a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00e      	beq.n	8001890 <icm20948_i2c_controller_periph4_txn+0x1d4>
    {
      retval = icm20948_set_user_bank(3);
 8001872:	2003      	movs	r0, #3
 8001874:	f7ff f8aa 	bl	80009cc <icm20948_set_user_bank>
 8001878:	4603      	mov	r3, r0
 800187a:	77fb      	strb	r3, [r7, #31]
      retval = icm20948_execute_r(AGB3_REG_I2C_PERIPH4_DI, &data[nByte], 1);
 800187c:	8bbb      	ldrh	r3, [r7, #28]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	4413      	add	r3, r2
 8001882:	2201      	movs	r2, #1
 8001884:	4619      	mov	r1, r3
 8001886:	2017      	movs	r0, #23
 8001888:	f7ff fc60 	bl	800114c <icm20948_execute_r>
 800188c:	4603      	mov	r3, r0
 800188e:	77fb      	strb	r3, [r7, #31]
    }

    nByte++;
 8001890:	8bbb      	ldrh	r3, [r7, #28]
 8001892:	3301      	adds	r3, #1
 8001894:	83bb      	strh	r3, [r7, #28]
  while (nByte < len)
 8001896:	797b      	ldrb	r3, [r7, #5]
 8001898:	b29b      	uxth	r3, r3
 800189a:	8bba      	ldrh	r2, [r7, #28]
 800189c:	429a      	cmp	r2, r3
 800189e:	f4ff af66 	bcc.w	800176e <icm20948_i2c_controller_periph4_txn+0xb2>
 80018a2:	e000      	b.n	80018a6 <icm20948_i2c_controller_periph4_txn+0x1ea>
      break;
 80018a4:	bf00      	nop
  }

  if (txn_failed)
 80018a6:	7fbb      	ldrb	r3, [r7, #30]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <icm20948_i2c_controller_periph4_txn+0x1f4>
  {
    //We often fail here if mag is stuck
    return ICM_20948_Stat_Err;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <icm20948_i2c_controller_periph4_txn+0x1f6>
  }

  return retval;
 80018b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <icm20948_i2c_master_reset>:


ICM_20948_Status_e icm20948_i2c_master_reset()
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80018c0:	2300      	movs	r3, #0
 80018c2:	71fb      	strb	r3, [r7, #7]

  ICM_20948_USER_CTRL_t ctrl;
  retval = icm20948_set_user_bank(0);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff f881 	bl	80009cc <icm20948_set_user_bank>
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <icm20948_i2c_master_reset+0x1e>
  {
    return retval;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	e01e      	b.n	8001916 <icm20948_i2c_master_reset+0x5c>
  }

  retval = icm20948_execute_r(AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2201      	movs	r2, #1
 80018dc:	4619      	mov	r1, r3
 80018de:	2003      	movs	r0, #3
 80018e0:	f7ff fc34 	bl	800114c <icm20948_execute_r>
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <icm20948_i2c_master_reset+0x38>
  {
    return retval;
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	e011      	b.n	8001916 <icm20948_i2c_master_reset+0x5c>
  }

  ctrl.I2C_MST_RST = 1; //Reset!
 80018f2:	793b      	ldrb	r3, [r7, #4]
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	713b      	strb	r3, [r7, #4]

  retval = icm20948_execute_w(AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2201      	movs	r2, #1
 80018fe:	4619      	mov	r1, r3
 8001900:	2003      	movs	r0, #3
 8001902:	f7ff fc45 	bl	8001190 <icm20948_execute_w>
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <icm20948_i2c_master_reset+0x5a>
  {
    return retval;
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	e000      	b.n	8001916 <icm20948_i2c_master_reset+0x5c>
  }
  return retval;
 8001914:	79fb      	ldrb	r3, [r7, #7]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <icm20948_mag_who_i_am>:

ICM_20948_Status_e icm20948_mag_who_i_am(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8001926:	2300      	movs	r3, #0
 8001928:	71fb      	strb	r3, [r7, #7]

  uint8_t whoiam1, whoiam2;
  whoiam1 = icm20948_read_mag(AK09916_REG_WIA1);
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f832 	bl	8001994 <icm20948_read_mag>
 8001930:	4603      	mov	r3, r0
 8001932:	71bb      	strb	r3, [r7, #6]
  // readMag calls i2cMasterSingleR which calls ICM_20948_i2c_master_single_r
  // i2cMasterSingleR updates status so it is OK to set retval to status here
  retval = status;
 8001934:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <icm20948_mag_who_i_am+0x70>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <icm20948_mag_who_i_am+0x24>
    /*debugPrint(F("icm20948_magWhoIAm: whoiam1: "));
    debugPrintf((int)whoiam1);
    debugPrint(F(" (should be 72) readMag set status to: "));
    debugPrintStatus(status);
    debugPrintln(F(""));*/
    return retval;
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	e021      	b.n	8001988 <icm20948_mag_who_i_am+0x68>
  }
  whoiam2 = icm20948_read_mag(AK09916_REG_WIA2);
 8001944:	2001      	movs	r0, #1
 8001946:	f000 f825 	bl	8001994 <icm20948_read_mag>
 800194a:	4603      	mov	r3, r0
 800194c:	717b      	strb	r3, [r7, #5]
  // readMag calls i2cMasterSingleR which calls ICM_20948_i2c_master_single_r
  // i2cMasterSingleR updates status so it is OK to set retval to status here
  retval = status;
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <icm20948_mag_who_i_am+0x70>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <icm20948_mag_who_i_am+0x3e>
    debugPrint(F(" (should be 72) whoiam2: "));
    debugPrintf((int)whoiam2);
    debugPrint(F(" (should be 9) readMag set status to: "));
    debugPrintStatus(status);
    debugPrintln(F(""));*/
    return retval;
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	e014      	b.n	8001988 <icm20948_mag_who_i_am+0x68>
  }

  if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	2b48      	cmp	r3, #72	@ 0x48
 8001962:	d10a      	bne.n	800197a <icm20948_mag_who_i_am+0x5a>
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	2b09      	cmp	r3, #9
 8001968:	d107      	bne.n	800197a <icm20948_mag_who_i_am+0x5a>
  {
    retval = ICM_20948_Stat_Ok;
 800196a:	2300      	movs	r3, #0
 800196c:	71fb      	strb	r3, [r7, #7]
    status = retval;
 800196e:	4a08      	ldr	r2, [pc, #32]	@ (8001990 <icm20948_mag_who_i_am+0x70>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	7013      	strb	r3, [r2, #0]
    return status;
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <icm20948_mag_who_i_am+0x70>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	e006      	b.n	8001988 <icm20948_mag_who_i_am+0x68>
  debugPrintf((int)whoiam1);
  debugPrint(F(" (should be 72) whoiam2: "));
  debugPrintf((int)whoiam2);
  debugPrintln(F(" (should be 9). Returning ICM_20948_Stat_WrongID"));*/

  retval = ICM_20948_Stat_WrongID;
 800197a:	2304      	movs	r3, #4
 800197c:	71fb      	strb	r3, [r7, #7]
  status = retval;
 800197e:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <icm20948_mag_who_i_am+0x70>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	7013      	strb	r3, [r2, #0]
  return status;
 8001984:	4b02      	ldr	r3, [pc, #8]	@ (8001990 <icm20948_mag_who_i_am+0x70>)
 8001986:	781b      	ldrb	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200000f8 	.word	0x200000f8

08001994 <icm20948_read_mag>:


uint8_t icm20948_read_mag(AK09916_Reg_Addr_e reg)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  icm20948_i2c_master_single_r(MAG_AK09916_I2C_ADDR, reg, &data); // i2cMasterSingleR updates status too
 800199e:	f107 020f 	add.w	r2, r7, #15
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	4619      	mov	r1, r3
 80019a6:	200c      	movs	r0, #12
 80019a8:	f7ff fe71 	bl	800168e <icm20948_i2c_master_single_r>
  return data;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <icm20948_write_mag>:


ICM_20948_Status_e icm20948_write_mag(AK09916_Reg_Addr_e reg, uint8_t *pdata)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
  status = icm20948_i2c_master_single_w(MAG_AK09916_I2C_ADDR, reg, pdata);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	200c      	movs	r0, #12
 80019cc:	f7ff fe48 	bl	8001660 <icm20948_i2c_master_single_w>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <icm20948_write_mag+0x2c>)
 80019d6:	701a      	strb	r2, [r3, #0]
  return status;
 80019d8:	4b02      	ldr	r3, [pc, #8]	@ (80019e4 <icm20948_write_mag+0x2c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200000f8 	.word	0x200000f8

080019e8 <icm20948_startup_default>:


ICM_20948_Status_e icm20948_startup_default(bool minimal)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
    debugPrintln(F(""));
    status = retval;
    return status;
  }*/

  retval = icm20948_sw_reset();
 80019f6:	f7ff fb6b 	bl	80010d0 <icm20948_sw_reset>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <icm20948_startup_default+0x28>
  {
    /*debugPrint(F("icm20948_startupDefault: swReset returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8001a04:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	7013      	strb	r3, [r2, #0]
    return status;
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	e08c      	b.n	8001b2a <icm20948_startup_default+0x142>
  }
  HAL_Delay(50);
 8001a10:	2032      	movs	r0, #50	@ 0x32
 8001a12:	f000 fd08 	bl	8002426 <HAL_Delay>

  retval = icm20948_sleep(false);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fadc 	bl	8000fd4 <icm20948_sleep>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <icm20948_startup_default+0x4a>
  {
    /*debugPrint(F("icm20948_startupDefault: sleep returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8001a26:	4a43      	ldr	r2, [pc, #268]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	7013      	strb	r3, [r2, #0]
    return status;
 8001a2c:	4b41      	ldr	r3, [pc, #260]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	e07b      	b.n	8001b2a <icm20948_startup_default+0x142>
  }

  retval = icm20948_low_power(false);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff fb08 	bl	8001048 <icm20948_low_power>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <icm20948_startup_default+0x66>
  {
    /*debugPrint(F("icm20948_startupDefault: lowPower returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8001a42:	4a3c      	ldr	r2, [pc, #240]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	7013      	strb	r3, [r2, #0]
    return status;
 8001a48:	4b3a      	ldr	r3, [pc, #232]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	e06d      	b.n	8001b2a <icm20948_startup_default+0x142>
  }

  retval = icm20948_startup_magnetometer(minimal); // Pass the minimal startup flag to startupMagnetometer
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fccb 	bl	80013ec <icm20948_startup_magnetometer>
 8001a56:	4603      	mov	r3, r0
 8001a58:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <icm20948_startup_default+0x84>
  {
    /*debugPrint(F("icm20948_startupDefault: startupMagnetometer returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8001a60:	4a34      	ldr	r2, [pc, #208]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	7013      	strb	r3, [r2, #0]
    return status;
 8001a66:	4b33      	ldr	r3, [pc, #204]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	e05e      	b.n	8001b2a <icm20948_startup_default+0x142>
  }

  if (minimal) // Return now if minimal is true
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <icm20948_startup_default+0x90>
  {
    //debugPrintln(F("icm20948_startupDefault: minimal startup complete!"));
    return status;
 8001a72:	4b30      	ldr	r3, [pc, #192]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	e058      	b.n	8001b2a <icm20948_startup_default+0x142>
  }

  retval = icm20948_set_sample_mode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous); // options: ICM_20948_Sample_Mode_Continuous or ICM_20948_Sample_Mode_Cycled
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	f7ff f898 	bl	8000bb0 <icm20948_set_sample_mode>
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <icm20948_startup_default+0xae>
  {
    /*debugPrint(F("icm20948_startupDefault: setSampleMode returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8001a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	7013      	strb	r3, [r2, #0]
    return status;
 8001a90:	4b28      	ldr	r3, [pc, #160]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	e049      	b.n	8001b2a <icm20948_startup_default+0x142>
  } // sensors: 	ICM_20948_Internal_Acc, ICM_20948_Internal_Gyr, ICM_20948_Internal_Mst

  ICM_20948_fss_t FSS;
  FSS.a = gpm2;   // (ICM_20948_ACCEL_CONFIG_FS_SEL_e)
 8001a96:	7b3b      	ldrb	r3, [r7, #12]
 8001a98:	f36f 0301 	bfc	r3, #0, #2
 8001a9c:	733b      	strb	r3, [r7, #12]
  FSS.g = dps250; // (ICM_20948_GYRO_CONFIG_1_FS_SEL_e)
 8001a9e:	7b3b      	ldrb	r3, [r7, #12]
 8001aa0:	f36f 0383 	bfc	r3, #2, #2
 8001aa4:	733b      	strb	r3, [r7, #12]
  retval = icm20948_set_full_scale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), FSS);
 8001aa6:	7b39      	ldrb	r1, [r7, #12]
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f7ff f8d7 	bl	8000c5c <icm20948_set_full_scale>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <icm20948_startup_default+0xdc>
  {
    /*debugPrint(F("icm20948_startupDefault: setFullScale returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	7013      	strb	r3, [r2, #0]
    return status;
 8001abe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	e032      	b.n	8001b2a <icm20948_startup_default+0x142>
  }

  ICM_20948_dlpcfg_t dlpcfg;
  dlpcfg.a = acc_d473bw_n499bw;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	723b      	strb	r3, [r7, #8]
  dlpcfg.g = gyr_d361bw4_n376bw5;
 8001ac8:	2307      	movs	r3, #7
 8001aca:	727b      	strb	r3, [r7, #9]
  retval = icm20948_set_dlpf_cfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), dlpcfg);
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	2003      	movs	r0, #3
 8001ad0:	f7ff f9e2 	bl	8000e98 <icm20948_set_dlpf_cfg>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <icm20948_startup_default+0x102>
  {
    /*debugPrint(F("icm20948_startupDefault: setDLPFcfg returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8001ade:	4a15      	ldr	r2, [pc, #84]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	7013      	strb	r3, [r2, #0]
    return status;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	e01f      	b.n	8001b2a <icm20948_startup_default+0x142>
  }

  retval = icm20948_enable_dlpf(ICM_20948_Internal_Acc, false);
 8001aea:	2100      	movs	r1, #0
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff f93f 	bl	8000d70 <icm20948_enable_dlpf>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <icm20948_startup_default+0x120>
  {
    /*debugPrint(F("icm20948_startupDefault: enableDLPF (Acc) returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	7013      	strb	r3, [r2, #0]
    return status;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	e010      	b.n	8001b2a <icm20948_startup_default+0x142>
  }

  retval = icm20948_enable_dlpf(ICM_20948_Internal_Gyr, false);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	f7ff f930 	bl	8000d70 <icm20948_enable_dlpf>
 8001b10:	4603      	mov	r3, r0
 8001b12:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <icm20948_startup_default+0x13e>
  {
    /*debugPrint(F("icm20948_startupDefault: enableDLPF (Gyr) returned: "));
    debugPrintStatus(retval);
    debugPrintln(F(""));*/
    status = retval;
 8001b1a:	4a06      	ldr	r2, [pc, #24]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	7013      	strb	r3, [r2, #0]
    return status;
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	e001      	b.n	8001b2a <icm20948_startup_default+0x142>
  }

  return status;
 8001b26:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <icm20948_startup_default+0x14c>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200000f8 	.word	0x200000f8

08001b38 <icm20948_mag_x>:


float icm20948_mag_x(ICM_20948_AGMT_t *agmt)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	return (((float)(agmt->mag.axes.x)) * 0.15);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4e:	ee17 0a90 	vmov	r0, s15
 8001b52:	f7fe fc81 	bl	8000458 <__aeabi_f2d>
 8001b56:	a30a      	add	r3, pc, #40	@ (adr r3, 8001b80 <icm20948_mag_x+0x48>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fcd4 	bl	8000508 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7fe fee0 	bl	800092c <__aeabi_d2f>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	ee07 3a90 	vmov	s15, r3
}
 8001b72:	eeb0 0a67 	vmov.f32	s0, s15
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	f3af 8000 	nop.w
 8001b80:	33333333 	.word	0x33333333
 8001b84:	3fc33333 	.word	0x3fc33333

08001b88 <icm20948_mag_y>:

float icm20948_mag_y(ICM_20948_AGMT_t *agmt)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	return (((float)(agmt->mag.axes.y)) * 0.15);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9e:	ee17 0a90 	vmov	r0, s15
 8001ba2:	f7fe fc59 	bl	8000458 <__aeabi_f2d>
 8001ba6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001bd0 <icm20948_mag_y+0x48>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fcac 	bl	8000508 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe feb8 	bl	800092c <__aeabi_d2f>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	ee07 3a90 	vmov	s15, r3
}
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	33333333 	.word	0x33333333
 8001bd4:	3fc33333 	.word	0x3fc33333

08001bd8 <icm20948_mag_z>:

float icm20948_mag_z(ICM_20948_AGMT_t *agmt)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	return (((float)(agmt->mag.axes.z)) * 0.15);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001be6:	ee07 3a90 	vmov	s15, r3
 8001bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bee:	ee17 0a90 	vmov	r0, s15
 8001bf2:	f7fe fc31 	bl	8000458 <__aeabi_f2d>
 8001bf6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001c20 <icm20948_mag_z+0x48>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fc84 	bl	8000508 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7fe fe90 	bl	800092c <__aeabi_d2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	ee07 3a90 	vmov	s15, r3
}
 8001c12:	eeb0 0a67 	vmov.f32	s0, s15
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	f3af 8000 	nop.w
 8001c20:	33333333 	.word	0x33333333
 8001c24:	3fc33333 	.word	0x3fc33333

08001c28 <icm20948_accel_x>:


float icm20948_accel_x(ICM_20948_AGMT_t *agmt)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return icm20948_get_accel_MG(agmt, agmt->acc.axes.x);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f82d 	bl	8001c98 <icm20948_get_accel_MG>
 8001c3e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c42:	eeb0 0a67 	vmov.f32	s0, s15
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <icm20948_accel_y>:

float icm20948_accel_y(ICM_20948_AGMT_t *agmt)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return icm20948_get_accel_MG(agmt, agmt->acc.axes.y);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f81b 	bl	8001c98 <icm20948_get_accel_MG>
 8001c62:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <icm20948_accel_z>:

float icm20948_accel_z(ICM_20948_AGMT_t *agmt)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return icm20948_get_accel_MG(agmt, agmt->acc.axes.z);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f809 	bl	8001c98 <icm20948_get_accel_MG>
 8001c86:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	0000      	movs	r0, r0
	...

08001c98 <icm20948_get_accel_MG>:

float icm20948_get_accel_MG(ICM_20948_AGMT_t *agmt, int16_t axis_val)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
  switch (agmt->fss.a)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7d1b      	ldrb	r3, [r3, #20]
 8001ca8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d866      	bhi.n	8001d80 <icm20948_get_accel_MG+0xe8>
 8001cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb8 <icm20948_get_accel_MG+0x20>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001cc9 	.word	0x08001cc9
 8001cbc:	08001cf7 	.word	0x08001cf7
 8001cc0:	08001d25 	.word	0x08001d25
 8001cc4:	08001d53 	.word	0x08001d53
  {
  case 0:
    return (((float)axis_val) / 16.384);
 8001cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd4:	ee17 0a90 	vmov	r0, s15
 8001cd8:	f7fe fbbe 	bl	8000458 <__aeabi_f2d>
 8001cdc:	a32e      	add	r3, pc, #184	@ (adr r3, 8001d98 <icm20948_get_accel_MG+0x100>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	f7fe fd3b 	bl	800075c <__aeabi_ddiv>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7fe fe1d 	bl	800092c <__aeabi_d2f>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	e046      	b.n	8001d84 <icm20948_get_accel_MG+0xec>
    break;
  case 1:
    return (((float)axis_val) / 8.192);
 8001cf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d02:	ee17 0a90 	vmov	r0, s15
 8001d06:	f7fe fba7 	bl	8000458 <__aeabi_f2d>
 8001d0a:	a325      	add	r3, pc, #148	@ (adr r3, 8001da0 <icm20948_get_accel_MG+0x108>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	f7fe fd24 	bl	800075c <__aeabi_ddiv>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe fe06 	bl	800092c <__aeabi_d2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	e02f      	b.n	8001d84 <icm20948_get_accel_MG+0xec>
    break;
  case 2:
    return (((float)axis_val) / 4.096);
 8001d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d30:	ee17 0a90 	vmov	r0, s15
 8001d34:	f7fe fb90 	bl	8000458 <__aeabi_f2d>
 8001d38:	a31b      	add	r3, pc, #108	@ (adr r3, 8001da8 <icm20948_get_accel_MG+0x110>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe fd0d 	bl	800075c <__aeabi_ddiv>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe fdef 	bl	800092c <__aeabi_d2f>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	e018      	b.n	8001d84 <icm20948_get_accel_MG+0xec>
    break;
  case 3:
    return (((float)axis_val) / 2.048);
 8001d52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5e:	ee17 0a90 	vmov	r0, s15
 8001d62:	f7fe fb79 	bl	8000458 <__aeabi_f2d>
 8001d66:	a312      	add	r3, pc, #72	@ (adr r3, 8001db0 <icm20948_get_accel_MG+0x118>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe fcf6 	bl	800075c <__aeabi_ddiv>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe fdd8 	bl	800092c <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	e001      	b.n	8001d84 <icm20948_get_accel_MG+0xec>
    break;
  default:
    return 0;
 8001d80:	f04f 0300 	mov.w	r3, #0
    break;
  }
}
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	f3af 8000 	nop.w
 8001d98:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d9c:	4030624d 	.word	0x4030624d
 8001da0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001da4:	4020624d 	.word	0x4020624d
 8001da8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001dac:	4010624d 	.word	0x4010624d
 8001db0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001db4:	4000624d 	.word	0x4000624d

08001db8 <icm20948_gyro_x>:

float icm20948_gyro_x(ICM_20948_AGMT_t *agmt)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return icm20948_get_gyro_DPS(agmt, agmt->gyr.axes.x);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f82d 	bl	8001e28 <icm20948_get_gyro_DPS>
 8001dce:	eef0 7a40 	vmov.f32	s15, s0
}
 8001dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <icm20948_gyro_y>:

float icm20948_gyro_y(ICM_20948_AGMT_t *agmt)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return icm20948_get_gyro_DPS(agmt, agmt->gyr.axes.y);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f81b 	bl	8001e28 <icm20948_get_gyro_DPS>
 8001df2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <icm20948_gyro_z>:

float icm20948_gyro_z(ICM_20948_AGMT_t *agmt)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return icm20948_get_gyro_DPS(agmt, agmt->gyr.axes.z);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f809 	bl	8001e28 <icm20948_get_gyro_DPS>
 8001e16:	eef0 7a40 	vmov.f32	s15, s0
}
 8001e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	0000      	movs	r0, r0
	...

08001e28 <icm20948_get_gyro_DPS>:

float icm20948_get_gyro_DPS(ICM_20948_AGMT_t *agmt, int16_t axis_val)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
  switch (agmt->fss.g)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7d1b      	ldrb	r3, [r3, #20]
 8001e38:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d850      	bhi.n	8001ee4 <icm20948_get_gyro_DPS+0xbc>
 8001e42:	a201      	add	r2, pc, #4	@ (adr r2, 8001e48 <icm20948_get_gyro_DPS+0x20>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e6f 	.word	0x08001e6f
 8001e50:	08001e85 	.word	0x08001e85
 8001e54:	08001eb5 	.word	0x08001eb5
  {
  case 0:
    return (((float)axis_val) / 131);
 8001e58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e64:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001f08 <icm20948_get_gyro_DPS+0xe0>
 8001e68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6c:	e03c      	b.n	8001ee8 <icm20948_get_gyro_DPS+0xc0>
    break;
  case 1:
    return (((float)axis_val) / 65.5);
 8001e6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7a:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001f0c <icm20948_get_gyro_DPS+0xe4>
 8001e7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e82:	e031      	b.n	8001ee8 <icm20948_get_gyro_DPS+0xc0>
    break;
  case 2:
    return (((float)axis_val) / 32.8);
 8001e84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e90:	ee17 0a90 	vmov	r0, s15
 8001e94:	f7fe fae0 	bl	8000458 <__aeabi_f2d>
 8001e98:	a317      	add	r3, pc, #92	@ (adr r3, 8001ef8 <icm20948_get_gyro_DPS+0xd0>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fc5d 	bl	800075c <__aeabi_ddiv>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe fd3f 	bl	800092c <__aeabi_d2f>
 8001eae:	ee07 0a90 	vmov	s15, r0
 8001eb2:	e019      	b.n	8001ee8 <icm20948_get_gyro_DPS+0xc0>
    break;
  case 3:
    return (((float)axis_val) / 16.4);
 8001eb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec0:	ee17 0a90 	vmov	r0, s15
 8001ec4:	f7fe fac8 	bl	8000458 <__aeabi_f2d>
 8001ec8:	a30d      	add	r3, pc, #52	@ (adr r3, 8001f00 <icm20948_get_gyro_DPS+0xd8>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fc45 	bl	800075c <__aeabi_ddiv>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe fd27 	bl	800092c <__aeabi_d2f>
 8001ede:	ee07 0a90 	vmov	s15, r0
 8001ee2:	e001      	b.n	8001ee8 <icm20948_get_gyro_DPS+0xc0>
    break;
  default:
    return 0;
 8001ee4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8001f10 <icm20948_get_gyro_DPS+0xe8>
    break;
  }
}
 8001ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	66666666 	.word	0x66666666
 8001efc:	40406666 	.word	0x40406666
 8001f00:	66666666 	.word	0x66666666
 8001f04:	40306666 	.word	0x40306666
 8001f08:	43030000 	.word	0x43030000
 8001f0c:	42830000 	.word	0x42830000
	...

08001f18 <icm20948_temp_celsius>:
	*bias = signedUnsigned32.signed32; // Convert from unsigned to signed with no cast ambiguity
	return status;
}

float icm20948_temp_celsius(ICM_20948_AGMT_t *agmt)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return (((float)agmt->tmp.val - 21) / 333.87) + 21;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2e:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8001f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f36:	ee17 0a90 	vmov	r0, s15
 8001f3a:	f7fe fa8d 	bl	8000458 <__aeabi_f2d>
 8001f3e:	a30f      	add	r3, pc, #60	@ (adr r3, 8001f7c <icm20948_temp_celsius+0x64>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fc0a 	bl	800075c <__aeabi_ddiv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <icm20948_temp_celsius+0x60>)
 8001f56:	f7fe f921 	bl	800019c <__adddf3>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7fe fce3 	bl	800092c <__aeabi_d2f>
 8001f66:	4603      	mov	r3, r0
 8001f68:	ee07 3a90 	vmov	s15, r3
}
 8001f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40350000 	.word	0x40350000
 8001f7c:	851eb852 	.word	0x851eb852
 8001f80:	4074ddeb 	.word	0x4074ddeb

08001f84 <icm20948_data_ready>:

ICM_20948_Status_e icm20948_data_ready()
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  ICM_20948_INT_STATUS_1_t reg;
  retval = icm20948_set_user_bank(0); // Must be in the right bank
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7fe fd1c 	bl	80009cc <icm20948_set_user_bank>
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <icm20948_data_ready+0x1e>
  {
    return retval;
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	e015      	b.n	8001fce <icm20948_data_ready+0x4a>
  }
  retval = icm20948_execute_r(AGB0_REG_INT_STATUS_1, (uint8_t *)&reg, sizeof(ICM_20948_INT_STATUS_1_t));
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	201a      	movs	r0, #26
 8001faa:	f7ff f8cf 	bl	800114c <icm20948_execute_r>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if (retval != ICM_20948_Stat_Ok)
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <icm20948_data_ready+0x38>
  {
    return retval;
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	e008      	b.n	8001fce <icm20948_data_ready+0x4a>
  }
  if (!reg.RAW_DATA_0_RDY_INT)
 8001fbc:	793b      	ldrb	r3, [r7, #4]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <icm20948_data_ready+0x48>
  {
    retval = ICM_20948_Stat_NoData;
 8001fc8:	2306      	movs	r3, #6
 8001fca:	71fb      	strb	r3, [r7, #7]
  }
  return retval;
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8001fde:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <APPD_EnableCPU2+0x5c>)
 8001fe0:	881a      	ldrh	r2, [r3, #0]
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <APPD_EnableCPU2+0x60>)
 8001fe4:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 8001fe6:	4b15      	ldr	r3, [pc, #84]	@ (800203c <APPD_EnableCPU2+0x64>)
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <APPD_EnableCPU2+0x60>)
 8001fec:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8001fee:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <APPD_EnableCPU2+0x68>)
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <APPD_EnableCPU2+0x60>)
 8001ff4:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <APPD_EnableCPU2+0x6c>)
 8001ff8:	881a      	ldrh	r2, [r3, #0]
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <APPD_EnableCPU2+0x60>)
 8001ffc:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <APPD_EnableCPU2+0x70>)
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <APPD_EnableCPU2+0x60>)
 8002004:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8002006:	4b11      	ldr	r3, [pc, #68]	@ (800204c <APPD_EnableCPU2+0x74>)
 8002008:	1d3c      	adds	r4, r7, #4
 800200a:	461d      	mov	r5, r3
 800200c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800200e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002010:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002014:	c403      	stmia	r4!, {r0, r1}
 8002016:	8022      	strh	r2, [r4, #0]
 8002018:	3402      	adds	r4, #2
 800201a:	0c13      	lsrs	r3, r2, #16
 800201c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800201e:	f006 fc8f 	bl	8008940 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4618      	mov	r0, r3
 8002026:	f005 ff20 	bl	8007e6a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800202a:	bf00      	nop
}
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	bdb0      	pop	{r4, r5, r7, pc}
 8002032:	bf00      	nop
 8002034:	20000008 	.word	0x20000008
 8002038:	200301e8 	.word	0x200301e8
 800203c:	2000000a 	.word	0x2000000a
 8002040:	2000000c 	.word	0x2000000c
 8002044:	2000000e 	.word	0x2000000e
 8002048:	20000010 	.word	0x20000010
 800204c:	08009e9c 	.word	0x08009e9c

08002050 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002058:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <LL_C2_PWR_SetPowerMode+0x28>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205e:	f023 0207 	bic.w	r2, r3, #7
 8002062:	4905      	ldr	r1, [pc, #20]	@ (8002078 <LL_C2_PWR_SetPowerMode+0x28>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	58000400 	.word	0x58000400

0800207c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <LL_EXTI_EnableIT_32_63+0x24>)
 8002086:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800208a:	4905      	ldr	r1, [pc, #20]	@ (80020a0 <LL_EXTI_EnableIT_32_63+0x24>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	58000800 	.word	0x58000800

080020a4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b0:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80020b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020be:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	cafecafe 	.word	0xcafecafe

080020e0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80020e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80020f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <LL_DBGMCU_GetDeviceID+0x18>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e0042000 	.word	0xe0042000

08002124 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <LL_DBGMCU_GetRevisionID+0x18>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	b29b      	uxth	r3, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e0042000 	.word	0xe0042000

08002140 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <LL_LPM_EnableSleep+0x1c>)
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <LL_LPM_EnableSleep+0x1c>)
 800214a:	f023 0304 	bic.w	r3, r3, #4
 800214e:	6113      	str	r3, [r2, #16]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	22ff      	movs	r2, #255	@ 0xff
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	22ca      	movs	r2, #202	@ 0xca
 8002186:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2253      	movs	r2, #83	@ 0x53
 800218c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 0207 	bic.w	r2, r3, #7
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <MX_APPE_Config+0x18>)
 80021c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021ca:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80021cc:	f000 f81d 	bl	800220a <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80021d0:	f000 f822 	bl	8002218 <Config_HSE>

  return;
 80021d4:	bf00      	nop
}
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	58004000 	.word	0x58004000

080021dc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80021e0:	f000 f82e 	bl	8002240 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80021e4:	f000 f844 	bl	8002270 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80021e8:	4903      	ldr	r1, [pc, #12]	@ (80021f8 <MX_APPE_Init+0x1c>)
 80021ea:	2000      	movs	r0, #0
 80021ec:	f000 fd92 	bl	8002d14 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80021f0:	f000 f84e 	bl	8002290 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80021f4:	bf00      	nop
}
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000022c 	.word	0x2000022c

080021fc <Init_Exti>:

void Init_Exti(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8002200:	2050      	movs	r0, #80	@ 0x50
 8002202:	f7ff ff3b 	bl	800207c <LL_EXTI_EnableIT_32_63>

  return;
 8002206:	bf00      	nop
}
 8002208:	bd80      	pop	{r7, pc}

0800220a <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800220e:	bf00      	nop
}
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800221e:	2000      	movs	r0, #0
 8002220:	f006 fc1a 	bl	8008a58 <OTP_Read>
 8002224:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	799b      	ldrb	r3, [r3, #6]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff37 	bl	80020a4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8002236:	bf00      	nop
 8002238:	bf00      	nop
}
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <System_Init>:

static void System_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  Init_Exti();
 8002244:	f7ff ffda 	bl	80021fc <Init_Exti>

  Init_Rtc();
 8002248:	f000 f802 	bl	8002250 <Init_Rtc>

  return;
 800224c:	bf00      	nop
}
 800224e:	bd80      	pop	{r7, pc}

08002250 <Init_Rtc>:

static void Init_Rtc(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002254:	4805      	ldr	r0, [pc, #20]	@ (800226c <Init_Rtc+0x1c>)
 8002256:	f7ff ff90 	bl	800217a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800225a:	2100      	movs	r1, #0
 800225c:	4803      	ldr	r0, [pc, #12]	@ (800226c <Init_Rtc+0x1c>)
 800225e:	f7ff ff9c 	bl	800219a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002262:	4802      	ldr	r0, [pc, #8]	@ (800226c <Init_Rtc+0x1c>)
 8002264:	f7ff ff7c 	bl	8002160 <LL_RTC_EnableWriteProtection>

  return;
 8002268:	bf00      	nop
}
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40002800 	.word	0x40002800

08002270 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002274:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002278:	f7ff ff32 	bl	80020e0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800227c:	f007 fb4c 	bl	8009918 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002280:	2004      	movs	r0, #4
 8002282:	f7ff fee5 	bl	8002050 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8002286:	f002 ff1d 	bl	80050c4 <HAL_PWREx_EnableSRAMRetention>

  return;
 800228a:	bf00      	nop
}
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8002296:	f006 f99d 	bl	80085d4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800229a:	4a11      	ldr	r2, [pc, #68]	@ (80022e0 <appe_Tl_Init+0x50>)
 800229c:	2100      	movs	r1, #0
 800229e:	2004      	movs	r0, #4
 80022a0:	f007 fc78 	bl	8009b94 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	@ (80022e4 <appe_Tl_Init+0x54>)
 80022a6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <appe_Tl_Init+0x58>)
 80022aa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80022ac:	463b      	mov	r3, r7
 80022ae:	4619      	mov	r1, r3
 80022b0:	480e      	ldr	r0, [pc, #56]	@ (80022ec <appe_Tl_Init+0x5c>)
 80022b2:	f006 f851 	bl	8008358 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <appe_Tl_Init+0x60>)
 80022b8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <appe_Tl_Init+0x64>)
 80022bc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <appe_Tl_Init+0x68>)
 80022c0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80022c2:	f240 533c 	movw	r3, #1340	@ 0x53c
 80022c6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80022c8:	f107 0308 	add.w	r3, r7, #8
 80022cc:	4618      	mov	r0, r3
 80022ce:	f006 fac3 	bl	8008858 <TL_MM_Init>

  TL_Enable();
 80022d2:	f006 f979 	bl	80085c8 <TL_Enable>

  return;
 80022d6:	bf00      	nop
}
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	08008391 	.word	0x08008391
 80022e4:	20030734 	.word	0x20030734
 80022e8:	080022fd 	.word	0x080022fd
 80022ec:	08002315 	.word	0x08002315
 80022f0:	2003094c 	.word	0x2003094c
 80022f4:	20030840 	.word	0x20030840
 80022f8:	200301f8 	.word	0x200301f8

080022fc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8002306:	bf00      	nop
}
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	330b      	adds	r3, #11
 8002322:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800232e:	2b07      	cmp	r3, #7
 8002330:	d81f      	bhi.n	8002372 <APPE_SysUserEvtRx+0x5e>
 8002332:	a201      	add	r2, pc, #4	@ (adr r2, 8002338 <APPE_SysUserEvtRx+0x24>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	08002359 	.word	0x08002359
 800233c:	0800236b 	.word	0x0800236b
 8002340:	08002373 	.word	0x08002373
 8002344:	08002373 	.word	0x08002373
 8002348:	08002373 	.word	0x08002373
 800234c:	08002373 	.word	0x08002373
 8002350:	08002373 	.word	0x08002373
 8002354:	08002373 	.word	0x08002373
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	4618      	mov	r0, r3
 800235e:	f005 fdb1 	bl	8007ec4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f81b 	bl	800239e <APPE_SysEvtReadyProcessing>
    break;
 8002368:	e004      	b.n	8002374 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f806 	bl	800237c <APPE_SysEvtError>
    break;
 8002370:	e000      	b.n	8002374 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8002372:	bf00      	nop
  }

  return;
 8002374:	bf00      	nop
}
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	330b      	adds	r3, #11
 800238a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3302      	adds	r3, #2
 8002390:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8002392:	bf00      	nop
}
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b08a      	sub	sp, #40	@ 0x28
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	330b      	adds	r3, #11
 80023c2:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3302      	adds	r3, #2
 80023c8:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d11d      	bne.n	800240e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80023d2:	f7ff fe01 	bl	8001fd8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80023d6:	230f      	movs	r3, #15
 80023d8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80023da:	237f      	movs	r3, #127	@ 0x7f
 80023dc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80023de:	f7ff fea1 	bl	8002124 <LL_DBGMCU_GetRevisionID>
 80023e2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80023ea:	f7ff fe8d 	bl	8002108 <LL_DBGMCU_GetDeviceID>
 80023ee:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80023f6:	f107 0308 	add.w	r3, r7, #8
 80023fa:	4618      	mov	r0, r3
 80023fc:	f005 fd4c 	bl	8007e98 <SHCI_C2_Config>

    APP_BLE_Init();
 8002400:	f006 fc34 	bl	8008c6c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002404:	2100      	movs	r1, #0
 8002406:	2001      	movs	r0, #1
 8002408:	f007 fa98 	bl	800993c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800240c:	e007      	b.n	800241e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d103      	bne.n	800241e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
  return;
 800241c:	bf00      	nop
 800241e:	bf00      	nop
}
 8002420:	3728      	adds	r7, #40	@ 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800242e:	f001 fb1d 	bl	8003a6c <HAL_GetTick>
 8002432:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800243e:	d00a      	beq.n	8002456 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002440:	f001 fb2c 	bl	8003a9c <HAL_GetTickFreq>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800244e:	e002      	b.n	8002456 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002450:	f7ff fe76 	bl	8002140 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8002454:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002456:	f001 fb09 	bl	8003a6c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	429a      	cmp	r2, r3
 8002464:	d8f4      	bhi.n	8002450 <HAL_Delay+0x2a>
  }
}
 8002466:	bf00      	nop
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002474:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002478:	f007 fa90 	bl	800999c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}

08002480 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002484:	bf00      	nop
}
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002498:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800249c:	f007 fa7e 	bl	800999c <UTIL_SEQ_Run>
  return;
 80024a0:	bf00      	nop
}
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80024b0:	2100      	movs	r1, #0
 80024b2:	2004      	movs	r0, #4
 80024b4:	f007 fb90 	bl	8009bd8 <UTIL_SEQ_SetTask>
  return;
 80024b8:	bf00      	nop
}
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80024c8:	2002      	movs	r0, #2
 80024ca:	f007 fbf1 	bl	8009cb0 <UTIL_SEQ_SetEvt>
  return;
 80024ce:	bf00      	nop
}
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80024de:	2002      	movs	r0, #2
 80024e0:	f007 fc06 	bl	8009cf0 <UTIL_SEQ_WaitEvt>
  return;
 80024e4:	bf00      	nop
}
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <LL_EXTI_EnableIT_0_31>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <LL_EXTI_EnableIT_0_31+0x24>)
 80024f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80024fa:	4905      	ldr	r1, [pc, #20]	@ (8002510 <LL_EXTI_EnableIT_0_31+0x24>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	58000800 	.word	0x58000800

08002514 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800251c:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4904      	ldr	r1, [pc, #16]	@ (8002534 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]

}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	58000800 	.word	0x58000800

08002538 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800253e:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <ReadRtcSsrValue+0x3c>)
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002542:	b29b      	uxth	r3, r3
 8002544:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002546:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <ReadRtcSsrValue+0x3c>)
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	b29b      	uxth	r3, r3
 800254c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800254e:	e005      	b.n	800255c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002554:	4b07      	ldr	r3, [pc, #28]	@ (8002574 <ReadRtcSsrValue+0x3c>)
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	b29b      	uxth	r3, r3
 800255a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d1f5      	bne.n	8002550 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002564:	683b      	ldr	r3, [r7, #0]
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40002800 	.word	0x40002800

08002578 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	460a      	mov	r2, r1
 8002582:	71fb      	strb	r3, [r7, #7]
 8002584:	4613      	mov	r3, r2
 8002586:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002588:	79ba      	ldrb	r2, [r7, #6]
 800258a:	491d      	ldr	r1, [pc, #116]	@ (8002600 <LinkTimerAfter+0x88>)
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	3315      	adds	r3, #21
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d009      	beq.n	80025b6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	4916      	ldr	r1, [pc, #88]	@ (8002600 <LinkTimerAfter+0x88>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	3314      	adds	r3, #20
 80025b2:	79fa      	ldrb	r2, [r7, #7]
 80025b4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80025b6:	79fa      	ldrb	r2, [r7, #7]
 80025b8:	4911      	ldr	r1, [pc, #68]	@ (8002600 <LinkTimerAfter+0x88>)
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	3315      	adds	r3, #21
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80025ca:	79fa      	ldrb	r2, [r7, #7]
 80025cc:	490c      	ldr	r1, [pc, #48]	@ (8002600 <LinkTimerAfter+0x88>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3314      	adds	r3, #20
 80025da:	79ba      	ldrb	r2, [r7, #6]
 80025dc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80025de:	79ba      	ldrb	r2, [r7, #6]
 80025e0:	4907      	ldr	r1, [pc, #28]	@ (8002600 <LinkTimerAfter+0x88>)
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	3315      	adds	r3, #21
 80025ee:	79fa      	ldrb	r2, [r7, #7]
 80025f0:	701a      	strb	r2, [r3, #0]

  return;
 80025f2:	bf00      	nop
}
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	200000fc 	.word	0x200000fc

08002604 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	460a      	mov	r2, r1
 800260e:	71fb      	strb	r3, [r7, #7]
 8002610:	4613      	mov	r3, r2
 8002612:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002614:	4b29      	ldr	r3, [pc, #164]	@ (80026bc <LinkTimerBefore+0xb8>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	79ba      	ldrb	r2, [r7, #6]
 800261c:	429a      	cmp	r2, r3
 800261e:	d032      	beq.n	8002686 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002620:	79ba      	ldrb	r2, [r7, #6]
 8002622:	4927      	ldr	r1, [pc, #156]	@ (80026c0 <LinkTimerBefore+0xbc>)
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	3314      	adds	r3, #20
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	4922      	ldr	r1, [pc, #136]	@ (80026c0 <LinkTimerBefore+0xbc>)
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	3315      	adds	r3, #21
 8002644:	79fa      	ldrb	r2, [r7, #7]
 8002646:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002648:	79fa      	ldrb	r2, [r7, #7]
 800264a:	491d      	ldr	r1, [pc, #116]	@ (80026c0 <LinkTimerBefore+0xbc>)
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	3315      	adds	r3, #21
 8002658:	79ba      	ldrb	r2, [r7, #6]
 800265a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800265c:	79fa      	ldrb	r2, [r7, #7]
 800265e:	4918      	ldr	r1, [pc, #96]	@ (80026c0 <LinkTimerBefore+0xbc>)
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	3314      	adds	r3, #20
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002670:	79ba      	ldrb	r2, [r7, #6]
 8002672:	4913      	ldr	r1, [pc, #76]	@ (80026c0 <LinkTimerBefore+0xbc>)
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	3314      	adds	r3, #20
 8002680:	79fa      	ldrb	r2, [r7, #7]
 8002682:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002684:	e014      	b.n	80026b0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002686:	79fa      	ldrb	r2, [r7, #7]
 8002688:	490d      	ldr	r1, [pc, #52]	@ (80026c0 <LinkTimerBefore+0xbc>)
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	3315      	adds	r3, #21
 8002696:	79ba      	ldrb	r2, [r7, #6]
 8002698:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800269a:	79ba      	ldrb	r2, [r7, #6]
 800269c:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <LinkTimerBefore+0xbc>)
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	3314      	adds	r3, #20
 80026aa:	79fa      	ldrb	r2, [r7, #7]
 80026ac:	701a      	strb	r2, [r3, #0]
  return;
 80026ae:	bf00      	nop
}
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2000018c 	.word	0x2000018c
 80026c0:	200000fc 	.word	0x200000fc

080026c4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002808 <linkTimer+0x144>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d118      	bne.n	800270a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80026d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002808 <linkTimer+0x144>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b4b      	ldr	r3, [pc, #300]	@ (800280c <linkTimer+0x148>)
 80026e0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80026e2:	4a49      	ldr	r2, [pc, #292]	@ (8002808 <linkTimer+0x144>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80026e8:	79fa      	ldrb	r2, [r7, #7]
 80026ea:	4949      	ldr	r1, [pc, #292]	@ (8002810 <linkTimer+0x14c>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	3315      	adds	r3, #21
 80026f8:	2206      	movs	r2, #6
 80026fa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80026fc:	4b45      	ldr	r3, [pc, #276]	@ (8002814 <linkTimer+0x150>)
 80026fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002702:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	81fb      	strh	r3, [r7, #14]
 8002708:	e078      	b.n	80027fc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800270a:	f000 f909 	bl	8002920 <ReturnTimeElapsed>
 800270e:	4603      	mov	r3, r0
 8002710:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002712:	79fa      	ldrb	r2, [r7, #7]
 8002714:	493e      	ldr	r1, [pc, #248]	@ (8002810 <linkTimer+0x14c>)
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	3308      	adds	r3, #8
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	89fb      	ldrh	r3, [r7, #14]
 8002726:	79fa      	ldrb	r2, [r7, #7]
 8002728:	4419      	add	r1, r3
 800272a:	4839      	ldr	r0, [pc, #228]	@ (8002810 <linkTimer+0x14c>)
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4403      	add	r3, r0
 8002736:	3308      	adds	r3, #8
 8002738:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800273a:	79fa      	ldrb	r2, [r7, #7]
 800273c:	4934      	ldr	r1, [pc, #208]	@ (8002810 <linkTimer+0x14c>)
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	3308      	adds	r3, #8
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800274e:	4b2e      	ldr	r3, [pc, #184]	@ (8002808 <linkTimer+0x144>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	4619      	mov	r1, r3
 8002756:	4a2e      	ldr	r2, [pc, #184]	@ (8002810 <linkTimer+0x14c>)
 8002758:	460b      	mov	r3, r1
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	440b      	add	r3, r1
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	3308      	adds	r3, #8
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	d337      	bcc.n	80027dc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800276c:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <linkTimer+0x144>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002772:	7b7a      	ldrb	r2, [r7, #13]
 8002774:	4926      	ldr	r1, [pc, #152]	@ (8002810 <linkTimer+0x14c>)
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	440b      	add	r3, r1
 8002780:	3315      	adds	r3, #21
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002786:	e013      	b.n	80027b0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002788:	7b7a      	ldrb	r2, [r7, #13]
 800278a:	4921      	ldr	r1, [pc, #132]	@ (8002810 <linkTimer+0x14c>)
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	3315      	adds	r3, #21
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800279c:	7b7a      	ldrb	r2, [r7, #13]
 800279e:	491c      	ldr	r1, [pc, #112]	@ (8002810 <linkTimer+0x14c>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	3315      	adds	r3, #21
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80027b0:	7b3b      	ldrb	r3, [r7, #12]
 80027b2:	2b06      	cmp	r3, #6
 80027b4:	d00b      	beq.n	80027ce <linkTimer+0x10a>
 80027b6:	7b3a      	ldrb	r2, [r7, #12]
 80027b8:	4915      	ldr	r1, [pc, #84]	@ (8002810 <linkTimer+0x14c>)
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	3308      	adds	r3, #8
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d2dc      	bcs.n	8002788 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80027ce:	7b7a      	ldrb	r2, [r7, #13]
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fecf 	bl	8002578 <LinkTimerAfter>
 80027da:	e00f      	b.n	80027fc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80027dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <linkTimer+0x144>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff0c 	bl	8002604 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80027ec:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <linkTimer+0x144>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <linkTimer+0x148>)
 80027f4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80027f6:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <linkTimer+0x144>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80027fc:	89fb      	ldrh	r3, [r7, #14]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000018c 	.word	0x2000018c
 800280c:	2000018d 	.word	0x2000018d
 8002810:	200000fc 	.word	0x200000fc
 8002814:	20000190 	.word	0x20000190

08002818 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	460a      	mov	r2, r1
 8002822:	71fb      	strb	r3, [r7, #7]
 8002824:	4613      	mov	r3, r2
 8002826:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002828:	4b39      	ldr	r3, [pc, #228]	@ (8002910 <UnlinkTimer+0xf8>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	79fa      	ldrb	r2, [r7, #7]
 8002830:	429a      	cmp	r2, r3
 8002832:	d111      	bne.n	8002858 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002834:	4b36      	ldr	r3, [pc, #216]	@ (8002910 <UnlinkTimer+0xf8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b36      	ldr	r3, [pc, #216]	@ (8002914 <UnlinkTimer+0xfc>)
 800283c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800283e:	79fa      	ldrb	r2, [r7, #7]
 8002840:	4935      	ldr	r1, [pc, #212]	@ (8002918 <UnlinkTimer+0x100>)
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	3315      	adds	r3, #21
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <UnlinkTimer+0xf8>)
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e03e      	b.n	80028d6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002858:	79fa      	ldrb	r2, [r7, #7]
 800285a:	492f      	ldr	r1, [pc, #188]	@ (8002918 <UnlinkTimer+0x100>)
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	3314      	adds	r3, #20
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800286c:	79fa      	ldrb	r2, [r7, #7]
 800286e:	492a      	ldr	r1, [pc, #168]	@ (8002918 <UnlinkTimer+0x100>)
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	3315      	adds	r3, #21
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002880:	79f9      	ldrb	r1, [r7, #7]
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	4824      	ldr	r0, [pc, #144]	@ (8002918 <UnlinkTimer+0x100>)
 8002886:	460b      	mov	r3, r1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	440b      	add	r3, r1
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4403      	add	r3, r0
 8002890:	3315      	adds	r3, #21
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b2d8      	uxtb	r0, r3
 8002896:	4920      	ldr	r1, [pc, #128]	@ (8002918 <UnlinkTimer+0x100>)
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	440b      	add	r3, r1
 80028a2:	3315      	adds	r3, #21
 80028a4:	4602      	mov	r2, r0
 80028a6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80028a8:	7bbb      	ldrb	r3, [r7, #14]
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d013      	beq.n	80028d6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80028ae:	79f9      	ldrb	r1, [r7, #7]
 80028b0:	7bba      	ldrb	r2, [r7, #14]
 80028b2:	4819      	ldr	r0, [pc, #100]	@ (8002918 <UnlinkTimer+0x100>)
 80028b4:	460b      	mov	r3, r1
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	440b      	add	r3, r1
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4403      	add	r3, r0
 80028be:	3314      	adds	r3, #20
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	b2d8      	uxtb	r0, r3
 80028c4:	4914      	ldr	r1, [pc, #80]	@ (8002918 <UnlinkTimer+0x100>)
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	3314      	adds	r3, #20
 80028d2:	4602      	mov	r2, r0
 80028d4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80028d6:	79fa      	ldrb	r2, [r7, #7]
 80028d8:	490f      	ldr	r1, [pc, #60]	@ (8002918 <UnlinkTimer+0x100>)
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	330c      	adds	r3, #12
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80028ea:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <UnlinkTimer+0xf8>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b06      	cmp	r3, #6
 80028f2:	d107      	bne.n	8002904 <UnlinkTimer+0xec>
 80028f4:	79bb      	ldrb	r3, [r7, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d104      	bne.n	8002904 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80028fa:	4b08      	ldr	r3, [pc, #32]	@ (800291c <UnlinkTimer+0x104>)
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002900:	601a      	str	r2, [r3, #0]
  }

  return;
 8002902:	bf00      	nop
 8002904:	bf00      	nop
}
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	2000018c 	.word	0x2000018c
 8002914:	2000018d 	.word	0x2000018d
 8002918:	200000fc 	.word	0x200000fc
 800291c:	20000190 	.word	0x20000190

08002920 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002926:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <ReturnTimeElapsed+0x70>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800292e:	d026      	beq.n	800297e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002930:	f7ff fe02 	bl	8002538 <ReadRtcSsrValue>
 8002934:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002936:	4b16      	ldr	r3, [pc, #88]	@ (8002990 <ReturnTimeElapsed+0x70>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	429a      	cmp	r2, r3
 800293e:	d805      	bhi.n	800294c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002940:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <ReturnTimeElapsed+0x70>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	e00a      	b.n	8002962 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <ReturnTimeElapsed+0x74>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002958:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <ReturnTimeElapsed+0x70>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	4413      	add	r3, r2
 8002960:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <ReturnTimeElapsed+0x78>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002970:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <ReturnTimeElapsed+0x7c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	40d3      	lsrs	r3, r2
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	e001      	b.n	8002982 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	b29b      	uxth	r3, r3
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000190 	.word	0x20000190
 8002994:	20000198 	.word	0x20000198
 8002998:	20000196 	.word	0x20000196
 800299c:	20000195 	.word	0x20000195

080029a0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d108      	bne.n	80029c2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80029b0:	f7ff fdc2 	bl	8002538 <ReadRtcSsrValue>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4a21      	ldr	r2, [pc, #132]	@ (8002a3c <RestartWakeupCounter+0x9c>)
 80029b8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80029ba:	2003      	movs	r0, #3
 80029bc:	f001 f9f7 	bl	8003dae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80029c0:	e039      	b.n	8002a36 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d803      	bhi.n	80029d0 <RestartWakeupCounter+0x30>
 80029c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a40 <RestartWakeupCounter+0xa0>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d002      	beq.n	80029d6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80029d6:	bf00      	nop
 80029d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <RestartWakeupCounter+0xa4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f8      	beq.n	80029d8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80029e6:	4b17      	ldr	r3, [pc, #92]	@ (8002a44 <RestartWakeupCounter+0xa4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <RestartWakeupCounter+0xa4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80029f6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <RestartWakeupCounter+0xa8>)
 80029fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80029fe:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002a00:	2003      	movs	r0, #3
 8002a02:	f001 f9e2 	bl	8003dca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002a06:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <RestartWakeupCounter+0xac>)
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	0c1b      	lsrs	r3, r3, #16
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	490e      	ldr	r1, [pc, #56]	@ (8002a4c <RestartWakeupCounter+0xac>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002a16:	f7ff fd8f 	bl	8002538 <ReadRtcSsrValue>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4a07      	ldr	r2, [pc, #28]	@ (8002a3c <RestartWakeupCounter+0x9c>)
 8002a1e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002a20:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <RestartWakeupCounter+0xa4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <RestartWakeupCounter+0xa4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a2e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002a30:	f3af 8000 	nop.w
  return ;
 8002a34:	bf00      	nop
}
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000190 	.word	0x20000190
 8002a40:	20000195 	.word	0x20000195
 8002a44:	2000022c 	.word	0x2000022c
 8002a48:	58000800 	.word	0x58000800
 8002a4c:	40002800 	.word	0x40002800

08002a50 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002a56:	4b45      	ldr	r3, [pc, #276]	@ (8002b6c <RescheduleTimerList+0x11c>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a62:	d107      	bne.n	8002a74 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002a64:	bf00      	nop
 8002a66:	4b42      	ldr	r3, [pc, #264]	@ (8002b70 <RescheduleTimerList+0x120>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f8      	bne.n	8002a66 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002a74:	4b3e      	ldr	r3, [pc, #248]	@ (8002b70 <RescheduleTimerList+0x120>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b70 <RescheduleTimerList+0x120>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a82:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002a84:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <RescheduleTimerList+0x124>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	493a      	ldr	r1, [pc, #232]	@ (8002b78 <RescheduleTimerList+0x128>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	440b      	add	r3, r1
 8002a98:	3308      	adds	r3, #8
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002a9e:	f7ff ff3f 	bl	8002920 <ReturnTimeElapsed>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d205      	bcs.n	8002aba <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002ab2:	4b32      	ldr	r3, [pc, #200]	@ (8002b7c <RescheduleTimerList+0x12c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e04d      	b.n	8002b56 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	4a30      	ldr	r2, [pc, #192]	@ (8002b80 <RescheduleTimerList+0x130>)
 8002abe:	8812      	ldrh	r2, [r2, #0]
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d906      	bls.n	8002ada <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002acc:	4b2c      	ldr	r3, [pc, #176]	@ (8002b80 <RescheduleTimerList+0x130>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b7c <RescheduleTimerList+0x12c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e03d      	b.n	8002b56 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002ae4:	4b25      	ldr	r3, [pc, #148]	@ (8002b7c <RescheduleTimerList+0x12c>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002aea:	e034      	b.n	8002b56 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	4922      	ldr	r1, [pc, #136]	@ (8002b78 <RescheduleTimerList+0x128>)
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3308      	adds	r3, #8
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d20a      	bcs.n	8002b1a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	491c      	ldr	r1, [pc, #112]	@ (8002b78 <RescheduleTimerList+0x128>)
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	3308      	adds	r3, #8
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e013      	b.n	8002b42 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	4916      	ldr	r1, [pc, #88]	@ (8002b78 <RescheduleTimerList+0x128>)
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	3308      	adds	r3, #8
 8002b2a:	6819      	ldr	r1, [r3, #0]
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	1ac9      	subs	r1, r1, r3
 8002b32:	4811      	ldr	r0, [pc, #68]	@ (8002b78 <RescheduleTimerList+0x128>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4403      	add	r3, r0
 8002b3e:	3308      	adds	r3, #8
 8002b40:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	490c      	ldr	r1, [pc, #48]	@ (8002b78 <RescheduleTimerList+0x128>)
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	3315      	adds	r3, #21
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2b06      	cmp	r3, #6
 8002b5a:	d1c7      	bne.n	8002aec <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002b5c:	89bb      	ldrh	r3, [r7, #12]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff1e 	bl	80029a0 <RestartWakeupCounter>

  return ;
 8002b64:	bf00      	nop
}
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40002800 	.word	0x40002800
 8002b70:	2000022c 	.word	0x2000022c
 8002b74:	2000018c 	.word	0x2000018c
 8002b78:	200000fc 	.word	0x200000fc
 8002b7c:	20000194 	.word	0x20000194
 8002b80:	2000019a 	.word	0x2000019a

08002b84 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	@ 0x28
 8002b88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8e:	617b      	str	r3, [r7, #20]
  return(result);
 8002b90:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002b94:	b672      	cpsid	i
}
 8002b96:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002b98:	4b59      	ldr	r3, [pc, #356]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	22ca      	movs	r2, #202	@ 0xca
 8002b9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ba0:	4b57      	ldr	r3, [pc, #348]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2253      	movs	r2, #83	@ 0x53
 8002ba6:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002ba8:	4b55      	ldr	r3, [pc, #340]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	4b54      	ldr	r3, [pc, #336]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002bb8:	4b52      	ldr	r3, [pc, #328]	@ (8002d04 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002bc0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002bc4:	4950      	ldr	r1, [pc, #320]	@ (8002d08 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d16e      	bne.n	8002cb8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002bda:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002bde:	494a      	ldr	r1, [pc, #296]	@ (8002d08 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002bee:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002bf2:	4945      	ldr	r1, [pc, #276]	@ (8002d08 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3310      	adds	r3, #16
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002c04:	4b41      	ldr	r3, [pc, #260]	@ (8002d0c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d04c      	beq.n	8002ca8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002c0e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002c12:	493d      	ldr	r1, [pc, #244]	@ (8002d08 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	330d      	adds	r3, #13
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d124      	bne.n	8002c72 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002c28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fdf2 	bl	8002818 <UnlinkTimer>
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f383 8810 	msr	PRIMASK, r3
}
 8002c3e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002c40:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002c44:	4930      	ldr	r1, [pc, #192]	@ (8002d08 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	3304      	adds	r3, #4
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f9b8 	bl	8002fd0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002c60:	4b27      	ldr	r3, [pc, #156]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	22ca      	movs	r2, #202	@ 0xca
 8002c66:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c68:	4b25      	ldr	r3, [pc, #148]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2253      	movs	r2, #83	@ 0x53
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c70:	e012      	b.n	8002c98 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f383 8810 	msr	PRIMASK, r3
}
 8002c7c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f920 	bl	8002ec8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002c88:	4b1d      	ldr	r3, [pc, #116]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	22ca      	movs	r2, #202	@ 0xca
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2253      	movs	r2, #83	@ 0x53
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002c98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	69b8      	ldr	r0, [r7, #24]
 8002ca2:	f000 fa1b 	bl	80030dc <HW_TS_RTC_Int_AppNot>
 8002ca6:	e022      	b.n	8002cee <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002ca8:	f7ff fed2 	bl	8002a50 <RescheduleTimerList>
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f383 8810 	msr	PRIMASK, r3
}
 8002cb6:	e01a      	b.n	8002cee <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002cb8:	bf00      	nop
 8002cba:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f8      	beq.n	8002cba <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002cd8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002cda:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002cdc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f383 8810 	msr	PRIMASK, r3
}
 8002cec:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002cee:	4b04      	ldr	r3, [pc, #16]	@ (8002d00 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	22ff      	movs	r2, #255	@ 0xff
 8002cf4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002cf6:	bf00      	nop
}
 8002cf8:	3728      	adds	r7, #40	@ 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000022c 	.word	0x2000022c
 8002d04:	2000018c 	.word	0x2000018c
 8002d08:	200000fc 	.word	0x200000fc
 8002d0c:	20000194 	.word	0x20000194
 8002d10:	58000800 	.word	0x58000800

08002d14 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d20:	4b5e      	ldr	r3, [pc, #376]	@ (8002e9c <HW_TS_Init+0x188>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	22ca      	movs	r2, #202	@ 0xca
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d28:	4b5c      	ldr	r3, [pc, #368]	@ (8002e9c <HW_TS_Init+0x188>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2253      	movs	r2, #83	@ 0x53
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d30:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea0 <HW_TS_Init+0x18c>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a5a      	ldr	r2, [pc, #360]	@ (8002ea0 <HW_TS_Init+0x18c>)
 8002d36:	f043 0320 	orr.w	r3, r3, #32
 8002d3a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002d3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ea0 <HW_TS_Init+0x18c>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f1c3 0304 	rsb	r3, r3, #4
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b55      	ldr	r3, [pc, #340]	@ (8002ea4 <HW_TS_Init+0x190>)
 8002d50:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002d52:	4b53      	ldr	r3, [pc, #332]	@ (8002ea0 <HW_TS_Init+0x18c>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d5a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002d5e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	fa92 f2a2 	rbit	r2, r2
 8002d66:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d101      	bne.n	8002d76 <HW_TS_Init+0x62>
  {
    return 32U;
 8002d72:	2220      	movs	r2, #32
 8002d74:	e003      	b.n	8002d7e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	fab2 f282 	clz	r2, r2
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	40d3      	lsrs	r3, r2
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4b48      	ldr	r3, [pc, #288]	@ (8002ea8 <HW_TS_Init+0x194>)
 8002d88:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002d8a:	4b45      	ldr	r3, [pc, #276]	@ (8002ea0 <HW_TS_Init+0x18c>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	4b44      	ldr	r3, [pc, #272]	@ (8002eac <HW_TS_Init+0x198>)
 8002d9c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002d9e:	4b43      	ldr	r3, [pc, #268]	@ (8002eac <HW_TS_Init+0x198>)
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	4a40      	ldr	r2, [pc, #256]	@ (8002ea8 <HW_TS_Init+0x194>)
 8002da6:	7812      	ldrb	r2, [r2, #0]
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002db0:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea4 <HW_TS_Init+0x190>)
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	40d3      	lsrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d904      	bls.n	8002dcc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb0 <HW_TS_Init+0x19c>)
 8002dc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	e003      	b.n	8002dd4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b37      	ldr	r3, [pc, #220]	@ (8002eb0 <HW_TS_Init+0x19c>)
 8002dd2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002dd4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002dd8:	f7ff fb9c 	bl	8002514 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002ddc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002de0:	f7ff fb84 	bl	80024ec <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d13d      	bne.n	8002e66 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002dea:	4b32      	ldr	r3, [pc, #200]	@ (8002eb4 <HW_TS_Init+0x1a0>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002df0:	4b31      	ldr	r3, [pc, #196]	@ (8002eb8 <HW_TS_Init+0x1a4>)
 8002df2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002df6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e00c      	b.n	8002e18 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002dfe:	7ffa      	ldrb	r2, [r7, #31]
 8002e00:	492e      	ldr	r1, [pc, #184]	@ (8002ebc <HW_TS_Init+0x1a8>)
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002e12:	7ffb      	ldrb	r3, [r7, #31]
 8002e14:	3301      	adds	r3, #1
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d9ef      	bls.n	8002dfe <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002e1e:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <HW_TS_Init+0x1ac>)
 8002e20:	2206      	movs	r2, #6
 8002e22:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002e24:	4b1d      	ldr	r3, [pc, #116]	@ (8002e9c <HW_TS_Init+0x188>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e9c <HW_TS_Init+0x188>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e32:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002e34:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <HW_TS_Init+0x188>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4b17      	ldr	r3, [pc, #92]	@ (8002e9c <HW_TS_Init+0x188>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002e44:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002e46:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec4 <HW_TS_Init+0x1b0>)
 8002e48:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e4c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002e4e:	2003      	movs	r0, #3
 8002e50:	f000 ffbb 	bl	8003dca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002e54:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <HW_TS_Init+0x188>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <HW_TS_Init+0x188>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	e009      	b.n	8002e7a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <HW_TS_Init+0x188>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002e74:	2003      	movs	r0, #3
 8002e76:	f000 ff9a 	bl	8003dae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002e7a:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <HW_TS_Init+0x188>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	22ff      	movs	r2, #255	@ 0xff
 8002e80:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002e82:	2200      	movs	r2, #0
 8002e84:	2103      	movs	r1, #3
 8002e86:	2003      	movs	r0, #3
 8002e88:	f000 ff4f 	bl	8003d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002e8c:	2003      	movs	r0, #3
 8002e8e:	f000 ff66 	bl	8003d5e <HAL_NVIC_EnableIRQ>

  return;
 8002e92:	bf00      	nop
}
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000022c 	.word	0x2000022c
 8002ea0:	40002800 	.word	0x40002800
 8002ea4:	20000195 	.word	0x20000195
 8002ea8:	20000196 	.word	0x20000196
 8002eac:	20000198 	.word	0x20000198
 8002eb0:	2000019a 	.word	0x2000019a
 8002eb4:	20000194 	.word	0x20000194
 8002eb8:	20000190 	.word	0x20000190
 8002ebc:	200000fc 	.word	0x200000fc
 8002ec0:	2000018c 	.word	0x2000018c
 8002ec4:	58000800 	.word	0x58000800

08002ec8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002eda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002edc:	b672      	cpsid	i
}
 8002ede:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002ee0:	2003      	movs	r0, #3
 8002ee2:	f000 ff4a 	bl	8003d7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ee6:	4b34      	ldr	r3, [pc, #208]	@ (8002fb8 <HW_TS_Stop+0xf0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	22ca      	movs	r2, #202	@ 0xca
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24
 8002eee:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <HW_TS_Stop+0xf0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2253      	movs	r2, #83	@ 0x53
 8002ef4:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002ef6:	79fa      	ldrb	r2, [r7, #7]
 8002ef8:	4930      	ldr	r1, [pc, #192]	@ (8002fbc <HW_TS_Stop+0xf4>)
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	440b      	add	r3, r1
 8002f04:	330c      	adds	r3, #12
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d142      	bne.n	8002f94 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fc80 	bl	8002818 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002f18:	4b29      	ldr	r3, [pc, #164]	@ (8002fc0 <HW_TS_Stop+0xf8>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	2b06      	cmp	r3, #6
 8002f22:	d12f      	bne.n	8002f84 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002f24:	4b27      	ldr	r3, [pc, #156]	@ (8002fc4 <HW_TS_Stop+0xfc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f30:	d107      	bne.n	8002f42 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002f32:	bf00      	nop
 8002f34:	4b20      	ldr	r3, [pc, #128]	@ (8002fb8 <HW_TS_Stop+0xf0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f8      	bne.n	8002f34 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002f42:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <HW_TS_Stop+0xf0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <HW_TS_Stop+0xf0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f50:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002f52:	bf00      	nop
 8002f54:	4b18      	ldr	r3, [pc, #96]	@ (8002fb8 <HW_TS_Stop+0xf0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f8      	beq.n	8002f54 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002f62:	4b15      	ldr	r3, [pc, #84]	@ (8002fb8 <HW_TS_Stop+0xf0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b13      	ldr	r3, [pc, #76]	@ (8002fb8 <HW_TS_Stop+0xf0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002f72:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002f74:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <HW_TS_Stop+0x100>)
 8002f76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f7a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f000 ff24 	bl	8003dca <HAL_NVIC_ClearPendingIRQ>
 8002f82:	e007      	b.n	8002f94 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002f84:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <HW_TS_Stop+0x104>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	7cfa      	ldrb	r2, [r7, #19]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002f90:	f7ff fd5e 	bl	8002a50 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002f94:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <HW_TS_Stop+0xf0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	22ff      	movs	r2, #255	@ 0xff
 8002f9a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f000 fede 	bl	8003d5e <HAL_NVIC_EnableIRQ>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f383 8810 	msr	PRIMASK, r3
}
 8002fac:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002fae:	bf00      	nop
}
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000022c 	.word	0x2000022c
 8002fbc:	200000fc 	.word	0x200000fc
 8002fc0:	2000018c 	.word	0x2000018c
 8002fc4:	40002800 	.word	0x40002800
 8002fc8:	58000800 	.word	0x58000800
 8002fcc:	2000018d 	.word	0x2000018d

08002fd0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002fdc:	79fa      	ldrb	r2, [r7, #7]
 8002fde:	493b      	ldr	r1, [pc, #236]	@ (80030cc <HW_TS_Start+0xfc>)
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	330c      	adds	r3, #12
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d103      	bne.n	8002ffc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff66 	bl	8002ec8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8003000:	60fb      	str	r3, [r7, #12]
  return(result);
 8003002:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003004:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003006:	b672      	cpsid	i
}
 8003008:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800300a:	2003      	movs	r0, #3
 800300c:	f000 feb5 	bl	8003d7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003010:	4b2f      	ldr	r3, [pc, #188]	@ (80030d0 <HW_TS_Start+0x100>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	22ca      	movs	r2, #202	@ 0xca
 8003016:	625a      	str	r2, [r3, #36]	@ 0x24
 8003018:	4b2d      	ldr	r3, [pc, #180]	@ (80030d0 <HW_TS_Start+0x100>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2253      	movs	r2, #83	@ 0x53
 800301e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003020:	79fa      	ldrb	r2, [r7, #7]
 8003022:	492a      	ldr	r1, [pc, #168]	@ (80030cc <HW_TS_Start+0xfc>)
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	440b      	add	r3, r1
 800302e:	330c      	adds	r3, #12
 8003030:	2202      	movs	r2, #2
 8003032:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003034:	79fa      	ldrb	r2, [r7, #7]
 8003036:	4925      	ldr	r1, [pc, #148]	@ (80030cc <HW_TS_Start+0xfc>)
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	3308      	adds	r3, #8
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003048:	79fa      	ldrb	r2, [r7, #7]
 800304a:	4920      	ldr	r1, [pc, #128]	@ (80030cc <HW_TS_Start+0xfc>)
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	440b      	add	r3, r1
 8003056:	3304      	adds	r3, #4
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fb30 	bl	80026c4 <linkTimer>
 8003064:	4603      	mov	r3, r0
 8003066:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003068:	4b1a      	ldr	r3, [pc, #104]	@ (80030d4 <HW_TS_Start+0x104>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800306e:	4b1a      	ldr	r3, [pc, #104]	@ (80030d8 <HW_TS_Start+0x108>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	7c7a      	ldrb	r2, [r7, #17]
 8003076:	429a      	cmp	r2, r3
 8003078:	d002      	beq.n	8003080 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800307a:	f7ff fce9 	bl	8002a50 <RescheduleTimerList>
 800307e:	e013      	b.n	80030a8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003080:	79fa      	ldrb	r2, [r7, #7]
 8003082:	4912      	ldr	r1, [pc, #72]	@ (80030cc <HW_TS_Start+0xfc>)
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3308      	adds	r3, #8
 8003090:	6819      	ldr	r1, [r3, #0]
 8003092:	8a7b      	ldrh	r3, [r7, #18]
 8003094:	79fa      	ldrb	r2, [r7, #7]
 8003096:	1ac9      	subs	r1, r1, r3
 8003098:	480c      	ldr	r0, [pc, #48]	@ (80030cc <HW_TS_Start+0xfc>)
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4403      	add	r3, r0
 80030a4:	3308      	adds	r3, #8
 80030a6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80030a8:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <HW_TS_Start+0x100>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	22ff      	movs	r2, #255	@ 0xff
 80030ae:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80030b0:	2003      	movs	r0, #3
 80030b2:	f000 fe54 	bl	8003d5e <HAL_NVIC_EnableIRQ>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f383 8810 	msr	PRIMASK, r3
}
 80030c0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80030c2:	bf00      	nop
}
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200000fc 	.word	0x200000fc
 80030d0:	2000022c 	.word	0x2000022c
 80030d4:	2000018c 	.word	0x2000018c
 80030d8:	2000018d 	.word	0x2000018d

080030dc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	460b      	mov	r3, r1
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4798      	blx	r3

  return;
 80030ee:	bf00      	nop
}
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003102:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003104:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4313      	orrs	r3, r2
 800310c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800310e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4013      	ands	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <main>:
  */
uint8_t char_buf[512];
double q0, q1, q2, q3;

int main(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800312e:	f000 fc2f 	bl	8003990 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003132:	f7ff f845 	bl	80021c0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003136:	f000 f8eb 	bl	8003310 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800313a:	f000 f92e 	bl	800339a <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800313e:	f000 f989 	bl	8003454 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003142:	f000 f9d3 	bl	80034ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8003146:	f000 f945 	bl	80033d4 <MX_I2C1_Init>
  MX_RTC_Init();
 800314a:	f000 f99f 	bl	800348c <MX_RTC_Init>
  MX_RF_Init();
 800314e:	f000 f995 	bl	800347c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003152:	f7ff f843 	bl	80021dc <MX_APPE_Init>

  icm20948_set_i2c_bus(&hi2c1);
 8003156:	486c      	ldr	r0, [pc, #432]	@ (8003308 <main+0x1e0>)
 8003158:	f7fd ffe6 	bl	8001128 <icm20948_set_i2c_bus>
  set_i2c_mux_index(&hi2c1, 4);
 800315c:	2104      	movs	r1, #4
 800315e:	486a      	ldr	r0, [pc, #424]	@ (8003308 <main+0x1e0>)
 8003160:	f000 f9ea 	bl	8003538 <set_i2c_mux_index>

  icm20948_startup_default(false); // false = non-minimal startup
 8003164:	2000      	movs	r0, #0
 8003166:	f7fe fc3f 	bl	80019e8 <icm20948_startup_default>
  icm20948_sw_reset();
 800316a:	f7fd ffb1 	bl	80010d0 <icm20948_sw_reset>
  HAL_Delay(250);
 800316e:	20fa      	movs	r0, #250	@ 0xfa
 8003170:	f7ff f959 	bl	8002426 <HAL_Delay>
  icm20948_sleep(false);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fd ff2d 	bl	8000fd4 <icm20948_sleep>
  icm20948_low_power(false);
 800317a:	2000      	movs	r0, #0
 800317c:	f7fd ff64 	bl	8001048 <icm20948_low_power>
  icm20948_set_sample_mode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous);
 8003180:	2100      	movs	r1, #0
 8003182:	2003      	movs	r0, #3
 8003184:	f7fd fd14 	bl	8000bb0 <icm20948_set_sample_mode>

  // Set full scale ranges for both acc and gyr
  ICM_20948_fss_t myFSS; // This uses a "Full Scale Settings" structure that can contain values for all configurable sensors

  myFSS.a = gpm2; // (ICM_20948_ACCEL_CONFIG_FS_SEL_e)
 8003188:	7f3b      	ldrb	r3, [r7, #28]
 800318a:	f36f 0301 	bfc	r3, #0, #2
 800318e:	773b      	strb	r3, [r7, #28]
                  // gpm2
                  // gpm4
                  // gpm8
                  // gpm16

  myFSS.g = dps250; // (ICM_20948_GYRO_CONFIG_1_FS_SEL_e)
 8003190:	7f3b      	ldrb	r3, [r7, #28]
 8003192:	f36f 0383 	bfc	r3, #2, #2
 8003196:	773b      	strb	r3, [r7, #28]
                    // dps250
                    // dps500
                    // dps1000
                    // dps2000
  icm20948_set_full_scale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), myFSS);
 8003198:	7f39      	ldrb	r1, [r7, #28]
 800319a:	2003      	movs	r0, #3
 800319c:	f7fd fd5e 	bl	8000c5c <icm20948_set_full_scale>

  ICM_20948_dlpcfg_t myDLPcfg;    // Similar to FSS, this uses a configuration structure for the desired sensors
  myDLPcfg.a = acc_d473bw_n499bw; // (ICM_20948_ACCEL_CONFIG_DLPCFG_e)
 80031a0:	2307      	movs	r3, #7
 80031a2:	763b      	strb	r3, [r7, #24]
                                  // acc_d23bw9_n34bw4
                                  // acc_d11bw5_n17bw
                                  // acc_d5bw7_n8bw3        - means 3 db bandwidth is 5.7 hz and nyquist bandwidth is 8.3 hz
                                  // acc_d473bw_n499bw

  myDLPcfg.g = gyr_d361bw4_n376bw5; // (ICM_20948_GYRO_CONFIG_1_DLPCFG_e)
 80031a4:	2307      	movs	r3, #7
 80031a6:	767b      	strb	r3, [r7, #25]
                                    // gyr_d51bw2_n73bw3
                                    // gyr_d23bw9_n35bw9
                                    // gyr_d11bw6_n17bw8
                                    // gyr_d5bw7_n8bw9
                                    // gyr_d361bw4_n376bw5
  icm20948_set_dlpf_cfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), myDLPcfg);
 80031a8:	69b9      	ldr	r1, [r7, #24]
 80031aa:	2003      	movs	r0, #3
 80031ac:	f7fd fe74 	bl	8000e98 <icm20948_set_dlpf_cfg>
  icm20948_enable_dlpf(ICM_20948_Internal_Acc, false);
 80031b0:	2100      	movs	r1, #0
 80031b2:	2001      	movs	r0, #1
 80031b4:	f7fd fddc 	bl	8000d70 <icm20948_enable_dlpf>
  icm20948_enable_dlpf(ICM_20948_Internal_Gyr, false);
 80031b8:	2100      	movs	r1, #0
 80031ba:	2002      	movs	r0, #2
 80031bc:	f7fd fdd8 	bl	8000d70 <icm20948_enable_dlpf>
  icm20948_startup_magnetometer(false);
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fe f913 	bl	80013ec <icm20948_startup_magnetometer>
  /* USER CODE BEGIN WHILE */

  while (1)
   {
 	    /* USER CODE END WHILE */
 	    MX_APPE_Process();
 80031c6:	f7ff f953 	bl	8002470 <MX_APPE_Process>

		if (icm20948_data_ready() == ICM_20948_Stat_Ok) // We have asked for orientation data so we should receive Quat9
 80031ca:	f7fe fedb 	bl	8001f84 <icm20948_data_ready>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f040 8094 	bne.w	80032fe <main+0x1d6>
		{
			icm20948_get_agmt(&main_agmt);
 80031d6:	463b      	mov	r3, r7
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd fffb 	bl	80011d4 <icm20948_get_agmt>
			//accel
			put_float_in_buffer(icm20948_accel_x(&main_agmt), char_buf, sizeof(char_buf), 0);
 80031de:	463b      	mov	r3, r7
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fd21 	bl	8001c28 <icm20948_accel_x>
 80031e6:	eef0 7a40 	vmov.f32	s15, s0
 80031ea:	2200      	movs	r2, #0
 80031ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031f0:	4846      	ldr	r0, [pc, #280]	@ (800330c <main+0x1e4>)
 80031f2:	eeb0 0a67 	vmov.f32	s0, s15
 80031f6:	f000 f9bf 	bl	8003578 <put_float_in_buffer>
			put_float_in_buffer(icm20948_accel_y(&main_agmt), char_buf, sizeof(char_buf), 4);
 80031fa:	463b      	mov	r3, r7
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe fd25 	bl	8001c4c <icm20948_accel_y>
 8003202:	eef0 7a40 	vmov.f32	s15, s0
 8003206:	2204      	movs	r2, #4
 8003208:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800320c:	483f      	ldr	r0, [pc, #252]	@ (800330c <main+0x1e4>)
 800320e:	eeb0 0a67 	vmov.f32	s0, s15
 8003212:	f000 f9b1 	bl	8003578 <put_float_in_buffer>
			put_float_in_buffer(icm20948_accel_z(&main_agmt), char_buf, sizeof(char_buf), 8);
 8003216:	463b      	mov	r3, r7
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe fd29 	bl	8001c70 <icm20948_accel_z>
 800321e:	eef0 7a40 	vmov.f32	s15, s0
 8003222:	2208      	movs	r2, #8
 8003224:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003228:	4838      	ldr	r0, [pc, #224]	@ (800330c <main+0x1e4>)
 800322a:	eeb0 0a67 	vmov.f32	s0, s15
 800322e:	f000 f9a3 	bl	8003578 <put_float_in_buffer>
			//gyro
			put_float_in_buffer(icm20948_gyro_x(&main_agmt), char_buf, sizeof(char_buf), 12);
 8003232:	463b      	mov	r3, r7
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe fdbf 	bl	8001db8 <icm20948_gyro_x>
 800323a:	eef0 7a40 	vmov.f32	s15, s0
 800323e:	220c      	movs	r2, #12
 8003240:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003244:	4831      	ldr	r0, [pc, #196]	@ (800330c <main+0x1e4>)
 8003246:	eeb0 0a67 	vmov.f32	s0, s15
 800324a:	f000 f995 	bl	8003578 <put_float_in_buffer>
			put_float_in_buffer(icm20948_gyro_y(&main_agmt), char_buf, sizeof(char_buf), 16);
 800324e:	463b      	mov	r3, r7
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fdc3 	bl	8001ddc <icm20948_gyro_y>
 8003256:	eef0 7a40 	vmov.f32	s15, s0
 800325a:	2210      	movs	r2, #16
 800325c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003260:	482a      	ldr	r0, [pc, #168]	@ (800330c <main+0x1e4>)
 8003262:	eeb0 0a67 	vmov.f32	s0, s15
 8003266:	f000 f987 	bl	8003578 <put_float_in_buffer>
			put_float_in_buffer(icm20948_gyro_z(&main_agmt), char_buf, sizeof(char_buf), 20);
 800326a:	463b      	mov	r3, r7
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe fdc7 	bl	8001e00 <icm20948_gyro_z>
 8003272:	eef0 7a40 	vmov.f32	s15, s0
 8003276:	2214      	movs	r2, #20
 8003278:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800327c:	4823      	ldr	r0, [pc, #140]	@ (800330c <main+0x1e4>)
 800327e:	eeb0 0a67 	vmov.f32	s0, s15
 8003282:	f000 f979 	bl	8003578 <put_float_in_buffer>
			//magneto
			put_float_in_buffer(icm20948_mag_x(&main_agmt), char_buf, sizeof(char_buf), 24);
 8003286:	463b      	mov	r3, r7
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fc55 	bl	8001b38 <icm20948_mag_x>
 800328e:	eef0 7a40 	vmov.f32	s15, s0
 8003292:	2218      	movs	r2, #24
 8003294:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003298:	481c      	ldr	r0, [pc, #112]	@ (800330c <main+0x1e4>)
 800329a:	eeb0 0a67 	vmov.f32	s0, s15
 800329e:	f000 f96b 	bl	8003578 <put_float_in_buffer>
			put_float_in_buffer(icm20948_mag_y(&main_agmt), char_buf, sizeof(char_buf), 28);
 80032a2:	463b      	mov	r3, r7
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fc6f 	bl	8001b88 <icm20948_mag_y>
 80032aa:	eef0 7a40 	vmov.f32	s15, s0
 80032ae:	221c      	movs	r2, #28
 80032b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032b4:	4815      	ldr	r0, [pc, #84]	@ (800330c <main+0x1e4>)
 80032b6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ba:	f000 f95d 	bl	8003578 <put_float_in_buffer>
			put_float_in_buffer(icm20948_mag_z(&main_agmt), char_buf, sizeof(char_buf), 32);
 80032be:	463b      	mov	r3, r7
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fc89 	bl	8001bd8 <icm20948_mag_z>
 80032c6:	eef0 7a40 	vmov.f32	s15, s0
 80032ca:	2220      	movs	r2, #32
 80032cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032d0:	480e      	ldr	r0, [pc, #56]	@ (800330c <main+0x1e4>)
 80032d2:	eeb0 0a67 	vmov.f32	s0, s15
 80032d6:	f000 f94f 	bl	8003578 <put_float_in_buffer>
			//temp
			put_float_in_buffer(icm20948_temp_celsius(&main_agmt), char_buf, sizeof(char_buf), 36);
 80032da:	463b      	mov	r3, r7
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fe1b 	bl	8001f18 <icm20948_temp_celsius>
 80032e2:	eef0 7a40 	vmov.f32	s15, s0
 80032e6:	2224      	movs	r2, #36	@ 0x24
 80032e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032ec:	4807      	ldr	r0, [pc, #28]	@ (800330c <main+0x1e4>)
 80032ee:	eeb0 0a67 	vmov.f32	s0, s15
 80032f2:	f000 f941 	bl	8003578 <put_float_in_buffer>

			Custom_STM_App_Update_Char(0, (uint8_t *)char_buf);
 80032f6:	4905      	ldr	r1, [pc, #20]	@ (800330c <main+0x1e4>)
 80032f8:	2000      	movs	r0, #0
 80032fa:	f006 f89f 	bl	800943c <Custom_STM_App_Update_Char>
		}
		HAL_Delay(15);
 80032fe:	200f      	movs	r0, #15
 8003300:	f7ff f891 	bl	8002426 <HAL_Delay>
 	    MX_APPE_Process();
 8003304:	e75f      	b.n	80031c6 <main+0x9e>
 8003306:	bf00      	nop
 8003308:	2000019c 	.word	0x2000019c
 800330c:	20000250 	.word	0x20000250

08003310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b098      	sub	sp, #96	@ 0x60
 8003314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003316:	f107 031c 	add.w	r3, r7, #28
 800331a:	2244      	movs	r2, #68	@ 0x44
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f006 fd76 	bl	8009e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003324:	463b      	mov	r3, r7
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	609a      	str	r2, [r3, #8]
 800332e:	60da      	str	r2, [r3, #12]
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	615a      	str	r2, [r3, #20]
 8003334:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003336:	2303      	movs	r3, #3
 8003338:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800333a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800333e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003340:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003344:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003346:	2340      	movs	r3, #64	@ 0x40
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800334a:	2300      	movs	r3, #0
 800334c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4618      	mov	r0, r3
 8003354:	f002 f9e6 	bl	8005724 <HAL_RCC_OscConfig>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <SystemClock_Config+0x52>
  {
    Error_Handler();
 800335e:	f000 f8e5 	bl	800352c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003362:	236f      	movs	r3, #111	@ 0x6f
 8003364:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003366:	2302      	movs	r3, #2
 8003368:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800337e:	463b      	mov	r3, r7
 8003380:	2101      	movs	r1, #1
 8003382:	4618      	mov	r0, r3
 8003384:	f002 fd04 	bl	8005d90 <HAL_RCC_ClockConfig>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800338e:	f000 f8cd 	bl	800352c <Error_Handler>
  }
}
 8003392:	bf00      	nop
 8003394:	3760      	adds	r7, #96	@ 0x60
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b08a      	sub	sp, #40	@ 0x28
 800339e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	2224      	movs	r2, #36	@ 0x24
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f006 fd32 	bl	8009e10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 80033ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033b0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80033b2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 f840 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 80033c6:	f000 f8b1 	bl	800352c <Error_Handler>
  }
}
 80033ca:	bf00      	nop
 80033cc:	3728      	adds	r7, #40	@ 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <MX_I2C1_Init+0x74>)
 80033da:	4a1c      	ldr	r2, [pc, #112]	@ (800344c <MX_I2C1_Init+0x78>)
 80033dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <MX_I2C1_Init+0x74>)
 80033e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003450 <MX_I2C1_Init+0x7c>)
 80033e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033e4:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <MX_I2C1_Init+0x74>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ea:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <MX_I2C1_Init+0x74>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033f0:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <MX_I2C1_Init+0x74>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033f6:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <MX_I2C1_Init+0x74>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033fc:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <MX_I2C1_Init+0x74>)
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <MX_I2C1_Init+0x74>)
 8003404:	2200      	movs	r2, #0
 8003406:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003408:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <MX_I2C1_Init+0x74>)
 800340a:	2200      	movs	r2, #0
 800340c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800340e:	480e      	ldr	r0, [pc, #56]	@ (8003448 <MX_I2C1_Init+0x74>)
 8003410:	f000 fe76 	bl	8004100 <HAL_I2C_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800341a:	f000 f887 	bl	800352c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800341e:	2100      	movs	r1, #0
 8003420:	4809      	ldr	r0, [pc, #36]	@ (8003448 <MX_I2C1_Init+0x74>)
 8003422:	f001 fd11 	bl	8004e48 <HAL_I2CEx_ConfigAnalogFilter>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800342c:	f000 f87e 	bl	800352c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003430:	2100      	movs	r1, #0
 8003432:	4805      	ldr	r0, [pc, #20]	@ (8003448 <MX_I2C1_Init+0x74>)
 8003434:	f001 fd53 	bl	8004ede <HAL_I2CEx_ConfigDigitalFilter>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800343e:	f000 f875 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000019c 	.word	0x2000019c
 800344c:	40005400 	.word	0x40005400
 8003450:	00b07cb4 	.word	0x00b07cb4

08003454 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <MX_IPCC_Init+0x20>)
 800345a:	4a07      	ldr	r2, [pc, #28]	@ (8003478 <MX_IPCC_Init+0x24>)
 800345c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800345e:	4805      	ldr	r0, [pc, #20]	@ (8003474 <MX_IPCC_Init+0x20>)
 8003460:	f001 fd8a 	bl	8004f78 <HAL_IPCC_Init>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800346a:	f000 f85f 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200001f0 	.word	0x200001f0
 8003478:	58000c00 	.word	0x58000c00

0800347c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003490:	4b14      	ldr	r3, [pc, #80]	@ (80034e4 <MX_RTC_Init+0x58>)
 8003492:	4a15      	ldr	r2, [pc, #84]	@ (80034e8 <MX_RTC_Init+0x5c>)
 8003494:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003496:	4b13      	ldr	r3, [pc, #76]	@ (80034e4 <MX_RTC_Init+0x58>)
 8003498:	2200      	movs	r2, #0
 800349a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800349c:	4b11      	ldr	r3, [pc, #68]	@ (80034e4 <MX_RTC_Init+0x58>)
 800349e:	227f      	movs	r2, #127	@ 0x7f
 80034a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80034a2:	4b10      	ldr	r3, [pc, #64]	@ (80034e4 <MX_RTC_Init+0x58>)
 80034a4:	f641 6284 	movw	r2, #7812	@ 0x1e84
 80034a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034aa:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <MX_RTC_Init+0x58>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034b0:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <MX_RTC_Init+0x58>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80034b6:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <MX_RTC_Init+0x58>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80034bc:	4809      	ldr	r0, [pc, #36]	@ (80034e4 <MX_RTC_Init+0x58>)
 80034be:	f003 f89b 	bl	80065f8 <HAL_RTC_Init>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80034c8:	f000 f830 	bl	800352c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80034cc:	2200      	movs	r2, #0
 80034ce:	2100      	movs	r1, #0
 80034d0:	4804      	ldr	r0, [pc, #16]	@ (80034e4 <MX_RTC_Init+0x58>)
 80034d2:	f003 f991 	bl	80067f8 <HAL_RTCEx_SetWakeUpTimer_IT>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80034dc:	f000 f826 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	2000022c 	.word	0x2000022c
 80034e8:	40002800 	.word	0x40002800

080034ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003500:	2002      	movs	r0, #2
 8003502:	f7ff fdf8 	bl	80030f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	2001      	movs	r0, #1
 8003508:	f7ff fdf5 	bl	80030f6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : User_BTN_Pin */
  GPIO_InitStruct.Pin = User_BTN_Pin;
 800350c:	2340      	movs	r3, #64	@ 0x40
 800350e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003510:	2300      	movs	r3, #0
 8003512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003514:	2301      	movs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_BTN_GPIO_Port, &GPIO_InitStruct);
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	4619      	mov	r1, r3
 800351c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003520:	f000 fc62 	bl	8003de8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003524:	bf00      	nop
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003530:	b672      	cpsid	i
}
 8003532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <Error_Handler+0x8>

08003538 <set_i2c_mux_index>:
#include "pb_helper.h"

int8_t set_i2c_mux_index(I2C_HandleTypeDef *i2c_bus, uint8_t index)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af02      	add	r7, sp, #8
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
	if (index > 7)return -1;
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	2b07      	cmp	r3, #7
 8003548:	d902      	bls.n	8003550 <set_i2c_mux_index+0x18>
 800354a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800354e:	e00f      	b.n	8003570 <set_i2c_mux_index+0x38>
	index = 0x1 << index;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	461a      	mov	r2, r3
 8003554:	2301      	movs	r3, #1
 8003556:	4093      	lsls	r3, r2
 8003558:	b2db      	uxtb	r3, r3
 800355a:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(i2c_bus, I2C_MUX_ADDR << 1, &index, 1, 1000);
 800355c:	1cfa      	adds	r2, r7, #3
 800355e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2301      	movs	r3, #1
 8003566:	21e0      	movs	r1, #224	@ 0xe0
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fe65 	bl	8004238 <HAL_I2C_Master_Transmit>
	return 0;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <put_float_in_buffer>:
		buffer[starting_index+i] = double_to_bytes.bytes[i];
	}
}

void put_float_in_buffer(float ft, uint8_t *buffer, int buffer_length, int starting_index)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003582:	60b8      	str	r0, [r7, #8]
 8003584:	6079      	str	r1, [r7, #4]
 8003586:	603a      	str	r2, [r7, #0]
	if((starting_index + sizeof(float)) > buffer_length)return;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	1d1a      	adds	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d817      	bhi.n	80035c2 <put_float_in_buffer+0x4a>
	  union {
	    float ftl;
	    unsigned char bytes[sizeof(float)];
	  } float_to_bytes;
	float_to_bytes.ftl = ft;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < sizeof(float); i++){
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e00e      	b.n	80035ba <put_float_in_buffer+0x42>
		buffer[starting_index+i] = float_to_bytes.bytes[i];
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4413      	add	r3, r2
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4413      	add	r3, r2
 80035a8:	f107 0110 	add.w	r1, r7, #16
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	440a      	add	r2, r1
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(float); i++){
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	3301      	adds	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d9ed      	bls.n	800359c <put_float_in_buffer+0x24>
 80035c0:	e000      	b.n	80035c4 <put_float_in_buffer+0x4c>
	if((starting_index + sizeof(float)) > buffer_length)return;
 80035c2:	bf00      	nop
	}
}
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80035d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_AHB2_GRP1_EnableClock>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80035f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4313      	orrs	r3, r2
 8003606:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800360c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003614:	68fb      	ldr	r3, [r7, #12]
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800362e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003630:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4313      	orrs	r3, r2
 8003638:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800363a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4013      	ands	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800365c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003660:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003662:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4313      	orrs	r3, r2
 800366a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800366c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003670:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4013      	ands	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003678:	68fb      	ldr	r3, [r7, #12]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800368a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800368e:	f7ff ffc8 	bl	8003622 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	2100      	movs	r1, #0
 8003696:	202e      	movs	r0, #46	@ 0x2e
 8003698:	f000 fb47 	bl	8003d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800369c:	202e      	movs	r0, #46	@ 0x2e
 800369e:	f000 fb5e 	bl	8003d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b090      	sub	sp, #64	@ 0x40
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036c0:	f107 0308 	add.w	r3, r7, #8
 80036c4:	2224      	movs	r2, #36	@ 0x24
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f006 fba1 	bl	8009e10 <memset>
  if(hi2c->Instance==I2C1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a17      	ldr	r2, [pc, #92]	@ (8003730 <HAL_I2C_MspInit+0x88>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d126      	bne.n	8003726 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036d8:	2304      	movs	r3, #4
 80036da:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80036dc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80036e0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 feaa 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80036f2:	f7ff ff1b 	bl	800352c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f6:	2002      	movs	r0, #2
 80036f8:	f7ff ff7a 	bl	80035f0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003700:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003702:	2312      	movs	r3, #18
 8003704:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	2300      	movs	r3, #0
 800370c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800370e:	2304      	movs	r3, #4
 8003710:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003716:	4619      	mov	r1, r3
 8003718:	4806      	ldr	r0, [pc, #24]	@ (8003734 <HAL_I2C_MspInit+0x8c>)
 800371a:	f000 fb65 	bl	8003de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800371e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003722:	f7ff ff97 	bl	8003654 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003726:	bf00      	nop
 8003728:	3740      	adds	r7, #64	@ 0x40
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40005400 	.word	0x40005400
 8003734:	48000400 	.word	0x48000400

08003738 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0d      	ldr	r2, [pc, #52]	@ (800377c <HAL_IPCC_MspInit+0x44>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d113      	bne.n	8003772 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800374a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800374e:	f7ff ff68 	bl	8003622 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	202c      	movs	r0, #44	@ 0x2c
 8003758:	f000 fae7 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800375c:	202c      	movs	r0, #44	@ 0x2c
 800375e:	f000 fafe 	bl	8003d5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	202d      	movs	r0, #45	@ 0x2d
 8003768:	f000 fadf 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800376c:	202d      	movs	r0, #45	@ 0x2d
 800376e:	f000 faf6 	bl	8003d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	58000c00 	.word	0x58000c00

08003780 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	@ 0x30
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	2224      	movs	r2, #36	@ 0x24
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f006 fb3d 	bl	8009e10 <memset>
  if(hrtc->Instance==RTC)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a14      	ldr	r2, [pc, #80]	@ (80037ec <HAL_RTC_MspInit+0x6c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d121      	bne.n	80037e4 <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
	  HAL_PWR_EnableBkUpAccess();
 80037a0:	f001 fc70 	bl	8005084 <HAL_PWR_EnableBkUpAccess>
	  HAL_PWR_EnableBkUpAccess(); // written twice to flush apb-ahb bridge
 80037a4:	f001 fc6e 	bl	8005084 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80037a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80037ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 80037ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037b4:	f107 030c 	add.w	r3, r7, #12
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 fe41 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80037c4:	f7ff feb2 	bl	800352c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037c8:	f7ff ff01 	bl	80035ce <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80037cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80037d0:	f7ff ff40 	bl	8003654 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	2003      	movs	r0, #3
 80037da:	f000 faa6 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80037de:	2003      	movs	r0, #3
 80037e0:	f000 fabd 	bl	8003d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80037e4:	bf00      	nop
 80037e6:	3730      	adds	r7, #48	@ 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40002800 	.word	0x40002800

080037f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <NMI_Handler+0x4>

080037f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <HardFault_Handler+0x4>

08003800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <MemManage_Handler+0x4>

08003808 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <BusFault_Handler+0x4>

08003810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <UsageFault_Handler+0x4>

08003818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003846:	f000 f8fd 	bl	8003a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}

0800384e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003852:	f7ff f997 	bl	8002b84 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}

0800385a <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800385e:	f005 ff1d 	bl	800969c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}

08003866 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800386a:	f005 ff4d 	bl	8009708 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}

08003872 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003876:	f000 fc1f 	bl	80040b8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003884:	4b22      	ldr	r3, [pc, #136]	@ (8003910 <SystemInit+0x90>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388a:	4a21      	ldr	r2, [pc, #132]	@ (8003910 <SystemInit+0x90>)
 800388c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80038ac:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038b8:	4b16      	ldr	r3, [pc, #88]	@ (8003914 <SystemInit+0x94>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80038be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ca:	f023 0305 	bic.w	r3, r3, #5
 80038ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80038d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003918 <SystemInit+0x98>)
 80038ec:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003902:	2200      	movs	r2, #0
 8003904:	619a      	str	r2, [r3, #24]
}
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00
 8003914:	faf6fefb 	.word	0xfaf6fefb
 8003918:	22041000 	.word	0x22041000

0800391c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800391c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800391e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003920:	3304      	adds	r3, #4

08003922 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003922:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003924:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003926:	d3f9      	bcc.n	800391c <CopyDataInit>
  bx lr
 8003928:	4770      	bx	lr

0800392a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800392a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800392c:	3004      	adds	r0, #4

0800392e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800392e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003930:	d3fb      	bcc.n	800392a <FillZerobss>
  bx lr
 8003932:	4770      	bx	lr

08003934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003934:	480c      	ldr	r0, [pc, #48]	@ (8003968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003936:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003938:	f7ff ffa2 	bl	8003880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800393c:	480b      	ldr	r0, [pc, #44]	@ (800396c <LoopForever+0x6>)
 800393e:	490c      	ldr	r1, [pc, #48]	@ (8003970 <LoopForever+0xa>)
 8003940:	4a0c      	ldr	r2, [pc, #48]	@ (8003974 <LoopForever+0xe>)
 8003942:	2300      	movs	r3, #0
 8003944:	f7ff ffed 	bl	8003922 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003948:	480b      	ldr	r0, [pc, #44]	@ (8003978 <LoopForever+0x12>)
 800394a:	490c      	ldr	r1, [pc, #48]	@ (800397c <LoopForever+0x16>)
 800394c:	4a0c      	ldr	r2, [pc, #48]	@ (8003980 <LoopForever+0x1a>)
 800394e:	2300      	movs	r3, #0
 8003950:	f7ff ffe7 	bl	8003922 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003954:	480b      	ldr	r0, [pc, #44]	@ (8003984 <LoopForever+0x1e>)
 8003956:	490c      	ldr	r1, [pc, #48]	@ (8003988 <LoopForever+0x22>)
 8003958:	2300      	movs	r3, #0
 800395a:	f7ff ffe8 	bl	800392e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800395e:	f006 fa5f 	bl	8009e20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003962:	f7ff fbe1 	bl	8003128 <main>

08003966 <LoopForever>:

LoopForever:
  b LoopForever
 8003966:	e7fe      	b.n	8003966 <LoopForever>
  ldr   r0, =_estack
 8003968:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 800396c:	20000008 	.word	0x20000008
 8003970:	2000003c 	.word	0x2000003c
 8003974:	0800a118 	.word	0x0800a118
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003978:	200301e4 	.word	0x200301e4
 800397c:	20030a67 	.word	0x20030a67
 8003980:	0800a192 	.word	0x0800a192
  INIT_BSS _sbss, _ebss
 8003984:	20000088 	.word	0x20000088
 8003988:	20000608 	.word	0x20000608

0800398c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800398c:	e7fe      	b.n	800398c <ADC1_IRQHandler>
	...

08003990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800399a:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <HAL_Init+0x3c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a0b      	ldr	r2, [pc, #44]	@ (80039cc <HAL_Init+0x3c>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a6:	2003      	movs	r0, #3
 80039a8:	f000 f9b4 	bl	8003d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039ac:	200f      	movs	r0, #15
 80039ae:	f000 f80f 	bl	80039d0 <HAL_InitTick>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	71fb      	strb	r3, [r7, #7]
 80039bc:	e001      	b.n	80039c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039be:	f7ff fe62 	bl	8003686 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039c2:	79fb      	ldrb	r3, [r7, #7]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	58004000 	.word	0x58004000

080039d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80039dc:	4b17      	ldr	r3, [pc, #92]	@ (8003a3c <HAL_InitTick+0x6c>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d024      	beq.n	8003a2e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039e4:	f002 fb80 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b14      	ldr	r3, [pc, #80]	@ (8003a3c <HAL_InitTick+0x6c>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	4619      	mov	r1, r3
 80039f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f9ca 	bl	8003d96 <HAL_SYSTICK_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10f      	bne.n	8003a28 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	d809      	bhi.n	8003a22 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a16:	f000 f988 	bl	8003d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a1a:	4a09      	ldr	r2, [pc, #36]	@ (8003a40 <HAL_InitTick+0x70>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	e007      	b.n	8003a32 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
 8003a26:	e004      	b.n	8003a32 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
 8003a2c:	e001      	b.n	8003a32 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000001c 	.word	0x2000001c
 8003a40:	20000018 	.word	0x20000018

08003a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a48:	4b06      	ldr	r3, [pc, #24]	@ (8003a64 <HAL_IncTick+0x20>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_IncTick+0x24>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4413      	add	r3, r2
 8003a54:	4a04      	ldr	r2, [pc, #16]	@ (8003a68 <HAL_IncTick+0x24>)
 8003a56:	6013      	str	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	2000001c 	.word	0x2000001c
 8003a68:	20000450 	.word	0x20000450

08003a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a70:	4b03      	ldr	r3, [pc, #12]	@ (8003a80 <HAL_GetTick+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000450 	.word	0x20000450

08003a84 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003a88:	4b03      	ldr	r3, [pc, #12]	@ (8003a98 <HAL_GetTickPrio+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000018 	.word	0x20000018

08003a9c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	@ (8003ab0 <HAL_GetTickFreq+0x14>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	2000001c 	.word	0x2000001c

08003ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8003af8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ae6:	4a04      	ldr	r2, [pc, #16]	@ (8003af8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	60d3      	str	r3, [r2, #12]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b00:	4b04      	ldr	r3, [pc, #16]	@ (8003b14 <__NVIC_GetPriorityGrouping+0x18>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	f003 0307 	and.w	r3, r3, #7
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	db0b      	blt.n	8003b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	4907      	ldr	r1, [pc, #28]	@ (8003b50 <__NVIC_EnableIRQ+0x38>)
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2001      	movs	r0, #1
 8003b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	e000e100 	.word	0xe000e100

08003b54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	db12      	blt.n	8003b8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	f003 021f 	and.w	r2, r3, #31
 8003b6c:	490a      	ldr	r1, [pc, #40]	@ (8003b98 <__NVIC_DisableIRQ+0x44>)
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	2001      	movs	r0, #1
 8003b76:	fa00 f202 	lsl.w	r2, r0, r2
 8003b7a:	3320      	adds	r3, #32
 8003b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b80:	f3bf 8f4f 	dsb	sy
}
 8003b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b86:	f3bf 8f6f 	isb	sy
}
 8003b8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000e100 	.word	0xe000e100

08003b9c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	db0c      	blt.n	8003bc8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	4907      	ldr	r1, [pc, #28]	@ (8003bd4 <__NVIC_SetPendingIRQ+0x38>)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc2:	3340      	adds	r3, #64	@ 0x40
 8003bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000e100 	.word	0xe000e100

08003bd8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db0c      	blt.n	8003c04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	4907      	ldr	r1, [pc, #28]	@ (8003c10 <__NVIC_ClearPendingIRQ+0x38>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	3360      	adds	r3, #96	@ 0x60
 8003c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	e000e100 	.word	0xe000e100

08003c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db0a      	blt.n	8003c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	490c      	ldr	r1, [pc, #48]	@ (8003c60 <__NVIC_SetPriority+0x4c>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c3c:	e00a      	b.n	8003c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4908      	ldr	r1, [pc, #32]	@ (8003c64 <__NVIC_SetPriority+0x50>)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	440b      	add	r3, r1
 8003c52:	761a      	strb	r2, [r3, #24]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000e100 	.word	0xe000e100
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	@ 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f1c3 0307 	rsb	r3, r3, #7
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf28      	it	cs
 8003c86:	2304      	movcs	r3, #4
 8003c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d902      	bls.n	8003c98 <NVIC_EncodePriority+0x30>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	e000      	b.n	8003c9a <NVIC_EncodePriority+0x32>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	4313      	orrs	r3, r2
         );
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ce0:	d301      	bcc.n	8003ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00f      	b.n	8003d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8003d10 <SysTick_Config+0x40>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cee:	210f      	movs	r1, #15
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cf4:	f7ff ff8e 	bl	8003c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <SysTick_Config+0x40>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cfe:	4b04      	ldr	r3, [pc, #16]	@ (8003d10 <SysTick_Config+0x40>)
 8003d00:	2207      	movs	r2, #7
 8003d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	e000e010 	.word	0xe000e010

08003d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fec9 	bl	8003ab4 <__NVIC_SetPriorityGrouping>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	4603      	mov	r3, r0
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d38:	f7ff fee0 	bl	8003afc <__NVIC_GetPriorityGrouping>
 8003d3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	6978      	ldr	r0, [r7, #20]
 8003d44:	f7ff ff90 	bl	8003c68 <NVIC_EncodePriority>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ff5f 	bl	8003c14 <__NVIC_SetPriority>
}
 8003d56:	bf00      	nop
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	4603      	mov	r3, r0
 8003d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fed3 	bl	8003b18 <__NVIC_EnableIRQ>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	4603      	mov	r3, r0
 8003d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fee3 	bl	8003b54 <__NVIC_DisableIRQ>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ff96 	bl	8003cd0 <SysTick_Config>
 8003da4:	4603      	mov	r3, r0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff feed 	bl	8003b9c <__NVIC_SetPendingIRQ>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fefd 	bl	8003bd8 <__NVIC_ClearPendingIRQ>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df6:	e146      	b.n	8004086 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	4013      	ands	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8138 	beq.w	8004080 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d005      	beq.n	8003e28 <HAL_GPIO_Init+0x40>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d130      	bne.n	8003e8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	2203      	movs	r2, #3
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e5e:	2201      	movs	r2, #1
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	f003 0201 	and.w	r2, r3, #1
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d017      	beq.n	8003ec6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d123      	bne.n	8003f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	08da      	lsrs	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	08da      	lsrs	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3208      	adds	r2, #8
 8003f14:	6939      	ldr	r1, [r7, #16]
 8003f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	2203      	movs	r2, #3
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0203 	and.w	r2, r3, #3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8092 	beq.w	8004080 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f5c:	4a51      	ldr	r2, [pc, #324]	@ (80040a4 <HAL_GPIO_Init+0x2bc>)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	3302      	adds	r3, #2
 8003f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	220f      	movs	r2, #15
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f86:	d013      	beq.n	8003fb0 <HAL_GPIO_Init+0x1c8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a47      	ldr	r2, [pc, #284]	@ (80040a8 <HAL_GPIO_Init+0x2c0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00d      	beq.n	8003fac <HAL_GPIO_Init+0x1c4>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a46      	ldr	r2, [pc, #280]	@ (80040ac <HAL_GPIO_Init+0x2c4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d007      	beq.n	8003fa8 <HAL_GPIO_Init+0x1c0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a45      	ldr	r2, [pc, #276]	@ (80040b0 <HAL_GPIO_Init+0x2c8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <HAL_GPIO_Init+0x1bc>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	e006      	b.n	8003fb2 <HAL_GPIO_Init+0x1ca>
 8003fa4:	2307      	movs	r3, #7
 8003fa6:	e004      	b.n	8003fb2 <HAL_GPIO_Init+0x1ca>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e002      	b.n	8003fb2 <HAL_GPIO_Init+0x1ca>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_GPIO_Init+0x1ca>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	f002 0203 	and.w	r2, r2, #3
 8003fb8:	0092      	lsls	r2, r2, #2
 8003fba:	4093      	lsls	r3, r2
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fc2:	4938      	ldr	r1, [pc, #224]	@ (80040a4 <HAL_GPIO_Init+0x2bc>)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	089b      	lsrs	r3, r3, #2
 8003fc8:	3302      	adds	r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fd0:	4b38      	ldr	r3, [pc, #224]	@ (80040b4 <HAL_GPIO_Init+0x2cc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80040b4 <HAL_GPIO_Init+0x2cc>)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80040b4 <HAL_GPIO_Init+0x2cc>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800401e:	4a25      	ldr	r2, [pc, #148]	@ (80040b4 <HAL_GPIO_Init+0x2cc>)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004024:	4b23      	ldr	r3, [pc, #140]	@ (80040b4 <HAL_GPIO_Init+0x2cc>)
 8004026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800402a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800404a:	4a1a      	ldr	r2, [pc, #104]	@ (80040b4 <HAL_GPIO_Init+0x2cc>)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004052:	4b18      	ldr	r3, [pc, #96]	@ (80040b4 <HAL_GPIO_Init+0x2cc>)
 8004054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	43db      	mvns	r3, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4013      	ands	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004078:	4a0e      	ldr	r2, [pc, #56]	@ (80040b4 <HAL_GPIO_Init+0x2cc>)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3301      	adds	r3, #1
 8004084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	f47f aeb1 	bne.w	8003df8 <HAL_GPIO_Init+0x10>
  }
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40010000 	.word	0x40010000
 80040a8:	48000400 	.word	0x48000400
 80040ac:	48000800 	.word	0x48000800
 80040b0:	48001000 	.word	0x48001000
 80040b4:	58000800 	.word	0x58000800

080040b8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80040be:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <HAL_HSEM_IRQHandler+0x30>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80040c4:	4b08      	ldr	r3, [pc, #32]	@ (80040e8 <HAL_HSEM_IRQHandler+0x30>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	4906      	ldr	r1, [pc, #24]	@ (80040e8 <HAL_HSEM_IRQHandler+0x30>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80040d2:	4a05      	ldr	r2, [pc, #20]	@ (80040e8 <HAL_HSEM_IRQHandler+0x30>)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f807 	bl	80040ec <HAL_HSEM_FreeCallback>
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	58001500 	.word	0x58001500

080040ec <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e08d      	b.n	800422e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff fabe 	bl	80036a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2224      	movs	r2, #36	@ 0x24
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004150:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004160:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	e006      	b.n	8004188 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004186:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d108      	bne.n	80041a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	e007      	b.n	80041b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69d9      	ldr	r1, [r3, #28]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	461a      	mov	r2, r3
 8004244:	460b      	mov	r3, r1
 8004246:	817b      	strh	r3, [r7, #10]
 8004248:	4613      	mov	r3, r2
 800424a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b20      	cmp	r3, #32
 8004256:	f040 80fd 	bne.w	8004454 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_I2C_Master_Transmit+0x30>
 8004264:	2302      	movs	r3, #2
 8004266:	e0f6      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004270:	f7ff fbfc 	bl	8003a6c <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2319      	movs	r3, #25
 800427c:	2201      	movs	r2, #1
 800427e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fbea 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0e1      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2221      	movs	r2, #33	@ 0x21
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2210      	movs	r2, #16
 800429e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	893a      	ldrh	r2, [r7, #8]
 80042b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2bff      	cmp	r3, #255	@ 0xff
 80042c2:	d906      	bls.n	80042d2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	22ff      	movs	r2, #255	@ 0xff
 80042c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80042ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e007      	b.n	80042e2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80042dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d024      	beq.n	8004334 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	781a      	ldrb	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431e:	b2db      	uxtb	r3, r3
 8004320:	3301      	adds	r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	8979      	ldrh	r1, [r7, #10]
 8004326:	4b4e      	ldr	r3, [pc, #312]	@ (8004460 <HAL_I2C_Master_Transmit+0x228>)
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fd59 	bl	8004de4 <I2C_TransferConfig>
 8004332:	e066      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	b2da      	uxtb	r2, r3
 800433a:	8979      	ldrh	r1, [r7, #10]
 800433c:	4b48      	ldr	r3, [pc, #288]	@ (8004460 <HAL_I2C_Master_Transmit+0x228>)
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fd4e 	bl	8004de4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004348:	e05b      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	6a39      	ldr	r1, [r7, #32]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fbdd 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07b      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d034      	beq.n	8004402 <HAL_I2C_Master_Transmit+0x1ca>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d130      	bne.n	8004402 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2180      	movs	r1, #128	@ 0x80
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fb56 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e04d      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2bff      	cmp	r3, #255	@ 0xff
 80043c2:	d90e      	bls.n	80043e2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	22ff      	movs	r2, #255	@ 0xff
 80043c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	8979      	ldrh	r1, [r7, #10]
 80043d2:	2300      	movs	r3, #0
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fd02 	bl	8004de4 <I2C_TransferConfig>
 80043e0:	e00f      	b.n	8004402 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	8979      	ldrh	r1, [r7, #10]
 80043f4:	2300      	movs	r3, #0
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fcf1 	bl	8004de4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d19e      	bne.n	800434a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	6a39      	ldr	r1, [r7, #32]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fbc3 	bl	8004b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e01a      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2220      	movs	r2, #32
 8004426:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <HAL_I2C_Master_Transmit+0x22c>)
 8004434:	400b      	ands	r3, r1
 8004436:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	80002000 	.word	0x80002000
 8004464:	fe00e800 	.word	0xfe00e800

08004468 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4603      	mov	r3, r0
 8004478:	817b      	strh	r3, [r7, #10]
 800447a:	460b      	mov	r3, r1
 800447c:	813b      	strh	r3, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b20      	cmp	r3, #32
 800448c:	f040 80f9 	bne.w	8004682 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_I2C_Mem_Write+0x34>
 8004496:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0ed      	b.n	8004684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_I2C_Mem_Write+0x4e>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e0e6      	b.n	8004684 <HAL_I2C_Mem_Write+0x21c>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044be:	f7ff fad5 	bl	8003a6c <HAL_GetTick>
 80044c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2319      	movs	r3, #25
 80044ca:	2201      	movs	r2, #1
 80044cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fac3 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0d1      	b.n	8004684 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2221      	movs	r2, #33	@ 0x21
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2240      	movs	r2, #64	@ 0x40
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a3a      	ldr	r2, [r7, #32]
 80044fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004500:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004508:	88f8      	ldrh	r0, [r7, #6]
 800450a:	893a      	ldrh	r2, [r7, #8]
 800450c:	8979      	ldrh	r1, [r7, #10]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	4603      	mov	r3, r0
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f9d3 	bl	80048c4 <I2C_RequestMemoryWrite>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0a9      	b.n	8004684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	2bff      	cmp	r3, #255	@ 0xff
 8004538:	d90e      	bls.n	8004558 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	22ff      	movs	r2, #255	@ 0xff
 800453e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004544:	b2da      	uxtb	r2, r3
 8004546:	8979      	ldrh	r1, [r7, #10]
 8004548:	2300      	movs	r3, #0
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fc47 	bl	8004de4 <I2C_TransferConfig>
 8004556:	e00f      	b.n	8004578 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004566:	b2da      	uxtb	r2, r3
 8004568:	8979      	ldrh	r1, [r7, #10]
 800456a:	2300      	movs	r3, #0
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fc36 	bl	8004de4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fac6 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e07b      	b.n	8004684 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d034      	beq.n	8004630 <HAL_I2C_Mem_Write+0x1c8>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d130      	bne.n	8004630 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d4:	2200      	movs	r2, #0
 80045d6:	2180      	movs	r1, #128	@ 0x80
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fa3f 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e04d      	b.n	8004684 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2bff      	cmp	r3, #255	@ 0xff
 80045f0:	d90e      	bls.n	8004610 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	22ff      	movs	r2, #255	@ 0xff
 80045f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	8979      	ldrh	r1, [r7, #10]
 8004600:	2300      	movs	r3, #0
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fbeb 	bl	8004de4 <I2C_TransferConfig>
 800460e:	e00f      	b.n	8004630 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461e:	b2da      	uxtb	r2, r3
 8004620:	8979      	ldrh	r1, [r7, #10]
 8004622:	2300      	movs	r3, #0
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fbda 	bl	8004de4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d19e      	bne.n	8004578 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 faac 	bl	8004b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e01a      	b.n	8004684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2220      	movs	r2, #32
 8004654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6859      	ldr	r1, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <HAL_I2C_Mem_Write+0x224>)
 8004662:	400b      	ands	r3, r1
 8004664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	fe00e800 	.word	0xfe00e800

08004690 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	4608      	mov	r0, r1
 800469a:	4611      	mov	r1, r2
 800469c:	461a      	mov	r2, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	817b      	strh	r3, [r7, #10]
 80046a2:	460b      	mov	r3, r1
 80046a4:	813b      	strh	r3, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	f040 80fd 	bne.w	80048b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_I2C_Mem_Read+0x34>
 80046be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0f1      	b.n	80048b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_I2C_Mem_Read+0x4e>
 80046da:	2302      	movs	r3, #2
 80046dc:	e0ea      	b.n	80048b4 <HAL_I2C_Mem_Read+0x224>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046e6:	f7ff f9c1 	bl	8003a6c <HAL_GetTick>
 80046ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2319      	movs	r3, #25
 80046f2:	2201      	movs	r2, #1
 80046f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f9af 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0d5      	b.n	80048b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2222      	movs	r2, #34	@ 0x22
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2240      	movs	r2, #64	@ 0x40
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a3a      	ldr	r2, [r7, #32]
 8004722:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004728:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004730:	88f8      	ldrh	r0, [r7, #6]
 8004732:	893a      	ldrh	r2, [r7, #8]
 8004734:	8979      	ldrh	r1, [r7, #10]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4603      	mov	r3, r0
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f913 	bl	800496c <I2C_RequestMemoryRead>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0ad      	b.n	80048b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475c:	b29b      	uxth	r3, r3
 800475e:	2bff      	cmp	r3, #255	@ 0xff
 8004760:	d90e      	bls.n	8004780 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	22ff      	movs	r2, #255	@ 0xff
 8004766:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476c:	b2da      	uxtb	r2, r3
 800476e:	8979      	ldrh	r1, [r7, #10]
 8004770:	4b52      	ldr	r3, [pc, #328]	@ (80048bc <HAL_I2C_Mem_Read+0x22c>)
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fb33 	bl	8004de4 <I2C_TransferConfig>
 800477e:	e00f      	b.n	80047a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478e:	b2da      	uxtb	r2, r3
 8004790:	8979      	ldrh	r1, [r7, #10]
 8004792:	4b4a      	ldr	r3, [pc, #296]	@ (80048bc <HAL_I2C_Mem_Read+0x22c>)
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fb22 	bl	8004de4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	2200      	movs	r2, #0
 80047a8:	2104      	movs	r1, #4
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f956 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e07c      	b.n	80048b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d034      	beq.n	8004860 <HAL_I2C_Mem_Read+0x1d0>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d130      	bne.n	8004860 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004804:	2200      	movs	r2, #0
 8004806:	2180      	movs	r1, #128	@ 0x80
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f927 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e04d      	b.n	80048b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2bff      	cmp	r3, #255	@ 0xff
 8004820:	d90e      	bls.n	8004840 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	22ff      	movs	r2, #255	@ 0xff
 8004826:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482c:	b2da      	uxtb	r2, r3
 800482e:	8979      	ldrh	r1, [r7, #10]
 8004830:	2300      	movs	r3, #0
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fad3 	bl	8004de4 <I2C_TransferConfig>
 800483e:	e00f      	b.n	8004860 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484e:	b2da      	uxtb	r2, r3
 8004850:	8979      	ldrh	r1, [r7, #10]
 8004852:	2300      	movs	r3, #0
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fac2 	bl	8004de4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d19a      	bne.n	80047a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f994 	bl	8004b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e01a      	b.n	80048b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2220      	movs	r2, #32
 8004884:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <HAL_I2C_Mem_Read+0x230>)
 8004892:	400b      	ands	r3, r1
 8004894:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	80002400 	.word	0x80002400
 80048c0:	fe00e800 	.word	0xfe00e800

080048c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	460b      	mov	r3, r1
 80048d8:	813b      	strh	r3, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	8979      	ldrh	r1, [r7, #10]
 80048e4:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <I2C_RequestMemoryWrite+0xa4>)
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fa79 	bl	8004de4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	69b9      	ldr	r1, [r7, #24]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f909 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e02c      	b.n	8004960 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d105      	bne.n	8004918 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800490c:	893b      	ldrh	r3, [r7, #8]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	629a      	str	r2, [r3, #40]	@ 0x28
 8004916:	e015      	b.n	8004944 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004918:	893b      	ldrh	r3, [r7, #8]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	b29b      	uxth	r3, r3
 800491e:	b2da      	uxtb	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	69b9      	ldr	r1, [r7, #24]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f8ef 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e012      	b.n	8004960 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800493a:	893b      	ldrh	r3, [r7, #8]
 800493c:	b2da      	uxtb	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2200      	movs	r2, #0
 800494c:	2180      	movs	r1, #128	@ 0x80
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f884 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	80002000 	.word	0x80002000

0800496c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	461a      	mov	r2, r3
 800497a:	4603      	mov	r3, r0
 800497c:	817b      	strh	r3, [r7, #10]
 800497e:	460b      	mov	r3, r1
 8004980:	813b      	strh	r3, [r7, #8]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	8979      	ldrh	r1, [r7, #10]
 800498c:	4b20      	ldr	r3, [pc, #128]	@ (8004a10 <I2C_RequestMemoryRead+0xa4>)
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2300      	movs	r3, #0
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fa26 	bl	8004de4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	69b9      	ldr	r1, [r7, #24]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f8b6 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e02c      	b.n	8004a06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d105      	bne.n	80049be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049b2:	893b      	ldrh	r3, [r7, #8]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80049bc:	e015      	b.n	80049ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049be:	893b      	ldrh	r3, [r7, #8]
 80049c0:	0a1b      	lsrs	r3, r3, #8
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	69b9      	ldr	r1, [r7, #24]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f89c 	bl	8004b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e012      	b.n	8004a06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049e0:	893b      	ldrh	r3, [r7, #8]
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2200      	movs	r2, #0
 80049f2:	2140      	movs	r1, #64	@ 0x40
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f831 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	80002000 	.word	0x80002000

08004a14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d103      	bne.n	8004a32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d007      	beq.n	8004a50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	619a      	str	r2, [r3, #24]
  }
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a6c:	e03b      	b.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	6839      	ldr	r1, [r7, #0]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f8d6 	bl	8004c24 <I2C_IsErrorOccurred>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e041      	b.n	8004b06 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a88:	d02d      	beq.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8a:	f7fe ffef 	bl	8003a6c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d302      	bcc.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d122      	bne.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d113      	bne.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac2:	f043 0220 	orr.w	r2, r3, #32
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e00f      	b.n	8004b06 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4013      	ands	r3, r2
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	bf0c      	ite	eq
 8004af6:	2301      	moveq	r3, #1
 8004af8:	2300      	movne	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d0b4      	beq.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b1a:	e033      	b.n	8004b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f87f 	bl	8004c24 <I2C_IsErrorOccurred>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e031      	b.n	8004b94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b36:	d025      	beq.n	8004b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b38:	f7fe ff98 	bl	8003a6c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d302      	bcc.n	8004b4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d11a      	bne.n	8004b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d013      	beq.n	8004b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b60:	f043 0220 	orr.w	r2, r3, #32
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e007      	b.n	8004b94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d1c4      	bne.n	8004b1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ba8:	e02f      	b.n	8004c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f838 	bl	8004c24 <I2C_IsErrorOccurred>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e02d      	b.n	8004c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fe ff55 	bl	8003a6c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11a      	bne.n	8004c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d013      	beq.n	8004c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	f043 0220 	orr.w	r2, r3, #32
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e007      	b.n	8004c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d1c8      	bne.n	8004baa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d068      	beq.n	8004d22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2210      	movs	r2, #16
 8004c56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c58:	e049      	b.n	8004cee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c60:	d045      	beq.n	8004cee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c62:	f7fe ff03 	bl	8003a6c <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d302      	bcc.n	8004c78 <I2C_IsErrorOccurred+0x54>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d13a      	bne.n	8004cee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c9a:	d121      	bne.n	8004ce0 <I2C_IsErrorOccurred+0xbc>
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ca2:	d01d      	beq.n	8004ce0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d01a      	beq.n	8004ce0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004cba:	f7fe fed7 	bl	8003a6c <HAL_GetTick>
 8004cbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cc0:	e00e      	b.n	8004ce0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004cc2:	f7fe fed3 	bl	8003a6c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b19      	cmp	r3, #25
 8004cce:	d907      	bls.n	8004ce0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	f043 0320 	orr.w	r3, r3, #32
 8004cd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004cde:	e006      	b.n	8004cee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d1e9      	bne.n	8004cc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d003      	beq.n	8004d04 <I2C_IsErrorOccurred+0xe0>
 8004cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0aa      	beq.n	8004c5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2220      	movs	r2, #32
 8004d12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	f043 0304 	orr.w	r3, r3, #4
 8004d1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00b      	beq.n	8004d4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00b      	beq.n	8004d6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	f043 0308 	orr.w	r3, r3, #8
 8004d5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00b      	beq.n	8004d90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f043 0302 	orr.w	r3, r3, #2
 8004d7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01c      	beq.n	8004dd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff fe3b 	bl	8004a14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <I2C_IsErrorOccurred+0x1bc>)
 8004daa:	400b      	ands	r3, r1
 8004dac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3728      	adds	r7, #40	@ 0x28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	fe00e800 	.word	0xfe00e800

08004de4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	817b      	strh	r3, [r7, #10]
 8004df2:	4613      	mov	r3, r2
 8004df4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004df6:	897b      	ldrh	r3, [r7, #10]
 8004df8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dfc:	7a7b      	ldrb	r3, [r7, #9]
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	0d5b      	lsrs	r3, r3, #21
 8004e1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004e22:	4b08      	ldr	r3, [pc, #32]	@ (8004e44 <I2C_TransferConfig+0x60>)
 8004e24:	430b      	orrs	r3, r1
 8004e26:	43db      	mvns	r3, r3
 8004e28:	ea02 0103 	and.w	r1, r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	03ff63ff 	.word	0x03ff63ff

08004e48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d138      	bne.n	8004ed0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e032      	b.n	8004ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	@ 0x24
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d139      	bne.n	8004f68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e033      	b.n	8004f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2224      	movs	r2, #36	@ 0x24
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e000      	b.n	8004f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
  }
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01e      	beq.n	8004fc8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004f8a:	4b13      	ldr	r3, [pc, #76]	@ (8004fd8 <HAL_IPCC_Init+0x60>)
 8004f8c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fe fbcc 	bl	8003738 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004fa0:	68b8      	ldr	r0, [r7, #8]
 8004fa2:	f000 f85b 	bl	800505c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f82c 	bl	8005010 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004fc6:	e001      	b.n	8004fcc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	58000c00 	.word	0x58000c00

08004fdc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	4613      	mov	r3, r2
 8005002:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e00f      	b.n	800503e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	4a0b      	ldr	r2, [pc, #44]	@ (8005054 <IPCC_SetDefaultCallbacks+0x44>)
 8005028:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3306      	adds	r3, #6
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	4a08      	ldr	r2, [pc, #32]	@ (8005058 <IPCC_SetDefaultCallbacks+0x48>)
 8005036:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3301      	adds	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b05      	cmp	r3, #5
 8005042:	d9ec      	bls.n	800501e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	08004fdd 	.word	0x08004fdd
 8005058:	08004ff7 	.word	0x08004ff7

0800505c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8005070:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	223f      	movs	r2, #63	@ 0x3f
 8005076:	609a      	str	r2, [r3, #8]
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005088:	4b05      	ldr	r3, [pc, #20]	@ (80050a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a04      	ldr	r2, [pc, #16]	@ (80050a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800508e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005092:	6013      	str	r3, [r2, #0]
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	58000400 	.word	0x58000400

080050a4 <LL_PWR_EnableSRAM2Retention>:
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4a04      	ldr	r2, [pc, #16]	@ (80050c0 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80050ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050b2:	6093      	str	r3, [r2, #8]
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	58000400 	.word	0x58000400

080050c4 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 80050c8:	f7ff ffec 	bl	80050a4 <LL_PWR_EnableSRAM2Retention>
}
 80050cc:	bf00      	nop
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80050d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e2:	d101      	bne.n	80050e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <LL_RCC_HSE_Enable>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005106:	6013      	str	r3, [r2, #0]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <LL_RCC_HSE_Disable>:
{
 8005112:	b480      	push	{r7}
 8005114:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005124:	6013      	str	r3, [r2, #0]
}
 8005126:	bf00      	nop
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <LL_RCC_HSE_IsReady>:
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005142:	d101      	bne.n	8005148 <LL_RCC_HSE_IsReady+0x18>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <LL_RCC_HSE_IsReady+0x1a>
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <LL_RCC_HSI_Enable>:
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <LL_RCC_HSI_Disable>:
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005184:	6013      	str	r3, [r2, #0]
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <LL_RCC_HSI_IsReady>:
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a2:	d101      	bne.n	80051a8 <LL_RCC_HSI_IsReady+0x18>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <LL_RCC_HSI_IsReady+0x1a>
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	061b      	lsls	r3, r3, #24
 80051ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <LL_RCC_LSE_Enable>:
{
 80051de:	b480      	push	{r7}
 80051e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80051e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80051f6:	bf00      	nop
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <LL_RCC_LSE_Disable>:
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005218:	bf00      	nop
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <LL_RCC_LSE_EnableBypass>:
{
 8005222:	b480      	push	{r7}
 8005224:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800523a:	bf00      	nop
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <LL_RCC_LSE_DisableBypass>:
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005254:	f023 0304 	bic.w	r3, r3, #4
 8005258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800525c:	bf00      	nop
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <LL_RCC_LSE_IsReady>:
{
 8005266:	b480      	push	{r7}
 8005268:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800526a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d101      	bne.n	800527e <LL_RCC_LSE_IsReady+0x18>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <LL_RCC_LSE_IsReady+0x1a>
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <LL_RCC_LSI1_Enable>:
{
 800528a:	b480      	push	{r7}
 800528c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800528e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005296:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80052a2:	bf00      	nop
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_RCC_LSI1_Disable>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <LL_RCC_LSI1_IsReady>:
{
 80052ce:	b480      	push	{r7}
 80052d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80052d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d101      	bne.n	80052e6 <LL_RCC_LSI1_IsReady+0x18>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <LL_RCC_LSI1_IsReady+0x1a>
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <LL_RCC_LSI2_Enable>:
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80052f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005302:	f043 0304 	orr.w	r3, r3, #4
 8005306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800530a:	bf00      	nop
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <LL_RCC_LSI2_Disable>:
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800531c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800532c:	bf00      	nop
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <LL_RCC_LSI2_IsReady>:
{
 8005336:	b480      	push	{r7}
 8005338:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800533a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800533e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b08      	cmp	r3, #8
 8005348:	d101      	bne.n	800534e <LL_RCC_LSI2_IsReady+0x18>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <LL_RCC_LSI2_IsReady+0x1a>
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <LL_RCC_LSI2_SetTrimming>:
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800536a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <LL_RCC_MSI_Enable>:
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6013      	str	r3, [r2, #0]
}
 800539c:	bf00      	nop
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <LL_RCC_MSI_Disable>:
{
 80053a6:	b480      	push	{r7}
 80053a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	6013      	str	r3, [r2, #0]
}
 80053ba:	bf00      	nop
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <LL_RCC_MSI_IsReady>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80053c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d101      	bne.n	80053da <LL_RCC_MSI_IsReady+0x16>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <LL_RCC_MSI_IsReady+0x18>
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <LL_RCC_MSI_SetRange>:
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4313      	orrs	r3, r2
 8005400:	600b      	str	r3, [r1, #0]
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <LL_RCC_MSI_GetRange>:
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800541e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2bb0      	cmp	r3, #176	@ 0xb0
 8005424:	d901      	bls.n	800542a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005426:	23b0      	movs	r3, #176	@ 0xb0
 8005428:	607b      	str	r3, [r7, #4]
  return msiRange;
 800542a:	687b      	ldr	r3, [r7, #4]
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005452:	4313      	orrs	r3, r2
 8005454:	604b      	str	r3, [r1, #4]
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <LL_RCC_SetSysClkSource>:
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800546a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f023 0203 	bic.w	r2, r3, #3
 8005474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <LL_RCC_GetSysClkSource>:
{
 800548a:	b480      	push	{r7}
 800548c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800548e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 030c 	and.w	r3, r3, #12
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <LL_RCC_SetAHBPrescaler>:
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80054aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <LL_C2_RCC_SetAHBPrescaler>:
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80054d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80054da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <LL_RCC_SetAHB4Prescaler>:
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80054fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005502:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005506:	f023 020f 	bic.w	r2, r3, #15
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <LL_RCC_SetAPB1Prescaler>:
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800552c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4313      	orrs	r3, r2
 800553e:	608b      	str	r3, [r1, #8]
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <LL_RCC_SetAPB2Prescaler>:
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800555e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4313      	orrs	r3, r2
 8005566:	608b      	str	r3, [r1, #8]
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <LL_RCC_GetAHBPrescaler>:
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005582:	4618      	mov	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_RCC_GetAHB4Prescaler>:
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005594:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ba:	6013      	str	r3, [r2, #0]
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80055c6:	b480      	push	{r7}
 80055c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80055ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055d8:	6013      	str	r3, [r2, #0]
}
 80055da:	bf00      	nop
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80055e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055f6:	d101      	bne.n	80055fc <LL_RCC_PLL_IsReady+0x18>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <LL_RCC_PLL_IsReady+0x1a>
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800560c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005618:	4618      	mov	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005622:	b480      	push	{r7}
 8005624:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800563a:	b480      	push	{r7}
 800563c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800563e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005648:	4618      	mov	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005652:	b480      	push	{r7}
 8005654:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0303 	and.w	r3, r3, #3
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800566a:	b480      	push	{r7}
 800566c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800566e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800567c:	d101      	bne.n	8005682 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800568e:	b480      	push	{r7}
 8005690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005696:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056a2:	d101      	bne.n	80056a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80056b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80056c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c8:	d101      	bne.n	80056ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80056da:	b480      	push	{r7}
 80056dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80056de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056ec:	d101      	bne.n	80056f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80056fe:	b480      	push	{r7}
 8005700:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800570c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005710:	d101      	bne.n	8005716 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b08d      	sub	sp, #52	@ 0x34
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e324      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 808d 	beq.w	800585e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005744:	f7ff fea1 	bl	800548a <LL_RCC_GetSysClkSource>
 8005748:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800574a:	f7ff ff82 	bl	8005652 <LL_RCC_PLL_GetMainSource>
 800574e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_RCC_OscConfig+0x3e>
 8005756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005758:	2b0c      	cmp	r3, #12
 800575a:	d147      	bne.n	80057ec <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	2b01      	cmp	r3, #1
 8005760:	d144      	bne.n	80057ec <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e308      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005772:	f7ff fe4c 	bl	800540e <LL_RCC_MSI_GetRange>
 8005776:	4603      	mov	r3, r0
 8005778:	429c      	cmp	r4, r3
 800577a:	d914      	bls.n	80057a6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fcc5 	bl	8006110 <RCC_SetFlashLatencyFromMSIRange>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e2f7      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fe26 	bl	80053e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fe4a 	bl	8005438 <LL_RCC_MSI_SetCalibTrimming>
 80057a4:	e013      	b.n	80057ce <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fe1b 	bl	80053e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fe3f 	bl	8005438 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fca6 	bl	8006110 <RCC_SetFlashLatencyFromMSIRange>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e2d8      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80057ce:	f000 fc8b 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4aa4      	ldr	r2, [pc, #656]	@ (8005a68 <HAL_RCC_OscConfig+0x344>)
 80057d6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057d8:	4ba4      	ldr	r3, [pc, #656]	@ (8005a6c <HAL_RCC_OscConfig+0x348>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe f8f7 	bl	80039d0 <HAL_InitTick>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d039      	beq.n	800585c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e2c9      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01e      	beq.n	8005832 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057f4:	f7ff fdc8 	bl	8005388 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057f8:	f7fe f938 	bl	8003a6c <HAL_GetTick>
 80057fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005800:	f7fe f934 	bl	8003a6c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e2b6      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005812:	f7ff fdd7 	bl	80053c4 <LL_RCC_MSI_IsReady>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f1      	beq.n	8005800 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fde0 	bl	80053e6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fe04 	bl	8005438 <LL_RCC_MSI_SetCalibTrimming>
 8005830:	e015      	b.n	800585e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005832:	f7ff fdb8 	bl	80053a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005836:	f7fe f919 	bl	8003a6c <HAL_GetTick>
 800583a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800583e:	f7fe f915 	bl	8003a6c <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e297      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005850:	f7ff fdb8 	bl	80053c4 <LL_RCC_MSI_IsReady>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f1      	bne.n	800583e <HAL_RCC_OscConfig+0x11a>
 800585a:	e000      	b.n	800585e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800585c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d047      	beq.n	80058fa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800586a:	f7ff fe0e 	bl	800548a <LL_RCC_GetSysClkSource>
 800586e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005870:	f7ff feef 	bl	8005652 <LL_RCC_PLL_GetMainSource>
 8005874:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	2b08      	cmp	r3, #8
 800587a:	d005      	beq.n	8005888 <HAL_RCC_OscConfig+0x164>
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	2b0c      	cmp	r3, #12
 8005880:	d108      	bne.n	8005894 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2b03      	cmp	r3, #3
 8005886:	d105      	bne.n	8005894 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d134      	bne.n	80058fa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e275      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800589c:	d102      	bne.n	80058a4 <HAL_RCC_OscConfig+0x180>
 800589e:	f7ff fc29 	bl	80050f4 <LL_RCC_HSE_Enable>
 80058a2:	e001      	b.n	80058a8 <HAL_RCC_OscConfig+0x184>
 80058a4:	f7ff fc35 	bl	8005112 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d012      	beq.n	80058d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b0:	f7fe f8dc 	bl	8003a6c <HAL_GetTick>
 80058b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b8:	f7fe f8d8 	bl	8003a6c <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b64      	cmp	r3, #100	@ 0x64
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e25a      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80058ca:	f7ff fc31 	bl	8005130 <LL_RCC_HSE_IsReady>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0f1      	beq.n	80058b8 <HAL_RCC_OscConfig+0x194>
 80058d4:	e011      	b.n	80058fa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d6:	f7fe f8c9 	bl	8003a6c <HAL_GetTick>
 80058da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058de:	f7fe f8c5 	bl	8003a6c <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b64      	cmp	r3, #100	@ 0x64
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e247      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80058f0:	f7ff fc1e 	bl	8005130 <LL_RCC_HSE_IsReady>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f1      	bne.n	80058de <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d04c      	beq.n	80059a0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005906:	f7ff fdc0 	bl	800548a <LL_RCC_GetSysClkSource>
 800590a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800590c:	f7ff fea1 	bl	8005652 <LL_RCC_PLL_GetMainSource>
 8005910:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b04      	cmp	r3, #4
 8005916:	d005      	beq.n	8005924 <HAL_RCC_OscConfig+0x200>
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	2b0c      	cmp	r3, #12
 800591c:	d10e      	bne.n	800593c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d10b      	bne.n	800593c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e227      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fc3d 	bl	80051b4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800593a:	e031      	b.n	80059a0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d019      	beq.n	8005978 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005944:	f7ff fc06 	bl	8005154 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005948:	f7fe f890 	bl	8003a6c <HAL_GetTick>
 800594c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005950:	f7fe f88c 	bl	8003a6c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e20e      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005962:	f7ff fc15 	bl	8005190 <LL_RCC_HSI_IsReady>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0f1      	beq.n	8005950 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff fc1f 	bl	80051b4 <LL_RCC_HSI_SetCalibTrimming>
 8005976:	e013      	b.n	80059a0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005978:	f7ff fbfb 	bl	8005172 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fe f876 	bl	8003a6c <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005984:	f7fe f872 	bl	8003a6c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e1f4      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005996:	f7ff fbfb 	bl	8005190 <LL_RCC_HSI_IsReady>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f1      	bne.n	8005984 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80a3 	beq.w	8005b00 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d076      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d046      	beq.n	8005a5c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80059ce:	f7ff fc7e 	bl	80052ce <LL_RCC_LSI1_IsReady>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d113      	bne.n	8005a00 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80059d8:	f7ff fc57 	bl	800528a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059dc:	f7fe f846 	bl	8003a6c <HAL_GetTick>
 80059e0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059e4:	f7fe f842 	bl	8003a6c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e1c4      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80059f6:	f7ff fc6a 	bl	80052ce <LL_RCC_LSI1_IsReady>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0f1      	beq.n	80059e4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005a00:	f7ff fc77 	bl	80052f2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fe f832 	bl	8003a6c <HAL_GetTick>
 8005a08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a0c:	f7fe f82e 	bl	8003a6c <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e1b0      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a1e:	f7ff fc8a 	bl	8005336 <LL_RCC_LSI2_IsReady>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f1      	beq.n	8005a0c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fc94 	bl	800535a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005a32:	f7ff fc3b 	bl	80052ac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fe f819 	bl	8003a6c <HAL_GetTick>
 8005a3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a3e:	f7fe f815 	bl	8003a6c <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e197      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005a50:	f7ff fc3d 	bl	80052ce <LL_RCC_LSI1_IsReady>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f1      	bne.n	8005a3e <HAL_RCC_OscConfig+0x31a>
 8005a5a:	e051      	b.n	8005b00 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005a5c:	f7ff fc15 	bl	800528a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7fe f804 	bl	8003a6c <HAL_GetTick>
 8005a64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a66:	e00c      	b.n	8005a82 <HAL_RCC_OscConfig+0x35e>
 8005a68:	20000014 	.word	0x20000014
 8005a6c:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a70:	f7fd fffc 	bl	8003a6c <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e17e      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a82:	f7ff fc24 	bl	80052ce <LL_RCC_LSI1_IsReady>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f1      	beq.n	8005a70 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005a8c:	f7ff fc42 	bl	8005314 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a92:	f7fd ffeb 	bl	8003a6c <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e16d      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005aa4:	f7ff fc47 	bl	8005336 <LL_RCC_LSI2_IsReady>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f1      	bne.n	8005a92 <HAL_RCC_OscConfig+0x36e>
 8005aae:	e027      	b.n	8005b00 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005ab0:	f7ff fc30 	bl	8005314 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab4:	f7fd ffda 	bl	8003a6c <HAL_GetTick>
 8005ab8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005abc:	f7fd ffd6 	bl	8003a6c <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e158      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005ace:	f7ff fc32 	bl	8005336 <LL_RCC_LSI2_IsReady>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1f1      	bne.n	8005abc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005ad8:	f7ff fbe8 	bl	80052ac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005adc:	f7fd ffc6 	bl	8003a6c <HAL_GetTick>
 8005ae0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005ae4:	f7fd ffc2 	bl	8003a6c <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e144      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005af6:	f7ff fbea 	bl	80052ce <LL_RCC_LSI1_IsReady>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1f1      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d05b      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b0c:	4b9e      	ldr	r3, [pc, #632]	@ (8005d88 <HAL_RCC_OscConfig+0x664>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d114      	bne.n	8005b42 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b18:	f7ff fab4 	bl	8005084 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1c:	f7fd ffa6 	bl	8003a6c <HAL_GetTick>
 8005b20:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b24:	f7fd ffa2 	bl	8003a6c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e124      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b36:	4b94      	ldr	r3, [pc, #592]	@ (8005d88 <HAL_RCC_OscConfig+0x664>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0f0      	beq.n	8005b24 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d102      	bne.n	8005b50 <HAL_RCC_OscConfig+0x42c>
 8005b4a:	f7ff fb48 	bl	80051de <LL_RCC_LSE_Enable>
 8005b4e:	e00c      	b.n	8005b6a <HAL_RCC_OscConfig+0x446>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b05      	cmp	r3, #5
 8005b56:	d104      	bne.n	8005b62 <HAL_RCC_OscConfig+0x43e>
 8005b58:	f7ff fb63 	bl	8005222 <LL_RCC_LSE_EnableBypass>
 8005b5c:	f7ff fb3f 	bl	80051de <LL_RCC_LSE_Enable>
 8005b60:	e003      	b.n	8005b6a <HAL_RCC_OscConfig+0x446>
 8005b62:	f7ff fb4d 	bl	8005200 <LL_RCC_LSE_Disable>
 8005b66:	f7ff fb6d 	bl	8005244 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d014      	beq.n	8005b9c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b72:	f7fd ff7b 	bl	8003a6c <HAL_GetTick>
 8005b76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b78:	e00a      	b.n	8005b90 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7a:	f7fd ff77 	bl	8003a6c <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e0f7      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b90:	f7ff fb69 	bl	8005266 <LL_RCC_LSE_IsReady>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0ef      	beq.n	8005b7a <HAL_RCC_OscConfig+0x456>
 8005b9a:	e013      	b.n	8005bc4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9c:	f7fd ff66 	bl	8003a6c <HAL_GetTick>
 8005ba0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005ba2:	e00a      	b.n	8005bba <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba4:	f7fd ff62 	bl	8003a6c <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e0e2      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bba:	f7ff fb54 	bl	8005266 <LL_RCC_LSE_IsReady>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1ef      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80d8 	beq.w	8005d7e <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bce:	f7ff fc5c 	bl	800548a <LL_RCC_GetSysClkSource>
 8005bd2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	f040 80a6 	bne.w	8005d32 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f003 0203 	and.w	r2, r3, #3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d123      	bne.n	8005c3c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d11c      	bne.n	8005c3c <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	0a1b      	lsrs	r3, r3, #8
 8005c06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d114      	bne.n	8005c3c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d10d      	bne.n	8005c3c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d106      	bne.n	8005c3c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d054      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b0c      	cmp	r3, #12
 8005c40:	d04f      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c42:	f7ff fcc0 	bl	80055c6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c46:	f7fd ff11 	bl	8003a6c <HAL_GetTick>
 8005c4a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4e:	f7fd ff0d 	bl	8003a6c <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e08f      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1ef      	bne.n	8005c4e <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	4b45      	ldr	r3, [pc, #276]	@ (8005d8c <HAL_RCC_OscConfig+0x668>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c80:	4311      	orrs	r1, r2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c86:	0212      	lsls	r2, r2, #8
 8005c88:	4311      	orrs	r1, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c8e:	4311      	orrs	r1, r2
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c94:	4311      	orrs	r1, r2
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ca4:	f7ff fc80 	bl	80055a8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cb8:	f7fd fed8 	bl	8003a6c <HAL_GetTick>
 8005cbc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc0:	f7fd fed4 	bl	8003a6c <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e056      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0ef      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce0:	e04d      	b.n	8005d7e <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e04c      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d144      	bne.n	8005d7e <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cf4:	f7ff fc58 	bl	80055a8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d08:	f7fd feb0 	bl	8003a6c <HAL_GetTick>
 8005d0c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d10:	f7fd feac 	bl	8003a6c <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e02e      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0ef      	beq.n	8005d10 <HAL_RCC_OscConfig+0x5ec>
 8005d30:	e025      	b.n	8005d7e <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d020      	beq.n	8005d7a <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d38:	f7ff fc45 	bl	80055c6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fd fe96 	bl	8003a6c <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d44:	f7fd fe92 	bl	8003a6c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e014      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ef      	bne.n	8005d44 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8005d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	60d3      	str	r3, [r2, #12]
 8005d78:	e001      	b.n	8005d7e <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3734      	adds	r7, #52	@ 0x34
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd90      	pop	{r4, r7, pc}
 8005d88:	58000400 	.word	0x58000400
 8005d8c:	11c1808c 	.word	0x11c1808c

08005d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e12d      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005da4:	4b98      	ldr	r3, [pc, #608]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d91b      	bls.n	8005dea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db2:	4b95      	ldr	r3, [pc, #596]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f023 0207 	bic.w	r2, r3, #7
 8005dba:	4993      	ldr	r1, [pc, #588]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc2:	f7fd fe53 	bl	8003a6c <HAL_GetTick>
 8005dc6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005dca:	f7fd fe4f 	bl	8003a6c <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e111      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ddc:	4b8a      	ldr	r3, [pc, #552]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d1ef      	bne.n	8005dca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d016      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff fb51 	bl	80054a2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e00:	f7fd fe34 	bl	8003a6c <HAL_GetTick>
 8005e04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e08:	f7fd fe30 	bl	8003a6c <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e0f2      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e1a:	f7ff fc26 	bl	800566a <LL_RCC_IsActiveFlag_HPRE>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f1      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d016      	beq.n	8005e5e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fb48 	bl	80054ca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e3a:	f7fd fe17 	bl	8003a6c <HAL_GetTick>
 8005e3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e42:	f7fd fe13 	bl	8003a6c <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e0d5      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e54:	f7ff fc1b 	bl	800568e <LL_RCC_IsActiveFlag_C2HPRE>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f1      	beq.n	8005e42 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff fb41 	bl	80054f6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e74:	f7fd fdfa 	bl	8003a6c <HAL_GetTick>
 8005e78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e7c:	f7fd fdf6 	bl	8003a6c <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e0b8      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e8e:	f7ff fc11 	bl	80056b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f1      	beq.n	8005e7c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d016      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fb3b 	bl	8005524 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005eae:	f7fd fddd 	bl	8003a6c <HAL_GetTick>
 8005eb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005eb6:	f7fd fdd9 	bl	8003a6c <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e09b      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ec8:	f7ff fc07 	bl	80056da <LL_RCC_IsActiveFlag_PPRE1>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f1      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d017      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff fb31 	bl	800554c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005eea:	f7fd fdbf 	bl	8003a6c <HAL_GetTick>
 8005eee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ef2:	f7fd fdbb 	bl	8003a6c <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e07d      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f04:	f7ff fbfb 	bl	80056fe <LL_RCC_IsActiveFlag_PPRE2>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f1      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d043      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d106      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005f22:	f7ff f905 	bl	8005130 <LL_RCC_HSE_IsReady>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d11e      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e067      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d106      	bne.n	8005f46 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005f38:	f7ff fb54 	bl	80055e4 <LL_RCC_PLL_IsReady>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d113      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e05c      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005f4e:	f7ff fa39 	bl	80053c4 <LL_RCC_MSI_IsReady>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d108      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e051      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005f5c:	f7ff f918 	bl	8005190 <LL_RCC_HSI_IsReady>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e04a      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fa77 	bl	8005462 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f74:	f7fd fd7a 	bl	8003a6c <HAL_GetTick>
 8005f78:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7a:	e00a      	b.n	8005f92 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f7c:	f7fd fd76 	bl	8003a6c <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e036      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f92:	f7ff fa7a 	bl	800548a <LL_RCC_GetSysClkSource>
 8005f96:	4602      	mov	r2, r0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d1ec      	bne.n	8005f7c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fa2:	4b19      	ldr	r3, [pc, #100]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d21b      	bcs.n	8005fe8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb0:	4b15      	ldr	r3, [pc, #84]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f023 0207 	bic.w	r2, r3, #7
 8005fb8:	4913      	ldr	r1, [pc, #76]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc0:	f7fd fd54 	bl	8003a6c <HAL_GetTick>
 8005fc4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fc8:	f7fd fd50 	bl	8003a6c <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e012      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fda:	4b0b      	ldr	r3, [pc, #44]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d1ef      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005fe8:	f000 f87e 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 8005fec:	4603      	mov	r3, r0
 8005fee:	4a07      	ldr	r2, [pc, #28]	@ (800600c <HAL_RCC_ClockConfig+0x27c>)
 8005ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005ff2:	f7fd fd47 	bl	8003a84 <HAL_GetTickPrio>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fd fce9 	bl	80039d0 <HAL_InitTick>
 8005ffe:	4603      	mov	r3, r0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	58004000 	.word	0x58004000
 800600c:	20000014 	.word	0x20000014

08006010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006016:	f7ff fa38 	bl	800548a <LL_RCC_GetSysClkSource>
 800601a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006022:	f7ff f9f4 	bl	800540e <LL_RCC_MSI_GetRange>
 8006026:	4603      	mov	r3, r0
 8006028:	091b      	lsrs	r3, r3, #4
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	4a2b      	ldr	r2, [pc, #172]	@ (80060dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	e04b      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b04      	cmp	r3, #4
 800603c:	d102      	bne.n	8006044 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800603e:	4b28      	ldr	r3, [pc, #160]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	e045      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b08      	cmp	r3, #8
 8006048:	d10a      	bne.n	8006060 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800604a:	f7ff f841 	bl	80050d0 <LL_RCC_HSE_IsEnabledDiv2>
 800604e:	4603      	mov	r3, r0
 8006050:	2b01      	cmp	r3, #1
 8006052:	d102      	bne.n	800605a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006054:	4b22      	ldr	r3, [pc, #136]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e03a      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800605a:	4b22      	ldr	r3, [pc, #136]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	e037      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006060:	f7ff faf7 	bl	8005652 <LL_RCC_PLL_GetMainSource>
 8006064:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d003      	beq.n	8006074 <HAL_RCC_GetSysClockFreq+0x64>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d003      	beq.n	800607a <HAL_RCC_GetSysClockFreq+0x6a>
 8006072:	e00d      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006074:	4b1a      	ldr	r3, [pc, #104]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006076:	60bb      	str	r3, [r7, #8]
        break;
 8006078:	e015      	b.n	80060a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800607a:	f7ff f829 	bl	80050d0 <LL_RCC_HSE_IsEnabledDiv2>
 800607e:	4603      	mov	r3, r0
 8006080:	2b01      	cmp	r3, #1
 8006082:	d102      	bne.n	800608a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006084:	4b16      	ldr	r3, [pc, #88]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006086:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006088:	e00d      	b.n	80060a6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800608a:	4b16      	ldr	r3, [pc, #88]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800608c:	60bb      	str	r3, [r7, #8]
        break;
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006090:	f7ff f9bd 	bl	800540e <LL_RCC_MSI_GetRange>
 8006094:	4603      	mov	r3, r0
 8006096:	091b      	lsrs	r3, r3, #4
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	4a0f      	ldr	r2, [pc, #60]	@ (80060dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800609e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a2:	60bb      	str	r3, [r7, #8]
        break;
 80060a4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80060a6:	f7ff faaf 	bl	8005608 <LL_RCC_PLL_GetN>
 80060aa:	4602      	mov	r2, r0
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	fb03 f402 	mul.w	r4, r3, r2
 80060b2:	f7ff fac2 	bl	800563a <LL_RCC_PLL_GetDivider>
 80060b6:	4603      	mov	r3, r0
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	3301      	adds	r3, #1
 80060bc:	fbb4 f4f3 	udiv	r4, r4, r3
 80060c0:	f7ff faaf 	bl	8005622 <LL_RCC_PLL_GetR>
 80060c4:	4603      	mov	r3, r0
 80060c6:	0f5b      	lsrs	r3, r3, #29
 80060c8:	3301      	adds	r3, #1
 80060ca:	fbb4 f3f3 	udiv	r3, r4, r3
 80060ce:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80060d0:	68fb      	ldr	r3, [r7, #12]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd90      	pop	{r4, r7, pc}
 80060da:	bf00      	nop
 80060dc:	0800a090 	.word	0x0800a090
 80060e0:	00f42400 	.word	0x00f42400
 80060e4:	01e84800 	.word	0x01e84800

080060e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e8:	b598      	push	{r3, r4, r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80060ec:	f7ff ff90 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 80060f0:	4604      	mov	r4, r0
 80060f2:	f7ff fa3f 	bl	8005574 <LL_RCC_GetAHBPrescaler>
 80060f6:	4603      	mov	r3, r0
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	4a03      	ldr	r2, [pc, #12]	@ (800610c <HAL_RCC_GetHCLKFreq+0x24>)
 8006100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006104:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	bd98      	pop	{r3, r4, r7, pc}
 800610c:	0800a050 	.word	0x0800a050

08006110 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2bb0      	cmp	r3, #176	@ 0xb0
 800611c:	d903      	bls.n	8006126 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800611e:	4b14      	ldr	r3, [pc, #80]	@ (8006170 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e007      	b.n	8006136 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	4a10      	ldr	r2, [pc, #64]	@ (8006170 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006134:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006136:	f7ff fa29 	bl	800558c <LL_RCC_GetAHB4Prescaler>
 800613a:	4603      	mov	r3, r0
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	4a0c      	ldr	r2, [pc, #48]	@ (8006174 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	fbb2 f3f3 	udiv	r3, r2, r3
 800614e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4a09      	ldr	r2, [pc, #36]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006154:	fba2 2303 	umull	r2, r3, r2, r3
 8006158:	0c9b      	lsrs	r3, r3, #18
 800615a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800615e:	4618      	mov	r0, r3
 8006160:	f000 f80c 	bl	800617c <RCC_SetFlashLatency>
 8006164:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	0800a090 	.word	0x0800a090
 8006174:	0800a050 	.word	0x0800a050
 8006178:	431bde83 	.word	0x431bde83

0800617c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800617c:	b590      	push	{r4, r7, lr}
 800617e:	b08f      	sub	sp, #60	@ 0x3c
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006186:	4b24      	ldr	r3, [pc, #144]	@ (8006218 <RCC_SetFlashLatency+0x9c>)
 8006188:	f107 041c 	add.w	r4, r7, #28
 800618c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800618e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006192:	4b22      	ldr	r3, [pc, #136]	@ (800621c <RCC_SetFlashLatency+0xa0>)
 8006194:	f107 040c 	add.w	r4, r7, #12
 8006198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800619a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800619e:	2300      	movs	r3, #0
 80061a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80061a2:	2300      	movs	r3, #0
 80061a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80061a6:	e013      	b.n	80061d0 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	3338      	adds	r3, #56	@ 0x38
 80061ae:	443b      	add	r3, r7
 80061b0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d807      	bhi.n	80061ca <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	3338      	adds	r3, #56	@ 0x38
 80061c0:	443b      	add	r3, r7
 80061c2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80061c6:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 80061c8:	e005      	b.n	80061d6 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	3301      	adds	r3, #1
 80061ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d9e8      	bls.n	80061a8 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80061d6:	4b12      	ldr	r3, [pc, #72]	@ (8006220 <RCC_SetFlashLatency+0xa4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f023 0207 	bic.w	r2, r3, #7
 80061de:	4910      	ldr	r1, [pc, #64]	@ (8006220 <RCC_SetFlashLatency+0xa4>)
 80061e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e2:	4313      	orrs	r3, r2
 80061e4:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061e6:	f7fd fc41 	bl	8003a6c <HAL_GetTick>
 80061ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80061ec:	e008      	b.n	8006200 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061ee:	f7fd fc3d 	bl	8003a6c <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e007      	b.n	8006210 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006200:	4b07      	ldr	r3, [pc, #28]	@ (8006220 <RCC_SetFlashLatency+0xa4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800620a:	429a      	cmp	r2, r3
 800620c:	d1ef      	bne.n	80061ee <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	373c      	adds	r7, #60	@ 0x3c
 8006214:	46bd      	mov	sp, r7
 8006216:	bd90      	pop	{r4, r7, pc}
 8006218:	08009eb8 	.word	0x08009eb8
 800621c:	08009ec8 	.word	0x08009ec8
 8006220:	58004000 	.word	0x58004000

08006224 <LL_RCC_LSE_IsEnabled>:
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <LL_RCC_LSE_IsEnabled+0x18>
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <LL_RCC_LSE_IsEnabled+0x1a>
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <LL_RCC_LSE_IsReady>:
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800624c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d101      	bne.n	8006260 <LL_RCC_LSE_IsReady+0x18>
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <LL_RCC_LSE_IsReady+0x1a>
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <LL_RCC_SetRFWKPClockSource>:
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800627c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006280:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <LL_RCC_SetUSARTClockSource>:
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80062a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a8:	f023 0203 	bic.w	r2, r3, #3
 80062ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <LL_RCC_SetI2CClockSource>:
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80062cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80062e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <LL_RCC_SetLPTIMClockSource>:
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800630a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	0c1b      	lsrs	r3, r3, #16
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	43db      	mvns	r3, r3
 8006316:	401a      	ands	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	041b      	lsls	r3, r3, #16
 800631c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <LL_RCC_SetRNGClockSource>:
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800633a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006342:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <LL_RCC_SetCLK48ClockSource>:
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800636e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4313      	orrs	r3, r2
 800637a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <LL_RCC_SetADCClockSource>:
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800639e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <LL_RCC_SetRTCClockSource>:
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80063be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <LL_RCC_GetRTCClockSource>:
{
 80063e2:	b480      	push	{r7}
 80063e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80063e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <LL_RCC_ForceBackupDomainReset>:
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800640c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006414:	bf00      	nop
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <LL_RCC_ReleaseBackupDomainReset>:
{
 800641e:	b480      	push	{r7}
 8006420:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800642e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006436:	bf00      	nop
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006448:	2300      	movs	r3, #0
 800644a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800644c:	2300      	movs	r3, #0
 800644e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006458:	2b00      	cmp	r3, #0
 800645a:	d046      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800645c:	f7ff ffc1 	bl	80063e2 <LL_RCC_GetRTCClockSource>
 8006460:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	429a      	cmp	r2, r3
 800646a:	d03c      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800646c:	f7fe fe0a 	bl	8005084 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff ff9b 	bl	80063b6 <LL_RCC_SetRTCClockSource>
 8006480:	e02e      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800648c:	f7ff ffb6 	bl	80063fc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006490:	f7ff ffc5 	bl	800641e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80064a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80064ac:	f7ff feba 	bl	8006224 <LL_RCC_LSE_IsEnabled>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d114      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064b6:	f7fd fad9 	bl	8003a6c <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80064bc:	e00b      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064be:	f7fd fad5 	bl	8003a6c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d902      	bls.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	77fb      	strb	r3, [r7, #31]
              break;
 80064d4:	e004      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80064d6:	f7ff feb7 	bl	8006248 <LL_RCC_LSE_IsReady>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d1ee      	bne.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80064e0:	7ffb      	ldrb	r3, [r7, #31]
 80064e2:	77bb      	strb	r3, [r7, #30]
 80064e4:	e001      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e6:	7ffb      	ldrb	r3, [r7, #31]
 80064e8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d004      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fecc 	bl	8006298 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff fef4 	bl	80062fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fee9 	bl	80062fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d004      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff fec1 	bl	80062c4 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800654a:	2b00      	cmp	r3, #0
 800654c:	d02b      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006556:	d008      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006560:	d003      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fedf 	bl	8006332 <LL_RCC_SetRNGClockSource>
 8006574:	e00a      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	2000      	movs	r0, #0
 8006582:	f7ff fed6 	bl	8006332 <LL_RCC_SetRNGClockSource>
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff fee9 	bl	800635e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006594:	d107      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065a4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d011      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff fee7 	bl	800638a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065c4:	d107      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d4:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fe40 	bl	800626c <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80065ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e09f      	b.n	800674a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fd f8ae 	bl	8003780 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800662c:	4b49      	ldr	r3, [pc, #292]	@ (8006754 <HAL_RTC_Init+0x15c>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0310 	and.w	r3, r3, #16
 8006634:	2b10      	cmp	r3, #16
 8006636:	d07e      	beq.n	8006736 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	22ca      	movs	r2, #202	@ 0xca
 800663e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2253      	movs	r2, #83	@ 0x53
 8006646:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f8ab 	bl	80067a4 <RTC_EnterInitMode>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	22ff      	movs	r2, #255	@ 0xff
 800665a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2204      	movs	r2, #4
 8006660:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
 8006668:	e067      	b.n	800673a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800667c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6899      	ldr	r1, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	68d2      	ldr	r2, [r2, #12]
 80066a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6919      	ldr	r1, [r3, #16]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	041a      	lsls	r2, r3, #16
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066c8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0202 	bic.w	r2, r2, #2
 80066d8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69da      	ldr	r2, [r3, #28]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d113      	bne.n	8006728 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f829 	bl	8006758 <HAL_RTC_WaitForSynchro>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00d      	beq.n	8006728 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	22ff      	movs	r2, #255	@ 0xff
 8006712:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2204      	movs	r2, #4
 8006718:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e010      	b.n	800674a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	22ff      	movs	r2, #255	@ 0xff
 800672e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
 8006734:	e001      	b.n	800673a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d103      	bne.n	8006748 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40002800 	.word	0x40002800

08006758 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800676e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006770:	f7fd f97c 	bl	8003a6c <HAL_GetTick>
 8006774:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006776:	e009      	b.n	800678c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006778:	f7fd f978 	bl	8003a6c <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006786:	d901      	bls.n	800678c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e007      	b.n	800679c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0ee      	beq.n	8006778 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d119      	bne.n	80067ee <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80067c4:	f7fd f952 	bl	8003a6c <HAL_GetTick>
 80067c8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067ca:	e009      	b.n	80067e0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80067cc:	f7fd f94e 	bl	8003a6c <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067da:	d901      	bls.n	80067e0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e007      	b.n	80067f0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0ee      	beq.n	80067cc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800680e:	2302      	movs	r3, #2
 8006810:	e0a8      	b.n	8006964 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2202      	movs	r2, #2
 800681e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	22ca      	movs	r2, #202	@ 0xca
 8006828:	625a      	str	r2, [r3, #36]	@ 0x24
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2253      	movs	r2, #83	@ 0x53
 8006830:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800683c:	2b00      	cmp	r3, #0
 800683e:	d020      	beq.n	8006882 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006840:	f7fd f914 	bl	8003a6c <HAL_GetTick>
 8006844:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006846:	e015      	b.n	8006874 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006848:	f7fd f910 	bl	8003a6c <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006856:	d90d      	bls.n	8006874 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	22ff      	movs	r2, #255	@ 0xff
 800685e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2203      	movs	r2, #3
 8006864:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e077      	b.n	8006964 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e2      	bne.n	8006848 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006890:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	b2da      	uxtb	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80068a2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80068a4:	f7fd f8e2 	bl	8003a6c <HAL_GetTick>
 80068a8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80068aa:	e015      	b.n	80068d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068ac:	f7fd f8de 	bl	8003a6c <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068ba:	d90d      	bls.n	80068d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	22ff      	movs	r2, #255	@ 0xff
 80068c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2203      	movs	r2, #3
 80068c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e045      	b.n	8006964 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0e2      	beq.n	80068ac <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0207 	bic.w	r2, r2, #7
 80068fc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6899      	ldr	r1, [r3, #8]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	430a      	orrs	r2, r1
 800690c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800690e:	4b17      	ldr	r3, [pc, #92]	@ (800696c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006914:	4a15      	ldr	r2, [pc, #84]	@ (800696c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006916:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800691a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800691e:	4b13      	ldr	r3, [pc, #76]	@ (800696c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a12      	ldr	r2, [pc, #72]	@ (800696c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006924:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006928:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006938:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006948:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	22ff      	movs	r2, #255	@ 0xff
 8006950:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	58000800 	.word	0x58000800

08006970 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800697a:	f107 0308 	add.w	r3, r7, #8
 800697e:	2218      	movs	r2, #24
 8006980:	2100      	movs	r1, #0
 8006982:	4618      	mov	r0, r3
 8006984:	f001 f92d 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006988:	233f      	movs	r3, #63	@ 0x3f
 800698a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800698c:	2381      	movs	r3, #129	@ 0x81
 800698e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006990:	1dfb      	adds	r3, r7, #7
 8006992:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006994:	2301      	movs	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006998:	f107 0308 	add.w	r3, r7, #8
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 fba8 	bl	80080f4 <hci_send_req>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	da01      	bge.n	80069ae <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80069aa:	23ff      	movs	r3, #255	@ 0xff
 80069ac:	e000      	b.n	80069b0 <aci_gap_set_non_discoverable+0x40>
  return status;
 80069ae:	79fb      	ldrb	r3, [r7, #7]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3720      	adds	r7, #32
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80069b8:	b5b0      	push	{r4, r5, r7, lr}
 80069ba:	b0ce      	sub	sp, #312	@ 0x138
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4605      	mov	r5, r0
 80069c0:	460c      	mov	r4, r1
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069ca:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80069ce:	462a      	mov	r2, r5
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80069da:	4622      	mov	r2, r4
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069e2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80069e6:	4602      	mov	r2, r0
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069ee:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80069f2:	460a      	mov	r2, r1
 80069f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80069f6:	f107 0310 	add.w	r3, r7, #16
 80069fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80069fe:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006a02:	3308      	adds	r3, #8
 8006a04:	f107 0210 	add.w	r2, r7, #16
 8006a08:	4413      	add	r3, r2
 8006a0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006a0e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006a12:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006a16:	4413      	add	r3, r2
 8006a18:	3309      	adds	r3, #9
 8006a1a:	f107 0210 	add.w	r2, r7, #16
 8006a1e:	4413      	add	r3, r2
 8006a20:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006a24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a28:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006a36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a3a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a3e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006a42:	7812      	ldrb	r2, [r2, #0]
 8006a44:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006a50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a54:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a58:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006a5c:	8812      	ldrh	r2, [r2, #0]
 8006a5e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006a62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a66:	3302      	adds	r3, #2
 8006a68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006a6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a74:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8006a78:	8812      	ldrh	r2, [r2, #0]
 8006a7a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a82:	3302      	adds	r3, #2
 8006a84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006a88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a8c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a90:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006a94:	7812      	ldrb	r2, [r2, #0]
 8006a96:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006aa2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006aa6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006aaa:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006aac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006ab6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006aba:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006abe:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006ac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006aca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ace:	3308      	adds	r3, #8
 8006ad0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006ad4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f872 	bl	8007bc2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006ade:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006ae2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006aec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006af0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006af4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006af6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006afa:	3301      	adds	r3, #1
 8006afc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006b00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006b04:	3301      	adds	r3, #1
 8006b06:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006b0a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 f857 	bl	8007bc2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006b14:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006b18:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b26:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8006b2a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006b2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b30:	3302      	adds	r3, #2
 8006b32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b3a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8006b3e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b44:	3302      	adds	r3, #2
 8006b46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b4e:	2218      	movs	r2, #24
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 f845 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b58:	233f      	movs	r3, #63	@ 0x3f
 8006b5a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8006b5e:	2383      	movs	r3, #131	@ 0x83
 8006b60:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006b64:	f107 0310 	add.w	r3, r7, #16
 8006b68:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006b6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006b74:	f107 030f 	add.w	r3, r7, #15
 8006b78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b86:	2100      	movs	r1, #0
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fab3 	bl	80080f4 <hci_send_req>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	da01      	bge.n	8006b98 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006b94:	23ff      	movs	r3, #255	@ 0xff
 8006b96:	e004      	b.n	8006ba2 <aci_gap_set_discoverable+0x1ea>
  return status;
 8006b98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b9c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006ba0:	781b      	ldrb	r3, [r3, #0]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bdb0      	pop	{r4, r5, r7, pc}

08006bac <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b0cc      	sub	sp, #304	@ 0x130
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bb8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006bbc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006bbe:	f107 0310 	add.w	r3, r7, #16
 8006bc2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006bc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8006bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006bdc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006be0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006be4:	7812      	ldrb	r2, [r2, #0]
 8006be6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006be8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006bec:	3301      	adds	r3, #1
 8006bee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006bf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006bf6:	2218      	movs	r2, #24
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fff1 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c00:	233f      	movs	r3, #63	@ 0x3f
 8006c02:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8006c06:	2385      	movs	r3, #133	@ 0x85
 8006c08:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006c0c:	f107 0310 	add.w	r3, r7, #16
 8006c10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006c14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006c1c:	f107 030f 	add.w	r3, r7, #15
 8006c20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006c24:	2301      	movs	r3, #1
 8006c26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 fa5f 	bl	80080f4 <hci_send_req>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	da01      	bge.n	8006c40 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006c3c:	23ff      	movs	r3, #255	@ 0xff
 8006c3e:	e004      	b.n	8006c4a <aci_gap_set_io_capability+0x9e>
  return status;
 8006c40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c44:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006c48:	781b      	ldrb	r3, [r3, #0]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006c54:	b5b0      	push	{r4, r5, r7, lr}
 8006c56:	b0cc      	sub	sp, #304	@ 0x130
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	4610      	mov	r0, r2
 8006c60:	4619      	mov	r1, r3
 8006c62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c66:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c72:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006c76:	4622      	mov	r2, r4
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c7e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006c82:	4602      	mov	r2, r0
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c8e:	460a      	mov	r2, r1
 8006c90:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006c92:	f107 0310 	add.w	r3, r7, #16
 8006c96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006c9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cb0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006cb4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006cb8:	7812      	ldrb	r2, [r2, #0]
 8006cba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006cce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cda:	3301      	adds	r3, #1
 8006cdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8006ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ce4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006ce8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006cec:	7812      	ldrb	r2, [r2, #0]
 8006cee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cfe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006d02:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006d06:	7812      	ldrb	r2, [r2, #0]
 8006d08:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d0e:	3301      	adds	r3, #1
 8006d10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d18:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8006d1c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006d1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d22:	3301      	adds	r3, #1
 8006d24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d2c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8006d30:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d36:	3301      	adds	r3, #1
 8006d38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d40:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006d44:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d54:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8006d58:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d60:	3304      	adds	r3, #4
 8006d62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d6a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006d6e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d74:	3301      	adds	r3, #1
 8006d76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d7e:	2218      	movs	r2, #24
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 ff2d 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d88:	233f      	movs	r3, #63	@ 0x3f
 8006d8a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8006d8e:	2386      	movs	r3, #134	@ 0x86
 8006d90:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006d94:	f107 0310 	add.w	r3, r7, #16
 8006d98:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006d9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006da0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006da4:	f107 030f 	add.w	r3, r7, #15
 8006da8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006db2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006db6:	2100      	movs	r1, #0
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 f99b 	bl	80080f4 <hci_send_req>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	da01      	bge.n	8006dc8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006dc4:	23ff      	movs	r3, #255	@ 0xff
 8006dc6:	e004      	b.n	8006dd2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006dc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006dcc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006dd0:	781b      	ldrb	r3, [r3, #0]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bdb0      	pop	{r4, r5, r7, pc}

08006ddc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b0cc      	sub	sp, #304	@ 0x130
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4602      	mov	r2, r0
 8006de4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006de8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006dec:	6019      	str	r1, [r3, #0]
 8006dee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006df2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006df6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006df8:	f107 0310 	add.w	r3, r7, #16
 8006dfc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006e00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e04:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e16:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e1a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006e1e:	8812      	ldrh	r2, [r2, #0]
 8006e20:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e26:	3302      	adds	r3, #2
 8006e28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8006e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e30:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e34:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e42:	3304      	adds	r3, #4
 8006e44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e4c:	2218      	movs	r2, #24
 8006e4e:	2100      	movs	r1, #0
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fec6 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e56:	233f      	movs	r3, #63	@ 0x3f
 8006e58:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8006e5c:	2388      	movs	r3, #136	@ 0x88
 8006e5e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006e62:	f107 0310 	add.w	r3, r7, #16
 8006e66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006e72:	f107 030f 	add.w	r3, r7, #15
 8006e76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e84:	2100      	movs	r1, #0
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 f934 	bl	80080f4 <hci_send_req>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da01      	bge.n	8006e96 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006e92:	23ff      	movs	r3, #255	@ 0xff
 8006e94:	e004      	b.n	8006ea0 <aci_gap_pass_key_resp+0xc4>
  return status;
 8006e96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e9a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006e9e:	781b      	ldrb	r3, [r3, #0]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006eaa:	b590      	push	{r4, r7, lr}
 8006eac:	b0cd      	sub	sp, #308	@ 0x134
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	4608      	mov	r0, r1
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006eba:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ec4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006ec8:	4622      	mov	r2, r4
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ed0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006edc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006ee0:	460a      	mov	r2, r1
 8006ee2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006ee4:	f107 0310 	add.w	r3, r7, #16
 8006ee8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006eec:	f107 0308 	add.w	r3, r7, #8
 8006ef0:	2207      	movs	r2, #7
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fe74 	bl	8007be2 <Osal_MemSet>
  int index_input = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8006f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f04:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f08:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f14:	3301      	adds	r3, #1
 8006f16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f22:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006f26:	7812      	ldrb	r2, [r2, #0]
 8006f28:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f2e:	3301      	adds	r3, #1
 8006f30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f3c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006f40:	7812      	ldrb	r2, [r2, #0]
 8006f42:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f48:	3301      	adds	r3, #1
 8006f4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f52:	2218      	movs	r2, #24
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fe43 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f5c:	233f      	movs	r3, #63	@ 0x3f
 8006f5e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8006f62:	238a      	movs	r3, #138	@ 0x8a
 8006f64:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006f68:	f107 0310 	add.w	r3, r7, #16
 8006f6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8006f78:	f107 0308 	add.w	r3, r7, #8
 8006f7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006f80:	2307      	movs	r3, #7
 8006f82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 f8b1 	bl	80080f4 <hci_send_req>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	da01      	bge.n	8006f9c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006f98:	23ff      	movs	r3, #255	@ 0xff
 8006f9a:	e02e      	b.n	8006ffa <aci_gap_init+0x150>
  if ( resp.Status )
 8006f9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fa0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <aci_gap_init+0x10c>
    return resp.Status;
 8006faa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	e021      	b.n	8006ffa <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006fb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fbe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fc8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006fd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fd4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fd8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006fe2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006fe4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006fe8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006fec:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006ff6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007000:	46bd      	mov	sp, r7
 8007002:	bd90      	pop	{r4, r7, pc}

08007004 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b0cc      	sub	sp, #304	@ 0x130
 8007008:	af00      	add	r7, sp, #0
 800700a:	4602      	mov	r2, r0
 800700c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007010:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007014:	6019      	str	r1, [r3, #0]
 8007016:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800701a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800701e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007020:	f107 0310 	add.w	r3, r7, #16
 8007024:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007028:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800702c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800703a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800703e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007042:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007046:	7812      	ldrb	r2, [r2, #0]
 8007048:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800704a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800704e:	3301      	adds	r3, #1
 8007050:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007054:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007058:	1c58      	adds	r0, r3, #1
 800705a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800705e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007062:	781a      	ldrb	r2, [r3, #0]
 8007064:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007068:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800706c:	6819      	ldr	r1, [r3, #0]
 800706e:	f000 fda8 	bl	8007bc2 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007072:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007076:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007080:	4413      	add	r3, r2
 8007082:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007086:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800708a:	2218      	movs	r2, #24
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fda7 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007094:	233f      	movs	r3, #63	@ 0x3f
 8007096:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800709a:	238e      	movs	r3, #142	@ 0x8e
 800709c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80070a0:	f107 0310 	add.w	r3, r7, #16
 80070a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80070a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80070b0:	f107 030f 	add.w	r3, r7, #15
 80070b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80070be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80070c2:	2100      	movs	r1, #0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f001 f815 	bl	80080f4 <hci_send_req>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	da01      	bge.n	80070d4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80070d0:	23ff      	movs	r3, #255	@ 0xff
 80070d2:	e004      	b.n	80070de <aci_gap_update_adv_data+0xda>
  return status;
 80070d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80070dc:	781b      	ldrb	r3, [r3, #0]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070f2:	f107 0308 	add.w	r3, r7, #8
 80070f6:	2218      	movs	r2, #24
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fd71 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007100:	233f      	movs	r3, #63	@ 0x3f
 8007102:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007104:	2392      	movs	r3, #146	@ 0x92
 8007106:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007108:	1dfb      	adds	r3, r7, #7
 800710a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800710c:	2301      	movs	r3, #1
 800710e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007110:	f107 0308 	add.w	r3, r7, #8
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f000 ffec 	bl	80080f4 <hci_send_req>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	da01      	bge.n	8007126 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007122:	23ff      	movs	r3, #255	@ 0xff
 8007124:	e000      	b.n	8007128 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8007126:	79fb      	ldrb	r3, [r7, #7]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b0cc      	sub	sp, #304	@ 0x130
 8007134:	af00      	add	r7, sp, #0
 8007136:	4602      	mov	r2, r0
 8007138:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800713c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007146:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800714a:	460a      	mov	r2, r1
 800714c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800714e:	f107 0310 	add.w	r3, r7, #16
 8007152:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007156:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800715a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800715e:	2200      	movs	r2, #0
 8007160:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007168:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800716c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007170:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007174:	8812      	ldrh	r2, [r2, #0]
 8007176:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007178:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800717c:	3302      	adds	r3, #2
 800717e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007182:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007186:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800718a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007192:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007196:	3301      	adds	r3, #1
 8007198:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800719c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80071a0:	2218      	movs	r2, #24
 80071a2:	2100      	movs	r1, #0
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fd1c 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80071aa:	233f      	movs	r3, #63	@ 0x3f
 80071ac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80071b0:	23a5      	movs	r3, #165	@ 0xa5
 80071b2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80071b6:	f107 0310 	add.w	r3, r7, #16
 80071ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80071be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80071c6:	f107 030f 	add.w	r3, r7, #15
 80071ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 ff8a 	bl	80080f4 <hci_send_req>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	da01      	bge.n	80071ea <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80071e6:	23ff      	movs	r3, #255	@ 0xff
 80071e8:	e004      	b.n	80071f4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80071ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071ee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80071f2:	781b      	ldrb	r3, [r3, #0]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b088      	sub	sp, #32
 8007202:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007208:	f107 0308 	add.w	r3, r7, #8
 800720c:	2218      	movs	r2, #24
 800720e:	2100      	movs	r1, #0
 8007210:	4618      	mov	r0, r3
 8007212:	f000 fce6 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007216:	233f      	movs	r3, #63	@ 0x3f
 8007218:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800721a:	f240 1301 	movw	r3, #257	@ 0x101
 800721e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007220:	1dfb      	adds	r3, r7, #7
 8007222:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007224:	2301      	movs	r3, #1
 8007226:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007228:	f107 0308 	add.w	r3, r7, #8
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f000 ff60 	bl	80080f4 <hci_send_req>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	da01      	bge.n	800723e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800723a:	23ff      	movs	r3, #255	@ 0xff
 800723c:	e000      	b.n	8007240 <aci_gatt_init+0x42>
  return status;
 800723e:	79fb      	ldrb	r3, [r7, #7]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b0cf      	sub	sp, #316	@ 0x13c
 800724c:	af00      	add	r7, sp, #0
 800724e:	4604      	mov	r4, r0
 8007250:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8007254:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8007258:	6001      	str	r1, [r0, #0]
 800725a:	4610      	mov	r0, r2
 800725c:	4619      	mov	r1, r3
 800725e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007262:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007266:	4622      	mov	r2, r4
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800726e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007272:	4602      	mov	r2, r0
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800727a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800727e:	460a      	mov	r2, r1
 8007280:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007282:	f107 0310 	add.w	r3, r7, #16
 8007286:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800728a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800728e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d00a      	beq.n	80072ae <aci_gatt_add_service+0x66>
 8007298:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800729c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d101      	bne.n	80072aa <aci_gatt_add_service+0x62>
 80072a6:	2311      	movs	r3, #17
 80072a8:	e002      	b.n	80072b0 <aci_gatt_add_service+0x68>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <aci_gatt_add_service+0x68>
 80072ae:	2303      	movs	r3, #3
 80072b0:	f107 0210 	add.w	r2, r7, #16
 80072b4:	4413      	add	r3, r2
 80072b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80072ba:	f107 030c 	add.w	r3, r7, #12
 80072be:	2203      	movs	r2, #3
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 fc8d 	bl	8007be2 <Osal_MemSet>
  int index_input = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80072ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072d2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80072d6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072e2:	3301      	adds	r3, #1
 80072e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80072e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072ec:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d002      	beq.n	80072fc <aci_gatt_add_service+0xb4>
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d004      	beq.n	8007304 <aci_gatt_add_service+0xbc>
 80072fa:	e007      	b.n	800730c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80072fc:	2302      	movs	r3, #2
 80072fe:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8007302:	e005      	b.n	8007310 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007304:	2310      	movs	r3, #16
 8007306:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800730a:	e001      	b.n	8007310 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800730c:	2397      	movs	r3, #151	@ 0x97
 800730e:	e06c      	b.n	80073ea <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007310:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007314:	1c58      	adds	r0, r3, #1
 8007316:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800731a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800731e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007322:	6819      	ldr	r1, [r3, #0]
 8007324:	f000 fc4d 	bl	8007bc2 <Osal_MemCpy>
    index_input += size;
 8007328:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800732c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007330:	4413      	add	r3, r2
 8007332:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8007336:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800733a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800733e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007342:	7812      	ldrb	r2, [r2, #0]
 8007344:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007346:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800734a:	3301      	adds	r3, #1
 800734c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007350:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007354:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007358:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007360:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007364:	3301      	adds	r3, #1
 8007366:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800736a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800736e:	2218      	movs	r2, #24
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f000 fc35 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007378:	233f      	movs	r3, #63	@ 0x3f
 800737a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800737e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8007382:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007386:	f107 0310 	add.w	r3, r7, #16
 800738a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800738e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007392:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007396:	f107 030c 	add.w	r3, r7, #12
 800739a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800739e:	2303      	movs	r3, #3
 80073a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fea2 	bl	80080f4 <hci_send_req>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da01      	bge.n	80073ba <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80073b6:	23ff      	movs	r3, #255	@ 0xff
 80073b8:	e017      	b.n	80073ea <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80073ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80073c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	e00a      	b.n	80073ea <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80073d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80073e6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd90      	pop	{r4, r7, pc}

080073f4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80073f4:	b590      	push	{r4, r7, lr}
 80073f6:	b0d1      	sub	sp, #324	@ 0x144
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4604      	mov	r4, r0
 80073fc:	4608      	mov	r0, r1
 80073fe:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8007402:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007406:	600a      	str	r2, [r1, #0]
 8007408:	4619      	mov	r1, r3
 800740a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800740e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007412:	4622      	mov	r2, r4
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800741a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800741e:	4602      	mov	r2, r0
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007426:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800742a:	460a      	mov	r2, r1
 800742c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800742e:	f107 0318 	add.w	r3, r7, #24
 8007432:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007436:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800743a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d00a      	beq.n	800745a <aci_gatt_add_char+0x66>
 8007444:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007448:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d101      	bne.n	8007456 <aci_gatt_add_char+0x62>
 8007452:	2313      	movs	r3, #19
 8007454:	e002      	b.n	800745c <aci_gatt_add_char+0x68>
 8007456:	2303      	movs	r3, #3
 8007458:	e000      	b.n	800745c <aci_gatt_add_char+0x68>
 800745a:	2305      	movs	r3, #5
 800745c:	f107 0218 	add.w	r2, r7, #24
 8007460:	4413      	add	r3, r2
 8007462:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007466:	f107 0314 	add.w	r3, r7, #20
 800746a:	2203      	movs	r2, #3
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fbb7 	bl	8007be2 <Osal_MemSet>
  int index_input = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800747a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800747e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007482:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007486:	8812      	ldrh	r2, [r2, #0]
 8007488:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800748a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800748e:	3302      	adds	r3, #2
 8007490:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007494:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007498:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800749c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80074a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80074a8:	3301      	adds	r3, #1
 80074aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80074ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80074b2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d002      	beq.n	80074c2 <aci_gatt_add_char+0xce>
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d004      	beq.n	80074ca <aci_gatt_add_char+0xd6>
 80074c0:	e007      	b.n	80074d2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80074c2:	2302      	movs	r3, #2
 80074c4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80074c8:	e005      	b.n	80074d6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80074ca:	2310      	movs	r3, #16
 80074cc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80074d0:	e001      	b.n	80074d6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80074d2:	2397      	movs	r3, #151	@ 0x97
 80074d4:	e091      	b.n	80075fa <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80074d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80074da:	1cd8      	adds	r0, r3, #3
 80074dc:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80074e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80074e4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80074e8:	6819      	ldr	r1, [r3, #0]
 80074ea:	f000 fb6a 	bl	8007bc2 <Osal_MemCpy>
    index_input += size;
 80074ee:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80074f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80074f6:	4413      	add	r3, r2
 80074f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80074fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007500:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007504:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8007508:	8812      	ldrh	r2, [r2, #0]
 800750a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800750c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007510:	3302      	adds	r3, #2
 8007512:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007516:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800751a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800751e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007520:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007524:	3301      	adds	r3, #1
 8007526:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800752a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800752e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007532:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007534:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007538:	3301      	adds	r3, #1
 800753a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800753e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007542:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8007546:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007548:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800754c:	3301      	adds	r3, #1
 800754e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007552:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007556:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800755a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800755c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007560:	3301      	adds	r3, #1
 8007562:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007566:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800756a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800756e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007570:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007574:	3301      	adds	r3, #1
 8007576:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800757a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800757e:	2218      	movs	r2, #24
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fb2d 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007588:	233f      	movs	r3, #63	@ 0x3f
 800758a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800758e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007592:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8007596:	f107 0318 	add.w	r3, r7, #24
 800759a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800759e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80075a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80075a6:	f107 0314 	add.w	r3, r7, #20
 80075aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80075ae:	2303      	movs	r3, #3
 80075b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fd9a 	bl	80080f4 <hci_send_req>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	da01      	bge.n	80075ca <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80075c6:	23ff      	movs	r3, #255	@ 0xff
 80075c8:	e017      	b.n	80075fa <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80075ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80075d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	e00a      	b.n	80075fa <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80075e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80075f6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8007600:	46bd      	mov	sp, r7
 8007602:	bd90      	pop	{r4, r7, pc}

08007604 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007604:	b5b0      	push	{r4, r5, r7, lr}
 8007606:	b0cc      	sub	sp, #304	@ 0x130
 8007608:	af00      	add	r7, sp, #0
 800760a:	4605      	mov	r5, r0
 800760c:	460c      	mov	r4, r1
 800760e:	4610      	mov	r0, r2
 8007610:	4619      	mov	r1, r3
 8007612:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007616:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800761a:	462a      	mov	r2, r5
 800761c:	801a      	strh	r2, [r3, #0]
 800761e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007622:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007626:	4622      	mov	r2, r4
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800762e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8007632:	4602      	mov	r2, r0
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800763a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800763e:	460a      	mov	r2, r1
 8007640:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007642:	f107 0310 	add.w	r3, r7, #16
 8007646:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800764a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800764e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800765c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007660:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007664:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007668:	8812      	ldrh	r2, [r2, #0]
 800766a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800766c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007670:	3302      	adds	r3, #2
 8007672:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8007676:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800767a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800767e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007682:	8812      	ldrh	r2, [r2, #0]
 8007684:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007686:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800768a:	3302      	adds	r3, #2
 800768c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8007690:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007694:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007698:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800769c:	7812      	ldrb	r2, [r2, #0]
 800769e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80076a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076a4:	3301      	adds	r3, #1
 80076a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80076aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076b2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80076b6:	7812      	ldrb	r2, [r2, #0]
 80076b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80076ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076be:	3301      	adds	r3, #1
 80076c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80076c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076c8:	1d98      	adds	r0, r3, #6
 80076ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076ce:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80076da:	f000 fa72 	bl	8007bc2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80076de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076e2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80076ec:	4413      	add	r3, r2
 80076ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80076f6:	2218      	movs	r2, #24
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fa71 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007700:	233f      	movs	r3, #63	@ 0x3f
 8007702:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8007706:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800770a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800770e:	f107 0310 	add.w	r3, r7, #16
 8007712:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007716:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800771a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800771e:	f107 030f 	add.w	r3, r7, #15
 8007722:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007726:	2301      	movs	r3, #1
 8007728:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800772c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007730:	2100      	movs	r1, #0
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fcde 	bl	80080f4 <hci_send_req>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	da01      	bge.n	8007742 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800773e:	23ff      	movs	r3, #255	@ 0xff
 8007740:	e004      	b.n	800774c <aci_gatt_update_char_value+0x148>
  return status;
 8007742:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007746:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800774a:	781b      	ldrb	r3, [r3, #0]
}
 800774c:	4618      	mov	r0, r3
 800774e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007752:	46bd      	mov	sp, r7
 8007754:	bdb0      	pop	{r4, r5, r7, pc}

08007756 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b0cc      	sub	sp, #304	@ 0x130
 800775a:	af00      	add	r7, sp, #0
 800775c:	4602      	mov	r2, r0
 800775e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007762:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007766:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8007768:	f107 0310 	add.w	r3, r7, #16
 800776c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007770:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007774:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007782:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007786:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800778a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800778e:	8812      	ldrh	r2, [r2, #0]
 8007790:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007792:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007796:	3302      	adds	r3, #2
 8007798:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800779c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80077a0:	2218      	movs	r2, #24
 80077a2:	2100      	movs	r1, #0
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fa1c 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80077aa:	233f      	movs	r3, #63	@ 0x3f
 80077ac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80077b0:	f240 1325 	movw	r3, #293	@ 0x125
 80077b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80077b8:	f107 0310 	add.w	r3, r7, #16
 80077bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80077c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80077c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80077c8:	f107 030f 	add.w	r3, r7, #15
 80077cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80077d0:	2301      	movs	r3, #1
 80077d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80077da:	2100      	movs	r1, #0
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fc89 	bl	80080f4 <hci_send_req>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	da01      	bge.n	80077ec <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80077e8:	23ff      	movs	r3, #255	@ 0xff
 80077ea:	e004      	b.n	80077f6 <aci_gatt_confirm_indication+0xa0>
  return status;
 80077ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80077f4:	781b      	ldrb	r3, [r3, #0]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b0cc      	sub	sp, #304	@ 0x130
 8007804:	af00      	add	r7, sp, #0
 8007806:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800780a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007814:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007818:	4602      	mov	r2, r0
 800781a:	701a      	strb	r2, [r3, #0]
 800781c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007820:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007824:	460a      	mov	r2, r1
 8007826:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007828:	f107 0310 	add.w	r3, r7, #16
 800782c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007830:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007834:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8007842:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007846:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800784a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800784e:	7812      	ldrb	r2, [r2, #0]
 8007850:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007852:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007856:	3301      	adds	r3, #1
 8007858:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800785c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007860:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007864:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007868:	7812      	ldrb	r2, [r2, #0]
 800786a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800786c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007870:	3301      	adds	r3, #1
 8007872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007876:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800787a:	1c98      	adds	r0, r3, #2
 800787c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007880:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800788a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800788e:	6819      	ldr	r1, [r3, #0]
 8007890:	f000 f997 	bl	8007bc2 <Osal_MemCpy>
  index_input += Length;
 8007894:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007898:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80078a2:	4413      	add	r3, r2
 80078a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80078ac:	2218      	movs	r2, #24
 80078ae:	2100      	movs	r1, #0
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f996 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80078b6:	233f      	movs	r3, #63	@ 0x3f
 80078b8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80078bc:	230c      	movs	r3, #12
 80078be:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80078c2:	f107 0310 	add.w	r3, r7, #16
 80078c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80078ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80078ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80078d2:	f107 030f 	add.w	r3, r7, #15
 80078d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80078da:	2301      	movs	r3, #1
 80078dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fc04 	bl	80080f4 <hci_send_req>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	da01      	bge.n	80078f6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80078f2:	23ff      	movs	r3, #255	@ 0xff
 80078f4:	e004      	b.n	8007900 <aci_hal_write_config_data+0x100>
  return status;
 80078f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80078fe:	781b      	ldrb	r3, [r3, #0]
}
 8007900:	4618      	mov	r0, r3
 8007902:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b0cc      	sub	sp, #304	@ 0x130
 800790e:	af00      	add	r7, sp, #0
 8007910:	4602      	mov	r2, r0
 8007912:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007916:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007920:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007924:	460a      	mov	r2, r1
 8007926:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007928:	f107 0310 	add.w	r3, r7, #16
 800792c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007930:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007934:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8007942:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007946:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800794a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007952:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007956:	3301      	adds	r3, #1
 8007958:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800795c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007960:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007964:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007968:	7812      	ldrb	r2, [r2, #0]
 800796a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800796c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007970:	3301      	adds	r3, #1
 8007972:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800797a:	2218      	movs	r2, #24
 800797c:	2100      	movs	r1, #0
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f92f 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007984:	233f      	movs	r3, #63	@ 0x3f
 8007986:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800798a:	230f      	movs	r3, #15
 800798c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007990:	f107 0310 	add.w	r3, r7, #16
 8007994:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007998:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800799c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80079a0:	f107 030f 	add.w	r3, r7, #15
 80079a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80079b2:	2100      	movs	r1, #0
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 fb9d 	bl	80080f4 <hci_send_req>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da01      	bge.n	80079c4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80079c0:	23ff      	movs	r3, #255	@ 0xff
 80079c2:	e004      	b.n	80079ce <aci_hal_set_tx_power_level+0xc4>
  return status;
 80079c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80079cc:	781b      	ldrb	r3, [r3, #0]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b0cc      	sub	sp, #304	@ 0x130
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4602      	mov	r2, r0
 80079e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079e4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80079e8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80079ea:	f107 0310 	add.w	r3, r7, #16
 80079ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80079f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a0c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007a10:	8812      	ldrh	r2, [r2, #0]
 8007a12:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a18:	3302      	adds	r3, #2
 8007a1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a22:	2218      	movs	r2, #24
 8007a24:	2100      	movs	r1, #0
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 f8db 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a2c:	233f      	movs	r3, #63	@ 0x3f
 8007a2e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8007a32:	2318      	movs	r3, #24
 8007a34:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007a38:	f107 0310 	add.w	r3, r7, #16
 8007a3c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007a48:	f107 030f 	add.w	r3, r7, #15
 8007a4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fb49 	bl	80080f4 <hci_send_req>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	da01      	bge.n	8007a6c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007a68:	23ff      	movs	r3, #255	@ 0xff
 8007a6a:	e004      	b.n	8007a76 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007a6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007a74:	781b      	ldrb	r3, [r3, #0]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a8a:	f107 0308 	add.w	r3, r7, #8
 8007a8e:	2218      	movs	r2, #24
 8007a90:	2100      	movs	r1, #0
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 f8a5 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x03;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007aa0:	1dfb      	adds	r3, r7, #7
 8007aa2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007aa8:	f107 0308 	add.w	r3, r7, #8
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fb20 	bl	80080f4 <hci_send_req>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	da01      	bge.n	8007abe <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007aba:	23ff      	movs	r3, #255	@ 0xff
 8007abc:	e000      	b.n	8007ac0 <hci_reset+0x40>
  return status;
 8007abe:	79fb      	ldrb	r3, [r7, #7]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007ac8:	b590      	push	{r4, r7, lr}
 8007aca:	b0cd      	sub	sp, #308	@ 0x134
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4604      	mov	r4, r0
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ad8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007adc:	4622      	mov	r2, r4
 8007ade:	701a      	strb	r2, [r3, #0]
 8007ae0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ae4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007ae8:	4602      	mov	r2, r0
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007af0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007af4:	460a      	mov	r2, r1
 8007af6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007af8:	f107 0310 	add.w	r3, r7, #16
 8007afc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007b00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b04:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b16:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007b1a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007b1e:	7812      	ldrb	r2, [r2, #0]
 8007b20:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b26:	3301      	adds	r3, #1
 8007b28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b30:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007b34:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007b38:	7812      	ldrb	r2, [r2, #0]
 8007b3a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b40:	3301      	adds	r3, #1
 8007b42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007b4e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007b52:	7812      	ldrb	r2, [r2, #0]
 8007b54:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007b64:	2218      	movs	r2, #24
 8007b66:	2100      	movs	r1, #0
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 f83a 	bl	8007be2 <Osal_MemSet>
  rq.ogf = 0x08;
 8007b6e:	2308      	movs	r3, #8
 8007b70:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8007b74:	2331      	movs	r3, #49	@ 0x31
 8007b76:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007b7a:	f107 0310 	add.w	r3, r7, #16
 8007b7e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007b8a:	f107 030f 	add.w	r3, r7, #15
 8007b8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 faa8 	bl	80080f4 <hci_send_req>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da01      	bge.n	8007bae <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007baa:	23ff      	movs	r3, #255	@ 0xff
 8007bac:	e004      	b.n	8007bb8 <hci_le_set_default_phy+0xf0>
  return status;
 8007bae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007bb2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007bb6:	781b      	ldrb	r3, [r3, #0]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd90      	pop	{r4, r7, pc}

08007bc2 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	68b9      	ldr	r1, [r7, #8]
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f002 f948 	bl	8009e68 <memcpy>
 8007bd8:	4603      	mov	r3, r0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	68b9      	ldr	r1, [r7, #8]
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f002 f90c 	bl	8009e10 <memset>
 8007bf8:	4603      	mov	r3, r0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007c02:	b480      	push	{r7}
 8007c04:	af00      	add	r7, sp, #0
  return;
 8007c06:	bf00      	nop
}
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  return;
 8007c14:	bf00      	nop
}
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007c1e:	b480      	push	{r7}
 8007c20:	af00      	add	r7, sp, #0
  return;
 8007c22:	bf00      	nop
}
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  return;
 8007c30:	bf00      	nop
}
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	af00      	add	r7, sp, #0
  return;
 8007c3e:	bf00      	nop
}
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  return;
 8007c4c:	bf00      	nop
}
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007c56:	b480      	push	{r7}
 8007c58:	af00      	add	r7, sp, #0
  return;
 8007c5a:	bf00      	nop
}
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
  return;
 8007c68:	bf00      	nop
}
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007c72:	b480      	push	{r7}
 8007c74:	af00      	add	r7, sp, #0
  return;
 8007c76:	bf00      	nop
}
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007c80:	b480      	push	{r7}
 8007c82:	af00      	add	r7, sp, #0
  return;
 8007c84:	bf00      	nop
}
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007c8e:	b480      	push	{r7}
 8007c90:	af00      	add	r7, sp, #0
  return;
 8007c92:	bf00      	nop
}
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
  return;
 8007ca0:	bf00      	nop
}
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007caa:	b480      	push	{r7}
 8007cac:	af00      	add	r7, sp, #0
  return;
 8007cae:	bf00      	nop
}
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	af00      	add	r7, sp, #0
  return;
 8007cbc:	bf00      	nop
}
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	af00      	add	r7, sp, #0
  return;
 8007cca:	bf00      	nop
}
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
  return;
 8007cd8:	bf00      	nop
}
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	af00      	add	r7, sp, #0
  return;
 8007ce6:	bf00      	nop
}
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007cf4:	4b04      	ldr	r3, [pc, #16]	@ (8007d08 <SVCCTL_Init+0x18>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007cfa:	4b04      	ldr	r3, [pc, #16]	@ (8007d0c <SVCCTL_Init+0x1c>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007d00:	f000 f806 	bl	8007d10 <SVCCTL_SvcInit>

  return;
 8007d04:	bf00      	nop
}
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	2000003c 	.word	0x2000003c
 8007d0c:	2000005c 	.word	0x2000005c

08007d10 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
  BAS_Init();
 8007d14:	f7ff ff75 	bl	8007c02 <BAS_Init>

  BLS_Init();
 8007d18:	f7ff ff7a 	bl	8007c10 <BLS_Init>

  CRS_STM_Init();
 8007d1c:	f7ff ff7f 	bl	8007c1e <CRS_STM_Init>

  DIS_Init();
 8007d20:	f7ff ff84 	bl	8007c2c <DIS_Init>

  EDS_STM_Init();
 8007d24:	f7ff ff89 	bl	8007c3a <EDS_STM_Init>

  HIDS_Init();
 8007d28:	f7ff ff8e 	bl	8007c48 <HIDS_Init>

  HRS_Init();
 8007d2c:	f7ff ff93 	bl	8007c56 <HRS_Init>

  HTS_Init();
 8007d30:	f7ff ff98 	bl	8007c64 <HTS_Init>

  IAS_Init();
 8007d34:	f7ff ff9d 	bl	8007c72 <IAS_Init>

  LLS_Init();
 8007d38:	f7ff ffa2 	bl	8007c80 <LLS_Init>

  TPS_Init();
 8007d3c:	f7ff ffa7 	bl	8007c8e <TPS_Init>

  MOTENV_STM_Init();
 8007d40:	f7ff ffac 	bl	8007c9c <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007d44:	f7ff ffb1 	bl	8007caa <P2PS_STM_Init>

  ZDD_STM_Init();
 8007d48:	f7ff ffb6 	bl	8007cb8 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007d4c:	f7ff ffbb 	bl	8007cc6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007d50:	f7ff ffc7 	bl	8007ce2 <BVOPUS_STM_Init>

  MESH_Init();
 8007d54:	f7ff ffbe 	bl	8007cd4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007d58:	f001 fafa 	bl	8009350 <SVCCTL_InitCustomSvc>
  
  return;
 8007d5c:	bf00      	nop
}
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007d68:	4b09      	ldr	r3, [pc, #36]	@ (8007d90 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d6a:	7f1b      	ldrb	r3, [r3, #28]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4a08      	ldr	r2, [pc, #32]	@ (8007d90 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007d76:	4b06      	ldr	r3, [pc, #24]	@ (8007d90 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d78:	7f1b      	ldrb	r3, [r3, #28]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d80:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007d82:	bf00      	nop
}
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	2000003c 	.word	0x2000003c

08007d94 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2bff      	cmp	r3, #255	@ 0xff
 8007dac:	d125      	bne.n	8007dfa <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	3302      	adds	r3, #2
 8007db2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007dbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dc2:	d118      	bne.n	8007df6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	757b      	strb	r3, [r7, #21]
 8007dc8:	e00d      	b.n	8007de6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007dca:	7d7b      	ldrb	r3, [r7, #21]
 8007dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8007e38 <SVCCTL_UserEvtRx+0xa4>)
 8007dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	4798      	blx	r3
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d108      	bne.n	8007df2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007de0:	7d7b      	ldrb	r3, [r7, #21]
 8007de2:	3301      	adds	r3, #1
 8007de4:	757b      	strb	r3, [r7, #21]
 8007de6:	4b14      	ldr	r3, [pc, #80]	@ (8007e38 <SVCCTL_UserEvtRx+0xa4>)
 8007de8:	7f1b      	ldrb	r3, [r3, #28]
 8007dea:	7d7a      	ldrb	r2, [r7, #21]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d3ec      	bcc.n	8007dca <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007df0:	e002      	b.n	8007df8 <SVCCTL_UserEvtRx+0x64>
              break;
 8007df2:	bf00      	nop
          break;
 8007df4:	e000      	b.n	8007df8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007df6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007df8:	e000      	b.n	8007dfc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007dfa:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007dfc:	7dfb      	ldrb	r3, [r7, #23]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d00f      	beq.n	8007e22 <SVCCTL_UserEvtRx+0x8e>
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	dc10      	bgt.n	8007e28 <SVCCTL_UserEvtRx+0x94>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d002      	beq.n	8007e10 <SVCCTL_UserEvtRx+0x7c>
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d006      	beq.n	8007e1c <SVCCTL_UserEvtRx+0x88>
 8007e0e:	e00b      	b.n	8007e28 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 ff85 	bl	8008d20 <SVCCTL_App_Notification>
 8007e16:	4603      	mov	r3, r0
 8007e18:	75bb      	strb	r3, [r7, #22]
      break;
 8007e1a:	e008      	b.n	8007e2e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	75bb      	strb	r3, [r7, #22]
      break;
 8007e20:	e005      	b.n	8007e2e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007e22:	2300      	movs	r3, #0
 8007e24:	75bb      	strb	r3, [r7, #22]
      break;
 8007e26:	e002      	b.n	8007e2e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	75bb      	strb	r3, [r7, #22]
      break;
 8007e2c:	bf00      	nop
  }

  return (return_status);
 8007e2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	2000003c 	.word	0x2000003c

08007e3c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b088      	sub	sp, #32
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e44:	f107 030c 	add.w	r3, r7, #12
 8007e48:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	212e      	movs	r1, #46	@ 0x2e
 8007e54:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8007e58:	f000 fae8 	bl	800842c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	330b      	adds	r3, #11
 8007e60:	78db      	ldrb	r3, [r3, #3]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3720      	adds	r7, #32
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b088      	sub	sp, #32
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e72:	f107 030c 	add.w	r3, r7, #12
 8007e76:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	210f      	movs	r1, #15
 8007e82:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8007e86:	f000 fad1 	bl	800842c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	330b      	adds	r3, #11
 8007e8e:	78db      	ldrb	r3, [r3, #3]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3720      	adds	r7, #32
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007ea0:	f107 030c 	add.w	r3, r7, #12
 8007ea4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	2110      	movs	r1, #16
 8007eac:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8007eb0:	f000 fabc 	bl	800842c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	330b      	adds	r3, #11
 8007eb8:	78db      	ldrb	r3, [r3, #3]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3720      	adds	r7, #32
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b08b      	sub	sp, #44	@ 0x2c
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007eec:	4b4a      	ldr	r3, [pc, #296]	@ (8008018 <SHCI_GetWirelessFwInfo+0x154>)
 8007eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ef4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007efe:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a44      	ldr	r2, [pc, #272]	@ (800801c <SHCI_GetWirelessFwInfo+0x158>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d10f      	bne.n	8007f30 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	e01a      	b.n	8007f66 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007f38:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007f3c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	0e1b      	lsrs	r3, r3, #24
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	0c1b      	lsrs	r3, r3, #16
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	0a1b      	lsrs	r3, r3, #8
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f86:	091b      	lsrs	r3, r3, #4
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	0e1b      	lsrs	r3, r3, #24
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	0c1b      	lsrs	r3, r3, #16
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	0a1b      	lsrs	r3, r3, #8
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	0e1b      	lsrs	r3, r3, #24
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	0c1b      	lsrs	r3, r3, #16
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	0a1b      	lsrs	r3, r3, #8
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	0e1b      	lsrs	r3, r3, #24
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	0c1b      	lsrs	r3, r3, #16
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	b2da      	uxtb	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	372c      	adds	r7, #44	@ 0x2c
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	58004000 	.word	0x58004000
 800801c:	a94656b9 	.word	0xa94656b9

08008020 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	4a08      	ldr	r2, [pc, #32]	@ (8008050 <hci_init+0x30>)
 8008030:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008032:	4a08      	ldr	r2, [pc, #32]	@ (8008054 <hci_init+0x34>)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008038:	4806      	ldr	r0, [pc, #24]	@ (8008054 <hci_init+0x34>)
 800803a:	f000 f979 	bl	8008330 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 f8da 	bl	80081fc <TlInit>

  return;
 8008048:	bf00      	nop
}
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	2000047c 	.word	0x2000047c
 8008054:	20000454 	.word	0x20000454

08008058 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800805e:	4822      	ldr	r0, [pc, #136]	@ (80080e8 <hci_user_evt_proc+0x90>)
 8008060:	f000 fd32 	bl	8008ac8 <LST_is_empty>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d12b      	bne.n	80080c2 <hci_user_evt_proc+0x6a>
 800806a:	4b20      	ldr	r3, [pc, #128]	@ (80080ec <hci_user_evt_proc+0x94>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d027      	beq.n	80080c2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008072:	f107 030c 	add.w	r3, r7, #12
 8008076:	4619      	mov	r1, r3
 8008078:	481b      	ldr	r0, [pc, #108]	@ (80080e8 <hci_user_evt_proc+0x90>)
 800807a:	f000 fdb4 	bl	8008be6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800807e:	4b1c      	ldr	r3, [pc, #112]	@ (80080f0 <hci_user_evt_proc+0x98>)
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00c      	beq.n	80080a0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800808a:	2301      	movs	r3, #1
 800808c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800808e:	4b18      	ldr	r3, [pc, #96]	@ (80080f0 <hci_user_evt_proc+0x98>)
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	1d3a      	adds	r2, r7, #4
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008098:	793a      	ldrb	r2, [r7, #4]
 800809a:	4b14      	ldr	r3, [pc, #80]	@ (80080ec <hci_user_evt_proc+0x94>)
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	e002      	b.n	80080a6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80080a0:	4b12      	ldr	r3, [pc, #72]	@ (80080ec <hci_user_evt_proc+0x94>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80080a6:	4b11      	ldr	r3, [pc, #68]	@ (80080ec <hci_user_evt_proc+0x94>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fc0d 	bl	80088d0 <TL_MM_EvtDone>
 80080b6:	e004      	b.n	80080c2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4619      	mov	r1, r3
 80080bc:	480a      	ldr	r0, [pc, #40]	@ (80080e8 <hci_user_evt_proc+0x90>)
 80080be:	f000 fd25 	bl	8008b0c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80080c2:	4809      	ldr	r0, [pc, #36]	@ (80080e8 <hci_user_evt_proc+0x90>)
 80080c4:	f000 fd00 	bl	8008ac8 <LST_is_empty>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d107      	bne.n	80080de <hci_user_evt_proc+0x86>
 80080ce:	4b07      	ldr	r3, [pc, #28]	@ (80080ec <hci_user_evt_proc+0x94>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80080d6:	4804      	ldr	r0, [pc, #16]	@ (80080e8 <hci_user_evt_proc+0x90>)
 80080d8:	f001 f848 	bl	800916c <hci_notify_asynch_evt>
  }


  return;
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
}
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000064 	.word	0x20000064
 80080ec:	20000070 	.word	0x20000070
 80080f0:	20000454 	.word	0x20000454

080080f4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008100:	2000      	movs	r0, #0
 8008102:	f000 f8d1 	bl	80082a8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008106:	2300      	movs	r3, #0
 8008108:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	885b      	ldrh	r3, [r3, #2]
 800810e:	b21b      	sxth	r3, r3
 8008110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008114:	b21a      	sxth	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	029b      	lsls	r3, r3, #10
 800811c:	b21b      	sxth	r3, r3
 800811e:	4313      	orrs	r3, r2
 8008120:	b21b      	sxth	r3, r3
 8008122:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8008124:	4b33      	ldr	r3, [pc, #204]	@ (80081f4 <hci_send_req+0x100>)
 8008126:	2201      	movs	r2, #1
 8008128:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	b2d9      	uxtb	r1, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	8bbb      	ldrh	r3, [r7, #28]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 f890 	bl	800825c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800813c:	e04e      	b.n	80081dc <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800813e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8008142:	f001 f82a 	bl	800919a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008146:	e043      	b.n	80081d0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008148:	f107 030c 	add.w	r3, r7, #12
 800814c:	4619      	mov	r1, r3
 800814e:	482a      	ldr	r0, [pc, #168]	@ (80081f8 <hci_send_req+0x104>)
 8008150:	f000 fd49 	bl	8008be6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	7a5b      	ldrb	r3, [r3, #9]
 8008158:	2b0f      	cmp	r3, #15
 800815a:	d114      	bne.n	8008186 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	330b      	adds	r3, #11
 8008160:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	885b      	ldrh	r3, [r3, #2]
 8008166:	b29b      	uxth	r3, r3
 8008168:	8bba      	ldrh	r2, [r7, #28]
 800816a:	429a      	cmp	r2, r3
 800816c:	d104      	bne.n	8008178 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	7812      	ldrb	r2, [r2, #0]
 8008176:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	785b      	ldrb	r3, [r3, #1]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d027      	beq.n	80081d0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008180:	2301      	movs	r3, #1
 8008182:	77fb      	strb	r3, [r7, #31]
 8008184:	e024      	b.n	80081d0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	330b      	adds	r3, #11
 800818a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008192:	b29b      	uxth	r3, r3
 8008194:	8bba      	ldrh	r2, [r7, #28]
 8008196:	429a      	cmp	r2, r3
 8008198:	d114      	bne.n	80081c4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	7a9b      	ldrb	r3, [r3, #10]
 800819e:	3b03      	subs	r3, #3
 80081a0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695a      	ldr	r2, [r3, #20]
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	bfa8      	it	ge
 80081ac:	461a      	movge	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6918      	ldr	r0, [r3, #16]
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	1cd9      	adds	r1, r3, #3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	461a      	mov	r2, r3
 80081c0:	f001 fe52 	bl	8009e68 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80081cc:	2301      	movs	r3, #1
 80081ce:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80081d0:	4809      	ldr	r0, [pc, #36]	@ (80081f8 <hci_send_req+0x104>)
 80081d2:	f000 fc79 	bl	8008ac8 <LST_is_empty>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0b5      	beq.n	8008148 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80081dc:	7ffb      	ldrb	r3, [r7, #31]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0ad      	beq.n	800813e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80081e2:	2001      	movs	r0, #1
 80081e4:	f000 f860 	bl	80082a8 <NotifyCmdStatus>

  return 0;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3720      	adds	r7, #32
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000480 	.word	0x20000480
 80081f8:	20000474 	.word	0x20000474

080081fc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008204:	480f      	ldr	r0, [pc, #60]	@ (8008244 <TlInit+0x48>)
 8008206:	f000 fc4f 	bl	8008aa8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800820a:	4a0f      	ldr	r2, [pc, #60]	@ (8008248 <TlInit+0x4c>)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008210:	480e      	ldr	r0, [pc, #56]	@ (800824c <TlInit+0x50>)
 8008212:	f000 fc49 	bl	8008aa8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008216:	4b0e      	ldr	r3, [pc, #56]	@ (8008250 <TlInit+0x54>)
 8008218:	2201      	movs	r2, #1
 800821a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800821c:	4b0d      	ldr	r3, [pc, #52]	@ (8008254 <TlInit+0x58>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00a      	beq.n	800823a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008228:	4b0b      	ldr	r3, [pc, #44]	@ (8008258 <TlInit+0x5c>)
 800822a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800822c:	4b09      	ldr	r3, [pc, #36]	@ (8008254 <TlInit+0x58>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f107 0208 	add.w	r2, r7, #8
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
  }

  return;
 8008238:	bf00      	nop
 800823a:	bf00      	nop
}
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000474 	.word	0x20000474
 8008248:	2000006c 	.word	0x2000006c
 800824c:	20000064 	.word	0x20000064
 8008250:	20000070 	.word	0x20000070
 8008254:	20000454 	.word	0x20000454
 8008258:	080082e9 	.word	0x080082e9

0800825c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	603a      	str	r2, [r7, #0]
 8008266:	80fb      	strh	r3, [r7, #6]
 8008268:	460b      	mov	r3, r1
 800826a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800826c:	4b0c      	ldr	r3, [pc, #48]	@ (80082a0 <SendCmd+0x44>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	88fa      	ldrh	r2, [r7, #6]
 8008272:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008276:	4b0a      	ldr	r3, [pc, #40]	@ (80082a0 <SendCmd+0x44>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	797a      	ldrb	r2, [r7, #5]
 800827c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800827e:	4b08      	ldr	r3, [pc, #32]	@ (80082a0 <SendCmd+0x44>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	330c      	adds	r3, #12
 8008284:	797a      	ldrb	r2, [r7, #5]
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fded 	bl	8009e68 <memcpy>

  hciContext.io.Send(0,0);
 800828e:	4b05      	ldr	r3, [pc, #20]	@ (80082a4 <SendCmd+0x48>)
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2100      	movs	r1, #0
 8008294:	2000      	movs	r0, #0
 8008296:	4798      	blx	r3

  return;
 8008298:	bf00      	nop
}
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	2000006c 	.word	0x2000006c
 80082a4:	20000454 	.word	0x20000454

080082a8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d108      	bne.n	80082ca <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80082b8:	4b0a      	ldr	r3, [pc, #40]	@ (80082e4 <NotifyCmdStatus+0x3c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00d      	beq.n	80082dc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80082c0:	4b08      	ldr	r3, [pc, #32]	@ (80082e4 <NotifyCmdStatus+0x3c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2000      	movs	r0, #0
 80082c6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80082c8:	e008      	b.n	80082dc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80082ca:	4b06      	ldr	r3, [pc, #24]	@ (80082e4 <NotifyCmdStatus+0x3c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d004      	beq.n	80082dc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80082d2:	4b04      	ldr	r3, [pc, #16]	@ (80082e4 <NotifyCmdStatus+0x3c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2001      	movs	r0, #1
 80082d8:	4798      	blx	r3
  return;
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
}
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	2000047c 	.word	0x2000047c

080082e8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7a5b      	ldrb	r3, [r3, #9]
 80082f4:	2b0f      	cmp	r3, #15
 80082f6:	d003      	beq.n	8008300 <TlEvtReceived+0x18>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	7a5b      	ldrb	r3, [r3, #9]
 80082fc:	2b0e      	cmp	r3, #14
 80082fe:	d107      	bne.n	8008310 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	4809      	ldr	r0, [pc, #36]	@ (8008328 <TlEvtReceived+0x40>)
 8008304:	f000 fc28 	bl	8008b58 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008308:	2000      	movs	r0, #0
 800830a:	f000 ff3b 	bl	8009184 <hci_cmd_resp_release>
 800830e:	e006      	b.n	800831e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4806      	ldr	r0, [pc, #24]	@ (800832c <TlEvtReceived+0x44>)
 8008314:	f000 fc20 	bl	8008b58 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008318:	4804      	ldr	r0, [pc, #16]	@ (800832c <TlEvtReceived+0x44>)
 800831a:	f000 ff27 	bl	800916c <hci_notify_asynch_evt>
  }

  return;
 800831e:	bf00      	nop
}
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20000474 	.word	0x20000474
 800832c:	20000064 	.word	0x20000064

08008330 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a05      	ldr	r2, [pc, #20]	@ (8008350 <hci_register_io_bus+0x20>)
 800833c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a04      	ldr	r2, [pc, #16]	@ (8008354 <hci_register_io_bus+0x24>)
 8008342:	611a      	str	r2, [r3, #16]

  return;
 8008344:	bf00      	nop
}
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	08008649 	.word	0x08008649
 8008354:	080086b1 	.word	0x080086b1

08008358 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	4a08      	ldr	r2, [pc, #32]	@ (8008388 <shci_init+0x30>)
 8008368:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800836a:	4a08      	ldr	r2, [pc, #32]	@ (800838c <shci_init+0x34>)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008370:	4806      	ldr	r0, [pc, #24]	@ (800838c <shci_init+0x34>)
 8008372:	f000 f915 	bl	80085a0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 f898 	bl	80084b0 <TlInit>

  return;
 8008380:	bf00      	nop
}
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	200004a4 	.word	0x200004a4
 800838c:	20000484 	.word	0x20000484

08008390 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008396:	4822      	ldr	r0, [pc, #136]	@ (8008420 <shci_user_evt_proc+0x90>)
 8008398:	f000 fb96 	bl	8008ac8 <LST_is_empty>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d12b      	bne.n	80083fa <shci_user_evt_proc+0x6a>
 80083a2:	4b20      	ldr	r3, [pc, #128]	@ (8008424 <shci_user_evt_proc+0x94>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d027      	beq.n	80083fa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80083aa:	f107 030c 	add.w	r3, r7, #12
 80083ae:	4619      	mov	r1, r3
 80083b0:	481b      	ldr	r0, [pc, #108]	@ (8008420 <shci_user_evt_proc+0x90>)
 80083b2:	f000 fc18 	bl	8008be6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80083b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008428 <shci_user_evt_proc+0x98>)
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00c      	beq.n	80083d8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80083c2:	2301      	movs	r3, #1
 80083c4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80083c6:	4b18      	ldr	r3, [pc, #96]	@ (8008428 <shci_user_evt_proc+0x98>)
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	1d3a      	adds	r2, r7, #4
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80083d0:	793a      	ldrb	r2, [r7, #4]
 80083d2:	4b14      	ldr	r3, [pc, #80]	@ (8008424 <shci_user_evt_proc+0x94>)
 80083d4:	701a      	strb	r2, [r3, #0]
 80083d6:	e002      	b.n	80083de <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80083d8:	4b12      	ldr	r3, [pc, #72]	@ (8008424 <shci_user_evt_proc+0x94>)
 80083da:	2201      	movs	r2, #1
 80083dc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80083de:	4b11      	ldr	r3, [pc, #68]	@ (8008424 <shci_user_evt_proc+0x94>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fa71 	bl	80088d0 <TL_MM_EvtDone>
 80083ee:	e004      	b.n	80083fa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4619      	mov	r1, r3
 80083f4:	480a      	ldr	r0, [pc, #40]	@ (8008420 <shci_user_evt_proc+0x90>)
 80083f6:	f000 fb89 	bl	8008b0c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80083fa:	4809      	ldr	r0, [pc, #36]	@ (8008420 <shci_user_evt_proc+0x90>)
 80083fc:	f000 fb64 	bl	8008ac8 <LST_is_empty>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d107      	bne.n	8008416 <shci_user_evt_proc+0x86>
 8008406:	4b07      	ldr	r3, [pc, #28]	@ (8008424 <shci_user_evt_proc+0x94>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800840e:	4804      	ldr	r0, [pc, #16]	@ (8008420 <shci_user_evt_proc+0x90>)
 8008410:	f7fa f84a 	bl	80024a8 <shci_notify_asynch_evt>
  }


  return;
 8008414:	bf00      	nop
 8008416:	bf00      	nop
}
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000074 	.word	0x20000074
 8008424:	20000084 	.word	0x20000084
 8008428:	20000484 	.word	0x20000484

0800842c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	60ba      	str	r2, [r7, #8]
 8008434:	607b      	str	r3, [r7, #4]
 8008436:	4603      	mov	r3, r0
 8008438:	81fb      	strh	r3, [r7, #14]
 800843a:	460b      	mov	r3, r1
 800843c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800843e:	2000      	movs	r0, #0
 8008440:	f000 f868 	bl	8008514 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008444:	4b17      	ldr	r3, [pc, #92]	@ (80084a4 <shci_send+0x78>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	89fa      	ldrh	r2, [r7, #14]
 800844a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800844e:	4b15      	ldr	r3, [pc, #84]	@ (80084a4 <shci_send+0x78>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	7b7a      	ldrb	r2, [r7, #13]
 8008454:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008456:	4b13      	ldr	r3, [pc, #76]	@ (80084a4 <shci_send+0x78>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	7b7a      	ldrb	r2, [r7, #13]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	4618      	mov	r0, r3
 8008462:	f001 fd01 	bl	8009e68 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8008466:	4b10      	ldr	r3, [pc, #64]	@ (80084a8 <shci_send+0x7c>)
 8008468:	2201      	movs	r2, #1
 800846a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800846c:	4b0f      	ldr	r3, [pc, #60]	@ (80084ac <shci_send+0x80>)
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2100      	movs	r1, #0
 8008472:	2000      	movs	r0, #0
 8008474:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008476:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800847a:	f7fa f82c 	bl	80024d6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f103 0008 	add.w	r0, r3, #8
 8008484:	4b07      	ldr	r3, [pc, #28]	@ (80084a4 <shci_send+0x78>)
 8008486:	6819      	ldr	r1, [r3, #0]
 8008488:	4b06      	ldr	r3, [pc, #24]	@ (80084a4 <shci_send+0x78>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	789b      	ldrb	r3, [r3, #2]
 800848e:	3303      	adds	r3, #3
 8008490:	461a      	mov	r2, r3
 8008492:	f001 fce9 	bl	8009e68 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008496:	2001      	movs	r0, #1
 8008498:	f000 f83c 	bl	8008514 <Cmd_SetStatus>

  return;
 800849c:	bf00      	nop
}
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20000080 	.word	0x20000080
 80084a8:	200004a8 	.word	0x200004a8
 80084ac:	20000484 	.word	0x20000484

080084b0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80084b8:	4a10      	ldr	r2, [pc, #64]	@ (80084fc <TlInit+0x4c>)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80084be:	4810      	ldr	r0, [pc, #64]	@ (8008500 <TlInit+0x50>)
 80084c0:	f000 faf2 	bl	8008aa8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80084c4:	2001      	movs	r0, #1
 80084c6:	f000 f825 	bl	8008514 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80084ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008504 <TlInit+0x54>)
 80084cc:	2201      	movs	r2, #1
 80084ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80084d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008508 <TlInit+0x58>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00c      	beq.n	80084f2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80084dc:	4b0b      	ldr	r3, [pc, #44]	@ (800850c <TlInit+0x5c>)
 80084de:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80084e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008510 <TlInit+0x60>)
 80084e2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80084e4:	4b08      	ldr	r3, [pc, #32]	@ (8008508 <TlInit+0x58>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f107 020c 	add.w	r2, r7, #12
 80084ec:	4610      	mov	r0, r2
 80084ee:	4798      	blx	r3
  }

  return;
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
}
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000080 	.word	0x20000080
 8008500:	20000074 	.word	0x20000074
 8008504:	20000084 	.word	0x20000084
 8008508:	20000484 	.word	0x20000484
 800850c:	08008565 	.word	0x08008565
 8008510:	0800857d 	.word	0x0800857d

08008514 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10b      	bne.n	800853c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008524:	4b0d      	ldr	r3, [pc, #52]	@ (800855c <Cmd_SetStatus+0x48>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800852c:	4b0b      	ldr	r3, [pc, #44]	@ (800855c <Cmd_SetStatus+0x48>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2000      	movs	r0, #0
 8008532:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008534:	4b0a      	ldr	r3, [pc, #40]	@ (8008560 <Cmd_SetStatus+0x4c>)
 8008536:	2200      	movs	r2, #0
 8008538:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800853a:	e00b      	b.n	8008554 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800853c:	4b08      	ldr	r3, [pc, #32]	@ (8008560 <Cmd_SetStatus+0x4c>)
 800853e:	2201      	movs	r2, #1
 8008540:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008542:	4b06      	ldr	r3, [pc, #24]	@ (800855c <Cmd_SetStatus+0x48>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800854a:	4b04      	ldr	r3, [pc, #16]	@ (800855c <Cmd_SetStatus+0x48>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2001      	movs	r0, #1
 8008550:	4798      	blx	r3
  return;
 8008552:	bf00      	nop
 8008554:	bf00      	nop
}
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	200004a4 	.word	0x200004a4
 8008560:	2000007c 	.word	0x2000007c

08008564 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800856c:	2000      	movs	r0, #0
 800856e:	f7f9 ffa7 	bl	80024c0 <shci_cmd_resp_release>

  return;
 8008572:	bf00      	nop
}
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	4805      	ldr	r0, [pc, #20]	@ (800859c <TlUserEvtReceived+0x20>)
 8008588:	f000 fae6 	bl	8008b58 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800858c:	4803      	ldr	r0, [pc, #12]	@ (800859c <TlUserEvtReceived+0x20>)
 800858e:	f7f9 ff8b 	bl	80024a8 <shci_notify_asynch_evt>

  return;
 8008592:	bf00      	nop
}
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000074 	.word	0x20000074

080085a0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a05      	ldr	r2, [pc, #20]	@ (80085c0 <shci_register_io_bus+0x20>)
 80085ac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a04      	ldr	r2, [pc, #16]	@ (80085c4 <shci_register_io_bus+0x24>)
 80085b2:	611a      	str	r2, [r3, #16]

  return;
 80085b4:	bf00      	nop
}
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	0800875d 	.word	0x0800875d
 80085c4:	080087b1 	.word	0x080087b1

080085c8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80085cc:	f001 f8d2 	bl	8009774 <HW_IPCC_Enable>

  return;
 80085d0:	bf00      	nop
}
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <TL_Init>:


void TL_Init( void )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80085d8:	4b10      	ldr	r3, [pc, #64]	@ (800861c <TL_Init+0x48>)
 80085da:	4a11      	ldr	r2, [pc, #68]	@ (8008620 <TL_Init+0x4c>)
 80085dc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80085de:	4b0f      	ldr	r3, [pc, #60]	@ (800861c <TL_Init+0x48>)
 80085e0:	4a10      	ldr	r2, [pc, #64]	@ (8008624 <TL_Init+0x50>)
 80085e2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80085e4:	4b0d      	ldr	r3, [pc, #52]	@ (800861c <TL_Init+0x48>)
 80085e6:	4a10      	ldr	r2, [pc, #64]	@ (8008628 <TL_Init+0x54>)
 80085e8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80085ea:	4b0c      	ldr	r3, [pc, #48]	@ (800861c <TL_Init+0x48>)
 80085ec:	4a0f      	ldr	r2, [pc, #60]	@ (800862c <TL_Init+0x58>)
 80085ee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80085f0:	4b0a      	ldr	r3, [pc, #40]	@ (800861c <TL_Init+0x48>)
 80085f2:	4a0f      	ldr	r2, [pc, #60]	@ (8008630 <TL_Init+0x5c>)
 80085f4:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80085f6:	4b09      	ldr	r3, [pc, #36]	@ (800861c <TL_Init+0x48>)
 80085f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008634 <TL_Init+0x60>)
 80085fa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80085fc:	4b07      	ldr	r3, [pc, #28]	@ (800861c <TL_Init+0x48>)
 80085fe:	4a0e      	ldr	r2, [pc, #56]	@ (8008638 <TL_Init+0x64>)
 8008600:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008602:	4b06      	ldr	r3, [pc, #24]	@ (800861c <TL_Init+0x48>)
 8008604:	4a0d      	ldr	r2, [pc, #52]	@ (800863c <TL_Init+0x68>)
 8008606:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008608:	4b04      	ldr	r3, [pc, #16]	@ (800861c <TL_Init+0x48>)
 800860a:	4a0d      	ldr	r2, [pc, #52]	@ (8008640 <TL_Init+0x6c>)
 800860c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800860e:	4b03      	ldr	r3, [pc, #12]	@ (800861c <TL_Init+0x48>)
 8008610:	4a0c      	ldr	r2, [pc, #48]	@ (8008644 <TL_Init+0x70>)
 8008612:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008614:	f001 f8c2 	bl	800979c <HW_IPCC_Init>

  return;
 8008618:	bf00      	nop
}
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20030000 	.word	0x20030000
 8008620:	20030028 	.word	0x20030028
 8008624:	20030048 	.word	0x20030048
 8008628:	20030058 	.word	0x20030058
 800862c:	20030068 	.word	0x20030068
 8008630:	20030070 	.word	0x20030070
 8008634:	20030078 	.word	0x20030078
 8008638:	20030080 	.word	0x20030080
 800863c:	2003009c 	.word	0x2003009c
 8008640:	200300a0 	.word	0x200300a0
 8008644:	200300ac 	.word	0x200300ac

08008648 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008654:	4811      	ldr	r0, [pc, #68]	@ (800869c <TL_BLE_Init+0x54>)
 8008656:	f000 fa27 	bl	8008aa8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800865a:	4b11      	ldr	r3, [pc, #68]	@ (80086a0 <TL_BLE_Init+0x58>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	4a0c      	ldr	r2, [pc, #48]	@ (80086a4 <TL_BLE_Init+0x5c>)
 8008674:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	4a08      	ldr	r2, [pc, #32]	@ (800869c <TL_BLE_Init+0x54>)
 800867a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800867c:	f001 f8a4 	bl	80097c8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a08      	ldr	r2, [pc, #32]	@ (80086a8 <TL_BLE_Init+0x60>)
 8008686:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	4a07      	ldr	r2, [pc, #28]	@ (80086ac <TL_BLE_Init+0x64>)
 800868e:	6013      	str	r3, [r2, #0]

  return 0;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	200300c8 	.word	0x200300c8
 80086a0:	20030000 	.word	0x20030000
 80086a4:	20030a58 	.word	0x20030a58
 80086a8:	200004b4 	.word	0x200004b4
 80086ac:	200004b8 	.word	0x200004b8

080086b0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80086bc:	4b09      	ldr	r3, [pc, #36]	@ (80086e4 <TL_BLE_SendCmd+0x34>)
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2201      	movs	r2, #1
 80086c4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80086c6:	4b07      	ldr	r3, [pc, #28]	@ (80086e4 <TL_BLE_SendCmd+0x34>)
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4619      	mov	r1, r3
 80086ce:	2001      	movs	r0, #1
 80086d0:	f000 f96c 	bl	80089ac <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80086d4:	f001 f882 	bl	80097dc <HW_IPCC_BLE_SendCmd>

  return 0;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20030000 	.word	0x20030000

080086e8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80086ee:	e01c      	b.n	800872a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80086f0:	1d3b      	adds	r3, r7, #4
 80086f2:	4619      	mov	r1, r3
 80086f4:	4812      	ldr	r0, [pc, #72]	@ (8008740 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80086f6:	f000 fa76 	bl	8008be6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7a5b      	ldrb	r3, [r3, #9]
 80086fe:	2b0f      	cmp	r3, #15
 8008700:	d003      	beq.n	800870a <HW_IPCC_BLE_RxEvtNot+0x22>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7a5b      	ldrb	r3, [r3, #9]
 8008706:	2b0e      	cmp	r3, #14
 8008708:	d105      	bne.n	8008716 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4619      	mov	r1, r3
 800870e:	2002      	movs	r0, #2
 8008710:	f000 f94c 	bl	80089ac <OutputDbgTrace>
 8008714:	e004      	b.n	8008720 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4619      	mov	r1, r3
 800871a:	2003      	movs	r0, #3
 800871c:	f000 f946 	bl	80089ac <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008720:	4b08      	ldr	r3, [pc, #32]	@ (8008744 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	4610      	mov	r0, r2
 8008728:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800872a:	4805      	ldr	r0, [pc, #20]	@ (8008740 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800872c:	f000 f9cc 	bl	8008ac8 <LST_is_empty>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0dc      	beq.n	80086f0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008736:	bf00      	nop
}
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	200300c8 	.word	0x200300c8
 8008744:	200004b4 	.word	0x200004b4

08008748 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800874c:	4b02      	ldr	r3, [pc, #8]	@ (8008758 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4798      	blx	r3

  return;
 8008752:	bf00      	nop
}
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200004b8 	.word	0x200004b8

0800875c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008768:	480d      	ldr	r0, [pc, #52]	@ (80087a0 <TL_SYS_Init+0x44>)
 800876a:	f000 f99d 	bl	8008aa8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800876e:	4b0d      	ldr	r3, [pc, #52]	@ (80087a4 <TL_SYS_Init+0x48>)
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	4a08      	ldr	r2, [pc, #32]	@ (80087a0 <TL_SYS_Init+0x44>)
 8008780:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008782:	f001 f84d 	bl	8009820 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a07      	ldr	r2, [pc, #28]	@ (80087a8 <TL_SYS_Init+0x4c>)
 800878c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4a06      	ldr	r2, [pc, #24]	@ (80087ac <TL_SYS_Init+0x50>)
 8008794:	6013      	str	r3, [r2, #0]

  return 0;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	200300d0 	.word	0x200300d0
 80087a4:	20030000 	.word	0x20030000
 80087a8:	200004bc 	.word	0x200004bc
 80087ac:	200004c0 	.word	0x200004c0

080087b0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80087bc:	4b09      	ldr	r3, [pc, #36]	@ (80087e4 <TL_SYS_SendCmd+0x34>)
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2210      	movs	r2, #16
 80087c4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80087c6:	4b07      	ldr	r3, [pc, #28]	@ (80087e4 <TL_SYS_SendCmd+0x34>)
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4619      	mov	r1, r3
 80087ce:	2004      	movs	r0, #4
 80087d0:	f000 f8ec 	bl	80089ac <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80087d4:	f001 f82e 	bl	8009834 <HW_IPCC_SYS_SendCmd>

  return 0;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20030000 	.word	0x20030000

080087e8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80087ec:	4b07      	ldr	r3, [pc, #28]	@ (800880c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4619      	mov	r1, r3
 80087f4:	2005      	movs	r0, #5
 80087f6:	f000 f8d9 	bl	80089ac <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80087fa:	4b05      	ldr	r3, [pc, #20]	@ (8008810 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a03      	ldr	r2, [pc, #12]	@ (800880c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008800:	68d2      	ldr	r2, [r2, #12]
 8008802:	6812      	ldr	r2, [r2, #0]
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3

  return;
 8008808:	bf00      	nop
}
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20030000 	.word	0x20030000
 8008810:	200004bc 	.word	0x200004bc

08008814 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800881a:	e00e      	b.n	800883a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800881c:	1d3b      	adds	r3, r7, #4
 800881e:	4619      	mov	r1, r3
 8008820:	480b      	ldr	r0, [pc, #44]	@ (8008850 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008822:	f000 f9e0 	bl	8008be6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4619      	mov	r1, r3
 800882a:	2006      	movs	r0, #6
 800882c:	f000 f8be 	bl	80089ac <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008830:	4b08      	ldr	r3, [pc, #32]	@ (8008854 <HW_IPCC_SYS_EvtNot+0x40>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	4610      	mov	r0, r2
 8008838:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800883a:	4805      	ldr	r0, [pc, #20]	@ (8008850 <HW_IPCC_SYS_EvtNot+0x3c>)
 800883c:	f000 f944 	bl	8008ac8 <LST_is_empty>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0ea      	beq.n	800881c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008846:	bf00      	nop
}
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	200300d0 	.word	0x200300d0
 8008854:	200004c0 	.word	0x200004c0

08008858 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008860:	4817      	ldr	r0, [pc, #92]	@ (80088c0 <TL_MM_Init+0x68>)
 8008862:	f000 f921 	bl	8008aa8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008866:	4817      	ldr	r0, [pc, #92]	@ (80088c4 <TL_MM_Init+0x6c>)
 8008868:	f000 f91e 	bl	8008aa8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800886c:	4b16      	ldr	r3, [pc, #88]	@ (80088c8 <TL_MM_Init+0x70>)
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	4a16      	ldr	r2, [pc, #88]	@ (80088cc <TL_MM_Init+0x74>)
 8008872:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008874:	4b15      	ldr	r3, [pc, #84]	@ (80088cc <TL_MM_Init+0x74>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	6892      	ldr	r2, [r2, #8]
 800887c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800887e:	4b13      	ldr	r3, [pc, #76]	@ (80088cc <TL_MM_Init+0x74>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	68d2      	ldr	r2, [r2, #12]
 8008886:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008888:	4b10      	ldr	r3, [pc, #64]	@ (80088cc <TL_MM_Init+0x74>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a0c      	ldr	r2, [pc, #48]	@ (80088c0 <TL_MM_Init+0x68>)
 800888e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008890:	4b0e      	ldr	r3, [pc, #56]	@ (80088cc <TL_MM_Init+0x74>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6812      	ldr	r2, [r2, #0]
 8008898:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800889a:	4b0c      	ldr	r3, [pc, #48]	@ (80088cc <TL_MM_Init+0x74>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6852      	ldr	r2, [r2, #4]
 80088a2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80088a4:	4b09      	ldr	r3, [pc, #36]	@ (80088cc <TL_MM_Init+0x74>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	6912      	ldr	r2, [r2, #16]
 80088ac:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80088ae:	4b07      	ldr	r3, [pc, #28]	@ (80088cc <TL_MM_Init+0x74>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	6952      	ldr	r2, [r2, #20]
 80088b6:	619a      	str	r2, [r3, #24]

  return;
 80088b8:	bf00      	nop
}
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	200300b8 	.word	0x200300b8
 80088c4:	200004ac 	.word	0x200004ac
 80088c8:	20030000 	.word	0x20030000
 80088cc:	200004c4 	.word	0x200004c4

080088d0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	4807      	ldr	r0, [pc, #28]	@ (80088f8 <TL_MM_EvtDone+0x28>)
 80088dc:	f000 f93c 	bl	8008b58 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	2000      	movs	r0, #0
 80088e4:	f000 f862 	bl	80089ac <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80088e8:	4804      	ldr	r0, [pc, #16]	@ (80088fc <TL_MM_EvtDone+0x2c>)
 80088ea:	f000 ffc9 	bl	8009880 <HW_IPCC_MM_SendFreeBuf>

  return;
 80088ee:	bf00      	nop
}
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	200004ac 	.word	0x200004ac
 80088fc:	08008901 	.word	0x08008901

08008900 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008906:	e00c      	b.n	8008922 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008908:	1d3b      	adds	r3, r7, #4
 800890a:	4619      	mov	r1, r3
 800890c:	480a      	ldr	r0, [pc, #40]	@ (8008938 <SendFreeBuf+0x38>)
 800890e:	f000 f96a 	bl	8008be6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008912:	4b0a      	ldr	r3, [pc, #40]	@ (800893c <SendFreeBuf+0x3c>)
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	4611      	mov	r1, r2
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f91b 	bl	8008b58 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008922:	4805      	ldr	r0, [pc, #20]	@ (8008938 <SendFreeBuf+0x38>)
 8008924:	f000 f8d0 	bl	8008ac8 <LST_is_empty>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d0ec      	beq.n	8008908 <SendFreeBuf+0x8>
  }

  return;
 800892e:	bf00      	nop
}
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	200004ac 	.word	0x200004ac
 800893c:	20030000 	.word	0x20030000

08008940 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008944:	4805      	ldr	r0, [pc, #20]	@ (800895c <TL_TRACES_Init+0x1c>)
 8008946:	f000 f8af 	bl	8008aa8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800894a:	4b05      	ldr	r3, [pc, #20]	@ (8008960 <TL_TRACES_Init+0x20>)
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	4a03      	ldr	r2, [pc, #12]	@ (800895c <TL_TRACES_Init+0x1c>)
 8008950:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008952:	f000 ffcb 	bl	80098ec <HW_IPCC_TRACES_Init>

  return;
 8008956:	bf00      	nop
}
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	200300c0 	.word	0x200300c0
 8008960:	20030000 	.word	0x20030000

08008964 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800896a:	e008      	b.n	800897e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800896c:	1d3b      	adds	r3, r7, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4808      	ldr	r0, [pc, #32]	@ (8008994 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008972:	f000 f938 	bl	8008be6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f80d 	bl	8008998 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800897e:	4805      	ldr	r0, [pc, #20]	@ (8008994 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008980:	f000 f8a2 	bl	8008ac8 <LST_is_empty>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0f0      	beq.n	800896c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800898a:	bf00      	nop
}
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	200300c0 	.word	0x200300c0

08008998 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	6039      	str	r1, [r7, #0]
 80089b6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	2b06      	cmp	r3, #6
 80089bc:	d845      	bhi.n	8008a4a <OutputDbgTrace+0x9e>
 80089be:	a201      	add	r2, pc, #4	@ (adr r2, 80089c4 <OutputDbgTrace+0x18>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	080089e1 	.word	0x080089e1
 80089c8:	08008a05 	.word	0x08008a05
 80089cc:	08008a0b 	.word	0x08008a0b
 80089d0:	08008a1f 	.word	0x08008a1f
 80089d4:	08008a2b 	.word	0x08008a2b
 80089d8:	08008a31 	.word	0x08008a31
 80089dc:	08008a3f 	.word	0x08008a3f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	7a5b      	ldrb	r3, [r3, #9]
 80089e8:	2bff      	cmp	r3, #255	@ 0xff
 80089ea:	d005      	beq.n	80089f8 <OutputDbgTrace+0x4c>
 80089ec:	2bff      	cmp	r3, #255	@ 0xff
 80089ee:	dc05      	bgt.n	80089fc <OutputDbgTrace+0x50>
 80089f0:	2b0e      	cmp	r3, #14
 80089f2:	d005      	beq.n	8008a00 <OutputDbgTrace+0x54>
 80089f4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80089f6:	e001      	b.n	80089fc <OutputDbgTrace+0x50>
          break;
 80089f8:	bf00      	nop
 80089fa:	e027      	b.n	8008a4c <OutputDbgTrace+0xa0>
          break;
 80089fc:	bf00      	nop
 80089fe:	e025      	b.n	8008a4c <OutputDbgTrace+0xa0>
          break;
 8008a00:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008a02:	e023      	b.n	8008a4c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008a08:	e020      	b.n	8008a4c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	7a5b      	ldrb	r3, [r3, #9]
 8008a12:	2b0e      	cmp	r3, #14
 8008a14:	d001      	beq.n	8008a1a <OutputDbgTrace+0x6e>
 8008a16:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008a18:	e000      	b.n	8008a1c <OutputDbgTrace+0x70>
          break;
 8008a1a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a1c:	e016      	b.n	8008a4c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	7a5b      	ldrb	r3, [r3, #9]
 8008a26:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a28:	e010      	b.n	8008a4c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008a2e:	e00d      	b.n	8008a4c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	7a5b      	ldrb	r3, [r3, #9]
 8008a38:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008a3a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a3c:	e006      	b.n	8008a4c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	7a5b      	ldrb	r3, [r3, #9]
 8008a46:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a48:	e000      	b.n	8008a4c <OutputDbgTrace+0xa0>

    default:
      break;
 8008a4a:	bf00      	nop
  }

  return;
 8008a4c:	bf00      	nop
}
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008a62:	4b0f      	ldr	r3, [pc, #60]	@ (8008aa0 <OTP_Read+0x48>)
 8008a64:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008a66:	e002      	b.n	8008a6e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3b08      	subs	r3, #8
 8008a6c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3307      	adds	r3, #7
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	79fa      	ldrb	r2, [r7, #7]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d003      	beq.n	8008a82 <OTP_Read+0x2a>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4a09      	ldr	r2, [pc, #36]	@ (8008aa4 <OTP_Read+0x4c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d1f2      	bne.n	8008a68 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3307      	adds	r3, #7
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	79fa      	ldrb	r2, [r7, #7]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d001      	beq.n	8008a92 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008a92:	68fb      	ldr	r3, [r7, #12]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	1fff73f8 	.word	0x1fff73f8
 8008aa4:	1fff7000 	.word	0x1fff7000

08008aa8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	605a      	str	r2, [r3, #4]
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ad4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008ad8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ada:	b672      	cpsid	i
}
 8008adc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d102      	bne.n	8008aee <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	75fb      	strb	r3, [r7, #23]
 8008aec:	e001      	b.n	8008af2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	75fb      	strb	r3, [r7, #23]
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f383 8810 	msr	PRIMASK, r3
}
 8008afc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b16:	f3ef 8310 	mrs	r3, PRIMASK
 8008b1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b20:	b672      	cpsid	i
}
 8008b22:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	605a      	str	r2, [r3, #4]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f383 8810 	msr	PRIMASK, r3
}
 8008b4a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b4c:	bf00      	nop
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b62:	f3ef 8310 	mrs	r3, PRIMASK
 8008b66:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b68:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b6c:	b672      	cpsid	i
}
 8008b6e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	f383 8810 	msr	PRIMASK, r3
}
 8008b96:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b98:	bf00      	nop
 8008b9a:	371c      	adds	r7, #28
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bac:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008bb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bb6:	b672      	cpsid	i
}
 8008bb8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	6812      	ldr	r2, [r2, #0]
 8008bc2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6852      	ldr	r2, [r2, #4]
 8008bcc:	605a      	str	r2, [r3, #4]
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f383 8810 	msr	PRIMASK, r3
}
 8008bd8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008bda:	bf00      	nop
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b086      	sub	sp, #24
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8008bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008bf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bfa:	b672      	cpsid	i
}
 8008bfc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff ffca 	bl	8008ba4 <LST_remove_node>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f383 8810 	msr	PRIMASK, r3
}
 8008c1a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008c1c:	bf00      	nop
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008c24:	b480      	push	{r7}
 8008c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008c28:	4b03      	ldr	r3, [pc, #12]	@ (8008c38 <LL_FLASH_GetUDN+0x14>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	1fff7580 	.word	0x1fff7580

08008c3c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008c40:	4b03      	ldr	r3, [pc, #12]	@ (8008c50 <LL_FLASH_GetDeviceID+0x14>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	b2db      	uxtb	r3, r3
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	1fff7584 	.word	0x1fff7584

08008c54 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008c54:	b480      	push	{r7}
 8008c56:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008c58:	4b03      	ldr	r3, [pc, #12]	@ (8008c68 <LL_FLASH_GetSTCompanyID+0x14>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	0a1b      	lsrs	r3, r3, #8
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	1fff7584 	.word	0x1fff7584

08008c6c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008c6c:	b5b0      	push	{r4, r5, r7, lr}
 8008c6e:	b090      	sub	sp, #64	@ 0x40
 8008c70:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008c72:	2392      	movs	r3, #146	@ 0x92
 8008c74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008c78:	4b25      	ldr	r3, [pc, #148]	@ (8008d10 <APP_BLE_Init+0xa4>)
 8008c7a:	1d3c      	adds	r4, r7, #4
 8008c7c:	461d      	mov	r5, r3
 8008c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c8e:	c403      	stmia	r4!, {r0, r1}
 8008c90:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008c92:	f000 f913 	bl	8008ebc <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008c96:	2101      	movs	r1, #1
 8008c98:	2002      	movs	r0, #2
 8008c9a:	f000 fe4f 	bl	800993c <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008d14 <APP_BLE_Init+0xa8>)
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	2002      	movs	r0, #2
 8008ca4:	f000 ff76 	bl	8009b94 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008ca8:	1d3b      	adds	r3, r7, #4
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff f8c6 	bl	8007e3c <SHCI_C2_BLE_Init>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8008cb6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008cbe:	f7fa fc35 	bl	800352c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008cc2:	f000 f911 	bl	8008ee8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008cc6:	f7ff f813 	bl	8007cf0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008cca:	4b13      	ldr	r3, [pc, #76]	@ (8008d18 <APP_BLE_Init+0xac>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008cd2:	4b11      	ldr	r3, [pc, #68]	@ (8008d18 <APP_BLE_Init+0xac>)
 8008cd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cd8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008cda:	4a10      	ldr	r2, [pc, #64]	@ (8008d1c <APP_BLE_Init+0xb0>)
 8008cdc:	2100      	movs	r1, #0
 8008cde:	2001      	movs	r0, #1
 8008ce0:	f000 ff58 	bl	8009b94 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008ce4:	2006      	movs	r0, #6
 8008ce6:	f7fe fe77 	bl	80079d8 <aci_hal_set_radio_activity_mask>
 8008cea:	4603      	mov	r3, r0
 8008cec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008cf0:	f000 fabd 	bl	800926e <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008cf4:	4b08      	ldr	r3, [pc, #32]	@ (8008d18 <APP_BLE_Init+0xac>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008cfa:	4b07      	ldr	r3, [pc, #28]	@ (8008d18 <APP_BLE_Init+0xac>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008d00:	2001      	movs	r0, #1
 8008d02:	f000 f9a5 	bl	8009050 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008d06:	bf00      	nop
}
 8008d08:	3740      	adds	r7, #64	@ 0x40
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	08009ed8 	.word	0x08009ed8
 8008d14:	08008059 	.word	0x08008059
 8008d18:	200004d0 	.word	0x200004d0
 8008d1c:	08009139 	.word	0x08009139

08008d20 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08a      	sub	sp, #40	@ 0x28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008d28:	2392      	movs	r3, #146	@ 0x92
 8008d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3301      	adds	r3, #1
 8008d32:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	2bff      	cmp	r3, #255	@ 0xff
 8008d3a:	d053      	beq.n	8008de4 <SVCCTL_App_Notification+0xc4>
 8008d3c:	2bff      	cmp	r3, #255	@ 0xff
 8008d3e:	f300 80af 	bgt.w	8008ea0 <SVCCTL_App_Notification+0x180>
 8008d42:	2b05      	cmp	r3, #5
 8008d44:	d002      	beq.n	8008d4c <SVCCTL_App_Notification+0x2c>
 8008d46:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d48:	d020      	beq.n	8008d8c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008d4a:	e0a9      	b.n	8008ea0 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	3302      	adds	r3, #2
 8008d50:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	4b55      	ldr	r3, [pc, #340]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008d5c:	8adb      	ldrh	r3, [r3, #22]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d106      	bne.n	8008d70 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008d62:	4b53      	ldr	r3, [pc, #332]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008d68:	4b51      	ldr	r3, [pc, #324]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008d70:	2001      	movs	r0, #1
 8008d72:	f000 f96d 	bl	8009050 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008d76:	4b4f      	ldr	r3, [pc, #316]	@ (8008eb4 <SVCCTL_App_Notification+0x194>)
 8008d78:	2201      	movs	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008d7e:	8ada      	ldrh	r2, [r3, #22]
 8008d80:	4b4c      	ldr	r3, [pc, #304]	@ (8008eb4 <SVCCTL_App_Notification+0x194>)
 8008d82:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008d84:	484b      	ldr	r0, [pc, #300]	@ (8008eb4 <SVCCTL_App_Notification+0x194>)
 8008d86:	f000 fa5e 	bl	8009246 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008d8a:	e08c      	b.n	8008ea6 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	3302      	adds	r3, #2
 8008d90:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d001      	beq.n	8008d9e <SVCCTL_App_Notification+0x7e>
 8008d9a:	2b03      	cmp	r3, #3
          break;
 8008d9c:	e021      	b.n	8008de2 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	3301      	adds	r3, #1
 8008da2:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008da4:	4b42      	ldr	r3, [pc, #264]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008da6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d104      	bne.n	8008db8 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008dae:	4b40      	ldr	r3, [pc, #256]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008db0:	2206      	movs	r2, #6
 8008db2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8008db6:	e003      	b.n	8008dc0 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008db8:	4b3d      	ldr	r3, [pc, #244]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008dba:	2205      	movs	r2, #5
 8008dbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	4b39      	ldr	r3, [pc, #228]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008dca:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008dcc:	4b39      	ldr	r3, [pc, #228]	@ (8008eb4 <SVCCTL_App_Notification+0x194>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008dd2:	4b37      	ldr	r3, [pc, #220]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008dd4:	8ada      	ldrh	r2, [r3, #22]
 8008dd6:	4b37      	ldr	r3, [pc, #220]	@ (8008eb4 <SVCCTL_App_Notification+0x194>)
 8008dd8:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8008dda:	4836      	ldr	r0, [pc, #216]	@ (8008eb4 <SVCCTL_App_Notification+0x194>)
 8008ddc:	f000 fa33 	bl	8009246 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008de0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008de2:	e060      	b.n	8008ea6 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	3302      	adds	r3, #2
 8008de8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d047      	beq.n	8008e88 <SVCCTL_App_Notification+0x168>
 8008df8:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	dc51      	bgt.n	8008ea4 <SVCCTL_App_Notification+0x184>
 8008e00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e04:	d046      	beq.n	8008e94 <SVCCTL_App_Notification+0x174>
 8008e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e0a:	dc4b      	bgt.n	8008ea4 <SVCCTL_App_Notification+0x184>
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d043      	beq.n	8008e98 <SVCCTL_App_Notification+0x178>
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	db47      	blt.n	8008ea4 <SVCCTL_App_Notification+0x184>
 8008e14:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	dc43      	bgt.n	8008ea4 <SVCCTL_App_Notification+0x184>
 8008e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e20:	dd40      	ble.n	8008ea4 <SVCCTL_App_Notification+0x184>
 8008e22:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8008e26:	2b09      	cmp	r3, #9
 8008e28:	d83c      	bhi.n	8008ea4 <SVCCTL_App_Notification+0x184>
 8008e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <SVCCTL_App_Notification+0x110>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008e81 	.word	0x08008e81
 8008e34:	08008e59 	.word	0x08008e59
 8008e38:	08008ea5 	.word	0x08008ea5
 8008e3c:	08008ea5 	.word	0x08008ea5
 8008e40:	08008ea5 	.word	0x08008ea5
 8008e44:	08008ea5 	.word	0x08008ea5
 8008e48:	08008e9d 	.word	0x08008e9d
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008e6d 	.word	0x08008e6d
 8008e54:	08008e9d 	.word	0x08008e9d
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008e58:	4b15      	ldr	r3, [pc, #84]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008e5a:	8adb      	ldrh	r3, [r3, #22]
 8008e5c:	4916      	ldr	r1, [pc, #88]	@ (8008eb8 <SVCCTL_App_Notification+0x198>)
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fd ffbc 	bl	8006ddc <aci_gap_pass_key_resp>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8008e6a:	e018      	b.n	8008e9e <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008e6c:	4b10      	ldr	r3, [pc, #64]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008e6e:	8adb      	ldrh	r3, [r3, #22]
 8008e70:	2101      	movs	r1, #1
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe f95c 	bl	8007130 <aci_gap_numeric_comparison_value_confirm_yesno>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8008e7e:	e00e      	b.n	8008e9e <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	3302      	adds	r3, #2
 8008e84:	61bb      	str	r3, [r7, #24]
          break;
 8008e86:	e00a      	b.n	8008e9e <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8008e88:	4b09      	ldr	r3, [pc, #36]	@ (8008eb0 <SVCCTL_App_Notification+0x190>)
 8008e8a:	8adb      	ldrh	r3, [r3, #22]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fe fc62 	bl	8007756 <aci_gatt_confirm_indication>
        break;
 8008e92:	e004      	b.n	8008e9e <SVCCTL_App_Notification+0x17e>
          break;
 8008e94:	bf00      	nop
 8008e96:	e005      	b.n	8008ea4 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008e98:	bf00      	nop
 8008e9a:	e003      	b.n	8008ea4 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008e9c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008e9e:	e001      	b.n	8008ea4 <SVCCTL_App_Notification+0x184>
      break;
 8008ea0:	bf00      	nop
 8008ea2:	e000      	b.n	8008ea6 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008ea4:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008ea6:	2301      	movs	r3, #1
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3728      	adds	r7, #40	@ 0x28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	200004d0 	.word	0x200004d0
 8008eb4:	20000554 	.word	0x20000554
 8008eb8:	0001b207 	.word	0x0001b207

08008ebc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008ec2:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <Ble_Tl_Init+0x20>)
 8008ec4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008ec6:	4b06      	ldr	r3, [pc, #24]	@ (8008ee0 <Ble_Tl_Init+0x24>)
 8008ec8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008eca:	463b      	mov	r3, r7
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4805      	ldr	r0, [pc, #20]	@ (8008ee4 <Ble_Tl_Init+0x28>)
 8008ed0:	f7ff f8a6 	bl	8008020 <hci_init>

  return;
 8008ed4:	bf00      	nop
}
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	200300d8 	.word	0x200300d8
 8008ee0:	080091e9 	.word	0x080091e9
 8008ee4:	080091b1 	.word	0x080091b1

08008ee8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eea:	b08d      	sub	sp, #52	@ 0x34
 8008eec:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008eee:	2300      	movs	r3, #0
 8008ef0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008ef2:	2392      	movs	r3, #146	@ 0x92
 8008ef4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008ef6:	f7fe fdc3 	bl	8007a80 <hci_reset>
 8008efa:	4603      	mov	r3, r0
 8008efc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008efe:	f000 f8d7 	bl	80090b0 <BleGetBdAddress>
 8008f02:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	2106      	movs	r1, #6
 8008f08:	2000      	movs	r0, #0
 8008f0a:	f7fe fc79 	bl	8007800 <aci_hal_write_config_data>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008f12:	4a4a      	ldr	r2, [pc, #296]	@ (800903c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008f14:	2110      	movs	r1, #16
 8008f16:	2018      	movs	r0, #24
 8008f18:	f7fe fc72 	bl	8007800 <aci_hal_write_config_data>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008f20:	4a47      	ldr	r2, [pc, #284]	@ (8009040 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008f22:	2110      	movs	r1, #16
 8008f24:	2008      	movs	r0, #8
 8008f26:	f7fe fc6b 	bl	8007800 <aci_hal_write_config_data>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008f2e:	2118      	movs	r1, #24
 8008f30:	2001      	movs	r0, #1
 8008f32:	f7fe fcea 	bl	800790a <aci_hal_set_tx_power_level>
 8008f36:	4603      	mov	r3, r0
 8008f38:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008f3a:	f7fe f960 	bl	80071fe <aci_gatt_init>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	f043 0301 	orr.w	r3, r3, #1
 8008f4c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d01f      	beq.n	8008f94 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008f54:	4b3b      	ldr	r3, [pc, #236]	@ (8009044 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8008f56:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008f58:	1dba      	adds	r2, r7, #6
 8008f5a:	7bf8      	ldrb	r0, [r7, #15]
 8008f5c:	1cbb      	adds	r3, r7, #2
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	1d3b      	adds	r3, r7, #4
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	4613      	mov	r3, r2
 8008f66:	2208      	movs	r2, #8
 8008f68:	2100      	movs	r1, #0
 8008f6a:	f7fd ff9e 	bl	8006eaa <aci_gap_init>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008f72:	88fc      	ldrh	r4, [r7, #6]
 8008f74:	88bd      	ldrh	r5, [r7, #4]
 8008f76:	68b8      	ldr	r0, [r7, #8]
 8008f78:	f7f7 f902 	bl	8000180 <strlen>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	2200      	movs	r2, #0
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f7fe fb3a 	bl	8007604 <aci_gatt_update_char_value>
 8008f90:	4603      	mov	r3, r0
 8008f92:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008f94:	88f8      	ldrh	r0, [r7, #6]
 8008f96:	8879      	ldrh	r1, [r7, #2]
 8008f98:	463b      	mov	r3, r7
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f7fe fb30 	bl	8007604 <aci_gatt_update_char_value>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008fa8:	2202      	movs	r2, #2
 8008faa:	2102      	movs	r1, #2
 8008fac:	2000      	movs	r0, #0
 8008fae:	f7fe fd8b 	bl	8007ac8 <hci_le_set_default_phy>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008fb6:	4b24      	ldr	r3, [pc, #144]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fb8:	2201      	movs	r2, #1
 8008fba:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008fbc:	4b22      	ldr	r3, [pc, #136]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fd fdf3 	bl	8006bac <aci_gap_set_io_capability>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008fca:	4b1f      	ldr	r3, [pc, #124]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fcc:	2201      	movs	r2, #1
 8008fce:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fd2:	2208      	movs	r2, #8
 8008fd4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fd8:	2210      	movs	r2, #16
 8008fda:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008fe2:	4b19      	ldr	r3, [pc, #100]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fe4:	4a19      	ldr	r2, [pc, #100]	@ (800904c <Ble_Hci_Gap_Gatt_Init+0x164>)
 8008fe6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008fe8:	4b17      	ldr	r3, [pc, #92]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008fee:	4b16      	ldr	r3, [pc, #88]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ff0:	789c      	ldrb	r4, [r3, #2]
 8008ff2:	4b15      	ldr	r3, [pc, #84]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ff4:	785d      	ldrb	r5, [r3, #1]
 8008ff6:	4b14      	ldr	r3, [pc, #80]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ff8:	791b      	ldrb	r3, [r3, #4]
 8008ffa:	4a13      	ldr	r2, [pc, #76]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ffc:	7952      	ldrb	r2, [r2, #5]
 8008ffe:	4912      	ldr	r1, [pc, #72]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009000:	78c9      	ldrb	r1, [r1, #3]
 8009002:	4811      	ldr	r0, [pc, #68]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009004:	6880      	ldr	r0, [r0, #8]
 8009006:	2600      	movs	r6, #0
 8009008:	9604      	str	r6, [sp, #16]
 800900a:	9003      	str	r0, [sp, #12]
 800900c:	9102      	str	r1, [sp, #8]
 800900e:	9201      	str	r2, [sp, #4]
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	2300      	movs	r3, #0
 8009014:	2201      	movs	r2, #1
 8009016:	4629      	mov	r1, r5
 8009018:	4620      	mov	r0, r4
 800901a:	f7fd fe1b 	bl	8006c54 <aci_gap_set_authentication_requirement>
 800901e:	4603      	mov	r3, r0
 8009020:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8009022:	4b09      	ldr	r3, [pc, #36]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009024:	789b      	ldrb	r3, [r3, #2]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800902a:	f7fe f85d 	bl	80070e8 <aci_gap_configure_filter_accept_list>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800903a:	bf00      	nop
 800903c:	0800a0d8 	.word	0x0800a0d8
 8009040:	0800a0e8 	.word	0x0800a0e8
 8009044:	08009f14 	.word	0x08009f14
 8009048:	200004d0 	.word	0x200004d0
 800904c:	0001b207 	.word	0x0001b207

08009050 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08c      	sub	sp, #48	@ 0x30
 8009054:	af08      	add	r7, sp, #32
 8009056:	4603      	mov	r3, r0
 8009058:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800905a:	2392      	movs	r3, #146	@ 0x92
 800905c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800905e:	4a12      	ldr	r2, [pc, #72]	@ (80090a8 <Adv_Request+0x58>)
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8009066:	2300      	movs	r3, #0
 8009068:	9306      	str	r3, [sp, #24]
 800906a:	2300      	movs	r3, #0
 800906c:	9305      	str	r3, [sp, #20]
 800906e:	2300      	movs	r3, #0
 8009070:	9304      	str	r3, [sp, #16]
 8009072:	2300      	movs	r3, #0
 8009074:	9303      	str	r3, [sp, #12]
 8009076:	2300      	movs	r3, #0
 8009078:	9302      	str	r3, [sp, #8]
 800907a:	2300      	movs	r3, #0
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	2300      	movs	r3, #0
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	2300      	movs	r3, #0
 8009084:	22a0      	movs	r2, #160	@ 0xa0
 8009086:	2180      	movs	r1, #128	@ 0x80
 8009088:	2000      	movs	r0, #0
 800908a:	f7fd fc95 	bl	80069b8 <aci_gap_set_discoverable>
 800908e:	4603      	mov	r3, r0
 8009090:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8009092:	4906      	ldr	r1, [pc, #24]	@ (80090ac <Adv_Request+0x5c>)
 8009094:	2010      	movs	r0, #16
 8009096:	f7fd ffb5 	bl	8007004 <aci_gap_update_adv_data>
 800909a:	4603      	mov	r3, r0
 800909c:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800909e:	bf00      	nop
}
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	200004d0 	.word	0x200004d0
 80090ac:	20000020 	.word	0x20000020

080090b0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80090b6:	f7ff fdb5 	bl	8008c24 <LL_FLASH_GetUDN>
 80090ba:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090c2:	d023      	beq.n	800910c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80090c4:	f7ff fdc6 	bl	8008c54 <LL_FLASH_GetSTCompanyID>
 80090c8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80090ca:	f7ff fdb7 	bl	8008c3c <LL_FLASH_GetDeviceID>
 80090ce:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	4b16      	ldr	r3, [pc, #88]	@ (8009130 <BleGetBdAddress+0x80>)
 80090d6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	4b14      	ldr	r3, [pc, #80]	@ (8009130 <BleGetBdAddress+0x80>)
 80090e0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	4b12      	ldr	r3, [pc, #72]	@ (8009130 <BleGetBdAddress+0x80>)
 80090e8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	4b10      	ldr	r3, [pc, #64]	@ (8009130 <BleGetBdAddress+0x80>)
 80090f0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	0a1b      	lsrs	r3, r3, #8
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009130 <BleGetBdAddress+0x80>)
 80090fa:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	0c1b      	lsrs	r3, r3, #16
 8009100:	b2da      	uxtb	r2, r3
 8009102:	4b0b      	ldr	r3, [pc, #44]	@ (8009130 <BleGetBdAddress+0x80>)
 8009104:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009106:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <BleGetBdAddress+0x80>)
 8009108:	617b      	str	r3, [r7, #20]
 800910a:	e00b      	b.n	8009124 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800910c:	2000      	movs	r0, #0
 800910e:	f7ff fca3 	bl	8008a58 <OTP_Read>
 8009112:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	617b      	str	r3, [r7, #20]
 800911e:	e001      	b.n	8009124 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8009120:	4b04      	ldr	r3, [pc, #16]	@ (8009134 <BleGetBdAddress+0x84>)
 8009122:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009124:	697b      	ldr	r3, [r7, #20]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	200004c8 	.word	0x200004c8
 8009134:	0800a0d0 	.word	0x0800a0d0

08009138 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800913e:	4b0a      	ldr	r3, [pc, #40]	@ (8009168 <Adv_Cancel+0x30>)
 8009140:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009144:	2b05      	cmp	r3, #5
 8009146:	d00a      	beq.n	800915e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009148:	2392      	movs	r3, #146	@ 0x92
 800914a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800914c:	f7fd fc10 	bl	8006970 <aci_gap_set_non_discoverable>
 8009150:	4603      	mov	r3, r0
 8009152:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009154:	4b04      	ldr	r3, [pc, #16]	@ (8009168 <Adv_Cancel+0x30>)
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800915c:	bf00      	nop
 800915e:	bf00      	nop
}
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	200004d0 	.word	0x200004d0

0800916c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009174:	2100      	movs	r1, #0
 8009176:	2002      	movs	r0, #2
 8009178:	f000 fd2e 	bl	8009bd8 <UTIL_SEQ_SetTask>

  return;
 800917c:	bf00      	nop
}
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800918c:	2001      	movs	r0, #1
 800918e:	f000 fd8f 	bl	8009cb0 <UTIL_SEQ_SetEvt>

  return;
 8009192:	bf00      	nop
}
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b082      	sub	sp, #8
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80091a2:	2001      	movs	r0, #1
 80091a4:	f000 fda4 	bl	8009cf0 <UTIL_SEQ_WaitEvt>

  return;
 80091a8:	bf00      	nop
}
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	3308      	adds	r3, #8
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fde6 	bl	8007d94 <SVCCTL_UserEvtRx>
 80091c8:	4603      	mov	r3, r0
 80091ca:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2201      	movs	r2, #1
 80091d6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80091d8:	e003      	b.n	80091e2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	701a      	strb	r2, [r3, #0]
  return;
 80091e0:	bf00      	nop
}
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <BLE_StatusNot+0x16>
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d006      	beq.n	800920a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80091fc:	e00b      	b.n	8009216 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80091fe:	2303      	movs	r3, #3
 8009200:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 fd14 	bl	8009c30 <UTIL_SEQ_PauseTask>
      break;
 8009208:	e005      	b.n	8009216 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800920a:	2303      	movs	r3, #3
 800920c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f000 fd2e 	bl	8009c70 <UTIL_SEQ_ResumeTask>
      break;
 8009214:	bf00      	nop
  }

  return;
 8009216:	bf00      	nop
}
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <Custom_STM_App_Notification+0x16>
 800922e:	2b01      	cmp	r3, #1
 8009230:	d002      	beq.n	8009238 <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8009232:	e002      	b.n	800923a <Custom_STM_App_Notification+0x1c>
      break;
 8009234:	bf00      	nop
 8009236:	e000      	b.n	800923a <Custom_STM_App_Notification+0x1c>
      break;
 8009238:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800923a:	bf00      	nop
}
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <Custom_APP_Notification+0x16>
 8009256:	2b01      	cmp	r3, #1
 8009258:	d002      	beq.n	8009260 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800925a:	e002      	b.n	8009262 <Custom_APP_Notification+0x1c>
      break;
 800925c:	bf00      	nop
 800925e:	e000      	b.n	8009262 <Custom_APP_Notification+0x1c>
      break;
 8009260:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009262:	bf00      	nop
}
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800926e:	b480      	push	{r7}
 8009270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009272:	bf00      	nop
}
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08c      	sub	sp, #48	@ 0x30
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009284:	2300      	movs	r3, #0
 8009286:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	3301      	adds	r3, #1
 800928e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8009290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2bff      	cmp	r3, #255	@ 0xff
 8009296:	d154      	bne.n	8009342 <Custom_STM_Event_Handler+0xc6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929a:	3302      	adds	r3, #2
 800929c:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	881b      	ldrh	r3, [r3, #0]
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80092a8:	2b1a      	cmp	r3, #26
 80092aa:	d848      	bhi.n	800933e <Custom_STM_Event_Handler+0xc2>
 80092ac:	a201      	add	r2, pc, #4	@ (adr r2, 80092b4 <Custom_STM_Event_Handler+0x38>)
 80092ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b2:	bf00      	nop
 80092b4:	0800933f 	.word	0x0800933f
 80092b8:	0800933f 	.word	0x0800933f
 80092bc:	0800933f 	.word	0x0800933f
 80092c0:	0800933f 	.word	0x0800933f
 80092c4:	0800933f 	.word	0x0800933f
 80092c8:	0800933f 	.word	0x0800933f
 80092cc:	0800933f 	.word	0x0800933f
 80092d0:	0800933f 	.word	0x0800933f
 80092d4:	0800933f 	.word	0x0800933f
 80092d8:	0800933f 	.word	0x0800933f
 80092dc:	0800933f 	.word	0x0800933f
 80092e0:	0800933f 	.word	0x0800933f
 80092e4:	0800933f 	.word	0x0800933f
 80092e8:	0800933f 	.word	0x0800933f
 80092ec:	0800933f 	.word	0x0800933f
 80092f0:	0800933f 	.word	0x0800933f
 80092f4:	0800933f 	.word	0x0800933f
 80092f8:	0800933f 	.word	0x0800933f
 80092fc:	0800933f 	.word	0x0800933f
 8009300:	0800933f 	.word	0x0800933f
 8009304:	0800933f 	.word	0x0800933f
 8009308:	0800933f 	.word	0x0800933f
 800930c:	0800933f 	.word	0x0800933f
 8009310:	0800933f 	.word	0x0800933f
 8009314:	0800933f 	.word	0x0800933f
 8009318:	0800933f 	.word	0x0800933f
 800931c:	08009321 	.word	0x08009321
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	3302      	adds	r3, #2
 8009324:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8009326:	2301      	movs	r3, #1
 8009328:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	b29b      	uxth	r3, r3
 8009330:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8009332:	f107 030c 	add.w	r3, r7, #12
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff ff71 	bl	800921e <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800933c:	e000      	b.n	8009340 <Custom_STM_Event_Handler+0xc4>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800933e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009340:	e000      	b.n	8009344 <Custom_STM_Event_Handler+0xc8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8009342:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8009344:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8009348:	4618      	mov	r0, r3
 800934a:	3730      	adds	r7, #48	@ 0x30
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08c      	sub	sp, #48	@ 0x30
 8009354:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009356:	2392      	movs	r3, #146	@ 0x92
 8009358:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800935a:	4834      	ldr	r0, [pc, #208]	@ (800942c <SVCCTL_InitCustomSvc+0xdc>)
 800935c:	f7fe fd00 	bl	8007d60 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 8009360:	2303      	movs	r3, #3
 8009362:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_PRESSCOUNTER_UUID(uuid.Char_UUID_128);
 8009364:	238f      	movs	r3, #143	@ 0x8f
 8009366:	713b      	strb	r3, [r7, #4]
 8009368:	23e5      	movs	r3, #229	@ 0xe5
 800936a:	717b      	strb	r3, [r7, #5]
 800936c:	23b3      	movs	r3, #179	@ 0xb3
 800936e:	71bb      	strb	r3, [r7, #6]
 8009370:	23d5      	movs	r3, #213	@ 0xd5
 8009372:	71fb      	strb	r3, [r7, #7]
 8009374:	232e      	movs	r3, #46	@ 0x2e
 8009376:	723b      	strb	r3, [r7, #8]
 8009378:	237f      	movs	r3, #127	@ 0x7f
 800937a:	727b      	strb	r3, [r7, #9]
 800937c:	234a      	movs	r3, #74	@ 0x4a
 800937e:	72bb      	strb	r3, [r7, #10]
 8009380:	2398      	movs	r3, #152	@ 0x98
 8009382:	72fb      	strb	r3, [r7, #11]
 8009384:	232a      	movs	r3, #42	@ 0x2a
 8009386:	733b      	strb	r3, [r7, #12]
 8009388:	2348      	movs	r3, #72	@ 0x48
 800938a:	737b      	strb	r3, [r7, #13]
 800938c:	237a      	movs	r3, #122	@ 0x7a
 800938e:	73bb      	strb	r3, [r7, #14]
 8009390:	23cc      	movs	r3, #204	@ 0xcc
 8009392:	73fb      	strb	r3, [r7, #15]
 8009394:	2301      	movs	r3, #1
 8009396:	743b      	strb	r3, [r7, #16]
 8009398:	2318      	movs	r3, #24
 800939a:	747b      	strb	r3, [r7, #17]
 800939c:	2300      	movs	r3, #0
 800939e:	74bb      	strb	r3, [r7, #18]
 80093a0:	2300      	movs	r3, #0
 80093a2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80093a4:	7dbb      	ldrb	r3, [r7, #22]
 80093a6:	1d39      	adds	r1, r7, #4
 80093a8:	4a21      	ldr	r2, [pc, #132]	@ (8009430 <SVCCTL_InitCustomSvc+0xe0>)
 80093aa:	9200      	str	r2, [sp, #0]
 80093ac:	2201      	movs	r2, #1
 80093ae:	2002      	movs	r0, #2
 80093b0:	f7fd ff4a 	bl	8007248 <aci_gatt_add_service>
 80093b4:	4603      	mov	r3, r0
 80093b6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  information
   */
  COPY_INFORMATION_UUID(uuid.Char_UUID_128);
 80093b8:	2319      	movs	r3, #25
 80093ba:	713b      	strb	r3, [r7, #4]
 80093bc:	23ed      	movs	r3, #237	@ 0xed
 80093be:	717b      	strb	r3, [r7, #5]
 80093c0:	2382      	movs	r3, #130	@ 0x82
 80093c2:	71bb      	strb	r3, [r7, #6]
 80093c4:	23ae      	movs	r3, #174	@ 0xae
 80093c6:	71fb      	strb	r3, [r7, #7]
 80093c8:	23ed      	movs	r3, #237	@ 0xed
 80093ca:	723b      	strb	r3, [r7, #8]
 80093cc:	2321      	movs	r3, #33	@ 0x21
 80093ce:	727b      	strb	r3, [r7, #9]
 80093d0:	234c      	movs	r3, #76	@ 0x4c
 80093d2:	72bb      	strb	r3, [r7, #10]
 80093d4:	239d      	movs	r3, #157	@ 0x9d
 80093d6:	72fb      	strb	r3, [r7, #11]
 80093d8:	2341      	movs	r3, #65	@ 0x41
 80093da:	733b      	strb	r3, [r7, #12]
 80093dc:	2345      	movs	r3, #69	@ 0x45
 80093de:	737b      	strb	r3, [r7, #13]
 80093e0:	2322      	movs	r3, #34	@ 0x22
 80093e2:	73bb      	strb	r3, [r7, #14]
 80093e4:	238e      	movs	r3, #142	@ 0x8e
 80093e6:	73fb      	strb	r3, [r7, #15]
 80093e8:	2334      	movs	r3, #52	@ 0x34
 80093ea:	743b      	strb	r3, [r7, #16]
 80093ec:	2312      	movs	r3, #18
 80093ee:	747b      	strb	r3, [r7, #17]
 80093f0:	2300      	movs	r3, #0
 80093f2:	74bb      	strb	r3, [r7, #18]
 80093f4:	2300      	movs	r3, #0
 80093f6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomPressctrHdle,
 80093f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009430 <SVCCTL_InitCustomSvc+0xe0>)
 80093fa:	8818      	ldrh	r0, [r3, #0]
 80093fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009434 <SVCCTL_InitCustomSvc+0xe4>)
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	1d3a      	adds	r2, r7, #4
 8009402:	490d      	ldr	r1, [pc, #52]	@ (8009438 <SVCCTL_InitCustomSvc+0xe8>)
 8009404:	9105      	str	r1, [sp, #20]
 8009406:	2100      	movs	r1, #0
 8009408:	9104      	str	r1, [sp, #16]
 800940a:	2110      	movs	r1, #16
 800940c:	9103      	str	r1, [sp, #12]
 800940e:	2100      	movs	r1, #0
 8009410:	9102      	str	r1, [sp, #8]
 8009412:	2100      	movs	r1, #0
 8009414:	9101      	str	r1, [sp, #4]
 8009416:	2102      	movs	r1, #2
 8009418:	9100      	str	r1, [sp, #0]
 800941a:	2102      	movs	r1, #2
 800941c:	f7fd ffea 	bl	80073f4 <aci_gatt_add_char>
 8009420:	4603      	mov	r3, r0
 8009422:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009424:	bf00      	nop
}
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	0800927d 	.word	0x0800927d
 8009430:	20000558 	.word	0x20000558
 8009434:	20000030 	.word	0x20000030
 8009438:	2000055a 	.word	0x2000055a

0800943c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af02      	add	r7, sp, #8
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009448:	2392      	movs	r3, #146	@ 0x92
 800944a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10f      	bne.n	8009472 <Custom_STM_App_Update_Char+0x36>
  {

    case CUSTOM_STM_INFO_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomPressctrHdle,
 8009452:	4b0b      	ldr	r3, [pc, #44]	@ (8009480 <Custom_STM_App_Update_Char+0x44>)
 8009454:	8818      	ldrh	r0, [r3, #0]
 8009456:	4b0a      	ldr	r3, [pc, #40]	@ (8009480 <Custom_STM_App_Update_Char+0x44>)
 8009458:	8859      	ldrh	r1, [r3, #2]
 800945a:	4b0a      	ldr	r3, [pc, #40]	@ (8009484 <Custom_STM_App_Update_Char+0x48>)
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b2da      	uxtb	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	4613      	mov	r3, r2
 8009466:	2200      	movs	r2, #0
 8009468:	f7fe f8cc 	bl	8007604 <aci_gatt_update_char_value>
 800946c:	4603      	mov	r3, r0
 800946e:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value INFO_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8009470:	e000      	b.n	8009474 <Custom_STM_App_Update_Char+0x38>

    default:
      break;
 8009472:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20000558 	.word	0x20000558
 8009484:	20000030 	.word	0x20000030

08009488 <LL_PWR_EnableBootC2>:
{
 8009488:	b480      	push	{r7}
 800948a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800948c:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <LL_PWR_EnableBootC2+0x1c>)
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	4a04      	ldr	r2, [pc, #16]	@ (80094a4 <LL_PWR_EnableBootC2+0x1c>)
 8009492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009496:	60d3      	str	r3, [r2, #12]
}
 8009498:	bf00      	nop
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	58000400 	.word	0x58000400

080094a8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80094b0:	4b06      	ldr	r3, [pc, #24]	@ (80094cc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80094b2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80094b6:	4905      	ldr	r1, [pc, #20]	@ (80094cc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	58000800 	.word	0x58000800

080094d0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80094d8:	4b05      	ldr	r3, [pc, #20]	@ (80094f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80094da:	6a1a      	ldr	r2, [r3, #32]
 80094dc:	4904      	ldr	r1, [pc, #16]	@ (80094f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	620b      	str	r3, [r1, #32]
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	58000800 	.word	0x58000800

080094f4 <LL_AHB3_GRP1_EnableClock>:
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80094fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009500:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009502:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4313      	orrs	r3, r2
 800950a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800950c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4013      	ands	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009518:	68fb      	ldr	r3, [r7, #12]
}
 800951a:	bf00      	nop
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800952e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009532:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4313      	orrs	r3, r2
 800953e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009546:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4013      	ands	r3, r2
 800954e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009550:	68fb      	ldr	r3, [r7, #12]
}
 8009552:	bf00      	nop
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800955e:	b480      	push	{r7}
 8009560:	b083      	sub	sp, #12
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f043 0201 	orr.w	r2, r3, #1
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	601a      	str	r2, [r3, #0]
}
 8009592:	bf00      	nop
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800959e:	b480      	push	{r7}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	041b      	lsls	r3, r3, #16
 80095b0:	43db      	mvns	r3, r3
 80095b2:	401a      	ands	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	605a      	str	r2, [r3, #4]
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	041b      	lsls	r3, r3, #16
 80095d6:	431a      	orrs	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	605a      	str	r2, [r3, #4]
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	43db      	mvns	r3, r3
 80095fa:	401a      	ands	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	605a      	str	r2, [r3, #4]
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	609a      	str	r2, [r3, #8]
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	041a      	lsls	r2, r3, #16
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	609a      	str	r2, [r3, #8]
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	4013      	ands	r3, r2
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	429a      	cmp	r2, r3
 800965c:	d101      	bne.n	8009662 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800965e:	2301      	movs	r3, #1
 8009660:	e000      	b.n	8009664 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	69da      	ldr	r2, [r3, #28]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	4013      	ands	r3, r2
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d101      	bne.n	800968c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009688:	2301      	movs	r3, #1
 800968a:	e000      	b.n	800968e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
	...

0800969c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80096a0:	2102      	movs	r1, #2
 80096a2:	4818      	ldr	r0, [pc, #96]	@ (8009704 <HW_IPCC_Rx_Handler+0x68>)
 80096a4:	f7ff ffe4 	bl	8009670 <LL_C2_IPCC_IsActiveFlag_CHx>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d008      	beq.n	80096c0 <HW_IPCC_Rx_Handler+0x24>
 80096ae:	4b15      	ldr	r3, [pc, #84]	@ (8009704 <HW_IPCC_Rx_Handler+0x68>)
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d102      	bne.n	80096c0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80096ba:	f000 f8d5 	bl	8009868 <HW_IPCC_SYS_EvtHandler>
 80096be:	e01e      	b.n	80096fe <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80096c0:	2101      	movs	r1, #1
 80096c2:	4810      	ldr	r0, [pc, #64]	@ (8009704 <HW_IPCC_Rx_Handler+0x68>)
 80096c4:	f7ff ffd4 	bl	8009670 <LL_C2_IPCC_IsActiveFlag_CHx>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d008      	beq.n	80096e0 <HW_IPCC_Rx_Handler+0x44>
 80096ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009704 <HW_IPCC_Rx_Handler+0x68>)
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d102      	bne.n	80096e0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80096da:	f000 f889 	bl	80097f0 <HW_IPCC_BLE_EvtHandler>
 80096de:	e00e      	b.n	80096fe <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80096e0:	2108      	movs	r1, #8
 80096e2:	4808      	ldr	r0, [pc, #32]	@ (8009704 <HW_IPCC_Rx_Handler+0x68>)
 80096e4:	f7ff ffc4 	bl	8009670 <LL_C2_IPCC_IsActiveFlag_CHx>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d008      	beq.n	8009700 <HW_IPCC_Rx_Handler+0x64>
 80096ee:	4b05      	ldr	r3, [pc, #20]	@ (8009704 <HW_IPCC_Rx_Handler+0x68>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f003 0308 	and.w	r3, r3, #8
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d102      	bne.n	8009700 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80096fa:	f000 f901 	bl	8009900 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80096fe:	bf00      	nop
 8009700:	bf00      	nop
}
 8009702:	bd80      	pop	{r7, pc}
 8009704:	58000c00 	.word	0x58000c00

08009708 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800970c:	2102      	movs	r1, #2
 800970e:	4818      	ldr	r0, [pc, #96]	@ (8009770 <HW_IPCC_Tx_Handler+0x68>)
 8009710:	f7ff ff99 	bl	8009646 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d108      	bne.n	800972c <HW_IPCC_Tx_Handler+0x24>
 800971a:	4b15      	ldr	r3, [pc, #84]	@ (8009770 <HW_IPCC_Tx_Handler+0x68>)
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009726:	f000 f893 	bl	8009850 <HW_IPCC_SYS_CmdEvtHandler>
 800972a:	e01e      	b.n	800976a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800972c:	2108      	movs	r1, #8
 800972e:	4810      	ldr	r0, [pc, #64]	@ (8009770 <HW_IPCC_Tx_Handler+0x68>)
 8009730:	f7ff ff89 	bl	8009646 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d108      	bne.n	800974c <HW_IPCC_Tx_Handler+0x44>
 800973a:	4b0d      	ldr	r3, [pc, #52]	@ (8009770 <HW_IPCC_Tx_Handler+0x68>)
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009746:	f000 f8bd 	bl	80098c4 <HW_IPCC_MM_FreeBufHandler>
 800974a:	e00e      	b.n	800976a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800974c:	2120      	movs	r1, #32
 800974e:	4808      	ldr	r0, [pc, #32]	@ (8009770 <HW_IPCC_Tx_Handler+0x68>)
 8009750:	f7ff ff79 	bl	8009646 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d108      	bne.n	800976c <HW_IPCC_Tx_Handler+0x64>
 800975a:	4b05      	ldr	r3, [pc, #20]	@ (8009770 <HW_IPCC_Tx_Handler+0x68>)
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009766:	f000 f84f 	bl	8009808 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800976a:	bf00      	nop
 800976c:	bf00      	nop
}
 800976e:	bd80      	pop	{r7, pc}
 8009770:	58000c00 	.word	0x58000c00

08009774 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009778:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800977c:	f7ff fed3 	bl	8009526 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009780:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009784:	f7ff fea4 	bl	80094d0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009788:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800978c:	f7ff fe8c 	bl	80094a8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009790:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009792:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009794:	f7ff fe78 	bl	8009488 <LL_PWR_EnableBootC2>

  return;
 8009798:	bf00      	nop
}
 800979a:	bd80      	pop	{r7, pc}

0800979c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80097a0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80097a4:	f7ff fea6 	bl	80094f4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80097a8:	4806      	ldr	r0, [pc, #24]	@ (80097c4 <HW_IPCC_Init+0x28>)
 80097aa:	f7ff fee8 	bl	800957e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80097ae:	4805      	ldr	r0, [pc, #20]	@ (80097c4 <HW_IPCC_Init+0x28>)
 80097b0:	f7ff fed5 	bl	800955e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80097b4:	202c      	movs	r0, #44	@ 0x2c
 80097b6:	f7fa fad2 	bl	8003d5e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80097ba:	202d      	movs	r0, #45	@ 0x2d
 80097bc:	f7fa facf 	bl	8003d5e <HAL_NVIC_EnableIRQ>

  return;
 80097c0:	bf00      	nop
}
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	58000c00 	.word	0x58000c00

080097c8 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80097cc:	2101      	movs	r1, #1
 80097ce:	4802      	ldr	r0, [pc, #8]	@ (80097d8 <HW_IPCC_BLE_Init+0x10>)
 80097d0:	f7ff ff0a 	bl	80095e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80097d4:	bf00      	nop
}
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	58000c00 	.word	0x58000c00

080097dc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 80097e0:	2101      	movs	r1, #1
 80097e2:	4802      	ldr	r0, [pc, #8]	@ (80097ec <HW_IPCC_BLE_SendCmd+0x10>)
 80097e4:	f7ff ff20 	bl	8009628 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80097e8:	bf00      	nop
}
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	58000c00 	.word	0x58000c00

080097f0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80097f4:	f7fe ff78 	bl	80086e8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80097f8:	2101      	movs	r1, #1
 80097fa:	4802      	ldr	r0, [pc, #8]	@ (8009804 <HW_IPCC_BLE_EvtHandler+0x14>)
 80097fc:	f7ff ff06 	bl	800960c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009800:	bf00      	nop
}
 8009802:	bd80      	pop	{r7, pc}
 8009804:	58000c00 	.word	0x58000c00

08009808 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800980c:	2120      	movs	r1, #32
 800980e:	4803      	ldr	r0, [pc, #12]	@ (800981c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009810:	f7ff fed8 	bl	80095c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009814:	f7fe ff98 	bl	8008748 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009818:	bf00      	nop
}
 800981a:	bd80      	pop	{r7, pc}
 800981c:	58000c00 	.word	0x58000c00

08009820 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009824:	2102      	movs	r1, #2
 8009826:	4802      	ldr	r0, [pc, #8]	@ (8009830 <HW_IPCC_SYS_Init+0x10>)
 8009828:	f7ff fede 	bl	80095e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800982c:	bf00      	nop
}
 800982e:	bd80      	pop	{r7, pc}
 8009830:	58000c00 	.word	0x58000c00

08009834 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009838:	2102      	movs	r1, #2
 800983a:	4804      	ldr	r0, [pc, #16]	@ (800984c <HW_IPCC_SYS_SendCmd+0x18>)
 800983c:	f7ff fef4 	bl	8009628 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009840:	2102      	movs	r1, #2
 8009842:	4802      	ldr	r0, [pc, #8]	@ (800984c <HW_IPCC_SYS_SendCmd+0x18>)
 8009844:	f7ff feab 	bl	800959e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009848:	bf00      	nop
}
 800984a:	bd80      	pop	{r7, pc}
 800984c:	58000c00 	.word	0x58000c00

08009850 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009854:	2102      	movs	r1, #2
 8009856:	4803      	ldr	r0, [pc, #12]	@ (8009864 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009858:	f7ff feb4 	bl	80095c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800985c:	f7fe ffc4 	bl	80087e8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009860:	bf00      	nop
}
 8009862:	bd80      	pop	{r7, pc}
 8009864:	58000c00 	.word	0x58000c00

08009868 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800986c:	f7fe ffd2 	bl	8008814 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009870:	2102      	movs	r1, #2
 8009872:	4802      	ldr	r0, [pc, #8]	@ (800987c <HW_IPCC_SYS_EvtHandler+0x14>)
 8009874:	f7ff feca 	bl	800960c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009878:	bf00      	nop
}
 800987a:	bd80      	pop	{r7, pc}
 800987c:	58000c00 	.word	0x58000c00

08009880 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009888:	2108      	movs	r1, #8
 800988a:	480c      	ldr	r0, [pc, #48]	@ (80098bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800988c:	f7ff fedb 	bl	8009646 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d007      	beq.n	80098a6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009896:	4a0a      	ldr	r2, [pc, #40]	@ (80098c0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800989c:	2108      	movs	r1, #8
 800989e:	4807      	ldr	r0, [pc, #28]	@ (80098bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80098a0:	f7ff fe7d 	bl	800959e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80098a4:	e006      	b.n	80098b4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80098aa:	2108      	movs	r1, #8
 80098ac:	4803      	ldr	r0, [pc, #12]	@ (80098bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80098ae:	f7ff febb 	bl	8009628 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80098b2:	bf00      	nop
}
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	58000c00 	.word	0x58000c00
 80098c0:	2000055c 	.word	0x2000055c

080098c4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80098c8:	2108      	movs	r1, #8
 80098ca:	4806      	ldr	r0, [pc, #24]	@ (80098e4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80098cc:	f7ff fe7a 	bl	80095c4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80098d0:	4b05      	ldr	r3, [pc, #20]	@ (80098e8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80098d6:	2108      	movs	r1, #8
 80098d8:	4802      	ldr	r0, [pc, #8]	@ (80098e4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80098da:	f7ff fea5 	bl	8009628 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80098de:	bf00      	nop
}
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	58000c00 	.word	0x58000c00
 80098e8:	2000055c 	.word	0x2000055c

080098ec <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80098f0:	2108      	movs	r1, #8
 80098f2:	4802      	ldr	r0, [pc, #8]	@ (80098fc <HW_IPCC_TRACES_Init+0x10>)
 80098f4:	f7ff fe78 	bl	80095e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80098f8:	bf00      	nop
}
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	58000c00 	.word	0x58000c00

08009900 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009904:	f7ff f82e 	bl	8008964 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009908:	2108      	movs	r1, #8
 800990a:	4802      	ldr	r0, [pc, #8]	@ (8009914 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800990c:	f7ff fe7e 	bl	800960c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009910:	bf00      	nop
}
 8009912:	bd80      	pop	{r7, pc}
 8009914:	58000c00 	.word	0x58000c00

08009918 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009918:	b480      	push	{r7}
 800991a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800991c:	4b05      	ldr	r3, [pc, #20]	@ (8009934 <UTIL_LPM_Init+0x1c>)
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009922:	4b05      	ldr	r3, [pc, #20]	@ (8009938 <UTIL_LPM_Init+0x20>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009928:	bf00      	nop
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	20000560 	.word	0x20000560
 8009938:	20000564 	.word	0x20000564

0800993c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009948:	f3ef 8310 	mrs	r3, PRIMASK
 800994c:	613b      	str	r3, [r7, #16]
  return(result);
 800994e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009950:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009952:	b672      	cpsid	i
}
 8009954:	bf00      	nop
  
  switch(state)
 8009956:	78fb      	ldrb	r3, [r7, #3]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d008      	beq.n	800996e <UTIL_LPM_SetOffMode+0x32>
 800995c:	2b01      	cmp	r3, #1
 800995e:	d10e      	bne.n	800997e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009960:	4b0d      	ldr	r3, [pc, #52]	@ (8009998 <UTIL_LPM_SetOffMode+0x5c>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4313      	orrs	r3, r2
 8009968:	4a0b      	ldr	r2, [pc, #44]	@ (8009998 <UTIL_LPM_SetOffMode+0x5c>)
 800996a:	6013      	str	r3, [r2, #0]
      break;
 800996c:	e008      	b.n	8009980 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	43da      	mvns	r2, r3
 8009972:	4b09      	ldr	r3, [pc, #36]	@ (8009998 <UTIL_LPM_SetOffMode+0x5c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4013      	ands	r3, r2
 8009978:	4a07      	ldr	r2, [pc, #28]	@ (8009998 <UTIL_LPM_SetOffMode+0x5c>)
 800997a:	6013      	str	r3, [r2, #0]
      break;
 800997c:	e000      	b.n	8009980 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800997e:	bf00      	nop
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f383 8810 	msr	PRIMASK, r3
}
 800998a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800998c:	bf00      	nop
 800998e:	371c      	adds	r7, #28
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	20000564 	.word	0x20000564

0800999c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b090      	sub	sp, #64	@ 0x40
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80099a4:	4b73      	ldr	r3, [pc, #460]	@ (8009b74 <UTIL_SEQ_Run+0x1d8>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80099aa:	4b72      	ldr	r3, [pc, #456]	@ (8009b74 <UTIL_SEQ_Run+0x1d8>)
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4013      	ands	r3, r2
 80099b2:	4a70      	ldr	r2, [pc, #448]	@ (8009b74 <UTIL_SEQ_Run+0x1d8>)
 80099b4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80099b6:	4b70      	ldr	r3, [pc, #448]	@ (8009b78 <UTIL_SEQ_Run+0x1dc>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80099bc:	4b6f      	ldr	r3, [pc, #444]	@ (8009b7c <UTIL_SEQ_Run+0x1e0>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80099c2:	4b6f      	ldr	r3, [pc, #444]	@ (8009b80 <UTIL_SEQ_Run+0x1e4>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80099c8:	4b6e      	ldr	r3, [pc, #440]	@ (8009b84 <UTIL_SEQ_Run+0x1e8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80099ce:	e08d      	b.n	8009aec <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80099d4:	e002      	b.n	80099dc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80099d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d8:	3301      	adds	r3, #1
 80099da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80099dc:	4a6a      	ldr	r2, [pc, #424]	@ (8009b88 <UTIL_SEQ_Run+0x1ec>)
 80099de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e6:	401a      	ands	r2, r3
 80099e8:	4b62      	ldr	r3, [pc, #392]	@ (8009b74 <UTIL_SEQ_Run+0x1d8>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4013      	ands	r3, r2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0f1      	beq.n	80099d6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80099f2:	4a65      	ldr	r2, [pc, #404]	@ (8009b88 <UTIL_SEQ_Run+0x1ec>)
 80099f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80099fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fc:	401a      	ands	r2, r3
 80099fe:	4b5d      	ldr	r3, [pc, #372]	@ (8009b74 <UTIL_SEQ_Run+0x1d8>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4013      	ands	r3, r2
 8009a04:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009a06:	4a60      	ldr	r2, [pc, #384]	@ (8009b88 <UTIL_SEQ_Run+0x1ec>)
 8009a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a12:	4013      	ands	r3, r2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d106      	bne.n	8009a26 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009a18:	4a5b      	ldr	r2, [pc, #364]	@ (8009b88 <UTIL_SEQ_Run+0x1ec>)
 8009a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	4413      	add	r3, r2
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a24:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009a26:	4a58      	ldr	r2, [pc, #352]	@ (8009b88 <UTIL_SEQ_Run+0x1ec>)
 8009a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2a:	00db      	lsls	r3, r3, #3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a32:	4013      	ands	r3, r2
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 f9b3 	bl	8009da0 <SEQ_BitPosition>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	4b53      	ldr	r3, [pc, #332]	@ (8009b8c <UTIL_SEQ_Run+0x1f0>)
 8009a40:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009a42:	4a51      	ldr	r2, [pc, #324]	@ (8009b88 <UTIL_SEQ_Run+0x1ec>)
 8009a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	4413      	add	r3, r2
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8009b8c <UTIL_SEQ_Run+0x1f0>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2101      	movs	r1, #1
 8009a52:	fa01 f303 	lsl.w	r3, r1, r3
 8009a56:	43db      	mvns	r3, r3
 8009a58:	401a      	ands	r2, r3
 8009a5a:	494b      	ldr	r1, [pc, #300]	@ (8009b88 <UTIL_SEQ_Run+0x1ec>)
 8009a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	440b      	add	r3, r1
 8009a62:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a64:	f3ef 8310 	mrs	r3, PRIMASK
 8009a68:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a6a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009a6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a6e:	b672      	cpsid	i
}
 8009a70:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009a72:	4b46      	ldr	r3, [pc, #280]	@ (8009b8c <UTIL_SEQ_Run+0x1f0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2201      	movs	r2, #1
 8009a78:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7c:	43da      	mvns	r2, r3
 8009a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8009b78 <UTIL_SEQ_Run+0x1dc>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4013      	ands	r3, r2
 8009a84:	4a3c      	ldr	r2, [pc, #240]	@ (8009b78 <UTIL_SEQ_Run+0x1dc>)
 8009a86:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009a88:	2302      	movs	r3, #2
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a8c:	e013      	b.n	8009ab6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a90:	3b01      	subs	r3, #1
 8009a92:	4a3d      	ldr	r2, [pc, #244]	@ (8009b88 <UTIL_SEQ_Run+0x1ec>)
 8009a94:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009a98:	4b3c      	ldr	r3, [pc, #240]	@ (8009b8c <UTIL_SEQ_Run+0x1f0>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	43da      	mvns	r2, r3
 8009aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	400a      	ands	r2, r1
 8009aaa:	4937      	ldr	r1, [pc, #220]	@ (8009b88 <UTIL_SEQ_Run+0x1ec>)
 8009aac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e8      	bne.n	8009a8e <UTIL_SEQ_Run+0xf2>
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f383 8810 	msr	PRIMASK, r3
}
 8009ac6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009ac8:	4b30      	ldr	r3, [pc, #192]	@ (8009b8c <UTIL_SEQ_Run+0x1f0>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a30      	ldr	r2, [pc, #192]	@ (8009b90 <UTIL_SEQ_Run+0x1f4>)
 8009ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ad2:	4798      	blx	r3

    local_taskset = TaskSet;
 8009ad4:	4b28      	ldr	r3, [pc, #160]	@ (8009b78 <UTIL_SEQ_Run+0x1dc>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8009ada:	4b28      	ldr	r3, [pc, #160]	@ (8009b7c <UTIL_SEQ_Run+0x1e0>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8009ae0:	4b27      	ldr	r3, [pc, #156]	@ (8009b80 <UTIL_SEQ_Run+0x1e4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8009ae6:	4b27      	ldr	r3, [pc, #156]	@ (8009b84 <UTIL_SEQ_Run+0x1e8>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009aec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af0:	401a      	ands	r2, r3
 8009af2:	4b20      	ldr	r3, [pc, #128]	@ (8009b74 <UTIL_SEQ_Run+0x1d8>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4013      	ands	r3, r2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d005      	beq.n	8009b08 <UTIL_SEQ_Run+0x16c>
 8009afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b00:	4013      	ands	r3, r2
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f43f af64 	beq.w	80099d0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009b08:	4b20      	ldr	r3, [pc, #128]	@ (8009b8c <UTIL_SEQ_Run+0x1f0>)
 8009b0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b0e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009b10:	f000 f938 	bl	8009d84 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b14:	f3ef 8310 	mrs	r3, PRIMASK
 8009b18:	613b      	str	r3, [r7, #16]
  return(result);
 8009b1a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009b1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b1e:	b672      	cpsid	i
}
 8009b20:	bf00      	nop
  local_taskset = TaskSet;
 8009b22:	4b15      	ldr	r3, [pc, #84]	@ (8009b78 <UTIL_SEQ_Run+0x1dc>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009b28:	4b14      	ldr	r3, [pc, #80]	@ (8009b7c <UTIL_SEQ_Run+0x1e0>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8009b2e:	4b14      	ldr	r3, [pc, #80]	@ (8009b80 <UTIL_SEQ_Run+0x1e4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009b34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b38:	401a      	ands	r2, r3
 8009b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009b74 <UTIL_SEQ_Run+0x1d8>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d107      	bne.n	8009b54 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009b44:	4b0f      	ldr	r3, [pc, #60]	@ (8009b84 <UTIL_SEQ_Run+0x1e8>)
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009b50:	f7f8 fc96 	bl	8002480 <UTIL_SEQ_Idle>
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f383 8810 	msr	PRIMASK, r3
}
 8009b5e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009b60:	f000 f917 	bl	8009d92 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009b64:	4a03      	ldr	r2, [pc, #12]	@ (8009b74 <UTIL_SEQ_Run+0x1d8>)
 8009b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b68:	6013      	str	r3, [r2, #0]

  return;
 8009b6a:	bf00      	nop
}
 8009b6c:	3740      	adds	r7, #64	@ 0x40
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000038 	.word	0x20000038
 8009b78:	20000568 	.word	0x20000568
 8009b7c:	2000056c 	.word	0x2000056c
 8009b80:	20000034 	.word	0x20000034
 8009b84:	20000570 	.word	0x20000570
 8009b88:	200005f8 	.word	0x200005f8
 8009b8c:	20000574 	.word	0x20000574
 8009b90:	20000578 	.word	0x20000578

08009b94 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b088      	sub	sp, #32
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ba4:	617b      	str	r3, [r7, #20]
  return(result);
 8009ba6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009baa:	b672      	cpsid	i
}
 8009bac:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f000 f8f6 	bl	8009da0 <SEQ_BitPosition>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	4a06      	ldr	r2, [pc, #24]	@ (8009bd4 <UTIL_SEQ_RegTask+0x40>)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	f383 8810 	msr	PRIMASK, r3
}
 8009bca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009bcc:	bf00      	nop
}
 8009bce:	3720      	adds	r7, #32
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000578 	.word	0x20000578

08009bd8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009be2:	f3ef 8310 	mrs	r3, PRIMASK
 8009be6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009be8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009bea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bec:	b672      	cpsid	i
}
 8009bee:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8009c28 <UTIL_SEQ_SetTask+0x50>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8009c28 <UTIL_SEQ_SetTask+0x50>)
 8009bfa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8009c2c <UTIL_SEQ_SetTask+0x54>)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	4908      	ldr	r1, [pc, #32]	@ (8009c2c <UTIL_SEQ_SetTask+0x54>)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f383 8810 	msr	PRIMASK, r3
}
 8009c1a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009c1c:	bf00      	nop
}
 8009c1e:	371c      	adds	r7, #28
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	20000568 	.word	0x20000568
 8009c2c:	200005f8 	.word	0x200005f8

08009c30 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c38:	f3ef 8310 	mrs	r3, PRIMASK
 8009c3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009c40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c42:	b672      	cpsid	i
}
 8009c44:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	43da      	mvns	r2, r3
 8009c4a:	4b08      	ldr	r3, [pc, #32]	@ (8009c6c <UTIL_SEQ_PauseTask+0x3c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4013      	ands	r3, r2
 8009c50:	4a06      	ldr	r2, [pc, #24]	@ (8009c6c <UTIL_SEQ_PauseTask+0x3c>)
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	f383 8810 	msr	PRIMASK, r3
}
 8009c5e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009c60:	bf00      	nop
}
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	20000034 	.word	0x20000034

08009c70 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c78:	f3ef 8310 	mrs	r3, PRIMASK
 8009c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c82:	b672      	cpsid	i
}
 8009c84:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009c86:	4b09      	ldr	r3, [pc, #36]	@ (8009cac <UTIL_SEQ_ResumeTask+0x3c>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	4a07      	ldr	r2, [pc, #28]	@ (8009cac <UTIL_SEQ_ResumeTask+0x3c>)
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f383 8810 	msr	PRIMASK, r3
}
 8009c9c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009c9e:	bf00      	nop
}
 8009ca0:	371c      	adds	r7, #28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20000034 	.word	0x20000034

08009cb0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009cc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cc2:	b672      	cpsid	i
}
 8009cc4:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009cc6:	4b09      	ldr	r3, [pc, #36]	@ (8009cec <UTIL_SEQ_SetEvt+0x3c>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	4a07      	ldr	r2, [pc, #28]	@ (8009cec <UTIL_SEQ_SetEvt+0x3c>)
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f383 8810 	msr	PRIMASK, r3
}
 8009cdc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009cde:	bf00      	nop
}
 8009ce0:	371c      	adds	r7, #28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	2000056c 	.word	0x2000056c

08009cf0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8009d78 <UTIL_SEQ_WaitEvt+0x88>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8009d78 <UTIL_SEQ_WaitEvt+0x88>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d06:	d102      	bne.n	8009d0e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	61fb      	str	r3, [r7, #28]
 8009d0c:	e005      	b.n	8009d1a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009d78 <UTIL_SEQ_WaitEvt+0x88>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2201      	movs	r2, #1
 8009d14:	fa02 f303 	lsl.w	r3, r2, r3
 8009d18:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009d1a:	4b18      	ldr	r3, [pc, #96]	@ (8009d7c <UTIL_SEQ_WaitEvt+0x8c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009d20:	4a16      	ldr	r2, [pc, #88]	@ (8009d7c <UTIL_SEQ_WaitEvt+0x8c>)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009d26:	e003      	b.n	8009d30 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	69f8      	ldr	r0, [r7, #28]
 8009d2c:	f7f8 fbaf 	bl	800248e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009d30:	4b13      	ldr	r3, [pc, #76]	@ (8009d80 <UTIL_SEQ_WaitEvt+0x90>)
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4013      	ands	r3, r2
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0f5      	beq.n	8009d28 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8009d78 <UTIL_SEQ_WaitEvt+0x88>)
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d42:	f3ef 8310 	mrs	r3, PRIMASK
 8009d46:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d48:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009d4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d4c:	b672      	cpsid	i
}
 8009d4e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	43da      	mvns	r2, r3
 8009d54:	4b0a      	ldr	r3, [pc, #40]	@ (8009d80 <UTIL_SEQ_WaitEvt+0x90>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4013      	ands	r3, r2
 8009d5a:	4a09      	ldr	r2, [pc, #36]	@ (8009d80 <UTIL_SEQ_WaitEvt+0x90>)
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f383 8810 	msr	PRIMASK, r3
}
 8009d68:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009d6a:	4a04      	ldr	r2, [pc, #16]	@ (8009d7c <UTIL_SEQ_WaitEvt+0x8c>)
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	6013      	str	r3, [r2, #0]
  return;
 8009d70:	bf00      	nop
}
 8009d72:	3720      	adds	r7, #32
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	20000574 	.word	0x20000574
 8009d7c:	20000570 	.word	0x20000570
 8009d80:	2000056c 	.word	0x2000056c

08009d84 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009d88:	bf00      	nop
}
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009d92:	b480      	push	{r7}
 8009d94:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009d96:	bf00      	nop
}
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009db6:	d204      	bcs.n	8009dc2 <SEQ_BitPosition+0x22>
 8009db8:	2310      	movs	r3, #16
 8009dba:	73fb      	strb	r3, [r7, #15]
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	041b      	lsls	r3, r3, #16
 8009dc0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009dc8:	d205      	bcs.n	8009dd6 <SEQ_BitPosition+0x36>
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	3308      	adds	r3, #8
 8009dce:	73fb      	strb	r3, [r7, #15]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	021b      	lsls	r3, r3, #8
 8009dd4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ddc:	d205      	bcs.n	8009dea <SEQ_BitPosition+0x4a>
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	3304      	adds	r3, #4
 8009de2:	73fb      	strb	r3, [r7, #15]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	011b      	lsls	r3, r3, #4
 8009de8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	0f1b      	lsrs	r3, r3, #28
 8009dee:	4a07      	ldr	r2, [pc, #28]	@ (8009e0c <SEQ_BitPosition+0x6c>)
 8009df0:	5cd2      	ldrb	r2, [r2, r3]
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	4413      	add	r3, r2
 8009df6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	f1c3 031f 	rsb	r3, r3, #31
 8009dfe:	b2db      	uxtb	r3, r3
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	0800a0f8 	.word	0x0800a0f8

08009e10 <memset>:
 8009e10:	4402      	add	r2, r0
 8009e12:	4603      	mov	r3, r0
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d100      	bne.n	8009e1a <memset+0xa>
 8009e18:	4770      	bx	lr
 8009e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e1e:	e7f9      	b.n	8009e14 <memset+0x4>

08009e20 <__libc_init_array>:
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	4d0d      	ldr	r5, [pc, #52]	@ (8009e58 <__libc_init_array+0x38>)
 8009e24:	4c0d      	ldr	r4, [pc, #52]	@ (8009e5c <__libc_init_array+0x3c>)
 8009e26:	1b64      	subs	r4, r4, r5
 8009e28:	10a4      	asrs	r4, r4, #2
 8009e2a:	2600      	movs	r6, #0
 8009e2c:	42a6      	cmp	r6, r4
 8009e2e:	d109      	bne.n	8009e44 <__libc_init_array+0x24>
 8009e30:	4d0b      	ldr	r5, [pc, #44]	@ (8009e60 <__libc_init_array+0x40>)
 8009e32:	4c0c      	ldr	r4, [pc, #48]	@ (8009e64 <__libc_init_array+0x44>)
 8009e34:	f000 f826 	bl	8009e84 <_init>
 8009e38:	1b64      	subs	r4, r4, r5
 8009e3a:	10a4      	asrs	r4, r4, #2
 8009e3c:	2600      	movs	r6, #0
 8009e3e:	42a6      	cmp	r6, r4
 8009e40:	d105      	bne.n	8009e4e <__libc_init_array+0x2e>
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e48:	4798      	blx	r3
 8009e4a:	3601      	adds	r6, #1
 8009e4c:	e7ee      	b.n	8009e2c <__libc_init_array+0xc>
 8009e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e52:	4798      	blx	r3
 8009e54:	3601      	adds	r6, #1
 8009e56:	e7f2      	b.n	8009e3e <__libc_init_array+0x1e>
 8009e58:	0800a110 	.word	0x0800a110
 8009e5c:	0800a110 	.word	0x0800a110
 8009e60:	0800a110 	.word	0x0800a110
 8009e64:	0800a114 	.word	0x0800a114

08009e68 <memcpy>:
 8009e68:	440a      	add	r2, r1
 8009e6a:	4291      	cmp	r1, r2
 8009e6c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009e70:	d100      	bne.n	8009e74 <memcpy+0xc>
 8009e72:	4770      	bx	lr
 8009e74:	b510      	push	{r4, lr}
 8009e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e7e:	4291      	cmp	r1, r2
 8009e80:	d1f9      	bne.n	8009e76 <memcpy+0xe>
 8009e82:	bd10      	pop	{r4, pc}

08009e84 <_init>:
 8009e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e86:	bf00      	nop
 8009e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8a:	bc08      	pop	{r3}
 8009e8c:	469e      	mov	lr, r3
 8009e8e:	4770      	bx	lr

08009e90 <_fini>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	bf00      	nop
 8009e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e96:	bc08      	pop	{r3}
 8009e98:	469e      	mov	lr, r3
 8009e9a:	4770      	bx	lr
